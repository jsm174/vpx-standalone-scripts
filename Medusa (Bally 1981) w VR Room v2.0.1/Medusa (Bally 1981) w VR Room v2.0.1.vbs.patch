--- Medusa (Bally 1981) w VR Room v2.0.1.vbs.original	2023-07-25 17:07:54
+++ Medusa (Bally 1981) w VR Room v2.0.1.vbs	2023-07-25 17:02:41
@@ -2296,7 +2296,39 @@
 '******************************************************
 '****  DROP TARGETS by Rothbauerw
 '******************************************************
+
+Class DropTarget
+	Private m_primary, m_secondary, m_prim, m_sw, m_animate, m_isDropped
+  
+	Public Property Get Primary(): Set Primary = m_primary: End Property
+	Public Property Let Primary(input): Set m_primary = input: End Property
+  
+	Public Property Get Secondary(): Set Secondary = m_secondary: End Property
+	Public Property Let Secondary(input): Set m_secondary = input: End Property
+  
+	Public Property Get Prim(): Set Prim = m_prim: End Property
+	Public Property Let Prim(input): Set m_prim = input: End Property
+  
+	Public Property Get Sw(): Sw = m_sw: End Property
+	Public Property Let Sw(input): m_sw = input: End Property
+  
+	Public Property Get Animate(): Animate = m_animate: End Property
+	Public Property Let Animate(input): m_animate = input: End Property
 
+	Public Property Get IsDropped(): IsDropped = m_isDropped: End Property
+	Public Property Let IsDropped(input): m_isDropped = input: End Property
+  
+	Public default Function init(primary, secondary, prim, sw, animate, isDropped)
+	  Set m_primary = primary
+	  Set m_secondary = secondary
+	  Set m_prim = prim
+	  m_sw = sw
+	  m_animate = animate
+	  m_isDropped = isDropped
+  
+	  Set Init = Me
+	End Function
+End Class
 
 '******************************************************
 '  DROP TARGETS INITIALIZATION
@@ -2328,17 +2360,17 @@
 
 
 
-DT1 = Array(sw1, sw1a, sw1p, 1, 0, false)
-DT2 = Array(sw2, sw2a, sw2p, 2, 0, false)
-DT3 = Array(sw3, sw3a, sw3p, 3, 0, false)
-DT4 = Array(sw4, sw4a, sw4p, 4, 0, false)
-DT42 = Array(sw42, sw42a, sw42p, 42, 0, false)
-DT43 = Array(sw43, sw43a, sw43p, 43, 0, false)
-DT44 = Array(sw44, sw44a, sw44p, 44, 0, false)
-DT45 = Array(sw45, sw45a, sw45p, 45, 0, false)
-DT46 = Array(sw46, sw46a, sw46p, 46, 0, false)
-DT47 = Array(sw47, sw47a, sw47p, 47, 0, false)
-DT48 = Array(sw48, sw48a, sw48p, 48, 0, false)
+Set DT1 = (new DropTarget)(sw1, sw1a, sw1p, 1, 0, false)
+Set DT2 = (new DropTarget)(sw2, sw2a, sw2p, 2, 0, false)
+Set DT3 = (new DropTarget)(sw3, sw3a, sw3p, 3, 0, false)
+Set DT4 = (new DropTarget)(sw4, sw4a, sw4p, 4, 0, false)
+Set DT42 = (new DropTarget)(sw42, sw42a, sw42p, 42, 0, false)
+Set DT43 = (new DropTarget)(sw43, sw43a, sw43p, 43, 0, false)
+Set DT44 = (new DropTarget)(sw44, sw44a, sw44p, 44, 0, false)
+Set DT45 = (new DropTarget)(sw45, sw45a, sw45p, 45, 0, false)
+Set DT46 = (new DropTarget)(sw46, sw46a, sw46p, 46, 0, false)
+Set DT47 = (new DropTarget)(sw47, sw47a, sw47p, 47, 0, false)
+Set DT48 = (new DropTarget)(sw48, sw48a, sw48p, 48, 0, false)
 
 Dim DTArray
 DTArray = Array(DT1, DT2, DT3, DT4, DT42, DT43, DT44, DT45, DT46, DT47, DT48)
@@ -2435,9 +2467,9 @@
 	End If
 
 	PlayTargetSound
-	DTArray(i)(4) =  DTCheckBrick(Activeball,DTArray(i)(2))
-	If DTArray(i)(4) = 1 or DTArray(i)(4) = 3 or DTArray(i)(4) = 4 Then
-		DTBallPhysics Activeball, DTArray(i)(2).rotz, DTMass
+	DTArray(i).animate =  DTCheckBrick(Activeball,DTArray(i).prim)
+	If DTArray(i).animate = 1 or DTArray(i).animate = 3 or DTArray(i).animate = 4 Then
+		DTBallPhysics Activeball, DTArray(i).prim.rotz, DTMass
 
 '	Controls Drop Shadow for a direct hit only
 		DTShadow(swmod).visible = 0
@@ -2450,7 +2482,7 @@
 	Dim i
 	i = DTArrayID(switch)
 
-	DTArray(i)(4) = -1
+	DTArray(i).animate = -1
 	DoDTAnim
 End Sub
 
@@ -2458,14 +2490,14 @@
 	Dim i
 	i = DTArrayID(switch)
 
-	DTArray(i)(4) = 1
+	DTArray(i).animate = 1
 	DoDTAnim
 End Sub
 
 Function DTArrayID(switch)
 	Dim i
 	For i = 0 to uBound(DTArray) 
-		If DTArray(i)(3) = switch Then DTArrayID = i:Exit Function 
+		If DTArray(i).sw = switch Then DTArrayID = i:Exit Function 
 	Next
 End Function
 
@@ -2520,7 +2552,7 @@
 Sub DoDTAnim()
 	Dim i
 	For i=0 to Ubound(DTArray)
-		DTArray(i)(4) = DTAnimate(DTArray(i)(0),DTArray(i)(1),DTArray(i)(2),DTArray(i)(3),DTArray(i)(4))
+		DTArray(i).animate = DTAnimate(DTArray(i).primary,DTArray(i).secondary,DTArray(i).prim,DTArray(i).sw,DTArray(i).animate)
 	Next
 End Sub
 
@@ -2576,7 +2608,7 @@
 		if prim.transz <= -DTDropUnits Then 
 			prim.transz = -DTDropUnits
 			secondary.collidable = 0
-			DTArray(ind)(5) = true 'Mark target as dropped
+			DTArray(ind).isDropped = true 'Mark target as dropped
 			if UsingROM then 
 				controller.Switch(Switchid) = 1
 			else 
@@ -2634,7 +2666,7 @@
 		end if
 		primary.collidable = 0
 		secondary.collidable = 1
-		DTArray(ind)(5) = false 'Mark target as not dropped
+		DTArray(ind).isDropped = false 'Mark target as not dropped
 		if UsingROM then controller.Switch(Switchid) = 0
 
 	End If
@@ -2705,7 +2737,32 @@
 '******************************************************
 '		STAND-UP TARGET INITIALIZATION
 '******************************************************
+
+Class StandupTarget
+	Private m_primary, m_prim, m_sw, m_animate
+  
+	Public Property Get Primary(): Set Primary = m_primary: End Property
+	Public Property Let Primary(input): Set m_primary = input: End Property
+  
+	Public Property Get Prim(): Set Prim = m_prim: End Property
+	Public Property Let Prim(input): Set m_prim = input: End Property
+  
+	Public Property Get Sw(): Sw = m_sw: End Property
+	Public Property Let Sw(input): m_sw = input: End Property
+  
+	Public Property Get Animate(): Animate = m_animate: End Property
+	Public Property Let Animate(input): m_animate = input: End Property
+  
+	Public default Function init(primary, prim, sw, animate)
+	  Set m_primary = primary
+	  Set m_prim = prim
+	  m_sw = sw
+	  m_animate = animate
 
+	  Set Init = Me
+	End Function
+  End Class
+
 'Define a variable for each stand-up target
 
 Dim ST12, ST13, ST14, ST27, ST29, ST30
@@ -2727,12 +2784,12 @@
 
 
 
-ST12 = Array(sw12, psw12,12, 0)
-ST13 = Array(sw13, psw13,13, 0)
-ST14 = Array(sw14, psw14,14, 0)
-ST27 = Array(sw27, psw27,27, 0)
-ST29 = Array(sw29, psw29,29, 0)
-ST30 = Array(sw30, psw30,30, 0)
+Set ST12 = (new StandupTarget)(sw12, psw12,12, 0)
+Set ST13 = (new StandupTarget)(sw13, psw13,13, 0)
+Set ST14 = (new StandupTarget)(sw14, psw14,14, 0)
+Set ST27 = (new StandupTarget)(sw27, psw27,27, 0)
+Set ST29 = (new StandupTarget)(sw29, psw29,29, 0)
+Set ST30 = (new StandupTarget)(sw30, psw30,30, 0)
 
 
 Dim STArray
@@ -2754,10 +2811,10 @@
 	i = STArrayID(switch)
 
 	PlayTargetSound
-	STArray(i)(3) =  STCheckHit(Activeball,STArray(i)(0))
+	STArray(i).animate =  STCheckHit(Activeball,STArray(i).primary)
 
-	If STArray(i)(3) <> 0 Then
-		DTBallPhysics Activeball, STArray(i)(0).orientation, STMass
+	If STArray(i).animate <> 0 Then
+		DTBallPhysics Activeball, STArray(i).primary.orientation, STMass
 	End If
 	DoSTAnim
 End Sub
@@ -2765,7 +2822,7 @@
 Function STArrayID(switch)
 	Dim i
 	For i = 0 to uBound(STArray) 
-		If STArray(i)(2) = switch Then STArrayID = i:Exit Function 
+		If STArray(i).sw = switch Then STArrayID = i:Exit Function 
 	Next
 End Function
 
@@ -2794,7 +2851,7 @@
 Sub DoSTAnim()
 	Dim i
 	For i=0 to Ubound(STArray)
-		STArray(i)(3) = STAnimate(STArray(i)(0),STArray(i)(1),STArray(i)(2),STArray(i)(3))
+		STArray(i).animate = STAnimate(STArray(i).primary,STArray(i).prim,STArray(i).sw,STArray(i).animate)
 	Next
 End Sub
 
