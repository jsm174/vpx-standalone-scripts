--- ./Pharaoh (Williams 1981) w VR Room v2.0.3.vbs.original	2024-09-10 10:12:28.000000000 -0700
+++ ./Pharaoh (Williams 1981) w VR Room v2.0.3.vbs	2024-09-10 10:11:53.000000000 -0700
@@ -2385,18 +2385,51 @@
 '	Values for annimate: 1 - bend target (hit to primary), 2 - drop target (hit to secondary), 3 - brick target (high velocity hit to secondary), -1 - raise target 
 
 
-DT17 = Array(sw17, sw17a, sw17p, 17, 0)
-DT18 = Array(sw18, sw18a, sw18p, 18, 0)
-DT19 = Array(sw19, sw19a, sw19p, 19, 0)
-DT21 = Array(sw21, sw21a, sw21p, 21, 0)
-DT22 = Array(sw22, sw22a, sw22p, 22, 0)
-DT23 = Array(sw23, sw23a, sw23p, 23, 0)
-DT25 = Array(sw25, sw25a, sw25p, 25, 0)
-DT26 = Array(sw26, sw26a, sw26p, 26, 0)
-DT27 = Array(sw27, sw27a, sw27p, 27, 0)
-DT29 = Array(sw29, sw29a, sw29p, 29, 0)
-DT30 = Array(sw30, sw30a, sw30p, 30, 0)
-DT31 = Array(sw31, sw31a, sw31p, 31, 0)
+Class DropTarget
+  Private m_primary, m_secondary, m_prim, m_sw, m_animate, m_isDropped
+
+  Public Property Get Primary(): Set Primary = m_primary: End Property
+  Public Property Let Primary(input): Set m_primary = input: End Property
+
+  Public Property Get Secondary(): Set Secondary = m_secondary: End Property
+  Public Property Let Secondary(input): Set m_secondary = input: End Property
+
+  Public Property Get Prim(): Set Prim = m_prim: End Property
+  Public Property Let Prim(input): Set m_prim = input: End Property
+
+  Public Property Get Sw(): Sw = m_sw: End Property
+  Public Property Let Sw(input): m_sw = input: End Property
+
+  Public Property Get Animate(): Animate = m_animate: End Property
+  Public Property Let Animate(input): m_animate = input: End Property
+
+  Public Property Get IsDropped(): IsDropped = m_isDropped: End Property
+  Public Property Let IsDropped(input): m_isDropped = input: End Property
+
+  Public default Function init(primary, secondary, prim, sw, animate, isDropped)
+    Set m_primary = primary
+    Set m_secondary = secondary
+    Set m_prim = prim
+    m_sw = sw
+    m_animate = animate
+    m_isDropped = isDropped
+
+    Set Init = Me
+  End Function
+End Class
+
+Set DT17 = (new DropTarget)(sw17, sw17a, sw17p, 17, 0, false)
+Set DT18 = (new DropTarget)(sw18, sw18a, sw18p, 18, 0, false)
+Set DT19 = (new DropTarget)(sw19, sw19a, sw19p, 19, 0, false)
+Set DT21 = (new DropTarget)(sw21, sw21a, sw21p, 21, 0, false)
+Set DT22 = (new DropTarget)(sw22, sw22a, sw22p, 22, 0, false)
+Set DT23 = (new DropTarget)(sw23, sw23a, sw23p, 23, 0, false)
+Set DT25 = (new DropTarget)(sw25, sw25a, sw25p, 25, 0, false)
+Set DT26 = (new DropTarget)(sw26, sw26a, sw26p, 26, 0, false)
+Set DT27 = (new DropTarget)(sw27, sw27a, sw27p, 27, 0, false)
+Set DT29 = (new DropTarget)(sw29, sw29a, sw29p, 29, 0, false)
+Set DT30 = (new DropTarget)(sw30, sw30a, sw30p, 30, 0, false)
+Set DT31 = (new DropTarget)(sw31, sw31a, sw31p, 31, 0, false)
 
 
 Dim DTArray
@@ -2429,9 +2462,9 @@
 	i = DTArrayID(switch)
 
 	PlayTargetSound
-	DTArray(i)(4) =  DTCheckBrick(Activeball,DTArray(i)(2))
-	If DTArray(i)(4) = 1 or DTArray(i)(4) = 3 or DTArray(i)(4) = 4 Then
-		DTBallPhysics Activeball, DTArray(i)(2).rotz, DTMass
+	DTArray(i).animate =  DTCheckBrick(Activeball,DTArray(i).prim)
+	If DTArray(i).animate = 1 or DTArray(i).animate = 3 or DTArray(i).animate = 4 Then
+		DTBallPhysics Activeball, DTArray(i).prim.rotz, DTMass
 	End If
 	DoDTAnim
 End Sub
@@ -2440,7 +2473,7 @@
 	Dim i
 	i = DTArrayID(switch)
 
-	DTArray(i)(4) = -1
+	DTArray(i).animate = -1
 	DoDTAnim
 End Sub
 
@@ -2448,14 +2481,14 @@
 	Dim i
 	i = DTArrayID(switch)
 
-	DTArray(i)(4) = 1
+	DTArray(i).animate = 1
 	DoDTAnim
 End Sub
 
 Function DTArrayID(switch)
 	Dim i
 	For i = 0 to uBound(DTArray) 
-		If DTArray(i)(3) = switch Then DTArrayID = i:Exit Function 
+		If DTArray(i).sw = switch Then DTArrayID = i:Exit Function 
 	Next
 End Function
 
@@ -2510,7 +2543,7 @@
 Sub DoDTAnim()
 	Dim i
 	For i=0 to Ubound(DTArray)
-		DTArray(i)(4) = DTAnimate(DTArray(i)(0),DTArray(i)(1),DTArray(i)(2),DTArray(i)(3),DTArray(i)(4))
+		DTArray(i).animate = DTAnimate(DTArray(i).primary,DTArray(i).secondary,DTArray(i).prim,DTArray(i).sw,DTArray(i).animate)
 	Next
 End Sub
 
@@ -2704,6 +2737,31 @@
 '		STAND-UP TARGET INITIALIZATION
 '******************************************************
 
+Class StandupTarget
+  Private m_primary, m_prim, m_sw, m_animate
+
+  Public Property Get Primary(): Set Primary = m_primary: End Property
+  Public Property Let Primary(input): Set m_primary = input: End Property
+
+  Public Property Get Prim(): Set Prim = m_prim: End Property
+  Public Property Let Prim(input): Set m_prim = input: End Property
+
+  Public Property Get Sw(): Sw = m_sw: End Property
+  Public Property Let Sw(input): m_sw = input: End Property
+
+  Public Property Get Animate(): Animate = m_animate: End Property
+  Public Property Let Animate(input): m_animate = input: End Property
+
+  Public default Function init(primary, prim, sw, animate)
+    Set m_primary = primary
+    Set m_prim = prim
+    m_sw = sw
+    m_animate = animate
+
+    Set Init = Me
+  End Function
+End Class
+
 'Define a variable for each stand-up target
 
 Dim ST28, ST32
@@ -2722,8 +2780,8 @@
 'You will also need to add a secondary hit object for each stand up (name sw11o, sw12o, and sw13o on the example Table1)
 'these are inclined primitives to simulate hitting a bent target and should provide so z velocity on high speed impacts
 
-ST28 = Array(sw28, psw28,28, 0)
-ST32 = Array(sw32, psw32,32, 0)
+Set ST28 = (new StandupTarget)(sw28, psw28,28, 0)
+Set ST32 = (new StandupTarget)(sw32, psw32,32, 0)
 
 Dim STArray
 STArray = Array(ST28, ST32)
@@ -2745,10 +2803,10 @@
 	i = STArrayID(switch)
 
 	PlayTargetSound
-	STArray(i)(3) =  STCheckHit(Activeball,STArray(i)(0))
+	STArray(i).animate =  STCheckHit(Activeball,STArray(i).primary)
 
-	If STArray(i)(3) <> 0 Then
-		DTBallPhysics Activeball, STArray(i)(0).orientation, STMass
+	If STArray(i).animate <> 0 Then
+		DTBallPhysics Activeball, STArray(i).primary.orientation, STMass
 	End If
 	DoSTAnim
 End Sub
@@ -2756,7 +2814,7 @@
 Function STArrayID(switch)
 	Dim i
 	For i = 0 to uBound(STArray) 
-		If STArray(i)(2) = switch Then STArrayID = i:Exit Function 
+		If STArray(i).sw = switch Then STArrayID = i:Exit Function 
 	Next
 End Function
 
@@ -2785,7 +2843,7 @@
 Sub DoSTAnim()
 	Dim i
 	For i=0 to Ubound(STArray)
-		STArray(i)(3) = STAnimate(STArray(i)(0),STArray(i)(1),STArray(i)(2),STArray(i)(3))
+		STArray(i).animate = STAnimate(STArray(i).primary,STArray(i).prim,STArray(i).sw,STArray(i).animate)
 	Next
 End Sub
 
