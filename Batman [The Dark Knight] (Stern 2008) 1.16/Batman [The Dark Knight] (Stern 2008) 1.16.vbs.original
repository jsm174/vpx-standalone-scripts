'                                                                                                                                                      
'        .                                                                                                                                     .       
'        :2B@B@B@B@@@B@B@@@@@@@B@B@@@B@B@B@B@B@B@@@@@B@                                           PB@B@@@B@B@B@B@@@B@@@@@B@B@B@B@@@B@B@B@B@B@Bki.      
'            :2@B@B@B@B@B@B@B@@@@@B@B@@@B@B@B@B@B@B@B@Bi                v:     :v                 B@B@@@B@B@@@B@B@B@B@B@@@B@B@B@B@B@B@B@B@qi           
'                iMB@B@B@B@B@@@B@B@B@B@B@B@B@B@B@B@B@B@B                @B     B@                8@@@@@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@v               
'                   Y@B@B@@@B@BBBBB@BBBBBBBBB@B@B@B@B@@@Z               M@:::::@M               7@@@B@B@B@BBBBBBB@B@B@B@B@B@B@B@@@B@F                  
'                     i@@B@B@B@B@B@B@B@BBB@BBBBBBB@B@B@@@M.             @@@B@B@B@              5@B@BBBBB@BBBBBBB@B@B@B@B@B@B@B@@@@Y                    
'                       r@B@@@B@B@BBB@B@B@B@BBB@B@B@BBB@B@B@M5;,       .B@B@B@B@Br       .:JE@B@B@B@B@B@B@B@B@B@B@B@B@B@BBB@B@B@u                      
'                         MB@B@B@BBB@BBB@B@B@BBB@B@B@BBB@B@B@B@@@B@B@B@B@B@B@B@B@B@B@B@B@@@B@B@@@B@B@B@BBBBBBBBB@BBB@B@B@B@B@B@                        
'                          FB@B@B@BBB@B@B@B@BBB@B@B@B@BBB@B@B@B@B@B@B@@@B@B@B@B@B@@@B@@@B@B@B@B@B@B@B@B@B@B@B@B@B@B@BBB@B@B@BM                         
'                           SB@B@B@B@BBB@B@BBB@B@B@B@B@B@B@B@B@B@B@B@B@@@B@B@BBB@B@@@B@B@B@B@B@B@B@B@BBB@B@B@BBB@B@B@B@B@B@@B                          
'                            @B@B@B@B@B@BBB@B@B@B@B@BBBBB@B@B@B@B@B@B@B@BBB@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@BBB@BBBBB@B@B@B@B@                           
'                            ,@@@B@BBB@BBB@B@BBB@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@BBB@B@BBB@B@B@B@BBB@B@B@B@BBB@B@B@B@B@v                           
'                             B@BBB@B@BBB@B@B@B@B@B@B@B@B@B@B@BBB@BBB@B@B@B@BBB@B@BBB@BBB@B@B@BBB@BBB@B@B@BBB@B@B@B@B@B@B@@                            
'                             @B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@                            
'                             B@B@B@@@B@B@B@B@@@B@@@B@B@B@BBB@B@BBB@B@B@B@BBBBB@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@B@@@B@B@B@B                            
'                            :@B@B@@@@@B@B@B@B@B@@@B@@@@@@@B@B@BBB@B@B@B@BBB@B@B@B@B@B@B@B@B@@@B@B@B@B@B@@@B@B@B@@@B@B@@@B@Y                           
'                            @B@B@@@@@B@B@B@B@B@@B@@@B@B@B@B@B@B@B@B@B@B@BBBBB@B@B@BBB@B@B@B@B@B@B@B@B@M@B@B@@@@@B@B@B@B@B@@                          
'                                                     ,r18@B@B@@@B@B@B@B@B@B@B@BBB@B@B@B@B@B@B@Mk7:                                                    
'                                                           ,uB@B@B@B@B@B@B@BBB@B@B@B@B@B@BS:                                                          
'                                                               iO@B@B@B@B@B@B@B@B@B@@@Bv                                                              
'                                                                  JB@B@B@B@B@B@B@B@Bk                                                                 
'                                                                    Y@B@B@B@B@B@B@F                                                                   
'                                                                      OB@B@B@B@@@                                                                     
'                                                                       JB@@@@@BP                                                                      
'                                                                        iB@@@Bu                                                                       
'                                                                         rB@B1                                                                        
'                                                                          P@@                                                                         
'                                                                           @                                                                          
'                                                                                                                                                      
'                                                                                                                                                      
'Batman - The Dark Knight - IPDB No. 5307
'Â© Stern 2008
'VPX recreation by tom tower & ninuzzu
'Thanks to Lord Hiryu for the playfield texture
'Thanks to DJRobX for coding the Joker
'Thanks to the VPDev Team for the amazing VPX!
'This version has been given rendered textures and the nfozzy/roth physics treatment and fleep sound package by bord w/ lots of help from the VPW helpshop

'0.07 Wylte - Dynamic Ball Shadow stuff all in and not erroring out, but...can't see them.  Converted to gBOT array, eliminated getballs calls.
'0.08 Sixtoe - Fixed slingshot flashers (that I probably messed up in the first place)
'0.09 apophis - Got dynamic shadows working. Fixed issue with ball falling off back of Batmobile ramp. Put LampTimer on a fixed interval.
'0.10 bord - Lighting tweaks, fixed unlit playfield depth bias issue
'0.11 apophis - Updated flasher code to support modulated signals. Added slingshot corrections. Tuned flipper trigger shapes
'0.12 bord - Reduced sling strength, adjusted joker insert material, add desktop background
'0.13 apophis - Updated shadow code. Added Narnia ball catcher. Handle rare case where a gBOT ball falls under batmobile ramp.
'0.14 Sixtoe - Added VR Room
'0.15 bord - Added safety mesh so ball doesn't leave left inlane ramp from batmobile
'0.16 bord - adjust tilt and nudge sensitivity, adjust scarecrow crane hit threshhold, adjust default ball
'1.01 bord - added safety wall beneath playfield mesh, knocked back bloom settings
'1.02 Retro27 - Reworked VR Cabinet, Hooked up lights on Start button and Tournament Mode button, 
'1.03 apophis - Used InRect do check if gBOT ball is under batmobile ramp. Updated AudioFade and AudioPan functions. Adjusted flipper trigger near cradle position. 
'1.04 Retro27 - Added option for the Batman Model, and tweaks to the VR Cabinet
'1.05 bord - slight cleanup, batmobile ramp geometry adjust
'1.06 Wylte - Upper pf switch animation fix, Joker drop sw45 hit changed from DTHit 25 to 45
'1.07 bord - additional batmobile ramp geometry fixes
'1.08 Niwak - Fixed issue on VPX for this table and went a bit further to see how physic output would look.
'1.09 DaRdog81 - VR Mega Room added to previous v1.08, VR Mega room resized for normal sized people ha, VR batman model added, VR layers reorganized (VR_Cab, VR_min, VR_Max), collections updated, VR scripting updated, VRMega rear legs leveled, VR layers hidden on desktop mode, fakeball script fix from apophis.
'1.10 apophis - Updated physics scripts and flipper tiggers. Automated VRRoom. Organized layers. Updated Lampz and Flupper Dome stuff.
'1.11 Niwak - Use new SolCallback2 to avoid stutters, adjust alpha test of DecalDropRamp004 (Prims Off of drop ramp)
'1.12 Retro27 - Reworked DMD decal for VR Cabinet
'1.13 Niwak - Revert SolCallback2 since VPX provides an integrated solution now
'1.14 Niwak - Fix staged flipper switch overlay
'1.15 apophis - Added bakery2Rsling to flash182 effects
'1.16 apophis - Fix VR backglass light tracking with GI. Added bakery2Rsling003 to flash182 effects.

Option Explicit
Randomize

'///////////////////////-----General Sound Options-----///////////////////////
'// VolumeDial:
'// VolumeDial is the actual global volume multiplier for the mechanical sounds.
'// Values smaller than 1 will decrease mechanical sounds volume.
'// Recommended values should be no greater than 1.
Const VolumeDial = 0.8

'///////////////////////-----VR Room-----///////////////////////
Const VRRoomChoice = 2 ' 1 - Minimal Room, 2 - VRMega Waynes Office, 3 - Ultra Minimal

'///////////////////////-----Batman Model-----///////////////////////
Const BatmanModel = 0 ' 0 - Removed Batman Model, 1 - Add Batman Model

'/////////////////////-----Cabinet Mode-----////////////////////
'Will hide the rails
'	Cabinet Mode Off = 0
'	Cabinet Mode On = 1
Const CabinetMode = 0

'----- Shadow Options -----
Const DynamicBallShadowsOn = 1		'0 = no dynamic ball shadow ("triangles" near slings and such), 1 = enable dynamic ball shadow
Const AmbientBallShadowOn = 2		'0 = Static shadow under ball ("flasher" image, like JP's)
									'1 = Moving ball shadow ("primitive" object, like ninuzzu's) - This is the only one that shows up on the pf when in ramps and fades when close to lights!
									'2 = flasher image shadow, but it moves like ninuzzu's

'************************************************************************
'						 INIT VPM
'************************************************************************

Const BallSize = 50
Const BallMass = 1

' The table reuse switches usually used by stagged flippers
Const cSingleLFlip = 0
Const cSingleRFlip = 0

dim tablewidth: tablewidth = Table1.width
dim tableheight: tableheight = Table1.height

' Load controller.vbs to handle VPinMAME.Controller and B2S.Server
On Error Resume Next
ExecuteGlobal GetTextFile("controller.vbs")
If Err Then MsgBox "You need the controller.vbs in order to run this table, available in the vp10 package"
On Error Goto 0

' Internal DMD in Desktop Mode, using a textbox (must be called before LoadVPM)
Dim DesktopMode:DesktopMode = Table1.ShowDT
Dim UseVPMDMD, VRRoom
If RenderingMode = 2 Then VRRoom = VRRoomChoice Else VRRoom = 0
If VRRoom <> 0 Then UseVPMDMD = True Else UseVPMDMD = DesktopMode

' Standard Options
Const UseVPMModSol = 2, UseSolenoids = 1, UseLamps = 0, UseSync = 0, HandleMech = 1, SSolenoidOn = "fx_solenoid", SSolenoidOff = "", SCoin = ""

' Rom Name
Const cGameName = "bdk_294"

LoadVPM "03060000", "SAM.VBS", 3.50

Const DebugFlashers = True
Const DebugGI = False

'************************************************************************
'						 INIT TABLE
'************************************************************************


Dim dtJoker, plungerIM, mechJoker, mechCrane, gBOT

Dim xx, bmBall1, bmBall2, bmBall3, bmBall4

Sub Table1_Init
	vpmInit Me
	With Controller      
		.GameName = cGameName
		If Err Then MsgBox "Can't start Game " & cGameName & vbNewLine & Err.Description:Exit Sub
		.SplashInfoLine = "Batman - The Dark Knight (Stern 2008)"
		.HandleKeyboard = 0
		.ShowTitle = 0
		.ShowDMDOnly = 1
		.ShowFrame = 0
		.HandleMechanics = 0
		.Hidden = DesktopMode	'Hide VPM DMD in Desktop Mode
		On Error Resume Next
		.Run GetPlayerHWnd
		If Err Then MsgBox Err.Description
		On Error Goto 0
	End With

    ' Main Timer init
    PinMAMETimer.Interval = PinMAMEInterval
    PinMAMETimer.Enabled = 1

    ' Nudging
    vpmNudge.TiltSwitch = -7
    vpmNudge.Sensitivity = 6
    vpmNudge.TiltObj = Array(sw26,sw27,sw30,sw31,sw32)

	'************  Trough	**************************
	Set bmBall4 = sw18.CreateSizedballWithMass(Ballsize/2,Ballmass)
	Set bmBall3 = sw19.CreateSizedballWithMass(Ballsize/2,Ballmass)
	Set bmBall2 = sw20.CreateSizedballWithMass(Ballsize/2,Ballmass)
	Set bmBall1 = sw21.CreateSizedballWithMass(Ballsize/2,Ballmass)

	gBOT = Array(bmBall1,bmBall2,bmBall3,bmBall4)

	Controller.Switch(18) = 1
	Controller.Switch(19) = 1
	Controller.Switch(20) = 1
	Controller.Switch(21) = 1

	' Auto Plunger
	Set plungerIM = New cvpmImpulseP
	With plungerIM
		.InitImpulseP sw23, 65, 0.55
		.Switch 23
		.Random 0.05
		.CreateEvents "plungerIM"
	End With

	' Joker Motor
	Set mechJoker = new cvpmMech
	With mechJoker
		.Mtype = vpmMechLinear + vpmMechOneDirSol + vpmMechFast
		.Sol1 = 26
		.Sol2 = 30
		.Length = 1500
		.Steps = 360
		.AddSw 52, 0, 0
		.AddSw 51, 178, 182
		.AddSw 50, 359, 359
		.Callback = GetRef("UpdateJokerMech")
		.Start
     End With

	' Crane Motor
	Set mechCrane = new cvpmMech
	With mechCrane
		.Mtype = vpmMechLinear + vpmMechOneDirSol
		.Sol1 = 31
		.Sol2 = 28
		.Length = 110
		.Steps = 90
		.AddSw 56, 0, 1
		.AddSw 57, 30, 33
		.AddSw 58, 47, 50
		.AddSw 59, 59, 62
		.AddSw 60, 71, 74
		.AddSw 61, 89, 89
		.Callback = GetRef("UpdateCraneMech")
		.Start
     End With

	Rails.visible = DesktopMode
	Dim i: For i=1 to 5:CraneHit(i).Collidable = 0:Next
'	For i = 0 to 4 : dropping(i) = False : Next

	' Fast Flips
	On Error Resume Next
	InitVpmFFlipsSAM
	If Err Then MsgBox "You need the latest sam.vbs in order to run this table, available with vp10.5 rev3434"
	On Error Goto 0
End Sub

'************************************************************************
'							KEYS
'************************************************************************
dim ballinshooterlane

Sub sw23_hit
	ballinshooterlane=1
End Sub

Sub sw23_unhit
	ballinshooterlane=0
End Sub

Sub Table1_KeyDown(ByVal Keycode)
	If keycode = StartGameKey Then Controller.Switch(16)  = 1 :StartButton.Y = StartButton.Y -2 :StartButtonInner.Y = StartButtoninner.Y -2	
	If keycode = keyFront Then Controller.Switch(15) = 1 :VRTourneyButton.Y =VRTourneyButton.Y -2			'tournament
	If KeyCode = PlungerKey Then Plunger.Pullback:SoundPlungerPull()
	If keycode = LeftTiltKey Then Nudge 90, .5:SoundNudgeLeft()
	If keycode = RightTiltKey Then Nudge 270, .5:SoundNudgeRight()
	If keycode = CenterTiltKey Then Nudge 0, .5:SoundNudgeCenter()
	If keycode = LeftFlipperKey Then FlipperActivate LeftFlipper, LFPress :VRFlipperButtonLeft.X = VRFlipperButtonLeft.X +6 
	If keycode = RightFlipperKey Then FlipperActivate RightFlipper, RFPress :VRFlipperButtonRight.X = VRFlipperButtonRight.X -6
	If keycode = keyInsertCoin1 or keycode = keyInsertCoin2 or keycode = keyInsertCoin3 or keycode = keyInsertCoin4 Then
		Select Case Int(rnd*3)
			Case 0: PlaySound ("Coin_In_1"), 0, CoinSoundLevel, 0, 0.25
			Case 1: PlaySound ("Coin_In_2"), 0, CoinSoundLevel, 0, 0.25
			Case 2: PlaySound ("Coin_In_3"), 0, CoinSoundLevel, 0, 0.25

		End Select
	End If
    If vpmKeyDown(keycode) Then Exit Sub
End Sub

Sub Table1_KeyUp(ByVal Keycode)
	If keycode = StartGameKey Then Controller.Switch(14)  = 0:StartButton.Y = StartButton.Y +2:StartButtonInner.Y = StartButtonInner.Y +2
	If KeyCode = PlungerKey Then Plunger.Fire: If ballinshooterlane=1 then SoundPlungerReleaseBall() else SoundPlungerReleaseNoBall()
	If keycode = keyFront Then Controller.Switch(15) = 0 :VRTourneyButton.Y = VRTourneyButton.Y +2      	'tournament
	If keycode = LeftFlipperKey Then FlipperDeActivate LeftFlipper, LFPress :VRFlipperButtonLeft.X = VRFlipperButtonLeft.X -6 
	If keycode = RightFlipperKey Then FlipperDeActivate RightFlipper, RFPress :VRFlipperButtonRight.X = VRFlipperButtonRight.X +6
	If vpmKeyUp(keycode) Then Exit Sub
End Sub

Sub Table1_Paused:Controller.Pause = True:End Sub
Sub Table1_unPaused:Controller.Pause = False:End Sub
Sub Table1_exit()
	Controller.Pause = False:Controller.Stop
End Sub

'************************************************************************
'						SOLENOIDS MAP
'************************************************************************
SolCallBack(1) = "SolRelease"						'Trough-Up Kicker
SolCallBack(2) = "SolAutoPlungerIM"					'AutoLaunch
SolCallback(3) = "SolTEject"						'Top Right Eject
SolCallBack(4) = "SolJokerEject"					'Joker Lockup
SolCallback(5) = "JokerDropUp"						'Joker Drop Target Up
SolCallback(6) = "SolVUK"							'Scarecrow VUK
SolCallback(7) = "JokerDropDown"					'Joker Drop Target Down
SolCallback(8) = "SolShaker"						'Shaker Motor
'SolCallback(9) = ""								'Left Bumper
'SolCallback(10)= ""								'Right Bumper			
'SolCallback(11)= ""								'Bottom Bumper
SolCallBack(12)= "vpmSolGate LGate, SoundFX(""ElGate"",DOFContactors),"	'Left Control Gate
SolCallBack(13)= "SolBatRamp"						'Batmobile Ramp Down
SolCallBack(14)= "vpmSolGate RGate, SoundFX(""ElGate"",DOFContactors),"	'Right Control Gate
SolCallback(15)= "SolLFlipper"						'Left Flipper
SolCallback(16)= "SolRFlipper"						'Right Flipper
'SolCallback(17)= ""								'Left Sling
'SolCallback(18)= ""								'Right Sling
SolModCallBack(19)= "Flash179"						'Flasher:ScareCrow Home Insert
SolModCallBack(21)= "Flash181"						'Flasher:BackPanel
SolModCallBack(22)= "Flash182"						'Flasher:Joker (x3)
SolModCallBack(23)= "Flash183"						'Flasher:Scarecrow
'SolCallBack(24)= "solKnocker"						'Knocker
SolModCallBack(25)= "Flash185"						'Flasher:Pop Bumpers  (x3)
''SolCallBack(26)= ""								'Joker Motor
SolModCallBack(27)= "Flash187"						'Flasher:Left SlingShot
''SolCallBack(28)= ""								'ScareCrow Motor Relay
SolModCallBack(29)= "Flash189"						'Flasher:Right SlingShot
''SolCallBack(30)= ""								'Joker Motor Relay
''SolCallBack(31)= ""								'ScareCrow Motor
SolModCallBack(32)= "Flash192"						'Flasher:BatMobile Crash (x2)


'******************************************************
'					KNOCKER
'******************************************************
Sub SolKnocker(Enabled)
	If enabled Then
		KnockerSolenoid 'Add knocker position object
	End If
End Sub


'************************************************************************
'						BALL TROUGH
'************************************************************************

Sub SolTrough(Enabled)
	If Enabled Then
		bsTrough.ExitSol_On
		If BsTrough.Balls Then vpmTimer.PulseSw 22
	End If
End Sub

'************************************************************************
'						 AUTOPLUNGER 
'************************************************************************

Sub SolAutoPlungerIM(Enabled)
	If Enabled Then
		PlungerIM.AutoFire
		PlaySoundAt SoundFX("AutoPlunger",DOFContactors), Plunger
	End If
End Sub

'************************************************************************
'						 SCARECROW VUK
'************************************************************************

Sub SolVUK(enabled)
	If Enabled Then
		sw12.kick 0, 35, 1.56
		If BallInSaucer = True Then
			PlaySoundAtLevelStatic SoundFX("Saucer_Kick", DOFContactors), SaucerKickSoundLevel, sw12
		Else
			PlaySoundAtLevelStatic SoundFX("Saucer_Empty", DOFContactors), SaucerKickSoundLevel, sw12
		End If
	End If
End Sub

dim ballinsaucer

sub sw12_hit
	Controller.switch(12) = 1
	SoundSaucerLock
	ballinsaucer=true
end sub

sub sw12_unhit
	Controller.switch(12) = 0
	ballinsaucer=False
end sub

'************************************************************************
'						 UPPER SAUCER
'************************************************************************

Sub SolTEject(enabled)
	If Enabled Then
		sw44.kick -90, 9, 0
		If BallInSaucer2 = True Then
			PlaySoundAtLevelStatic SoundFX("Saucer_Kick", DOFContactors), SaucerKickSoundLevel, sw44
		Else
			PlaySoundAtLevelStatic SoundFX("Saucer_Empty", DOFContactors), SaucerKickSoundLevel, sw44
		End If
	End If
End Sub

dim ballinsaucer2

sub sw44_hit
	Controller.switch(44) = 1
	SoundSaucerLock
	ballinsaucer2=true
end sub

sub sw44_unhit
	Controller.switch(44) = 0
	ballinsaucer2=False
end sub

'************************************************************************
'						 SHAKER MOTOR
'************************************************************************
Dim bou,brake,perc
Dim bou2,brake2,perc2

Sub SolShaker(enabled)
	If Enabled Then
		ShakeJoker : ShakeBall
		PlaySoundAt SoundFX("ShakerPulse",DOFShaker), sw55p
	End If
End Sub

Sub ShakeJoker
	perc=3:ShakeJokerTimer.enabled=1
End Sub

Sub ShakeBall
	perc2=3:ShakeTimer.enabled=1
End Sub

Sub ShakeJokerTimer_timer()
	bou=bou+0.4:brake=brake+0.02 
	Joker.rotx=sin(bou)*(perc-(brake*(perc/6)))
	Joker001.rotx=sin(bou)*(perc-(brake*(perc/6)))
	Joker002.rotx=sin(bou)*(perc-(brake*(perc/6)))
	If (perc-(brake*(perc/6)))<0 Then Me.Enabled = 0 :bou=0 :brake=0 :perc=0
End Sub

Sub ShakeTimer_timer()
	bou2=bou2+0.4:brake2=brake2+0.02 
	CraneS.transX=sin(bou2)*(perc2-(brake2*(perc2/6)))
	If (perc2-(brake2*(perc2/6)))<0 Then Me.Enabled = 0 :bou2=0 :brake2=0 :perc2=0
End Sub

'************************************************************************
'						BATMOBILE RAMP
'************************************************************************

'Const Pi=3.1415926535
Dim fakeBall, RampDir, RampPos
ReDim BatRampRadius(4), dropping(4)

Sub sw64_Hit: If ActiveBall.VelY<0 Then Controller.Switch(64) = 1 :End If:SoundSaucerLock:End Sub
Sub Trigger1_hit: PlaysoundAt "fx_rrturn", Trigger1: If ActiveBall.VelX<0 And ActiveBall.VelX>-5 Then ActiveBall.VelX = -8 :End If : End Sub

Sub SolBatRamp(enabled)
	If Enabled Then
		CheckBalls
		RampPos=10:RampDir=-1: MoveBatRamp.Enabled=1
		PlaysoundAt SoundFX("fx_solenoid", DOFContactors), BatMobile
	Else
		Dim b:For b = 0 to 3
			If dropping(b) = True Then
				dropping(b) = False
			End If
		Next
		RampPos=0:RampDir=1: MoveBatRamp.Enabled=1
		PlaysoundAt SoundFX("fx_solenoid", DOFContactors), BatMobile
	End If
End Sub

MoveBatRamp.Interval = 4
Sub MoveBatRamp_timer
	RampPos = RampPos + RampDir*0.25
	If RampDir = -1 And RampPos<0 Then RampPos=0  : Me.Enabled=0 : DropTheBall 1
	If RampDir = 1 And RampPos>10 Then RampPos=10 : Me.Enabled=0 : DropTheBall 0
	UpperTrack.RotX = RampPos
	DecalDropRamp.RotX = RampPos
	DecalDropRamp001.RotX = RampPos
	DecalDropRamp002.RotX = RampPos
	DecalDropRamp003.RotX = RampPos
	DecalDropRamp004.RotX = RampPos
	DecalDropRamp005.RotX = RampPos
	DecalSide.Rotx = RampPos
	BatMobile.RotX = RampPos
    Dim b
	For b = 0 to 3
		If dropping(b) = True Then
			gBOT(b).Y = LowerTrack.Y - BatRampRadius(b) * cos((10-RampPos) * Pi/180)
			gBOT(b).Z = 90 + BatRampRadius(b) * sin((10-RampPos) * Pi/180)
		End If
	Next
End Sub

Sub CheckBalls()
    Dim b
	' exit the Sub if no balls on the table
    If UBound(gBOT) = -1 Then Exit Sub
    ' check if there are balls on the batramp
    For b = 0 to UBound(gBOT)
        If gBOT(b).X< 85 and gBOT(b).Z> 50 Then
			dropping(b) = True
			BatRampRadius(b) = SQR((LowerTrack.X - gBOT(b).X)^2 + (LowerTrack.Y - gBOT(b).Y)^2)
        End If
    Next
End Sub

Sub DropTheBall(n)
	Select Case n
		Case 0
			RampUp.collidable=1
			RampDown.collidable=0
			Set fakeBall = BallDestroy.createball : fakeBall.visible = 0 : BallDestroy.kick 0,21
			MoveBatMobile.enabled= 1
			PlaySoundAt "BallRoll_0", BatMobile
		Case 1
			Dim b
			For b = 0 to 3
				If dropping(b) = True Then
					gBOT(b).VelZ = 10
				End If
			Next
			Controller.Switch(64) = 0
			RampUp.collidable=0
			RampDown.collidable=1
			Set fakeBall = BallMake.createball : fakeBall.visible = 0 : BallMake.kick 180,1
			MoveBatMobile.enabled= 1
	End Select
End Sub

Sub MoveBatMobile_timer
	If Not IsEmpty(fakeball) Then BatMobile. TransY = -BallMake.Y + fakeBall.Y
End Sub

Sub BallMake_hit 
	MoveBatMobile.Enabled=0 :  Me.DestroyBall : fakeBall = Empty : StopSound "BallRoll_0"
End Sub

Sub BallDestroy_Hit
	MoveBatMobile.Enabled=0 :  Me.DestroyBall : fakeBall = Empty : vpmtimer.pulsesw 47: StopSound "BallRoll_0"
End Sub



'************************************************************************
' 						JOKER MOTOR
'************************************************************************

Dim InPos, OutPos, CurMechPos: InPos = 0 : OutPos = 0
Dim JokerRadius:JokerRadius = SQR((cilin.X - joker.X)^2 + (cilin.Y - joker.Y)^2)

Sub UpdateJoker_timer
	if InPos < CurMechPos then
		InPos = InPos + 1
		if InPos > CurMechPos then InPos = CurMechPos
	elseif InPos > CurMechPos Then
		InPos = InPos - 1
		if InPos < CurMechPos then InPos = CurMechPos		
	else	
		me.Enabled=false
	end if 
	if InPos <=0 then outpos = InPos
	UpdateObjects
End Sub

Sub UpdateJokerMech(aCurrPos,aSpeed,aLastPos)
	CurMechPos = aCurrPos -180
	UpdateJoker.Enabled = 1
End Sub

Sub UpdateObjects
	cilin.RotZ = InPos
	cilout.RotZ = OutPos
	Joker.X = cilin.X - JokerRadius * sin (InPos * Pi/180)
	Joker.Y = cilin.Y + JokerRadius * cos (InPos * Pi/180)
	Joker.RotZ = InPos
	Joker001.X = cilin.X - JokerRadius * sin (InPos * Pi/180)
	Joker001.Y = cilin.Y + JokerRadius * cos (InPos * Pi/180)
	Joker001.RotZ = InPos
	Joker002.X = cilin.X - JokerRadius * sin (InPos * Pi/180)
	Joker002.Y = cilin.Y + JokerRadius * cos (InPos * Pi/180)
	Joker002.RotZ = InPos
End Sub

'************************************************************************
' 						CRANE MOTOR
'************************************************************************

Dim CranePos, MotorSnd, CurMech1Pos : MotorSnd = 0 : CranePos = 160
Dim CraneRadius:CraneRadius = SQR((crane.X - joker.X)^2 + (crane.Y - joker.Y)^2)

Sub UpdateCrane_timer
	if CranePos < CurMech1Pos then
		CranePos = CranePos + 0.5
		if CranePos > CurMech1Pos then CranePos = CurMech1Pos
	elseif CranePos > CurMech1Pos Then
		CranePos = CranePos - 0.5
		if CranePos < CurMech1Pos then CranePos = CurMech1Pos		
	else	
		me.Enabled=false : ShakeBall : StopSound "IdolMotor"
	end if
	UpdateParts
End Sub

Sub UpdateCraneMech(aCurrPos,aSpeed,aLastPos)
	CurMech1Pos = 250 - aCurrPos
	UpdateCrane.Enabled = 1
	If aSpeed=0 Then
		StopSound "Motor":MotorSnd=0
	Else
		If MotorSnd=0 Then PlaySoundAtVolLoops SoundFX("Motor", DOFGear), crane, 1, -1: MotorSnd=1
	End If
End Sub

Sub UpdateParts
	If CranePos > (250 -2) Then
		CraneHit(5).Collidable = 1
	ElseIf CranePos<(250 -28) AND CranePos > (250 -35) Then
		CraneHit(4).Collidable = 1
	ElseIf CranePos<(250 -45) AND CranePos > (250 -52) Then
		CraneHit(3).Collidable = 1
	ElseIf CranePos<(250 -57) AND CranePos > (250 -64) Then
		CraneHit(2).Collidable = 1
	ElseIf CranePos<(250 -70) AND CranePos > (250 -77) Then
		CraneHit(1).Collidable = 1
	ElseIf CranePos<(250 -86) Then
		CraneHit(0).Collidable = 1
	Else
		Dim i: For each i in CraneHit:i.Collidable=0 : Next
	End If
    crane.rotz=CranePos
    craneB.rotz=CranePos
    craneM.rotz=CranePos
    craneS.rotz=CranePos
End Sub

Sub CraneHit_Hit(idx)
	vpmtimer.Pulsesw 85
	ShakeBall
	PlaySoundAt "Ball_Collide_1", craneM
End Sub

'************************************************************************
'      					SWITCHES
'************************************************************************

'******************************************************
'						TROUGH 
'******************************************************

Sub sw19_Hit():Controller.Switch(19) = 1:UpdateTrough:End Sub
Sub sw19_UnHit():Controller.Switch(19) = 0:UpdateTrough:End Sub
Sub sw20_Hit():Controller.Switch(20) = 1:UpdateTrough:End Sub
Sub sw20_UnHit():Controller.Switch(20) = 0:UpdateTrough:End Sub
Sub sw21_Hit():Controller.Switch(21) = 1:UpdateTrough:End Sub
Sub sw21_UnHit():Controller.Switch(21) = 0:UpdateTrough:End Sub

Sub UpdateTrough()
	UpdateTroughTimer.Interval = 300
	UpdateTroughTimer.Enabled = 1
End Sub

Sub UpdateTroughTimer_Timer()
	If sw21.BallCntOver = 0 Then sw20.kick 60, 9
	If sw20.BallCntOver = 0 Then sw19.kick 60, 9
	If sw19.BallCntOver = 0 Then sw18.kick 60, 20
	Me.Enabled = 0
End Sub

'******************************************************
'					DRAIN & RELEASE
'******************************************************

Sub sw18_Hit() 'Drain
	UpdateTrough
	Controller.Switch(18) = 1
	RandomSoundDrain(sw18)
End Sub

Sub sw18_UnHit()  'Drain
	Controller.Switch(18) = 0
End Sub

Sub SolRelease(enabled)
	If enabled Then 
		If sw21.BallCntOver = 0 Then
			PlaySoundAt SoundFX("fx_Solenoid",DOFContactors), sw21
		Else
			RandomSoundBallRelease(sw21)
			vpmTimer.PulseSw 22
		End If
		sw21.kick 60, 9		
	End If
End Sub

Sub sw46_hit
	SoundSaucerLock
	Controller.switch(46) = True
End Sub

Sub sw46_unhit
	Controller.switch(46) = False
End Sub

Sub SolJokerEject(Enabled)
	If Enabled then
	PlaySoundAtLevelStatic SoundFX("Saucer_Kick", DOFContactors), SaucerKickSoundLevel, sw46
		sw46.kick -13, 45, 0
	End If
End Sub


'Inlane speed limit code

Sub leftInlaneSpeedLimit
	'Wylte's implementation
'    debug.print "Spin in: "& activeball.AngMomZ
'    debug.print "Speed in: "& activeball.vely
	If activeball.vely < 0 Then Exit Sub 							'don't affect upwards movement
    activeball.AngMomZ = -abs(activeball.AngMomZ) * RndNum(3,6)
    If abs(activeball.AngMomZ) > 60 Then activeball.AngMomZ = 0.8 * activeball.AngMomZ
    If abs(activeball.AngMomZ) > 80 Then activeball.AngMomZ = 0.8 * activeball.AngMomZ
    If activeball.AngMomZ > 100 Then activeball.AngMomZ = RndNum(80,100)
    If activeball.AngMomZ < -100 Then activeball.AngMomZ = RndNum(-80,-100)

    If abs(activeball.vely) > 5 Then activeball.vely = 0.8 * activeball.vely
    If abs(activeball.vely) > 10 Then activeball.vely = 0.8 * activeball.vely
    If abs(activeball.vely) > 15 Then activeball.vely = 0.8 * activeball.vely
    If activeball.vely > 16 Then activeball.vely = RndNum(14,16)
    If activeball.vely < -16 Then activeball.vely = RndNum(-14,-16)
'    debug.print "Spin out: "& activeball.AngMomZ
'    debug.print "Speed out: "& activeball.vely
End Sub


Sub rightInlaneSpeedLimit
	'Wylte's implementation
'    debug.print "Spin in: "& activeball.AngMomZ
'    debug.print "Speed in: "& activeball.vely
	If activeball.vely < 0 Then Exit Sub 							'don't affect upwards movement

    activeball.AngMomZ = abs(activeball.AngMomZ) * RndNum(2,4)
    If abs(activeball.AngMomZ) > 60 Then activeball.AngMomZ = 0.8 * activeball.AngMomZ
    If abs(activeball.AngMomZ) > 80 Then activeball.AngMomZ = 0.8 * activeball.AngMomZ
    If activeball.AngMomZ > 100 Then activeball.AngMomZ = RndNum(80,100)
    If activeball.AngMomZ < -100 Then activeball.AngMomZ = RndNum(-80,-100)

	If abs(activeball.vely) > 5 Then activeball.vely = 0.8 * activeball.vely
    If abs(activeball.vely) > 10 Then activeball.vely = 0.8 * activeball.vely
    If abs(activeball.vely) > 15 Then activeball.vely = 0.8 * activeball.vely
    If activeball.vely > 16 Then activeball.vely = RndNum(14,16)
    If activeball.vely < -16 Then activeball.vely = RndNum(-14,-16)
'    debug.print "Spin out: "& activeball.AngMomZ
'    debug.print "Speed out: "& activeball.vely
End Sub


'StandUp Targets
Sub tsw1_hit:vpmtimer.PulseSw 1: End Sub
Sub tsw2_hit:vpmtimer.PulseSw 2: End Sub
Sub tsw3_hit:vpmtimer.PulseSw 3: End Sub
Sub tsw4_hit:vpmtimer.PulseSw 4: End Sub
Sub tsw5_hit:vpmtimer.PulseSw 5: End Sub
Sub tsw6_hit:vpmtimer.PulseSw 6: End Sub
Sub tsw11_hit:vpmtimer.PulseSw 11: End Sub
Sub sw14_hit:vpmtimer.PulseSw 14: End Sub
Sub sw36_hit:vpmtimer.PulseSw 36: End Sub
Sub sw37_hit:vpmtimer.PulseSw 37: End Sub
Sub tsw38_hit:vpmtimer.PulseSw 38: End Sub
Sub sw48_hit:vpmtimer.PulseSw 48: End Sub
Sub tsw49_hit:vpmtimer.PulseSw 49: End Sub

'Rollovers
Sub sw7_hit:Controller.switch(7) = 1:End Sub
Sub sw7_unhit:Controller.switch(7) = 0: End Sub

Sub sw8_hit:Controller.switch(8) = 1:End Sub
Sub sw8_unhit:Controller.switch(8) = 0: End Sub

Sub sw9_hit:Controller.switch(9) = 1:End Sub
Sub sw9_unhit:Controller.switch(9) = 0: End Sub

Sub sw24_hit:Controller.switch(24) = 1:End Sub
Sub sw24_unhit:Controller.switch(24) = 0: End Sub

Sub sw25_hit:Controller.switch(25) = 1:leftInlaneSpeedLimit:End Sub
Sub sw25_unhit:Controller.switch(25) = 0: End Sub

Sub sw28_hit:Controller.switch(28) = 1:rightInlaneSpeedLimit:End Sub
Sub sw28_unhit:Controller.switch(28) = 0: End Sub

Sub sw29_hit:Controller.switch(29) = 1:End Sub
Sub sw29_unhit:Controller.switch(29) = 0: End Sub

Sub sw33_hit:Controller.switch(33) = 1:End Sub
Sub sw33_unhit:Controller.switch(33) = 0: End Sub

'Center Ramp Enter
Sub sw13_hit:vpmtimer.pulsesw 13:End Sub

'Bumpers
Sub sw30_hit:vpmtimer.pulsesw 30:RandomSoundBumperTop sw30:End Sub
Sub sw31_hit:vpmtimer.pulsesw 31:RandomSoundBumperTop sw31:End Sub
Sub sw32_hit:vpmtimer.pulsesw 32:RandomSoundBumperMiddle sw32:End Sub

'Spinners
Sub sw34_spin:vpmtimer.pulsesw 34: PlaySoundAt "fx_spinner", sw34:End Sub
Sub sw39_spin:vpmtimer.pulsesw 39: PlaySoundAt "fx_spinner", sw39:End Sub

'Slingshots
Dim LStep, RStep

Sub sw26_slingshot
	LS.VelocityCorrect(activeball)
	vpmTimer.PulseSw 26
	RandomSoundSlingshotLeft sling1
	LSling.Visible = 0: LSling1.Visible = 1: sling1.TransZ = -20: LStep = 0
	Me.TimerInterval = 17: Me.TimerEnabled = 1
End Sub

Sub sw27_slingshot
	RS.VelocityCorrect(activeball)
	vpmTimer.PulseSw 27
	RandomSoundSlingshotRight sling2
	RSling.Visible = 0: RSling1.Visible = 1: sling2.TransZ = -20: RStep = 0
	Me.TimerInterval = 17: Me.TimerEnabled = 1
End Sub

Sub sw26_Timer
	Select Case LStep
		Case 3:LSLing1.Visible = 0:LSLing2.Visible = 1:sling1.TransZ = -10
		Case 4:LSLing2.Visible = 0:LSLing.Visible = 1:sling1.TransZ = 0:Me.TimerEnabled = 0
	End Select
	LStep = LStep + 1
End Sub

Sub sw27_Timer
	Select Case RStep
		Case 3:RSLing1.Visible = 0:RSLing2.Visible = 1:sling2.TransZ = -10
		Case 4:RSLing2.Visible = 0:RSLing.Visible = 1:sling2.TransZ = 0:Me.TimerEnabled = 0
	End Select
	RStep = RStep + 1
End Sub

'Left Loop
Sub sw35_hit
vpmtimer.PulseSw 35
If ActiveBall.VelY>20 Then ActiveBall.VelY = 18
End Sub

'Right Loop
Sub sw41_hit
vpmtimer.PulseSw 41
If ActiveBall.VelY>20 Then ActiveBall.VelY = 18
End Sub

'VUK Exit
Sub sw42_hit:vpmtimer.pulsesw 42:End Sub

'Drop Target
Sub sw45_Hit:DTHit 45:End Sub

Sub JokerDropUp(Enabled)
     if enabled then
'          PlaySoundAt SoundFX(DTResetSound,DOFContactors), sw45
          DTRaise 45
     end if
End Sub

Sub JokerDropDown(enabled)
     If enabled Then
          DTDrop 45
     End If
End Sub

'Mini Pf Rollovers
Sub sw53_hit:Controller.switch(53) = 1: PlaySoundAt "fx_sensor",ActiveBall: sw53p.Rotx = -12 : End Sub
Sub sw53_unhit:Controller.switch(53) = 0: sw53p.Rotx = 0 : End Sub

Sub sw54_hit:Controller.switch(54) = 1: PlaySoundAt "fx_sensor",ActiveBall: sw54p.Rotx = -12 : End Sub
Sub sw54_unhit:Controller.switch(54) = 0: sw54p.Rotx = 0 : End Sub

Sub sw55_hit:Controller.switch(55) = 1: PlaySoundAt "fx_sensor",ActiveBall: sw55p.Rotx = -12 : End Sub
Sub sw55_unhit:Controller.switch(55) = 0: sw55p.Rotx = 0 : End Sub

Sub sw63_hit:Controller.switch(63) = 1: PlaySoundAt "fx_sensor",ActiveBall: sw63p.Rotx = -12 : End Sub
Sub sw63_unhit:Controller.switch(63) = 0: sw63p.Rotx = 0 : End Sub

'******************************************************
'                DROP TARGETS INITIALIZATION
'******************************************************

'Set array with drop target objects

dim DT45
'
'DropTargetvar = Array(primary, secondary, prim, swtich, animate)
'         primary:                         primary target wall to determine drop
'        secondary:                        wall used to simulate the ball striking a bent or offset target after the initial Hit
'        prim:                                primitive target used for visuals and animation
'                                                        IMPORTANT!!! 
'                                                        rotz must be used for orientation
'                                                        rotx to bend the target back
'                                                        transz to move it up and down
'                                                        the pivot point should be in the center of the target on the x, y and at or below the playfield (0) on z
'        switch:                                ROM switch number
'        animate:                        Arrary slot for handling the animation instrucitons, set to 0
'
'        Values for annimate: 1 - bend target (hit to primary), 2 - drop target (hit to secondary), 3 - brick target (high velocity hit to secondary), -1 - raise target 

' Center Bank
DT45 = Array(sw45, sw45y, psw45, 45, 0)
Dim DTArray
DTArray = Array(DT45)

'Configure the behavior of Drop Targets.
Const DTDropSpeed = 110							'in milliseconds
Const DTDropUpSpeed = 40						'in milliseconds
Const DTDropUnits = 49							'VP units primitive drops
Const DTDropUpUnits = 5							'VP units primitive raises above the up position on drops up
Const DTMaxBend = 8								'max degrees primitive rotates when hit
Const DTDropDelay = 20							'time in milliseconds before target drops (due to friction/impact of the ball)
Const DTRaiseDelay = 40							'time in milliseconds before target drops back to normal up position after the solendoid fires to raise the target
Const DTBrickVel = 30							'velocity at which the target will brick, set to '0' to disable brick

Const DTEnableBrick = 0							'Set to 0 to disable bricking, 1 to enable bricking
Const DTHitSound = "targethit"					'Drop Target Hit sound
Const DTDropSound = "DTDrop"					'Drop Target Drop sound
Const DTResetSound = "DTReset"					'Drop Target reset sound

Const DTMass = 0.2								'Mass of the Drop Target (between 0 and 1), higher values provide more resistance


'******************************************************
'				DROP TARGETS FUNCTIONS
'******************************************************

Sub DTHit(switch)
	Dim i
	i = DTArrayID(switch)

	PlayTargetSound
	DTArray(i)(4) =  DTCheckBrick(Activeball,DTArray(i)(2))
	If DTArray(i)(4) = 1 or DTArray(i)(4) = 3 or DTArray(i)(4) = 4 Then
		DTBallPhysics Activeball, DTArray(i)(2).rotz, DTMass
	End If
	DoDTAnim
End Sub

Sub DTRaise(switch)
	Dim i
	i = DTArrayID(switch)

	DTArray(i)(4) = -1
	DoDTAnim
End Sub

Sub DTDrop(switch)
	Dim i
	i = DTArrayID(switch)

	DTArray(i)(4) = 1
	DoDTAnim
End Sub

Function DTArrayID(switch)
	Dim i
	For i = 0 to uBound(DTArray) 
		If DTArray(i)(3) = switch Then DTArrayID = i:Exit Function 
	Next
End Function

sub DTBallPhysics(aBall, angle, mass)
	dim rangle,bangle,calc1, calc2, calc3
	rangle = (angle - 90) * 3.1416 / 180
	bangle = atn2(cor.ballvely(aball.id),cor.ballvelx(aball.id))

	calc1 = cor.BallVel(aball.id) * cos(bangle - rangle) * (aball.mass - mass) / (aball.mass + mass)
	calc2 = cor.BallVel(aball.id) * sin(bangle - rangle) * cos(rangle + 4*Atn(1)/2)
	calc3 = cor.BallVel(aball.id) * sin(bangle - rangle) * sin(rangle + 4*Atn(1)/2)

	aBall.velx = calc1 * cos(rangle) + calc2
	aBall.vely = calc1 * sin(rangle) + calc3
End Sub

'Check if target is hit on it's face or sides and whether a 'brick' occurred
Function DTCheckBrick(aBall, dtprim) 
	dim bangle, bangleafter, rangle, rangle2, Xintersect, Yintersect, cdist, perpvel, perpvelafter, paravel, paravelafter
	rangle = (dtprim.rotz - 90) * 3.1416 / 180
	rangle2 = dtprim.rotz * 3.1416 / 180
	bangle = atn2(cor.ballvely(aball.id),cor.ballvelx(aball.id))
	bangleafter = Atn2(aBall.vely,aball.velx)

	Xintersect = (aBall.y - dtprim.y - tan(bangle) * aball.x + tan(rangle2) * dtprim.x) / (tan(rangle2) - tan(bangle))
	Yintersect = tan(rangle2) * Xintersect + (dtprim.y - tan(rangle2) * dtprim.x)

	cdist = Distance(dtprim.x, dtprim.y, Xintersect, Yintersect)

	perpvel = cor.BallVel(aball.id) * cos(bangle-rangle)
	paravel = cor.BallVel(aball.id) * sin(bangle-rangle)

	perpvelafter = BallSpeed(aBall) * cos(bangleafter - rangle) 
	paravelafter = BallSpeed(aBall) * sin(bangleafter - rangle)

	If perpvel > 0 and  perpvelafter <= 0 Then
		If DTEnableBrick = 1 and  perpvel > DTBrickVel and DTBrickVel <> 0 and cdist < 8 Then
			DTCheckBrick = 3
		Else
			DTCheckBrick = 1
		End If
	ElseIf perpvel > 0 and ((paravel > 0 and paravelafter > 0) or (paravel < 0 and paravelafter < 0)) Then
		DTCheckBrick = 4
	Else 
		DTCheckBrick = 0
	End If
End Function

Sub DoDTAnim()
	Dim i
	For i=0 to Ubound(DTArray)
		DTArray(i)(4) = DTAnimate(DTArray(i)(0),DTArray(i)(1),DTArray(i)(2),DTArray(i)(3),DTArray(i)(4))
	Next
End Sub

Function DTAnimate(primary, secondary, prim, switch,  animate)
	dim transz
	Dim animtime, rangle

	rangle = prim.rotz * 3.1416 / 180

	DTAnimate = animate

	if animate = 0  Then
		primary.uservalue = 0
		DTAnimate = 0
		Exit Function
	Elseif primary.uservalue = 0 then 
		primary.uservalue = gametime
	end if

	animtime = gametime - primary.uservalue

	If (animate = 1 or animate = 4) and animtime < DTDropDelay Then
		primary.collidable = 0
		If animate = 1 then secondary.collidable = 1 else secondary.collidable= 0
		prim.rotx = DTMaxBend * cos(rangle)
		prim.roty = DTMaxBend * sin(rangle)
		DTAnimate = animate
		Exit Function
	elseif (animate = 1 or animate = 4) and animtime > DTDropDelay Then
		primary.collidable = 0
		If animate = 1 then secondary.collidable = 1 else secondary.collidable= 0
		prim.rotx = DTMaxBend * cos(rangle)
		prim.roty = DTMaxBend * sin(rangle)
		animate = 2
		SoundDropTargetDrop prim
	End If

	if animate = 2 Then
		transz = (animtime - DTDropDelay)/DTDropSpeed *  DTDropUnits * -1
		if prim.transz > -DTDropUnits  Then
			prim.transz = transz
		end if

		prim.rotx = DTMaxBend * cos(rangle)/2
		prim.roty = DTMaxBend * sin(rangle)/2

		if prim.transz <= -DTDropUnits Then 
			prim.transz = -DTDropUnits
			prim.blenddisablelighting = 0.2
			secondary.collidable = 0
			controller.Switch(Switch) = 1
			primary.uservalue = 0
			DTAnimate = 0
			Exit Function
		Else
			DTAnimate = 2
			Exit Function
		end If 
	End If

	If animate = 3 and animtime < DTDropDelay Then
		primary.collidable = 0
		secondary.collidable = 1
		prim.rotx = DTMaxBend * cos(rangle)
		prim.roty = DTMaxBend * sin(rangle)
	elseif animate = 3 and animtime > DTDropDelay Then
		primary.collidable = 1
		secondary.collidable = 0
		prim.rotx = 0
		prim.roty = 0
		primary.uservalue = 0
		DTAnimate = 0
		Exit Function
	End If

	if animate = -1 Then
		transz = (1 - (animtime/DTDropUpSpeed)) *  DTDropUnits * -1

		If prim.transz = -DTDropUnits Then
			Dim b

			For b = 0 to UBound(gBOT)
				If InRotRect(gBOT(b).x,gBOT(b).y,prim.x, prim.y, prim.rotz, -25,-10,25,-10,25,25,-25,25) and gBOT(b).z < prim.z+DTDropUnits+25 Then
                                        gBOT(b).velz = 20
                                End If
			Next
		End If

		if prim.transz < 0 Then
			prim.blenddisablelighting = 0.35
			prim.transz = transz
		elseif transz > 0 then
			prim.transz = transz
		end if

		if prim.transz > DTDropUpUnits then 
			prim.transz = DTDropUpUnits
			DTAnimate = -2
			prim.rotx = 0
			prim.roty = 0
			primary.uservalue = gametime
		end if
		primary.collidable = 0
		secondary.collidable = 1
		controller.Switch(Switch) = 0

	End If

	if animate = -2 and animtime > DTRaiseDelay Then
		prim.transz = (animtime - DTRaiseDelay)/DTDropSpeed *  DTDropUnits * -1 + DTDropUpUnits 
		if prim.transz < 0 then
			prim.transz = 0
			primary.uservalue = 0
			DTAnimate = 0

			primary.collidable = 1
			secondary.collidable = 0
		end If 
	End If
End Function


'******************************************************
'                DROP TARGET
'                SUPPORTING FUNCTIONS 
'******************************************************

' Used for drop targets
'*** Determines if a Points (px,py) is inside a 4 point polygon A-D in Clockwise/CCW order
Function InRect(px,py,ax,ay,bx,by,cx,cy,dx,dy)
	Dim AB, BC, CD, DA
	AB = (bx*py) - (by*px) - (ax*py) + (ay*px) + (ax*by) - (ay*bx)
	BC = (cx*py) - (cy*px) - (bx*py) + (by*px) + (bx*cy) - (by*cx)
	CD = (dx*py) - (dy*px) - (cx*py) + (cy*px) + (cx*dy) - (cy*dx)
	DA = (ax*py) - (ay*px) - (dx*py) + (dy*px) + (dx*ay) - (dy*ax)

	If (AB <= 0 AND BC <=0 AND CD <= 0 AND DA <= 0) Or (AB >= 0 AND BC >=0 AND CD >= 0 AND DA >= 0) Then
		InRect = True
	Else
		InRect = False       
	End If
End Function

Function InRotRect(ballx,bally,px,py,angle,ax,ay,bx,by,cx,cy,dx,dy)
    Dim rax,ray,rbx,rby,rcx,rcy,rdx,rdy
    Dim rotxy
    rotxy = RotPoint(ax,ay,angle)
    rax = rotxy(0)+px : ray = rotxy(1)+py
    rotxy = RotPoint(bx,by,angle)
    rbx = rotxy(0)+px : rby = rotxy(1)+py
    rotxy = RotPoint(cx,cy,angle)
    rcx = rotxy(0)+px : rcy = rotxy(1)+py
    rotxy = RotPoint(dx,dy,angle)
    rdx = rotxy(0)+px : rdy = rotxy(1)+py

    InRotRect = InRect(ballx,bally,rax,ray,rbx,rby,rcx,rcy,rdx,rdy)
End Function

Function RotPoint(x,y,angle)
    dim rx, ry
    rx = x*dCos(angle) - y*dSin(angle)
    ry = x*dSin(angle) + y*dCos(angle)
    RotPoint = Array(rx,ry)
End Function

'******************************************************
'		STAND-UP TARGET INITIALIZATION
'******************************************************

'Define a variable for each stand-up target
Dim ST1,ST2,ST3,ST4,ST5,ST6,ST11,ST49

'Set array with stand-up target objects
'
'StandupTargetvar = Array(primary, prim, swtich)
' 	primary: 			vp target to determine target hit
'	prim:				primitive target used for visuals and animation
'							IMPORTANT!!! 
'							transy must be used to offset the target animation
'	switch:				ROM switch number
'	animate:			Arrary slot for handling the animation instrucitons, set to 0

ST1 = Array(tsw1, primt1,1, 0)
ST2 = Array(tsw2, primt2,2, 0)
ST3 = Array(tsw3, primt3,3, 0)
ST4 = Array(tsw4, primt4,4, 0)
ST5 = Array(tsw5, primt5,5, 0)
ST6 = Array(tsw6, primt6,6, 0)
ST11 = Array(tsw11, primt11,11, 0)
ST49 = Array(tsw49, primt49,49, 0)

'Add all the Stand-up Target Arrays to Stand-up Target Animation Array
' STAnimationArray = Array(ST1, ST2, ....)
Dim STArray
STArray = Array(ST1,ST2,ST3,ST4,ST5,ST6,ST11,ST49)

'Configure the behavior of Stand-up Targets
Const STAnimStep =  1.5 				'vpunits per animation step (control return to Start)
Const STMaxOffset = 9 			'max vp units target moves when hit
Const STHitSound = "targethit"	'Stand-up Target Hit sound

Const STMass = 0.2				'Mass of the Stand-up Target (between 0 and 1), higher values provide more resistance

'******************************************************
'				STAND-UP TARGETS FUNCTIONS
'******************************************************

Sub STHit(switch)
	Dim i
	i = STArrayID(switch)

	PlayTargetSound
	STArray(i)(3) =  STCheckHit(Activeball,STArray(i)(0))

	If STArray(i)(3) <> 0 Then
		DTBallPhysics Activeball, STArray(i)(0).orientation, STMass
	End If
	DoSTAnim
End Sub

Function STArrayID(switch)
	Dim i
	For i = 0 to uBound(STArray) 
		If STArray(i)(2) = switch Then STArrayID = i:Exit Function 
	Next
End Function

'Check if target is hit on it's face
Function STCheckHit(aBall, target) 
	dim bangle, bangleafter, rangle, rangle2, perpvel, perpvelafter, paravel, paravelafter
	rangle = (target.orientation - 90) * 3.1416 / 180	
	bangle = atn2(cor.ballvely(aball.id),cor.ballvelx(aball.id))
	bangleafter = Atn2(aBall.vely,aball.velx)

	perpvel = cor.BallVel(aball.id) * cos(bangle-rangle)
	paravel = cor.BallVel(aball.id) * sin(bangle-rangle)

	perpvelafter = BallSpeed(aBall) * cos(bangleafter - rangle) 
	paravelafter = BallSpeed(aBall) * sin(bangleafter - rangle)

	If perpvel > 0 and  perpvelafter <= 0 Then
		STCheckHit = 1
	ElseIf perpvel > 0 and ((paravel > 0 and paravelafter > 0) or (paravel < 0 and paravelafter < 0)) Then
		STCheckHit = 1
	Else 
		STCheckHit = 0
	End If
End Function

Sub DoSTAnim()
	Dim i
	For i=0 to Ubound(STArray)
		STArray(i)(3) = STAnimate(STArray(i)(0),STArray(i)(1),STArray(i)(2),STArray(i)(3))
	Next
End Sub

Function STAnimate(primary, prim, switch,  animate)
	Dim animtime

	STAnimate = animate

	if animate = 0  Then
		primary.uservalue = 0
		STAnimate = 0
		Exit Function
	Elseif primary.uservalue = 0 then 
		primary.uservalue = gametime
	end if

	animtime = gametime - primary.uservalue

	If animate = 1 Then
		primary.collidable = 0
		prim.transy = -STMaxOffset
		vpmTimer.PulseSw switch
		STAnimate = 2
		Exit Function
	elseif animate = 2 Then
		prim.transy = prim.transy + STAnimStep
		If prim.transy >= 0 Then
			prim.transy = 0
			primary.collidable = 1
			STAnimate = 0
			Exit Function
		Else 
			STAnimate = 2
		End If
	End If	
End Function

'******************************************************
'						FLIPPERS
'******************************************************
Const ReflipAngle = 20

Sub SolLFlipper(Enabled)
	If Enabled Then
		LF.Fire
		If leftflipper.currentangle < leftflipper.endangle + ReflipAngle Then 
			RandomSoundReflipUpLeft LeftFlipper
		Else 
			SoundFlipperUpAttackLeft LeftFlipper
			RandomSoundFlipperUpLeft LeftFlipper
		End If   
	Else
		LeftFlipper.RotateToStart
		If LeftFlipper.currentangle < LeftFlipper.startAngle - 5 Then
			RandomSoundFlipperDownLeft LeftFlipper
		End If
		FlipperLeftHitParm = FlipperUpSoundLevel
	End If
End Sub
 
Sub SolRFlipper(Enabled)
	If Enabled Then
		RF.Fire 'rightflipper.rotatetoend
		If rightflipper.currentangle > rightflipper.endangle - ReflipAngle Then
			RandomSoundReflipUpRight RightFlipper
		Else 
			SoundFlipperUpAttackRight RightFlipper
			RandomSoundFlipperUpRight RightFlipper
		End If
	Else
		RightFlipper.RotateToStart
		If RightFlipper.currentangle > RightFlipper.startAngle + 5 Then
			RandomSoundFlipperDownRight RightFlipper
		End If        
		FlipperRightHitParm = FlipperUpSoundLevel
	End If
End Sub

'******************************************************
'  FLIPPER TRICKS
'******************************************************
' To add the flipper tricks you must
'	 - Include a call to FlipperCradleCollision from within OnBallBallCollision subroutine
'	 - Include a call the CheckLiveCatch from the LeftFlipper_Collide and RightFlipper_Collide subroutines
'	 - Include FlipperActivate and FlipperDeactivate in the Flipper solenoid subs

RightFlipper.timerinterval = 1
Rightflipper.timerenabled = True

Sub RightFlipper_timer()
	FlipperTricks LeftFlipper, LFPress, LFCount, LFEndAngle, LFState
	FlipperTricks RightFlipper, RFPress, RFCount, RFEndAngle, RFState
	FlipperNudge RightFlipper, RFEndAngle, RFEOSNudge, LeftFlipper, LFEndAngle
	FlipperNudge LeftFlipper, LFEndAngle, LFEOSNudge,  RightFlipper, RFEndAngle
End Sub

Dim LFEOSNudge, RFEOSNudge

Sub FlipperNudge(Flipper1, Endangle1, EOSNudge1, Flipper2, EndAngle2)
	Dim b
	'   Dim BOT
	'   BOT = GetBalls
	
	If Flipper1.currentangle = Endangle1 And EOSNudge1 <> 1 Then
		EOSNudge1 = 1
		'   debug.print Flipper1.currentangle &" = "& Endangle1 &"--"& Flipper2.currentangle &" = "& EndAngle2
		If Flipper2.currentangle = EndAngle2 Then
			For b = 0 To UBound(gBOT)
				If FlipperTrigger(gBOT(b).x, gBOT(b).y, Flipper1) Then
					'Debug.Print "ball in flip1. exit"
					Exit Sub
				End If
			Next
			For b = 0 To UBound(gBOT)
				If FlipperTrigger(gBOT(b).x, gBOT(b).y, Flipper2) Then
					gBOT(b).velx = gBOT(b).velx / 1.3
					gBOT(b).vely = gBOT(b).vely - 0.5
				End If
			Next
		End If
	Else
		If Abs(Flipper1.currentangle) > Abs(EndAngle1) + 30 Then EOSNudge1 = 0
	End If
End Sub


Dim FCCDamping: FCCDamping = 0.4

Sub FlipperCradleCollision(ball1, ball2, velocity)
	if velocity < 0.7 then exit sub		'filter out gentle collisions
    Dim DoDamping, coef
    DoDamping = false
    'Check left flipper
    If LeftFlipper.currentangle = LFEndAngle Then
		If FlipperTrigger(ball1.x, ball1.y, LeftFlipper) OR FlipperTrigger(ball2.x, ball2.y, LeftFlipper) Then DoDamping = true
    End If
    'Check right flipper
    If RightFlipper.currentangle = RFEndAngle Then
		If FlipperTrigger(ball1.x, ball1.y, RightFlipper) OR FlipperTrigger(ball2.x, ball2.y, RightFlipper) Then DoDamping = true
    End If
    If DoDamping Then
		coef = FCCDamping
        ball1.velx = ball1.velx * coef: ball1.vely = ball1.vely * coef: ball1.velz = ball1.velz * coef
        ball2.velx = ball2.velx * coef: ball2.vely = ball2.vely * coef: ball2.velz = ball2.velz * coef
    End If
End Sub
	



'*****************
' Maths
'*****************

Dim PI
PI = 4 * Atn(1)

Function dSin(degrees)
	dsin = Sin(degrees * Pi / 180)
End Function

Function dCos(degrees)
	dcos = Cos(degrees * Pi / 180)
End Function

Function Atn2(dy, dx)
	If dx > 0 Then
		Atn2 = Atn(dy / dx)
	ElseIf dx < 0 Then
		If dy = 0 Then
			Atn2 = pi
		Else
			Atn2 = Sgn(dy) * (pi - Atn(Abs(dy / dx)))
		End If
	ElseIf dx = 0 Then
		If dy = 0 Then
			Atn2 = 0
		Else
			Atn2 = Sgn(dy) * pi / 2
		End If
	End If
End Function

Function max(a,b)
	If a > b Then
		max = a
	Else
		max = b
	End If
End Function

Function min(a,b)
	If a > b Then
		min = b
	Else
		min = a
	End If
End Function


'*************************************************
'  Check ball distance from Flipper for Rem
'*************************************************

Function Distance(ax,ay,bx,by)
	Distance = Sqr((ax - bx) ^ 2 + (ay - by) ^ 2)
End Function

Function DistancePL(px,py,ax,ay,bx,by) 'Distance between a point and a line where point Is px,py
	DistancePL = Abs((by - ay) * px - (bx - ax) * py + bx * ay - by * ax) / Distance(ax,ay,bx,by)
End Function

Function Radians(Degrees)
	Radians = Degrees * PI / 180
End Function

Function AnglePP(ax,ay,bx,by)
	AnglePP = Atn2((by - ay),(bx - ax)) * 180 / PI
End Function

Function DistanceFromFlipper(ballx, bally, Flipper)
	DistanceFromFlipper = DistancePL(ballx, bally, Flipper.x, Flipper.y, Cos(Radians(Flipper.currentangle + 90)) + Flipper.x, Sin(Radians(Flipper.currentangle + 90)) + Flipper.y)
End Function

Function DistanceFromFlipperAngle(ballx, bally, Flipper, Angle)
	DistanceFromFlipperAngle = DistancePL(ballx, bally, Flipper.x, Flipper.y, Cos(Radians(Angle + 90)) + Flipper.x, Sin(Radians(angle + 90)) + Flipper.y)
End Function

Function FlipperTrigger(ballx, bally, Flipper)
	Dim DiffAngle
	DiffAngle = Abs(Flipper.currentangle - AnglePP(Flipper.x, Flipper.y, ballx, bally) - 90)
	If DiffAngle > 180 Then DiffAngle = DiffAngle - 360
	
	If DistanceFromFlipper(ballx,bally,Flipper) < 48 And DiffAngle <= 90 And Distance(ballx,bally,Flipper.x,Flipper.y) < Flipper.Length Then
		FlipperTrigger = True
	Else
		FlipperTrigger = False
	End If
End Function

'*************************************************
'  End - Check ball distance from Flipper for Rem
'*************************************************

Dim LFPress, RFPress, LFCount, RFCount
Dim LFState, RFState
Dim EOST, EOSA,Frampup, FElasticity,FReturn
Dim RFEndAngle, LFEndAngle

Const FlipperCoilRampupMode = 0 '0 = fast, 1 = medium, 2 = slow (tap passes should work)

LFState = 1
RFState = 1
EOST = leftflipper.eostorque
EOSA = leftflipper.eostorqueangle
Frampup = LeftFlipper.rampup
FElasticity = LeftFlipper.elasticity
FReturn = LeftFlipper.return
'Const EOSTnew = 1.5 'EM's to late 80's - new recommendation by rothbauerw (previously 1)
Const EOSTnew = 1.2 '90's and later - new recommendation by rothbauerw (previously 0.8)
Const EOSAnew = 1
Const EOSRampup = 0
Dim SOSRampup
Select Case FlipperCoilRampupMode
	Case 0
		SOSRampup = 2.5
	Case 1
		SOSRampup = 6
	Case 2
		SOSRampup = 8.5
End Select

Const LiveCatch = 16
Const LiveElasticity = 0.45
Const SOSEM = 0.815
'   Const EOSReturn = 0.055  'EM's
'   Const EOSReturn = 0.045  'late 70's to mid 80's
Const EOSReturn = 0.035  'mid 80's to early 90's
'   Const EOSReturn = 0.025  'mid 90's and later

LFEndAngle = Leftflipper.endangle
RFEndAngle = RightFlipper.endangle

Sub FlipperActivate(Flipper, FlipperPress)
	FlipperPress = 1
	Flipper.Elasticity = FElasticity
	
	Flipper.eostorque = EOST
	Flipper.eostorqueangle = EOSA
End Sub

Sub FlipperDeactivate(Flipper, FlipperPress)
	FlipperPress = 0
	Flipper.eostorqueangle = EOSA
	Flipper.eostorque = EOST * EOSReturn / FReturn
	
	If Abs(Flipper.currentangle) <= Abs(Flipper.endangle) + 0.1 Then
		Dim b', BOT
		'		BOT = GetBalls
		
		For b = 0 To UBound(gBOT)
			If Distance(gBOT(b).x, gBOT(b).y, Flipper.x, Flipper.y) < 55 Then 'check for cradle
				If gBOT(b).vely >= - 0.4 Then gBOT(b).vely =  - 0.4
			End If
		Next
	End If
End Sub

Sub FlipperTricks (Flipper, FlipperPress, FCount, FEndAngle, FState)
	Dim Dir
	Dir = Flipper.startangle / Abs(Flipper.startangle) '-1 for Right Flipper
	
	If Abs(Flipper.currentangle) > Abs(Flipper.startangle) - 0.05 Then
		If FState <> 1 Then
			Flipper.rampup = SOSRampup
			Flipper.endangle = FEndAngle - 3 * Dir
			Flipper.Elasticity = FElasticity * SOSEM
			FCount = 0
			FState = 1
		End If
	ElseIf Abs(Flipper.currentangle) <= Abs(Flipper.endangle) And FlipperPress = 1 Then
		If FCount = 0 Then FCount = GameTime
		
		If FState <> 2 Then
			Flipper.eostorqueangle = EOSAnew
			Flipper.eostorque = EOSTnew
			Flipper.rampup = EOSRampup
			Flipper.endangle = FEndAngle
			FState = 2
		End If
	ElseIf Abs(Flipper.currentangle) > Abs(Flipper.endangle) + 0.01 And FlipperPress = 1 Then
		If FState <> 3 Then
			Flipper.eostorque = EOST
			Flipper.eostorqueangle = EOSA
			Flipper.rampup = Frampup
			Flipper.Elasticity = FElasticity
			FState = 3
		End If
	End If
End Sub

Const LiveDistanceMin = 5  'minimum distance In vp units from flipper base live catch dampening will occur
Const LiveDistanceMax = 114 'maximum distance in vp units from flipper base live catch dampening will occur (tip protection)
Const BaseDampen = 0.55

Sub CheckLiveCatch(ball, Flipper, FCount, parm) 'Experimental new live catch
    Dim Dir, LiveDist
    Dir = Flipper.startangle / Abs(Flipper.startangle)    '-1 for Right Flipper
    Dim LiveCatchBounce   'If live catch is not perfect, it won't freeze ball totally
    Dim CatchTime
    CatchTime = GameTime - FCount
    LiveDist = Abs(Flipper.x - ball.x)

    If CatchTime <= LiveCatch And parm > 3 And LiveDist > LiveDistanceMin And LiveDist < LiveDistanceMax Then
        If CatchTime <= LiveCatch * 0.5 Then   'Perfect catch only when catch time happens in the beginning of the window
            LiveCatchBounce = 0
        Else
            LiveCatchBounce = Abs((LiveCatch / 2) - CatchTime)  'Partial catch when catch happens a bit late
        End If
        
        If LiveCatchBounce = 0 And ball.velx * Dir > 0 And LiveDist > 30 Then ball.velx = 0

        If ball.velx * Dir > 0 And LiveDist < 30 Then
            ball.velx = BaseDampen * ball.velx
            ball.vely = BaseDampen * ball.vely
            ball.angmomx = BaseDampen * ball.angmomx
            ball.angmomy = BaseDampen * ball.angmomy
            ball.angmomz = BaseDampen * ball.angmomz
        Elseif LiveDist > 30 Then
            ball.vely = LiveCatchBounce * (32 / LiveCatch) ' Multiplier for inaccuracy bounce
            ball.angmomx = 0
            ball.angmomy = 0
            ball.angmomz = 0
        End If
    Else
        If Abs(Flipper.currentangle) <= Abs(Flipper.endangle) + 1 Then FlippersD.Dampenf ActiveBall, parm
    End If
End Sub

'******************************************************
' 				FLIPPER COLLIDE
'******************************************************

Sub LeftFlipper_Collide(parm)
	CheckLiveCatch Activeball, LeftFlipper, LFCount, parm
	LF.ReProcessBalls ActiveBall
	LeftFlipperCollide parm
End Sub

Sub RightFlipper_Collide(parm)
	CheckLiveCatch Activeball, RightFlipper, RFCount, parm
	RF.ReProcessBalls ActiveBall
 	RightFlipperCollide parm
End Sub

'******************************************************
'		FLIPPER CORRECTION INITIALIZATION
'******************************************************


dim LF : Set LF = New FlipperPolarity
dim RF : Set RF = New FlipperPolarity

InitPolarity

Sub InitPolarity()
	Dim x, a
	a = Array(LF, RF)
	For Each x In a
		x.AddPt "Ycoef", 0, RightFlipper.Y-65, 1 'disabled
		x.AddPt "Ycoef", 1, RightFlipper.Y-11, 1
		x.enabled = True
		x.TimeDelay = 60
		x.DebugOn=False ' prints some info in debugger

		x.AddPt "Polarity", 0, 0, 0
		x.AddPt "Polarity", 1, 0.05, - 5.5
		x.AddPt "Polarity", 2, 0.16, - 5.5
		x.AddPt "Polarity", 3, 0.20, - 0.75
		x.AddPt "Polarity", 4, 0.25, - 1.25
		x.AddPt "Polarity", 5, 0.3, - 1.75
		x.AddPt "Polarity", 6, 0.4, - 3.5
		x.AddPt "Polarity", 7, 0.5, - 5.25
		x.AddPt "Polarity", 8, 0.7, - 4.0
		x.AddPt "Polarity", 9, 0.75, - 3.5
		x.AddPt "Polarity", 10, 0.8, - 3.0
		x.AddPt "Polarity", 11, 0.85, - 2.5
		x.AddPt "Polarity", 12, 0.9, - 2.0
		x.AddPt "Polarity", 13, 0.95, - 1.5
		x.AddPt "Polarity", 14, 1, - 1.0
		x.AddPt "Polarity", 15, 1.05, -0.5
		x.AddPt "Polarity", 16, 1.1, 0
		x.AddPt "Polarity", 17, 1.3, 0

		x.AddPt "Velocity", 0, 0, 0.85
		x.AddPt "Velocity", 1, 0.23, 0.85
		x.AddPt "Velocity", 2, 0.27, 1
		x.AddPt "Velocity", 3, 0.3, 1
		x.AddPt "Velocity", 4, 0.35, 1
		x.AddPt "Velocity", 5, 0.6, 1 '0.982
		x.AddPt "Velocity", 6, 0.62, 1.0
		x.AddPt "Velocity", 7, 0.702, 0.968
		x.AddPt "Velocity", 8, 0.95,  0.968
		x.AddPt "Velocity", 9, 1.03,  0.945
		x.AddPt "Velocity", 10, 1.5,  0.945

	Next
	
	' SetObjects arguments: 1: name of object 2: flipper object: 3: Trigger object around flipper
	LF.SetObjects "LF", LeftFlipper, TriggerLF
	RF.SetObjects "RF", RightFlipper, TriggerRF
End Sub

'******************************************************
'  FLIPPER CORRECTION FUNCTIONS
'******************************************************

' modified 2023 by nFozzy
' Removed need for 'endpoint' objects
' Added 'createvents' type thing for TriggerLF / TriggerRF triggers.
' Removed AddPt function which complicated setup imo
' made DebugOn do something (prints some stuff in debugger)
'   Otherwise it should function exactly the same as before\
' modified 2024 by rothbauerw
' Added Reprocessballs for flipper collisions (LF.Reprocessballs Activeball and RF.Reprocessballs Activeball must be added to the flipper collide subs
' Improved handling to remove correction for backhand shots when the flipper is raised

Class FlipperPolarity
	Public DebugOn, Enabled
	Private FlipAt		'Timer variable (IE 'flip at 723,530ms...)
	Public TimeDelay		'delay before trigger turns off and polarity is disabled
	Private Flipper, FlipperStart, FlipperEnd, FlipperEndY, LR, PartialFlipCoef, FlipStartAngle
	Private Balls(20), balldata(20)
	Private Name
	
	Dim PolarityIn, PolarityOut
	Dim VelocityIn, VelocityOut
	Dim YcoefIn, YcoefOut
	Public Sub Class_Initialize
		ReDim PolarityIn(0)
		ReDim PolarityOut(0)
		ReDim VelocityIn(0)
		ReDim VelocityOut(0)
		ReDim YcoefIn(0)
		ReDim YcoefOut(0)
		Enabled = True
		TimeDelay = 50
		LR = 1
		Dim x
		For x = 0 To UBound(balls)
			balls(x) = Empty
			Set Balldata(x) = new SpoofBall
		Next
	End Sub
	
	Public Sub SetObjects(aName, aFlipper, aTrigger)
		
		If TypeName(aName) <> "String" Then MsgBox "FlipperPolarity: .SetObjects error: first argument must be a String (And name of Object). Found:" & TypeName(aName) End If
		If TypeName(aFlipper) <> "Flipper" Then MsgBox "FlipperPolarity: .SetObjects error: Second argument must be a flipper. Found:" & TypeName(aFlipper) End If
		If TypeName(aTrigger) <> "Trigger" Then MsgBox "FlipperPolarity: .SetObjects error: third argument must be a trigger. Found:" & TypeName(aTrigger) End If
		If aFlipper.EndAngle > aFlipper.StartAngle Then LR = -1 Else LR = 1 End If
		Name = aName
		Set Flipper = aFlipper
		FlipperStart = aFlipper.x
		FlipperEnd = Flipper.Length * Sin((Flipper.StartAngle / 57.295779513082320876798154814105)) + Flipper.X ' big floats for degree to rad conversion
		FlipperEndY = Flipper.Length * Cos(Flipper.StartAngle / 57.295779513082320876798154814105)*-1 + Flipper.Y
		
		Dim str
		str = "Sub " & aTrigger.name & "_Hit() : " & aName & ".AddBall ActiveBall : End Sub'"
		ExecuteGlobal(str)
		str = "Sub " & aTrigger.name & "_UnHit() : " & aName & ".PolarityCorrect ActiveBall : End Sub'"
		ExecuteGlobal(str)
		
	End Sub
	
	' Legacy: just no op
	Public Property Let EndPoint(aInput)
		
	End Property
	
	Public Sub AddPt(aChooseArray, aIDX, aX, aY) 'Index #, X position, (in) y Position (out)
		Select Case aChooseArray
			Case "Polarity"
				ShuffleArrays PolarityIn, PolarityOut, 1
				PolarityIn(aIDX) = aX
				PolarityOut(aIDX) = aY
				ShuffleArrays PolarityIn, PolarityOut, 0
			Case "Velocity"
				ShuffleArrays VelocityIn, VelocityOut, 1
				VelocityIn(aIDX) = aX
				VelocityOut(aIDX) = aY
				ShuffleArrays VelocityIn, VelocityOut, 0
			Case "Ycoef"
				ShuffleArrays YcoefIn, YcoefOut, 1
				YcoefIn(aIDX) = aX
				YcoefOut(aIDX) = aY
				ShuffleArrays YcoefIn, YcoefOut, 0
		End Select
	End Sub
	
	Public Sub AddBall(aBall)
		Dim x
		For x = 0 To UBound(balls)
			If IsEmpty(balls(x)) Then
				Set balls(x) = aBall
				Exit Sub
			End If
		Next
	End Sub
	
	Private Sub RemoveBall(aBall)
		Dim x
		For x = 0 To UBound(balls)
			If TypeName(balls(x) ) = "IBall" Then
				If aBall.ID = Balls(x).ID Then
					balls(x) = Empty
					Balldata(x).Reset
				End If
			End If
		Next
	End Sub
	
	Public Sub Fire()
		Flipper.RotateToEnd
		processballs
	End Sub
	
	Public Property Get Pos 'returns % position a ball. For debug stuff.
		Dim x
		For x = 0 To UBound(balls)
			If Not IsEmpty(balls(x)) Then
				pos = pSlope(Balls(x).x, FlipperStart, 0, FlipperEnd, 1)
			End If
		Next
	End Property
	
	Public Sub ProcessBalls() 'save data of balls in flipper range
		FlipAt = GameTime
		Dim x
		For x = 0 To UBound(balls)
			If Not IsEmpty(balls(x)) Then
				balldata(x).Data = balls(x)
			End If
		Next
		FlipStartAngle = Flipper.currentangle
		PartialFlipCoef = ((Flipper.StartAngle - Flipper.CurrentAngle) / (Flipper.StartAngle - Flipper.EndAngle))
		PartialFlipCoef = abs(PartialFlipCoef-1)
	End Sub

	Public Sub ReProcessBalls(aBall) 'save data of balls in flipper range
		If FlipperOn() Then
			Dim x
			For x = 0 To UBound(balls)
				If Not IsEmpty(balls(x)) Then
					if balls(x).ID = aBall.ID Then
						If isempty(balldata(x).ID) Then
							balldata(x).Data = balls(x)
						End If
					End If
				End If
			Next
		End If
	End Sub

	'Timer shutoff for polaritycorrect
	Private Function FlipperOn()
		If GameTime < FlipAt+TimeDelay Then
			FlipperOn = True
		End If
	End Function
	
	Public Sub PolarityCorrect(aBall)
		If FlipperOn() Then
			Dim tmp, BallPos, x, IDX, Ycoef, BalltoFlip, BalltoBase, NoCorrection, checkHit
			Ycoef = 1
			
			'y safety Exit
			If aBall.VelY > -8 Then 'ball going down
				RemoveBall aBall
				Exit Sub
			End If
			
			'Find balldata. BallPos = % on Flipper
			For x = 0 To UBound(Balls)
				If aBall.id = BallData(x).id And Not IsEmpty(BallData(x).id) Then
					idx = x
					BallPos = PSlope(BallData(x).x, FlipperStart, 0, FlipperEnd, 1)
					BalltoFlip = DistanceFromFlipperAngle(BallData(x).x, BallData(x).y, Flipper, FlipStartAngle)
					If ballpos > 0.65 Then  Ycoef = LinearEnvelope(BallData(x).Y, YcoefIn, YcoefOut)								'find safety coefficient 'ycoef' data
				End If
			Next
			
			If BallPos = 0 Then 'no ball data meaning the ball is entering and exiting pretty close to the same position, use current values.
				BallPos = PSlope(aBall.x, FlipperStart, 0, FlipperEnd, 1)
				If ballpos > 0.65 Then  Ycoef = LinearEnvelope(aBall.Y, YcoefIn, YcoefOut)												'find safety coefficient 'ycoef' data
				NoCorrection = 1
			Else
				checkHit = 50 + (20 * BallPos) 

				If BalltoFlip > checkHit or (PartialFlipCoef < 0.5 and BallPos > 0.22) Then
					NoCorrection = 1
				Else
					NoCorrection = 0
				End If
			End If
			
			'Velocity correction
			If Not IsEmpty(VelocityIn(0) ) Then
				Dim VelCoef
				VelCoef = LinearEnvelope(BallPos, VelocityIn, VelocityOut)
				
				'If partialflipcoef < 1 Then VelCoef = PSlope(partialflipcoef, 0, 1, 1, VelCoef)
				
				If Enabled Then aBall.Velx = aBall.Velx*VelCoef
				If Enabled Then aBall.Vely = aBall.Vely*VelCoef
			End If
			
			'Polarity Correction (optional now)
			If Not IsEmpty(PolarityIn(0) ) Then
				Dim AddX
				AddX = LinearEnvelope(BallPos, PolarityIn, PolarityOut) * LR
				
				If Enabled and NoCorrection = 0 Then aBall.VelX = aBall.VelX + 1 * (AddX*ycoef*PartialFlipcoef*VelCoef)
			End If
			If DebugOn Then debug.print "PolarityCorrect" & " " & Name & " @ " & GameTime & " " & Round(BallPos*100) & "%" & " AddX:" & Round(AddX,2) & " Vel%:" & Round(VelCoef*100)
		End If
		RemoveBall aBall
	End Sub
End Class

'******************************************************
'  FLIPPER POLARITY AND RUBBER DAMPENER SUPPORTING FUNCTIONS
'******************************************************

' Used for flipper correction and rubber dampeners
Sub ShuffleArray(ByRef aArray, byVal offset) 'shuffle 1d array
	Dim x, aCount
	aCount = 0
	ReDim a(UBound(aArray) )
	For x = 0 To UBound(aArray)		'Shuffle objects in a temp array
		If Not IsEmpty(aArray(x) ) Then
			If IsObject(aArray(x)) Then
				Set a(aCount) = aArray(x)
			Else
				a(aCount) = aArray(x)
			End If
			aCount = aCount + 1
		End If
	Next
	If offset < 0 Then offset = 0
	ReDim aArray(aCount-1+offset)		'Resize original array
	For x = 0 To aCount-1				'set objects back into original array
		If IsObject(a(x)) Then
			Set aArray(x) = a(x)
		Else
			aArray(x) = a(x)
		End If
	Next
End Sub

' Used for flipper correction and rubber dampeners
Sub ShuffleArrays(aArray1, aArray2, offset)
	ShuffleArray aArray1, offset
	ShuffleArray aArray2, offset
End Sub

' Used for flipper correction, rubber dampeners, and drop targets
Function BallSpeed(ball) 'Calculates the ball speed
	BallSpeed = Sqr(ball.VelX^2 + ball.VelY^2 + ball.VelZ^2)
End Function

' Used for flipper correction and rubber dampeners
Function PSlope(Input, X1, Y1, X2, Y2)		'Set up line via two points, no clamping. Input X, output Y
	Dim x, y, b, m
	x = input
	m = (Y2 - Y1) / (X2 - X1)
	b = Y2 - m*X2
	Y = M*x+b
	PSlope = Y
End Function

' Used for flipper correction
Class spoofball
	Public X, Y, Z, VelX, VelY, VelZ, ID, Mass, Radius
	Public Property Let Data(aBall)
		With aBall
			x = .x
			y = .y
			z = .z
			velx = .velx
			vely = .vely
			velz = .velz
			id = .ID
			mass = .mass
			radius = .radius
		End With
	End Property
	Public Sub Reset()
		x = Empty
		y = Empty
		z = Empty
		velx = Empty
		vely = Empty
		velz = Empty
		id = Empty
		mass = Empty
		radius = Empty
	End Sub
End Class

' Used for flipper correction and rubber dampeners
Function LinearEnvelope(xInput, xKeyFrame, yLvl)
	Dim y 'Y output
	Dim L 'Line
	'find active line
	Dim ii
	For ii = 1 To UBound(xKeyFrame)
		If xInput <= xKeyFrame(ii) Then
			L = ii
			Exit For
		End If
	Next
	If xInput > xKeyFrame(UBound(xKeyFrame) ) Then L = UBound(xKeyFrame)		'catch line overrun
	Y = pSlope(xInput, xKeyFrame(L-1), yLvl(L-1), xKeyFrame(L), yLvl(L) )
	
	If xInput <= xKeyFrame(LBound(xKeyFrame) ) Then Y = yLvl(LBound(xKeyFrame) )		 'Clamp lower
	If xInput >= xKeyFrame(UBound(xKeyFrame) ) Then Y = yLvl(UBound(xKeyFrame) )		'Clamp upper
	
	LinearEnvelope = Y
End Function

'******************************************************
'****  PHYSICS DAMPENERS
'******************************************************
' These are data mined bounce curves,
' dialed in with the in-game elasticity as much as possible to prevent angle / spin issues.
' Requires tracking ballspeed to calculate COR

Sub dPosts_Hit(idx)
	RubbersD.dampen ActiveBall
	TargetBouncer ActiveBall, 1
End Sub

Sub dSleeves_Hit(idx)
	SleevesD.Dampen ActiveBall
	TargetBouncer ActiveBall, 0.7
End Sub

Dim RubbersD				'frubber
Set RubbersD = New Dampener
RubbersD.name = "Rubbers"
RubbersD.debugOn = False	'shows info in textbox "TBPout"
RubbersD.Print = False	  'debug, reports In debugger (In vel, out cor); cor bounce curve (linear)

'for best results, try to match in-game velocity as closely as possible to the desired curve
'   RubbersD.addpoint 0, 0, 0.935   'point# (keep sequential), ballspeed, CoR (elasticity)
RubbersD.addpoint 0, 0, 1.1		 'point# (keep sequential), ballspeed, CoR (elasticity)
RubbersD.addpoint 1, 3.77, 0.97
RubbersD.addpoint 2, 5.76, 0.967	'dont take this as gospel. if you can data mine rubber elasticitiy, please help!
RubbersD.addpoint 3, 15.84, 0.874
RubbersD.addpoint 4, 56, 0.64	   'there's clamping so interpolate up to 56 at least

Dim SleevesD	'this is just rubber but cut down to 85%...
Set SleevesD = New Dampener
SleevesD.name = "Sleeves"
SleevesD.debugOn = False	'shows info in textbox "TBPout"
SleevesD.Print = False	  'debug, reports In debugger (In vel, out cor)
SleevesD.CopyCoef RubbersD, 0.85

'######################### Add new FlippersD Profile
'######################### Adjust these values to increase or lessen the elasticity

Dim FlippersD
Set FlippersD = New Dampener
FlippersD.name = "Flippers"
FlippersD.debugOn = False
FlippersD.Print = False
FlippersD.addpoint 0, 0, 1.1
FlippersD.addpoint 1, 3.77, 0.99
FlippersD.addpoint 2, 6, 0.99

Class Dampener
	Public Print, debugOn   'tbpOut.text
	Public name, Threshold  'Minimum threshold. Useful for Flippers, which don't have a hit threshold.
	Public ModIn, ModOut
	Private Sub Class_Initialize
		ReDim ModIn(0)
		ReDim Modout(0)
	End Sub
	
	Public Sub AddPoint(aIdx, aX, aY)
		ShuffleArrays ModIn, ModOut, 1
		ModIn(aIDX) = aX
		ModOut(aIDX) = aY
		ShuffleArrays ModIn, ModOut, 0
		If GameTime > 100 Then Report
	End Sub
	
	Public Sub Dampen(aBall)
		If threshold Then
			If BallSpeed(aBall) < threshold Then Exit Sub
		End If
		Dim RealCOR, DesiredCOR, str, coef
		DesiredCor = LinearEnvelope(cor.ballvel(aBall.id), ModIn, ModOut )
		RealCOR = BallSpeed(aBall) / (cor.ballvel(aBall.id) + 0.0001)
		coef = desiredcor / realcor
		If debugOn Then str = name & " In vel:" & Round(cor.ballvel(aBall.id),2 ) & vbNewLine & "desired cor: " & Round(desiredcor,4) & vbNewLine & _
		"actual cor: " & Round(realCOR,4) & vbNewLine & "ballspeed coef: " & Round(coef, 3) & vbNewLine
		If Print Then Debug.print Round(cor.ballvel(aBall.id),2) & ", " & Round(desiredcor,3)
		
		aBall.velx = aBall.velx * coef
		aBall.vely = aBall.vely * coef
		If debugOn Then TBPout.text = str
	End Sub
	
	Public Sub Dampenf(aBall, parm) 'Rubberizer is handle here
		Dim RealCOR, DesiredCOR, str, coef
		DesiredCor = LinearEnvelope(cor.ballvel(aBall.id), ModIn, ModOut )
		RealCOR = BallSpeed(aBall) / (cor.ballvel(aBall.id) + 0.0001)
		coef = desiredcor / realcor
		If Abs(aball.velx) < 2 And aball.vely < 0 And aball.vely >  - 3.75 Then
			aBall.velx = aBall.velx * coef
			aBall.vely = aBall.vely * coef
		End If
	End Sub
	
	Public Sub CopyCoef(aObj, aCoef) 'alternative addpoints, copy with coef
		Dim x
		For x = 0 To UBound(aObj.ModIn)
			addpoint x, aObj.ModIn(x), aObj.ModOut(x) * aCoef
		Next
	End Sub
	
	Public Sub Report() 'debug, reports all coords in tbPL.text
		If Not debugOn Then Exit Sub
		Dim a1, a2
		a1 = ModIn
		a2 = ModOut
		Dim str, x
		For x = 0 To UBound(a1)
			str = str & x & ": " & Round(a1(x),4) & ", " & Round(a2(x),4) & vbNewLine
		Next
		TBPout.text = str
	End Sub
End Class

'******************************************************
'  TRACK ALL BALL VELOCITIES
'  FOR RUBBER DAMPENER AND DROP TARGETS
'******************************************************

Dim cor
Set cor = New CoRTracker

Class CoRTracker
	Public ballvel, ballvelx, ballvely
	
	Private Sub Class_Initialize
		ReDim ballvel(0)
		ReDim ballvelx(0)
		ReDim ballvely(0)
	End Sub
	
	Public Sub Update()	'tracks in-ball-velocity
		Dim str, b, AllBalls, highestID
		allBalls = GetBalls
		
		For Each b In allballs
			If b.id >= HighestID Then highestID = b.id
		Next
		
		If UBound(ballvel) < highestID Then ReDim ballvel(highestID)	'set bounds
		If UBound(ballvelx) < highestID Then ReDim ballvelx(highestID)	'set bounds
		If UBound(ballvely) < highestID Then ReDim ballvely(highestID)	'set bounds
		
		For Each b In allballs
			ballvel(b.id) = BallSpeed(b)
			ballvelx(b.id) = b.velx
			ballvely(b.id) = b.vely
		Next
	End Sub
End Class

'******************************************************
'****  END PHYSICS DAMPENERS
'******************************************************



'******************************************************
'  SLINGSHOT CORRECTION FUNCTIONS
'******************************************************
' To add these slingshot corrections:
' 	- On the table, add the endpoint primitives that define the two ends of the Slingshot
'	- Initialize the SlingshotCorrection objects in InitSlingCorrection
' 	- Call the .VelocityCorrect methods from the respective _Slingshot event sub


dim LS : Set LS = New SlingshotCorrection
dim RS : Set RS = New SlingshotCorrection

InitSlingCorrection

Sub InitSlingCorrection

	LS.Object = sw26
	LS.EndPoint1 = EndPoint1LS
	LS.EndPoint2 = EndPoint2LS

	RS.Object = sw27
	RS.EndPoint1 = EndPoint1RS
	RS.EndPoint2 = EndPoint2RS

	'Slingshot angle corrections (pt, BallPos in %, Angle in deg)
	' These values are best guesses. Retune them if needed based on specific table research.
	AddSlingsPt 0, 0.00,	-4
	AddSlingsPt 1, 0.45,	-7
	AddSlingsPt 2, 0.48,	0
	AddSlingsPt 3, 0.52,	0
	AddSlingsPt 4, 0.55,	7
	AddSlingsPt 5, 1.00,	4

End Sub


Sub AddSlingsPt(idx, aX, aY)        'debugger wrapper for adjusting flipper script in-game
	dim a : a = Array(LS, RS)
	dim x : for each x in a
		x.addpoint idx, aX, aY
	Next
End Sub

Class SlingshotCorrection
	Public DebugOn, Enabled
	private Slingshot, SlingX1, SlingX2, SlingY1, SlingY2

	Public ModIn, ModOut
	Private Sub Class_Initialize : redim ModIn(0) : redim Modout(0): Enabled = True : End Sub 

	Public Property let Object(aInput) : Set Slingshot = aInput : End Property
	Public Property Let EndPoint1(aInput) : SlingX1 = aInput.x: SlingY1 = aInput.y: End Property
	Public Property Let EndPoint2(aInput) : SlingX2 = aInput.x: SlingY2 = aInput.y: End Property

	Public Sub AddPoint(aIdx, aX, aY) 
		ShuffleArrays ModIn, ModOut, 1 : ModIn(aIDX) = aX : ModOut(aIDX) = aY : ShuffleArrays ModIn, ModOut, 0
		If gametime > 100 then Report
	End Sub

	Public Sub Report()         'debug, reports all coords in tbPL.text
		If not debugOn then exit sub
		dim a1, a2 : a1 = ModIn : a2 = ModOut
		dim str, x : for x = 0 to uBound(a1) : str = str & x & ": " & round(a1(x),4) & ", " & round(a2(x),4) & vbnewline : next
		TBPout.text = str
	End Sub


	Public Sub VelocityCorrect(aBall)
		dim BallPos, XL, XR, YL, YR
		
		'Assign right and left end points
		If SlingX1 < SlingX2 Then 
			XL = SlingX1 : YL = SlingY1 : XR = SlingX2 : YR = SlingY2
		Else
			XL = SlingX2 : YL = SlingY2 : XR = SlingX1 : YR = SlingY1
		End If

		'Find BallPos = % on Slingshot
		If Not IsEmpty(aBall.id) Then 
			If ABS(XR-XL) > ABS(YR-YL) Then 
				BallPos = PSlope(aBall.x, XL, 0, XR, 1)
			Else
				BallPos = PSlope(aBall.y, YL, 0, YR, 1)
			End If
			If BallPos < 0 Then BallPos = 0
			If BallPos > 1 Then BallPos = 1
		End If

		'Velocity angle correction
		If not IsEmpty(ModIn(0) ) then
			Dim Angle, RotVxVy
			Angle = LinearEnvelope(BallPos, ModIn, ModOut)
			'debug.print " BallPos=" & BallPos &" Angle=" & Angle 
			'debug.print " BEFORE: aBall.Velx=" & aBall.Velx &" aBall.Vely" & aBall.Vely 
			RotVxVy = RotPoint(aBall.Velx,aBall.Vely,Angle)
			If Enabled then aBall.Velx = RotVxVy(0)
			If Enabled then aBall.Vely = RotVxVy(1)
			'debug.print " AFTER: aBall.Velx=" & aBall.Velx &" aBall.Vely" & aBall.Vely 
			'debug.print " " 
		End If
	End Sub

End Class




'******************************************************
' VPW TARGET BOUNCER (for targets and posts by Iaakki, Wrd1972, Apophis)
'******************************************************

Const TargetBouncerEnabled = 0	  '0 = normal standup targets, 1 = bouncy targets
Const TargetBouncerFactor = 1	 'Level of bounces. Recommmended value of 0.7

Sub TargetBouncer(aBall,defvalue)
	Dim zMultiplier, vel, vratio
	If TargetBouncerEnabled = 1 And aball.z < 30 Then
		'   debug.print "velx: " & aball.velx & " vely: " & aball.vely & " velz: " & aball.velz
		vel = BallSpeed(aBall)
		If aBall.velx = 0 Then vratio = 1 Else vratio = aBall.vely / aBall.velx
		Select Case Int(Rnd * 6) + 1
			Case 1
				zMultiplier = 0.2 * defvalue
			Case 2
				zMultiplier = 0.25 * defvalue
			Case 3
				zMultiplier = 0.3 * defvalue
			Case 4
				zMultiplier = 0.4 * defvalue
			Case 5
				zMultiplier = 0.45 * defvalue
			Case 6
				zMultiplier = 0.5 * defvalue
		End Select
		aBall.velz = Abs(vel * zMultiplier * TargetBouncerFactor)
		aBall.velx = Sgn(aBall.velx) * Sqr(Abs((vel ^ 2 - aBall.velz ^ 2) / (1 + vratio ^ 2)))
		aBall.vely = aBall.velx * vratio
		'   debug.print "---> velx: " & aball.velx & " vely: " & aball.vely & " velz: " & aball.velz
		'   debug.print "conservation check: " & BallSpeed(aBall)/vel
	End If
End Sub


'******************************************************
'****  END TARGET BOUNCER
'******************************************************

' *********************************************************************
' 						Real Time Updates
' *********************************************************************

Sub RDampen_timer
	Cor.Update			'Dampener
End Sub


' ***** Lights Flashers and Scoring Display
Sub FrameTimer_Timer()
	dim x, chglamp
	chglamp = Controller.ChangedLamps
	If Not IsEmpty(chglamp) Then
	For x = 0 To UBound(chglamp) 			'nmbr = chglamp(x, 0), state = chglamp(x, 1)
			Lampz.state(chglamp(x, 0)) = chglamp(x, 1) / 255.0
		next
	End If

'	DisplayTimer

	If DynamicBallShadowsOn Or AmbientBallShadowOn Then DynamicBSUpdate 'update ball shadows

	SoundUpdates
	DoDTAnim			'Drop Target Animations
	DoSTAnim			'Stand Up Target Animations
	LeftFlipperP.ObjRotZ = LeftFlipper.currentangle
	RightFlipperP.ObjRotZ = RightFlipper.currentangle
	FlipperLSh.RotZ = LeftFlipper.currentangle
	FlipperRSh.RotZ = RightFlipper.currentangle
	sw13p.rotX = -sw13.currentangle
	sw34p.rotX = -sw34.currentangle
	sw35p.rotX = sw35.currentangle
	sw39p.rotX = -sw39.currentangle
	sw41p.rotY = sw41.currentangle
	sw42p.rotX = sw42.currentangle
	Gate1P.rotY = -Gate1.currentangle
	Gate2P.rotY = -Gate2.currentangle
	Gate3P.rotY = Gate3.currentangle
	LGateP.rotY = Lgate.currentangle
	RGateP.rotY = Rgate.currentangle *2/3

	'Check for ball under Ramp
	Dim s: For s = 0 to UBound(gBOT)
		if InRect(gBOT(s).x,gBOT(s).y,30,160,100,160,100,400,30,400) and gBOT(s).z<40 Then gBOT(s).z = -500
	Next
End Sub



'******************************************************
'      		Rolling Sounds & Ball Shadows
'******************************************************
Const fakeballs = 0					' number of balls created on table start (rolling sound and ballshadow will be skipped)
Const tnob = 4' total number of balls
Const lob = 0
ReDim rolling(tnob)
InitRolling

Dim DropCount
ReDim DropCount(tnob)

Sub InitRolling
	Dim i
	For i = 0 to tnob
		rolling(i) = False
	Next
End Sub

Sub SoundUpdates
	Dim b

	' stop the sound of deleted balls
	For b = UBound(gBOT) + 1 to tnob
		If AmbientBallShadowOn = 0 Then BallShadowA(b).visible = 0
		rolling(b) = False
		StopSound("BallRoll_" & b)
	Next

	' exit the sub if no balls on the table
	If UBound(gBOT) = -1 Then Exit Sub

	' play the rolling sound for each ball

	For b = 0 to UBound(gBOT)
		If BallVel(gBOT(b)) > 1 AND gBOT(b).z < 30 Then
			rolling(b) = True
			PlaySound ("BallRoll_" & b), -1, VolPlayfieldRoll(gBOT(b)) * 1.1 * VolumeDial, AudioPan(gBOT(b)), 0, PitchPlayfieldRoll(gBOT(b)), 1, 0, AudioFade(gBOT(b))

		Else
			If rolling(b) = True Then
				StopSound("BallRoll_" & b)
				rolling(b) = False
			End If
		End If

		'***Ball Drop Sounds***
		If gBOT(b).VelZ < -1 and gBOT(b).z < 55 and gBOT(b).z > 27 Then 'height adjust for ball drop sounds
			If DropCount(b) >= 5 Then
				DropCount(b) = 0
				If gBOT(b).velz > -7 Then
					RandomSoundBallBouncePlayfieldSoft gBOT(b)
				Else
					RandomSoundBallBouncePlayfieldHard gBOT(b)
				End If				
			End If
		End If
		If DropCount(b) < 5 Then
			DropCount(b) = DropCount(b) + 1
		End If

		' "Static" Ball Shadows
		If AmbientBallShadowOn = 0 Then
			If gBOT(b).Z > 30 Then
				BallShadowA(b).height=gBOT(b).z - BallSize/4		'This is technically 1/4 of the ball "above" the ramp, but it keeps it from clipping
			Else
				BallShadowA(b).height=gBOT(b).z - BallSize/2 + 5
			End If
			BallShadowA(b).Y = gBOT(b).Y + Ballsize/5 + fovY
			BallShadowA(b).X = gBOT(b).X
			BallShadowA(b).visible = 1
		End If
	Next
End Sub

'***************************************************************
'****  VPW DYNAMIC BALL SHADOWS by Iakki, Apophis, and Wylte
'***************************************************************

'****** INSTRUCTIONS please read ******

'****** Part A:  Table Elements ******
'
' Import the "bsrtx7" and "ballshadow" images
' Import the shadow materials file (3 sets included) (you can also export the 3 sets from this table to create the same file)
' Copy in the BallShadowA flasher set and the sets of primitives named BallShadow#, RtxBallShadow#, and RtxBall2Shadow#
'	* Count from 0 up, with at least as many objects each as there can be balls, including locked balls.  You'll get an "eval" warning if tnob is higher
'	* Warning:  If merging with another system (JP's ballrolling), you may need to check tnob math and add an extra BallShadowA# flasher (out of range error)
' Ensure you have a timer with a -1 interval that is always running
' Set plastic ramps DB to *less* than the ambient shadows (-10000) if you want to see the pf shadow through the ramp

' Create a collection called DynamicSources that includes all light sources you want to cast ball shadows
' It's recommended that you be selective in which lights go in this collection, as there are limitations:
' 1. The shadows can "pass through" solid objects and other light sources, so be mindful of where the lights would actually able to cast shadows
' 2. If there are more than two equidistant sources, the shadows can suddenly switch on and off, so places like top and bottom lanes need attention
' 3. At this time the shadows get the light on/off from tracking gilvl, so if you have lights you want shadows for that are on at different times you will need to either:
'	a) remove this restriction (shadows think lights are always On)
'	b) come up with a custom solution (see TZ example in script)
' After confirming the shadows work in general, use ball control to move around and look for any weird behavior

'****** End Part A:  Table Elements ******


'****** Part B:  Code and Functions ******

' *** Timer sub
' The "DynamicBSUpdate" sub should be called by a timer with an interval of -1 (framerate)
' Example timer sub:

'Sub FrameTimer_Timer()
'	If DynamicBallShadowsOn Or AmbientBallShadowOn Then DynamicBSUpdate 'update ball shadows
'End Sub

' *** These are usually defined elsewhere (ballrolling), but activate here if necessary
'Const tnob = 10 ' total number of balls
'Const lob = 0	'locked balls on start; might need some fiddling depending on how your locked balls are done
'Dim tablewidth: tablewidth = Table1.width
'Dim tableheight: tableheight = Table1.height

' *** User Options - Uncomment here or move to top for easy access by players
'----- Shadow Options -----
'Const DynamicBallShadowsOn = 1		'0 = no dynamic ball shadow ("triangles" near slings and such), 1 = enable dynamic ball shadow
'Const AmbientBallShadowOn = 1		'0 = Static shadow under ball ("flasher" image, like JP's)
'									'1 = Moving ball shadow ("primitive" object, like ninuzzu's) - This is the only one that shows up on the pf when in ramps and fades when close to lights!
'									'2 = flasher image shadow, but it moves like ninuzzu's

' *** This segment goes within the RollingUpdate sub, so that if Ambient...=0 and Dynamic...=0 the entire DynamicBSUpdate sub can be skipped for max performance
' *** Change gBOT to BOT if using existing getballs code
' *** Includes lines commonly found there, for reference:
'	' stop the sound of deleted balls
'	For b = UBound(gBOT) + 1 to tnob
'		If AmbientBallShadowOn = 0 Then BallShadowA(b).visible = 0
'		...rolling(b) = False
'		...StopSound("BallRoll_" & b)
'	Next
'
' ...rolling and drop sounds...

'		If DropCount(b) < 5 Then
'			DropCount(b) = DropCount(b) + 1
'		End If
'
'		' "Static" Ball Shadows
'		If AmbientBallShadowOn = 0 Then
'			If gBOT(b).Z > 30 Then
'				BallShadowA(b).height=gBOT(b).z - BallSize/4		'This is technically 1/4 of the ball "above" the ramp, but it keeps it from clipping the ramp
'			Else
'				BallShadowA(b).height=gBOT(b).z - BallSize/2 + 5
'			End If
'			BallShadowA(b).Y = gBOT(b).Y + Ballsize/5 + offsetY
'			BallShadowA(b).X = gBOT(b).X + offsetX
'			BallShadowA(b).visible = 1
'		End If

' *** Required Functions, enable these if they are not already present elswhere in your table
'Function max(a,b)
'	if a > b then 
'		max = a
'	Else
'		max = b
'	end if
'end Function

'Function Distance(ax,ay,bx,by)
'	Distance = SQR((ax - bx)^2 + (ay - by)^2)
'End Function

'Dim PI: PI = 4*Atn(1)

'Function Atn2(dy, dx)
'	If dx > 0 Then
'		Atn2 = Atn(dy / dx)
'	ElseIf dx < 0 Then
'		If dy = 0 Then 
'			Atn2 = pi
'		Else
'			Atn2 = Sgn(dy) * (pi - Atn(Abs(dy / dx)))
'		end if
'	ElseIf dx = 0 Then
'		if dy = 0 Then
'			Atn2 = 0
'		else
'			Atn2 = Sgn(dy) * pi / 2
'		end if
'	End If
'End Function

'Function AnglePP(ax,ay,bx,by)
'	AnglePP = Atn2((by - ay),(bx - ax))*180/PI
'End Function

'****** End Part B:  Code and Functions ******


'****** Part C:  The Magic ******

' *** These define the appearance of shadows in your table	***

'Ambient (Room light source)
Const AmbientBSFactor 		= 0.9	'0 to 1, higher is darker
Const AmbientMovement		= 2		'1 to 4, higher means more movement as the ball moves left and right
Const offsetX				= 0		'Offset x position under ball	(These are if you want to change where the "room" light is for calculating the shadow position,)
Const offsetY				= 0		'Offset y position under ball	 (for example 5,5 if the light is in the back left corner)
'Dynamic (Table light sources)
Const DynamicBSFactor 		= 0.99	'0 to 1, higher is darker
Const Wideness				= 20	'Sets how wide the dynamic ball shadows can get (20 +5 thinness is technically most accurate for lights at z ~25 hitting a 50 unit ball)
Const Thinness				= 5		'Sets minimum as ball moves away from source

' ***														***

' *** Trim or extend these to *match* the number of balls/primitives/flashers on the table!
dim objrtx1(5), objrtx2(5)
dim objBallShadow(5)
Dim BallShadowA
BallShadowA = Array (BallShadowA0,BallShadowA1,BallShadowA2,BallShadowA3,BallShadowA4)
Dim DSSources(30), numberofsources', DSGISide(30) 'Adapted for TZ with GI left / GI right

'Initialization
DynamicBSInit

sub DynamicBSInit()
	Dim iii, source

	for iii = 0 to tnob - 1								'Prepares the shadow objects before play begins
		Set objrtx1(iii) = Eval("RtxBallShadow" & iii)
		objrtx1(iii).material = "RtxBallShadow" & iii
		objrtx1(iii).z = 1 + iii/1000 + 0.01			'Separate z for layering without clipping
		objrtx1(iii).visible = 0

		Set objrtx2(iii) = Eval("RtxBall2Shadow" & iii)
		objrtx2(iii).material = "RtxBallShadow2_" & iii
		objrtx2(iii).z = 1 + iii/1000 + 0.02
		objrtx2(iii).visible = 0

		Set objBallShadow(iii) = Eval("BallShadow" & iii)
		objBallShadow(iii).material = "BallShadow" & iii
		UpdateMaterial objBallShadow(iii).material,1,0,0,0,0,0,AmbientBSFactor,RGB(0,0,0),0,0,False,True,0,0,0,0
		objBallShadow(iii).Z = 1 + iii/1000 + 0.04
		objBallShadow(iii).visible = 0

		BallShadowA(iii).Opacity = 100*AmbientBSFactor
		BallShadowA(iii).visible = 0
	Next

	iii = 0

	For Each Source in DynamicSources
		DSSources(iii) = Array(Source.x, Source.y)
'		If Instr(Source.name , "Left") > 0 Then DSGISide(iii) = 0 Else DSGISide(iii) = 1	'Adapted for TZ with GI left / GI right
		iii = iii + 1
	Next
	numberofsources = iii
end sub

Sub DynamicBSUpdate
	Dim falloff: falloff = 150 'Max distance to light sources, can be changed dynamically if you have a reason
	Dim ShadowOpacity1, ShadowOpacity2 
	Dim s, LSd, iii
	Dim dist1, dist2, src1, src2
'	Dim gBOT: gBOT=getballs	'Uncomment if you're deleting balls - Don't do it! #SaveTheBalls

	'Hide shadow of deleted balls
	For s = UBound(gBOT) + 1 to tnob - 1
		objrtx1(s).visible = 0
		objrtx2(s).visible = 0
		objBallShadow(s).visible = 0
		BallShadowA(s).visible = 0
	Next

	If UBound(gBOT) < lob Then Exit Sub		'No balls in play, exit

'The Magic happens now
	For s = lob to UBound(gBOT)

' *** Normal "ambient light" ball shadow
	'Layered from top to bottom. If you had an upper pf at for example 80 units and ramps even above that, your segments would be z>110; z<=110 And z>100; z<=100 And z>30; z<=30 And z>20; Else invisible

		If AmbientBallShadowOn = 1 Then			'Primitive shadow on playfield, flasher shadow in ramps
			If gBOT(s).Z > 30 Then							'The flasher follows the ball up ramps while the primitive is on the pf
				If gBOT(s).X < tablewidth/2 Then
					objBallShadow(s).X = ((gBOT(s).X) - (Ballsize/10) + ((gBOT(s).X - (tablewidth/2))/(Ballsize/AmbientMovement))) + offsetX + 5
				Else
					objBallShadow(s).X = ((gBOT(s).X) + (Ballsize/10) + ((gBOT(s).X - (tablewidth/2))/(Ballsize/AmbientMovement))) + offsetX - 5
				End If
				objBallShadow(s).Y = gBOT(s).Y + BallSize/10 + offsetY
				objBallShadow(s).visible = 1

				BallShadowA(s).X = gBOT(s).X + offsetX
				BallShadowA(s).Y = gBOT(s).Y + BallSize/5
				BallShadowA(s).height=gBOT(s).z - BallSize/4		'This is technically 1/4 of the ball "above" the ramp, but it keeps it from clipping the ramp
				BallShadowA(s).visible = 1
			Elseif gBOT(s).Z <= 30 And gBOT(s).Z > 20 Then	'On pf, primitive only
				objBallShadow(s).visible = 1
				If gBOT(s).X < tablewidth/2 Then
					objBallShadow(s).X = ((gBOT(s).X) - (Ballsize/10) + ((gBOT(s).X - (tablewidth/2))/(Ballsize/AmbientMovement))) + offsetX + 5
				Else
					objBallShadow(s).X = ((gBOT(s).X) + (Ballsize/10) + ((gBOT(s).X - (tablewidth/2))/(Ballsize/AmbientMovement))) + offsetX - 5
				End If
				objBallShadow(s).Y = gBOT(s).Y + offsetY
'				objBallShadow(s).Z = gBOT(s).Z + s/1000 + 0.04		'Uncomment (and adjust If/Elseif height logic) if you want the primitive shadow on an upper/split pf
				BallShadowA(s).visible = 0
			Else											'Under pf, no shadows
				objBallShadow(s).visible = 0
				BallShadowA(s).visible = 0
			end if

		Elseif AmbientBallShadowOn = 2 Then		'Flasher shadow everywhere
			If gBOT(s).Z > 30 Then							'In a ramp
				BallShadowA(s).X = gBOT(s).X + offsetX
				BallShadowA(s).Y = gBOT(s).Y + BallSize/5
				BallShadowA(s).height=gBOT(s).z - BallSize/4		'This is technically 1/4 of the ball "above" the ramp, but it keeps it from clipping the ramp
				BallShadowA(s).visible = 1
			Elseif gBOT(s).Z <= 30 And gBOT(s).Z > 20 Then	'On pf
				BallShadowA(s).visible = 1
				If gBOT(s).X < tablewidth/2 Then
					BallShadowA(s).X = ((gBOT(s).X) - (Ballsize/10) + ((gBOT(s).X - (tablewidth/2))/(Ballsize/AmbientMovement))) + offsetX + 5
				Else
					BallShadowA(s).X = ((gBOT(s).X) + (Ballsize/10) + ((gBOT(s).X - (tablewidth/2))/(Ballsize/AmbientMovement))) + offsetX - 5
				End If
				BallShadowA(s).Y = gBOT(s).Y + Ballsize/10 + offsetY
				BallShadowA(s).height=gBOT(s).z - BallSize/2 + 5
			Else											'Under pf
				BallShadowA(s).visible = 0
			End If
		End If

' *** Dynamic shadows
		If DynamicBallShadowsOn Then
			If gBOT(s).Z < 30 And gBOT(s).X < 850 Then	'Parameters for where the shadows can show, here they are not visible above the table (no upper pf) or in the plunger lane
				dist1 = falloff:
				dist2 = falloff
				For iii = 0 to numberofsources - 1 ' Search the 2 nearest influencing lights
					LSd = Distance(gBOT(s).x, gBOT(s).y, DSSources(iii)(0), DSSources(iii)(1)) 'Calculating the Linear distance to the Source
					If LSd < falloff And gilvl > 0.2 Then
'					If LSd < dist2 And ((DSGISide(iii) = 0 And Lampz.State(100)>0) Or (DSGISide(iii) = 1 And Lampz.State(104)>0)) Then	'Adapted for TZ with GI left / GI right
						dist2 = dist1
						dist1 = LSd
						src2 = src1
						src1 = iii
					End If
				Next
				ShadowOpacity1 = 0
				If dist1 < falloff Then
					objrtx1(s).visible = 1 : objrtx1(s).X = gBOT(s).X : objrtx1(s).Y = gBOT(s).Y
					'objrtx1(s).Z = gBOT(s).Z - 25 + s/1000 + 0.01 'Uncomment if you want to add shadows to an upper/lower pf
					objrtx1(s).rotz = AnglePP(DSSources(src1)(0), DSSources(src1)(1), gBOT(s).X, gBOT(s).Y) + 90
					ShadowOpacity1 = 1 - dist1 / falloff
					objrtx1(s).size_y = Wideness * ShadowOpacity1 + Thinness
					UpdateMaterial objrtx1(s).material,1,0,0,0,0,0,ShadowOpacity1*DynamicBSFactor^3,RGB(0,0,0),0,0,False,True,0,0,0,0
				Else
					objrtx1(s).visible = 0
				End If
				ShadowOpacity2 = 0
				If dist2 < falloff Then
					objrtx2(s).visible = 1 : objrtx2(s).X = gBOT(s).X : objrtx2(s).Y = gBOT(s).Y + offsetY
					'objrtx2(s).Z = gBOT(s).Z - 25 + s/1000 + 0.02 'Uncomment if you want to add shadows to an upper/lower pf
					objrtx2(s).rotz = AnglePP(DSSources(src2)(0), DSSources(src2)(1), gBOT(s).X, gBOT(s).Y) + 90
					ShadowOpacity2 = 1 - dist2 / falloff
					objrtx2(s).size_y = Wideness * ShadowOpacity2 + Thinness
					UpdateMaterial objrtx2(s).material,1,0,0,0,0,0,ShadowOpacity2*DynamicBSFactor^3,RGB(0,0,0),0,0,False,True,0,0,0,0
				Else
					objrtx2(s).visible = 0
				End If
				If AmbientBallShadowOn = 1 Then
					'Fades the ambient shadow (primitive only) when it's close to a light
					UpdateMaterial objBallShadow(s).material,1,0,0,0,0,0,AmbientBSFactor*(1 - max(ShadowOpacity1, ShadowOpacity2)),RGB(0,0,0),0,0,False,True,0,0,0,0
				Else
					BallShadowA(s).Opacity = 100 * AmbientBSFactor * (1 - max(ShadowOpacity1, ShadowOpacity2))
				End If
			Else 'Hide dynamic shadows everywhere else, just in case
				objrtx2(s).visible = 0 : objrtx1(s).visible = 0
			End If
		End If
	Next
End Sub
'****************************************************************
'****  END VPW DYNAMIC BALL SHADOWS by Iakki, Apophis, and Wylte
'****************************************************************


' Hack to return Narnia ball back in play
Sub Narnia_Timer
    Dim b
    For b = 0 to UBound(gBOT)
        if gBOT(b).z < -200 Then
'           msgbox "Ball " &b& " in Narnia X: " & gBOT(b).x &" Y: "&gBOT(b).y & " Z: "&gBOT(b).z
'           debug.print "Move narnia ball ("& gBOT(b).x &" Y: "&gBOT(b).y & " Z: "&gBOT(b).z&") to vuk"
            gBOT(b).velx = 0 : gBOT(b).vely = 0 : gBOT(b).velz = 0
            gBOT(b).x = 748 : gBOT(b).y = 683  : gBOT(b).z = -30
        end if
    next
end sub



' *********************************************************************
' 					Ramp Sounds
' *********************************************************************

'right ramp
Sub RWREnter_hit():PlaySoundAtBall "fx_metalrolling":End Sub
Sub RWRExit_Hit:StopSound "fx_metalrolling":Me.TimerInterval=200:Me.TimerEnabled=1:End Sub
Sub RWRExit_timer:Me.TimerEnabled=0:PlaySoundAt "fx_wireramp_exit", RWRExit::End Sub
'batramp
Sub BREnter_hit():PlaySoundAtBall "fx_metalrolling":End Sub
Sub BRExit_Hit : StopSound "fx_metalrolling":Me.TimerInterval=200:Me.TimerEnabled=1 : End Sub
Sub BRExit_timer:Me.TimerEnabled=0:PlaySoundAt "fx_wireramp_exit", BRExit::End Sub
'left ramp
Sub LWREnter_hit():PlaySoundAtBall "fx_metalrolling":End Sub
Sub LWRExit_Hit:StopSound "fx_metalrolling":Me.TimerInterval=200:Me.TimerEnabled=1:End Sub
Sub LWRExit_timer:Me.TimerEnabled=0:PlaySoundAt "fx_wireramp_exit", LWRExit::End Sub
'right ramp
Sub RREnter_Hit():If ActiveBall.VelY < 0 Then PlaySoundAtBall "fx_lrenter":PlaySoundAtBall "fx_metalrolling":End If:End Sub			'ball is going up
Sub RREnter_UnHit():If ActiveBall.VelY > 0 Then StopSound "fx_lrenter":StopSound "fx_metalrolling":End If:End Sub		'ball is going down
Sub Gate3_hit(): StopSound "fx_metalrolling":End Sub


'////////////////////////////  MECHANICAL SOUNDS  ///////////////////////////
'//  This part in the script is an entire block that is dedicated to the physics sound system.
'//  Various scripts and sounds that may be pretty generic and could suit other WPC systems, but the most are tailored specifically for this table.

'///////////////////////////////  SOUNDS PARAMETERS  //////////////////////////////
Dim GlobalSoundLevel, CoinSoundLevel, PlungerReleaseSoundLevel, PlungerPullSoundLevel, NudgeLeftSoundLevel
Dim NudgeRightSoundLevel, NudgeCenterSoundLevel, StartButtonSoundLevel, RollingSoundFactor

CoinSoundLevel = 1														'volume level; range [0, 1]
NudgeLeftSoundLevel = 1													'volume level; range [0, 1]
NudgeRightSoundLevel = 1												'volume level; range [0, 1]
NudgeCenterSoundLevel = 1												'volume level; range [0, 1]
StartButtonSoundLevel = 0.1												'volume level; range [0, 1]
PlungerReleaseSoundLevel = 0.8 '1 wjr											'volume level; range [0, 1]
PlungerPullSoundLevel = 1												'volume level; range [0, 1]
RollingSoundFactor = 1.1/5		

'///////////////////////-----Solenoids, Kickers and Flash Relays-----///////////////////////
Dim FlipperUpAttackMinimumSoundLevel, FlipperUpAttackMaximumSoundLevel, FlipperUpAttackLeftSoundLevel, FlipperUpAttackRightSoundLevel
Dim FlipperUpSoundLevel, FlipperDownSoundLevel, FlipperLeftHitParm, FlipperRightHitParm
Dim SlingshotSoundLevel, BumperSoundFactor, KnockerSoundLevel

FlipperUpAttackMinimumSoundLevel = 0.010           						'volume level; range [0, 1]
FlipperUpAttackMaximumSoundLevel = 0.635								'volume level; range [0, 1]
FlipperUpSoundLevel = 1.0                        						'volume level; range [0, 1]
FlipperDownSoundLevel = 0.45                      						'volume level; range [0, 1]
FlipperLeftHitParm = FlipperUpSoundLevel								'sound helper; not configurable
FlipperRightHitParm = FlipperUpSoundLevel								'sound helper; not configurable
SlingshotSoundLevel = 0.95												'volume level; range [0, 1]
BumperSoundFactor = 4.25												'volume multiplier; must not be zero
KnockerSoundLevel = 1 													'volume level; range [0, 1]

'///////////////////////-----Ball Drops, Bumps and Collisions-----///////////////////////
Dim RubberStrongSoundFactor, RubberWeakSoundFactor, RubberFlipperSoundFactor,BallWithBallCollisionSoundFactor
Dim BallBouncePlayfieldSoftFactor, BallBouncePlayfieldHardFactor, PlasticRampDropToPlayfieldSoundLevel, WireRampDropToPlayfieldSoundLevel, DelayedBallDropOnPlayfieldSoundLevel
Dim WallImpactSoundFactor, MetalImpactSoundFactor, SubwaySoundLevel, SubwayEntrySoundLevel, ScoopEntrySoundLevel
Dim SaucerLockSoundLevel, SaucerKickSoundLevel

BallWithBallCollisionSoundFactor = 3.2									'volume multiplier; must not be zero
RubberStrongSoundFactor = 0.055/5											'volume multiplier; must not be zero
RubberWeakSoundFactor = 0.075/5											'volume multiplier; must not be zero
RubberFlipperSoundFactor = 0.075/5										'volume multiplier; must not be zero
BallBouncePlayfieldSoftFactor = 0.025									'volume multiplier; must not be zero
BallBouncePlayfieldHardFactor = 0.025									'volume multiplier; must not be zero
DelayedBallDropOnPlayfieldSoundLevel = 0.8									'volume level; range [0, 1]
WallImpactSoundFactor = 0.075											'volume multiplier; must not be zero
MetalImpactSoundFactor = 0.075/3
SaucerLockSoundLevel = 0.8
SaucerKickSoundLevel = 0.8

'///////////////////////-----Gates, Spinners, Rollovers and Targets-----///////////////////////

Dim GateSoundLevel, TargetSoundFactor, SpinnerSoundLevel, RolloverSoundLevel, DTSoundLevel

GateSoundLevel = 0.5/5													'volume level; range [0, 1]
TargetSoundFactor = 0.0025 * 10											'volume multiplier; must not be zero
DTSoundLevel = 0.25														'volume multiplier; must not be zero
RolloverSoundLevel = 0.25                              					'volume level; range [0, 1]

'///////////////////////-----Ball Release, Guides and Drain-----///////////////////////
Dim DrainSoundLevel, BallReleaseSoundLevel, BottomArchBallGuideSoundFactor, FlipperBallGuideSoundFactor 

DrainSoundLevel = 0.8														'volume level; range [0, 1]
BallReleaseSoundLevel = 1												'volume level; range [0, 1]
BottomArchBallGuideSoundFactor = 0.2									'volume multiplier; must not be zero
FlipperBallGuideSoundFactor = 0.015										'volume multiplier; must not be zero

'///////////////////////-----Loops and Lanes-----///////////////////////
Dim ArchSoundFactor
ArchSoundFactor = 0.025/5													'volume multiplier; must not be zero


'/////////////////////////////  SOUND PLAYBACK FUNCTIONS  ////////////////////////////
'/////////////////////////////  POSITIONAL SOUND PLAYBACK METHODS  ////////////////////////////
' Positional sound playback methods will play a sound, depending on the X,Y position of the table element or depending on ActiveBall object position
' These are similar subroutines that are less complicated to use (e.g. simply use standard parameters for the PlaySound call)
' For surround setup - positional sound playback functions will fade between front and rear surround channels and pan between left and right channels
' For stereo setup - positional sound playback functions will only pan between left and right channels
' For mono setup - positional sound playback functions will not pan between left and right channels and will not fade between front and rear channels

' PlaySound full syntax - PlaySound(string, int loopcount, float volume, float pan, float randompitch, int pitch, bool useexisting, bool restart, float front_rear_fade)
' Note - These functions will not work (currently) for walls/slingshots as these do not feature a simple, single X,Y position
Sub PlaySoundAtLevelStatic(playsoundparams, aVol, tableobj)
    PlaySound playsoundparams, 0, aVol * VolumeDial, AudioPan(tableobj), 0, 0, 0, 0, AudioFade(tableobj)
End Sub

Sub PlaySoundAtLevelExistingStatic(playsoundparams, aVol, tableobj)
    PlaySound playsoundparams, 0, aVol * VolumeDial, AudioPan(tableobj), 0, 0, 1, 0, AudioFade(tableobj)
End Sub

Sub PlaySoundAtLevelStaticLoop(playsoundparams, aVol, tableobj)
    PlaySound playsoundparams, -1, aVol * VolumeDial, AudioPan(tableobj), 0, 0, 0, 0, AudioFade(tableobj)
End Sub

Sub PlaySoundAtLevelStaticRandomPitch(playsoundparams, aVol, randomPitch, tableobj)
    PlaySound playsoundparams, 0, aVol * VolumeDial, AudioPan(tableobj), randomPitch, 0, 0, 0, AudioFade(tableobj)
End Sub

Sub PlaySoundAtLevelActiveBall(playsoundparams, aVol)
	PlaySound playsoundparams, 0, aVol * VolumeDial, AudioPan(ActiveBall), 0, 0, 0, 0, AudioFade(ActiveBall)
End Sub

Sub PlaySoundAtLevelExistingActiveBall(playsoundparams, aVol)
	PlaySound playsoundparams, 0, aVol * VolumeDial, AudioPan(ActiveBall), 0, 0, 1, 0, AudioFade(ActiveBall)
End Sub

Sub PlaySoundAtLeveTimerActiveBall(playsoundparams, aVol, ballvariable)
	PlaySound playsoundparams, 0, aVol * VolumeDial, AudioPan(ballvariable), 0, 0, 0, 0, AudioFade(ballvariable)
End Sub

Sub PlaySoundAtLevelTimerExistingActiveBall(playsoundparams, aVol, ballvariable)
	PlaySound playsoundparams, 0, aVol * VolumeDial, AudioPan(ballvariable), 0, 0, 1, 0, AudioFade(ballvariable)
End Sub

Sub PlaySoundAtLevelRoll(playsoundparams, aVol, pitch)
    PlaySound playsoundparams, -1, aVol * VolumeDial, AudioPan(tableobj), randomPitch, 0, 0, 0, AudioFade(tableobj)
End Sub

' Previous Positional Sound Subs

Sub PlaySoundAt(soundname, tableobj)
    PlaySound soundname, 1, 1 * VolumeDial, AudioPan(tableobj), 0,0,0, 1, AudioFade(tableobj)
End Sub

Sub PlaySoundAtVol(soundname, tableobj, aVol)
    PlaySound soundname, 1, aVol * VolumeDial, AudioPan(tableobj), 0,0,0, 1, AudioFade(tableobj)
End Sub

Sub PlaySoundAtBall(soundname)
    PlaySoundAt soundname, ActiveBall
End Sub

Sub PlaySoundAtBallVol (Soundname, aVol)
	Playsound soundname, 1,aVol * VolumeDial, AudioPan(ActiveBall), 0,0,0, 1, AudioFade(ActiveBall)
End Sub

Sub PlaySoundAtBallVolM (Soundname, aVol)
	Playsound soundname, 1,aVol * VolumeDial, AudioPan(ActiveBall), 0,0,0, 0, AudioFade(ActiveBall)
End Sub

Sub PlaySoundAtVolLoops(sound, tableobj, Vol, Loops)
	PlaySound sound, Loops, Vol * VolumeDial, AudioPan(tableobj), 0,0,0, 1, AudioFade(tableobj)
End Sub


' *********************************************************************
'                      Supporting Ball & Sound Functions
' *********************************************************************

Function AudioFade(tableobj) ' Fades between front and back of the table (for surround systems or 2x2 speakers, etc), depending on the Y position on the table. "table1" is the name of the table
  Dim tmp
    tmp = tableobj.y * 2 / tableheight-1

	if tmp > 7000 Then
		tmp = 7000
	elseif tmp < -7000 Then
		tmp = -7000
	end if

    If tmp > 0 Then
		AudioFade = Csng(tmp ^10)
    Else
        AudioFade = Csng(-((- tmp) ^10) )
    End If
End Function

Function AudioPan(tableobj) ' Calculates the pan for a tableobj based on the X position on the table. "table1" is the name of the table
    Dim tmp
    tmp = tableobj.x * 2 / tablewidth-1

	if tmp > 7000 Then
		tmp = 7000
	elseif tmp < -7000 Then
		tmp = -7000
	end if

    If tmp > 0 Then
        AudioPan = Csng(tmp ^10)
    Else
        AudioPan = Csng(-((- tmp) ^10) )
    End If
End Function

Function Vol(ball) ' Calculates the volume of the sound based on the ball speed
	Vol = Csng(BallVel(ball) ^2)
End Function

Function Volz(ball) ' Calculates the volume of the sound based on the ball speed
	Volz = Csng((ball.velz) ^2)
End Function

Function Pitch(ball) ' Calculates the pitch of the sound based on the ball speed
    Pitch = BallVel(ball) * 20
End Function

Function BallVel(ball) 'Calculates the ball speed
    BallVel = INT(SQR((ball.VelX ^2) + (ball.VelY ^2) ) )
End Function

Function VolPlayfieldRoll(ball) ' Calculates the roll volume of the sound based on the ball speed
	VolPlayfieldRoll = RollingSoundFactor * 0.0005 * Csng(BallVel(ball) ^3)
End Function

Function PitchPlayfieldRoll(ball) ' Calculates the roll pitch of the sound based on the ball speed
    PitchPlayfieldRoll = BallVel(ball) ^2 * 15
End Function

Function RndInt(min, max)
    RndInt = Int(Rnd() * (max-min + 1) + min)' Sets a random number integer between min and max
End Function

Function RndNum(min, max)
    RndNum = Rnd() * (max-min) + min' Sets a random number between min and max
End Function

'/////////////////////////////  GENERAL SOUND SUBROUTINES  ////////////////////////////
Sub SoundStartButton()
	PlaySound ("Start_Button"), 0, StartButtonSoundLevel, 0, 0.25
End Sub

Sub SoundNudgeLeft()
	Select Case Int(Rnd*3)+1
		Case 1 : PlaySound ("Nudge_1"), 0, NudgeLeftSoundLevel * VolumeDial, -0.1, 0.25
		Case 2 : PlaySound ("Nudge_2"), 0, NudgeLeftSoundLevel * VolumeDial, -0.1, 0.25
		Case 3 : PlaySound ("Nudge_3"), 0, NudgeLeftSoundLevel * VolumeDial, -0.1, 0.25
	End Select
End Sub

Sub SoundNudgeRight()
	Select Case Int(Rnd*3)+1
		Case 1 : PlaySound ("Nudge_1"), 0, NudgeRightSoundLevel * VolumeDial, 0.1, 0.25
		Case 2 : PlaySound ("Nudge_2"), 0, NudgeRightSoundLevel * VolumeDial, 0.1, 0.25
		Case 3 : PlaySound ("Nudge_3"), 0, NudgeRightSoundLevel * VolumeDial, 0.1, 0.25
	End Select
End Sub

Sub SoundNudgeCenter()
	Select Case Int(Rnd*3)+1
		Case 1 : PlaySound ("Nudge_1"), 0, NudgeCenterSoundLevel * VolumeDial, 0, 0.25
		Case 2 : PlaySound ("Nudge_2"), 0, NudgeCenterSoundLevel * VolumeDial, 0, 0.25
		Case 3 : PlaySound ("Nudge_3"), 0, NudgeCenterSoundLevel * VolumeDial, 0, 0.25
	End Select
End Sub


Sub SoundPlungerPull()
	PlaySoundAtLevelStatic ("Plunger_Pull_1"), PlungerPullSoundLevel, Plunger
End Sub

Sub SoundPlungerReleaseBall()
	PlaySoundAtLevelStatic ("Plunger_Release_Ball"), PlungerReleaseSoundLevel, Plunger	
End Sub

Sub SoundPlungerReleaseNoBall()
	PlaySoundAtLevelStatic ("Plunger_Release_No_Ball"), PlungerReleaseSoundLevel, Plunger
End Sub


'/////////////////////////////  KNOCKER SOLENOID  ////////////////////////////
Sub KnockerSolenoid()
	PlaySoundAtLevelStatic SoundFX("Knocker_1",DOFKnocker), KnockerSoundLevel, Plunger
End Sub

'/////////////////////////////  DRAIN SOUNDS  ////////////////////////////
Sub RandomSoundDrain(drainswitch)
	Select Case Int(Rnd*11)+1
		Case 1 : PlaySoundAtLevelStatic ("Drain_1"), DrainSoundLevel, drainswitch
		Case 2 : PlaySoundAtLevelStatic ("Drain_2"), DrainSoundLevel, drainswitch
		Case 3 : PlaySoundAtLevelStatic ("Drain_3"), DrainSoundLevel, drainswitch
		Case 4 : PlaySoundAtLevelStatic ("Drain_4"), DrainSoundLevel, drainswitch
		Case 5 : PlaySoundAtLevelStatic ("Drain_5"), DrainSoundLevel, drainswitch
		Case 6 : PlaySoundAtLevelStatic ("Drain_6"), DrainSoundLevel, drainswitch
		Case 7 : PlaySoundAtLevelStatic ("Drain_7"), DrainSoundLevel, drainswitch
		Case 8 : PlaySoundAtLevelStatic ("Drain_8"), DrainSoundLevel, drainswitch
		Case 9 : PlaySoundAtLevelStatic ("Drain_9"), DrainSoundLevel, drainswitch
		Case 10 : PlaySoundAtLevelStatic ("Drain_10"), DrainSoundLevel, drainswitch
		Case 11 : PlaySoundAtLevelStatic ("Drain_11"), DrainSoundLevel, drainswitch
	End Select
End Sub

'/////////////////////////////  TROUGH BALL RELEASE SOLENOID SOUNDS  ////////////////////////////
Sub RandomSoundBallRelease(drainswitch)
	Select Case Int(Rnd*7)+1
		Case 1 : PlaySoundAtLevelStatic SoundFX("BallRelease1",DOFContactors), BallReleaseSoundLevel, drainswitch
		Case 2 : PlaySoundAtLevelStatic SoundFX("BallRelease2",DOFContactors), BallReleaseSoundLevel, drainswitch
		Case 3 : PlaySoundAtLevelStatic SoundFX("BallRelease3",DOFContactors), BallReleaseSoundLevel, drainswitch
		Case 4 : PlaySoundAtLevelStatic SoundFX("BallRelease4",DOFContactors), BallReleaseSoundLevel, drainswitch
		Case 5 : PlaySoundAtLevelStatic SoundFX("BallRelease5",DOFContactors), BallReleaseSoundLevel, drainswitch
		Case 6 : PlaySoundAtLevelStatic SoundFX("BallRelease6",DOFContactors), BallReleaseSoundLevel, drainswitch
		Case 7 : PlaySoundAtLevelStatic SoundFX("BallRelease7",DOFContactors), BallReleaseSoundLevel, drainswitch
	End Select
End Sub



'/////////////////////////////  SLINGSHOT SOLENOID SOUNDS  ////////////////////////////
Sub RandomSoundSlingshotLeft(sling)
	Select Case Int(Rnd*10)+1
		Case 1 : PlaySoundAtLevelStatic SoundFX("Sling_L1",DOFContactors), SlingshotSoundLevel, Sling
		Case 2 : PlaySoundAtLevelStatic SoundFX("Sling_L2",DOFContactors), SlingshotSoundLevel, Sling
		Case 3 : PlaySoundAtLevelStatic SoundFX("Sling_L3",DOFContactors), SlingshotSoundLevel, Sling
		Case 4 : PlaySoundAtLevelStatic SoundFX("Sling_L4",DOFContactors), SlingshotSoundLevel, Sling
		Case 5 : PlaySoundAtLevelStatic SoundFX("Sling_L5",DOFContactors), SlingshotSoundLevel, Sling
		Case 6 : PlaySoundAtLevelStatic SoundFX("Sling_L6",DOFContactors), SlingshotSoundLevel, Sling
		Case 7 : PlaySoundAtLevelStatic SoundFX("Sling_L7",DOFContactors), SlingshotSoundLevel, Sling
		Case 8 : PlaySoundAtLevelStatic SoundFX("Sling_L8",DOFContactors), SlingshotSoundLevel, Sling
		Case 9 : PlaySoundAtLevelStatic SoundFX("Sling_L9",DOFContactors), SlingshotSoundLevel, Sling
		Case 10 : PlaySoundAtLevelStatic SoundFX("Sling_L10",DOFContactors), SlingshotSoundLevel, Sling
	End Select
End Sub

Sub RandomSoundSlingshotRight(sling)
	Select Case Int(Rnd*8)+1
		Case 1 : PlaySoundAtLevelStatic SoundFX("Sling_R1",DOFContactors), SlingshotSoundLevel, Sling
		Case 2 : PlaySoundAtLevelStatic SoundFX("Sling_R2",DOFContactors), SlingshotSoundLevel, Sling
		Case 3 : PlaySoundAtLevelStatic SoundFX("Sling_R3",DOFContactors), SlingshotSoundLevel, Sling
		Case 4 : PlaySoundAtLevelStatic SoundFX("Sling_R4",DOFContactors), SlingshotSoundLevel, Sling
		Case 5 : PlaySoundAtLevelStatic SoundFX("Sling_R5",DOFContactors), SlingshotSoundLevel, Sling
		Case 6 : PlaySoundAtLevelStatic SoundFX("Sling_R6",DOFContactors), SlingshotSoundLevel, Sling
		Case 7 : PlaySoundAtLevelStatic SoundFX("Sling_R7",DOFContactors), SlingshotSoundLevel, Sling
		Case 8 : PlaySoundAtLevelStatic SoundFX("Sling_R8",DOFContactors), SlingshotSoundLevel, Sling
	End Select
End Sub

'/////////////////////////////  BUMPER SOLENOID SOUNDS  ////////////////////////////
Sub RandomSoundBumperTop(Bump)
	Select Case Int(Rnd*5)+1
		Case 1 : PlaySoundAtLevelStatic SoundFX("Bumpers_Top_1",DOFContactors), Vol(ActiveBall) * BumperSoundFactor, Bump
		Case 2 : PlaySoundAtLevelStatic SoundFX("Bumpers_Top_2",DOFContactors), Vol(ActiveBall) * BumperSoundFactor, Bump
		Case 3 : PlaySoundAtLevelStatic SoundFX("Bumpers_Top_3",DOFContactors), Vol(ActiveBall) * BumperSoundFactor, Bump
		Case 4 : PlaySoundAtLevelStatic SoundFX("Bumpers_Top_4",DOFContactors), Vol(ActiveBall) * BumperSoundFactor, Bump
		Case 5 : PlaySoundAtLevelStatic SoundFX("Bumpers_Top_5",DOFContactors), Vol(ActiveBall) * BumperSoundFactor, Bump
	End Select
End Sub

Sub RandomSoundBumperMiddle(Bump)
	Select Case Int(Rnd*5)+1
		Case 1 : PlaySoundAtLevelStatic SoundFX("Bumpers_Middle_1",DOFContactors), Vol(ActiveBall) * BumperSoundFactor, Bump
		Case 2 : PlaySoundAtLevelStatic SoundFX("Bumpers_Middle_2",DOFContactors), Vol(ActiveBall) * BumperSoundFactor, Bump
		Case 3 : PlaySoundAtLevelStatic SoundFX("Bumpers_Middle_3",DOFContactors), Vol(ActiveBall) * BumperSoundFactor, Bump
		Case 4 : PlaySoundAtLevelStatic SoundFX("Bumpers_Middle_4",DOFContactors), Vol(ActiveBall) * BumperSoundFactor, Bump
		Case 5 : PlaySoundAtLevelStatic SoundFX("Bumpers_Middle_5",DOFContactors), Vol(ActiveBall) * BumperSoundFactor, Bump
	End Select
End Sub

Sub RandomSoundBumperBottom(Bump)
	Select Case Int(Rnd*5)+1
		Case 1 : PlaySoundAtLevelStatic SoundFX("Bumpers_Bottom_1",DOFContactors), Vol(ActiveBall) * BumperSoundFactor, Bump
		Case 2 : PlaySoundAtLevelStatic SoundFX("Bumpers_Bottom_2",DOFContactors), Vol(ActiveBall) * BumperSoundFactor, Bump
		Case 3 : PlaySoundAtLevelStatic SoundFX("Bumpers_Bottom_3",DOFContactors), Vol(ActiveBall) * BumperSoundFactor, Bump
		Case 4 : PlaySoundAtLevelStatic SoundFX("Bumpers_Bottom_4",DOFContactors), Vol(ActiveBall) * BumperSoundFactor, Bump
		Case 5 : PlaySoundAtLevelStatic SoundFX("Bumpers_Bottom_5",DOFContactors), Vol(ActiveBall) * BumperSoundFactor, Bump
	End Select
End Sub

'/////////////////////////////  FLIPPER BATS SOUND SUBROUTINES  ////////////////////////////
'/////////////////////////////  FLIPPER BATS SOLENOID ATTACK SOUND  ////////////////////////////
Sub SoundFlipperUpAttackLeft(flipper)
	FlipperUpAttackLeftSoundLevel = RndNum(FlipperUpAttackMinimumSoundLevel, FlipperUpAttackMaximumSoundLevel)
	PlaySoundAtLevelStatic ("Flipper_Attack-L01"), FlipperUpAttackLeftSoundLevel, flipper
End Sub

Sub SoundFlipperUpAttackRight(flipper)
	FlipperUpAttackRightSoundLevel = RndNum(FlipperUpAttackMinimumSoundLevel, FlipperUpAttackMaximumSoundLevel)
		PlaySoundAtLevelStatic ("Flipper_Attack-R01"), FlipperUpAttackLeftSoundLevel, flipper
End Sub

'/////////////////////////////  FLIPPER BATS SOLENOID CORE SOUND  ////////////////////////////
Sub RandomSoundFlipperUpLeft(flipper)
	Select Case Int(Rnd*11)+1
		Case 1 : PlaySoundAtLevelStatic SoundFX("Flipper_L01",DOFFlippers), FlipperLeftHitParm, Flipper
		Case 2 : PlaySoundAtLevelStatic SoundFX("Flipper_L02",DOFFlippers), FlipperLeftHitParm, Flipper
		Case 3 : PlaySoundAtLevelStatic SoundFX("Flipper_L07",DOFFlippers), FlipperLeftHitParm, Flipper
		Case 4 : PlaySoundAtLevelStatic SoundFX("Flipper_L08",DOFFlippers), FlipperLeftHitParm, Flipper
		Case 5 : PlaySoundAtLevelStatic SoundFX("Flipper_L09",DOFFlippers), FlipperLeftHitParm, Flipper
		Case 6 : PlaySoundAtLevelStatic SoundFX("Flipper_L10",DOFFlippers), FlipperLeftHitParm, Flipper
		Case 7 : PlaySoundAtLevelStatic SoundFX("Flipper_L12",DOFFlippers), FlipperLeftHitParm, Flipper
		Case 8 : PlaySoundAtLevelStatic SoundFX("Flipper_L14",DOFFlippers), FlipperLeftHitParm, Flipper
		Case 9 : PlaySoundAtLevelStatic SoundFX("Flipper_L18",DOFFlippers), FlipperLeftHitParm, Flipper
		Case 10 : PlaySoundAtLevelStatic SoundFX("Flipper_L20",DOFFlippers), FlipperLeftHitParm, Flipper
		Case 11 : PlaySoundAtLevelStatic SoundFX("Flipper_L26",DOFFlippers), FlipperLeftHitParm, Flipper
	End Select
End Sub

Sub RandomSoundFlipperUpRight(flipper)
	Select Case Int(Rnd*11)+1
		Case 1 : PlaySoundAtLevelStatic SoundFX("Flipper_R01",DOFFlippers), FlipperRightHitParm, Flipper
		Case 2 : PlaySoundAtLevelStatic SoundFX("Flipper_R02",DOFFlippers), FlipperRightHitParm, Flipper
		Case 3 : PlaySoundAtLevelStatic SoundFX("Flipper_R03",DOFFlippers), FlipperRightHitParm, Flipper
		Case 4 : PlaySoundAtLevelStatic SoundFX("Flipper_R04",DOFFlippers), FlipperRightHitParm, Flipper
		Case 5 : PlaySoundAtLevelStatic SoundFX("Flipper_R05",DOFFlippers), FlipperRightHitParm, Flipper
		Case 6 : PlaySoundAtLevelStatic SoundFX("Flipper_R06",DOFFlippers), FlipperRightHitParm, Flipper
		Case 7 : PlaySoundAtLevelStatic SoundFX("Flipper_R07",DOFFlippers), FlipperRightHitParm, Flipper
		Case 8 : PlaySoundAtLevelStatic SoundFX("Flipper_R08",DOFFlippers), FlipperRightHitParm, Flipper
		Case 9 : PlaySoundAtLevelStatic SoundFX("Flipper_R09",DOFFlippers), FlipperRightHitParm, Flipper
		Case 10 : PlaySoundAtLevelStatic SoundFX("Flipper_R10",DOFFlippers), FlipperRightHitParm, Flipper
		Case 11 : PlaySoundAtLevelStatic SoundFX("Flipper_R11",DOFFlippers), FlipperRightHitParm, Flipper
	End Select
End Sub

Sub RandomSoundReflipUpLeft(flipper)
	Select Case Int(Rnd*3)+1
		Case 1 : PlaySoundAtLevelStatic SoundFX("Flipper_ReFlip_L01",DOFFlippers), (RndNum(0.8, 1))*FlipperUpSoundLevel, Flipper
		Case 2 : PlaySoundAtLevelStatic SoundFX("Flipper_ReFlip_L02",DOFFlippers), (RndNum(0.8, 1))*FlipperUpSoundLevel, Flipper
		Case 3 : PlaySoundAtLevelStatic SoundFX("Flipper_ReFlip_L03",DOFFlippers), (RndNum(0.8, 1))*FlipperUpSoundLevel, Flipper
	End Select
End Sub

Sub RandomSoundReflipUpRight(flipper)
	Select Case Int(Rnd*3)+1
		Case 1 : PlaySoundAtLevelStatic SoundFX("Flipper_ReFlip_R01",DOFFlippers), (RndNum(0.8, 1))*FlipperUpSoundLevel, Flipper
		Case 2 : PlaySoundAtLevelStatic SoundFX("Flipper_ReFlip_R02",DOFFlippers), (RndNum(0.8, 1))*FlipperUpSoundLevel, Flipper
		Case 3 : PlaySoundAtLevelStatic SoundFX("Flipper_ReFlip_R03",DOFFlippers), (RndNum(0.8, 1))*FlipperUpSoundLevel, Flipper
	End Select
End Sub

Sub RandomSoundFlipperDownLeft(flipper)
	Select Case Int(Rnd*7)+1
		Case 1 : PlaySoundAtLevelStatic SoundFX("Flipper_Left_Down_1",DOFFlippers), FlipperDownSoundLevel, Flipper
		Case 2 : PlaySoundAtLevelStatic SoundFX("Flipper_Left_Down_2",DOFFlippers), FlipperDownSoundLevel, Flipper
		Case 3 : PlaySoundAtLevelStatic SoundFX("Flipper_Left_Down_3",DOFFlippers), FlipperDownSoundLevel, Flipper
		Case 4 : PlaySoundAtLevelStatic SoundFX("Flipper_Left_Down_4",DOFFlippers), FlipperDownSoundLevel, Flipper
		Case 5 : PlaySoundAtLevelStatic SoundFX("Flipper_Left_Down_5",DOFFlippers), FlipperDownSoundLevel, Flipper
		Case 6 : PlaySoundAtLevelStatic SoundFX("Flipper_Left_Down_6",DOFFlippers), FlipperDownSoundLevel, Flipper
		Case 7 : PlaySoundAtLevelStatic SoundFX("Flipper_Left_Down_7",DOFFlippers), FlipperDownSoundLevel, Flipper
	End Select
End Sub

Sub RandomSoundFlipperDownRight(flipper)
	Select Case Int(Rnd*8)+1
		Case 1 : PlaySoundAtLevelStatic SoundFX("Flipper_Right_Down_1",DOFFlippers), FlipperDownSoundLevel, Flipper
		Case 2 : PlaySoundAtLevelStatic SoundFX("Flipper_Right_Down_2",DOFFlippers), FlipperDownSoundLevel, Flipper
		Case 3 : PlaySoundAtLevelStatic SoundFX("Flipper_Right_Down_3",DOFFlippers), FlipperDownSoundLevel, Flipper
		Case 4 : PlaySoundAtLevelStatic SoundFX("Flipper_Right_Down_4",DOFFlippers), FlipperDownSoundLevel, Flipper
		Case 5 : PlaySoundAtLevelStatic SoundFX("Flipper_Right_Down_5",DOFFlippers), FlipperDownSoundLevel, Flipper
		Case 6 : PlaySoundAtLevelStatic SoundFX("Flipper_Right_Down_6",DOFFlippers), FlipperDownSoundLevel, Flipper
		Case 7 : PlaySoundAtLevelStatic SoundFX("Flipper_Right_Down_7",DOFFlippers), FlipperDownSoundLevel, Flipper
		Case 8 : PlaySoundAtLevelStatic SoundFX("Flipper_Right_Down_8",DOFFlippers), FlipperDownSoundLevel, Flipper
	End Select
End Sub

'/////////////////////////////  FLIPPER BATS BALL COLLIDE SOUND  ////////////////////////////

Sub LeftFlipperCollide(parm)
	FlipperLeftHitParm = parm/10
	If FlipperLeftHitParm > 1 Then
		FlipperLeftHitParm = 1
	End If
	FlipperLeftHitParm = FlipperUpSoundLevel * FlipperLeftHitParm
	RandomSoundRubberFlipper(parm)
End Sub

Sub RightFlipperCollide(parm)
	FlipperRightHitParm = parm/10
	If FlipperRightHitParm > 1 Then
		FlipperRightHitParm = 1
	End If
	FlipperRightHitParm = FlipperUpSoundLevel * FlipperRightHitParm
 	RandomSoundRubberFlipper(parm)
End Sub

Sub RandomSoundRubberFlipper(parm)
	Select Case Int(Rnd*7)+1
		Case 1 : PlaySoundAtLevelActiveBall ("Flipper_Rubber_1"), parm  * RubberFlipperSoundFactor
		Case 2 : PlaySoundAtLevelActiveBall ("Flipper_Rubber_2"), parm  * RubberFlipperSoundFactor
		Case 3 : PlaySoundAtLevelActiveBall ("Flipper_Rubber_3"), parm  * RubberFlipperSoundFactor
		Case 4 : PlaySoundAtLevelActiveBall ("Flipper_Rubber_4"), parm  * RubberFlipperSoundFactor
		Case 5 : PlaySoundAtLevelActiveBall ("Flipper_Rubber_5"), parm  * RubberFlipperSoundFactor
		Case 6 : PlaySoundAtLevelActiveBall ("Flipper_Rubber_6"), parm  * RubberFlipperSoundFactor
		Case 7 : PlaySoundAtLevelActiveBall ("Flipper_Rubber_7"), parm  * RubberFlipperSoundFactor
	End Select
End Sub

'/////////////////////////////  ROLLOVER SOUNDS  ////////////////////////////
Sub RandomSoundRollover()
	Select Case Int(Rnd*4)+1
		Case 1 : PlaySoundAtLevelActiveBall ("Rollover_1"), RolloverSoundLevel
		Case 2 : PlaySoundAtLevelActiveBall ("Rollover_2"), RolloverSoundLevel
		Case 3 : PlaySoundAtLevelActiveBall ("Rollover_3"), RolloverSoundLevel
		Case 4 : PlaySoundAtLevelActiveBall ("Rollover_4"), RolloverSoundLevel
	End Select
End Sub

Sub Rollovers_Hit(idx)
	RandomSoundRollover
End Sub

'/////////////////////////////  VARIOUS PLAYFIELD SOUND SUBROUTINES  ////////////////////////////
'/////////////////////////////  RUBBERS AND POSTS  ////////////////////////////
'/////////////////////////////  RUBBERS - EVENTS  ////////////////////////////
Sub Rubbers_Hit(idx)
 	dim finalspeed
  	finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
 	If finalspeed > 5 then		
 		RandomSoundRubberStrong 1
	End if
	If finalspeed <= 5 then
 		RandomSoundRubberWeak()
 	End If	
End Sub

'/////////////////////////////  RUBBERS AND POSTS - STRONG IMPACTS  ////////////////////////////
Sub RandomSoundRubberStrong(voladj)
	Select Case Int(Rnd*10)+1
		Case 1 : PlaySoundAtLevelActiveBall ("Rubber_Strong_1"), Vol(ActiveBall) * RubberStrongSoundFactor*voladj
		Case 2 : PlaySoundAtLevelActiveBall ("Rubber_Strong_2"), Vol(ActiveBall) * RubberStrongSoundFactor*voladj
		Case 3 : PlaySoundAtLevelActiveBall ("Rubber_Strong_3"), Vol(ActiveBall) * RubberStrongSoundFactor*voladj
		Case 4 : PlaySoundAtLevelActiveBall ("Rubber_Strong_4"), Vol(ActiveBall) * RubberStrongSoundFactor*voladj
		Case 5 : PlaySoundAtLevelActiveBall ("Rubber_Strong_5"), Vol(ActiveBall) * RubberStrongSoundFactor*voladj
		Case 6 : PlaySoundAtLevelActiveBall ("Rubber_Strong_6"), Vol(ActiveBall) * RubberStrongSoundFactor*voladj
		Case 7 : PlaySoundAtLevelActiveBall ("Rubber_Strong_7"), Vol(ActiveBall) * RubberStrongSoundFactor*voladj
		Case 8 : PlaySoundAtLevelActiveBall ("Rubber_Strong_8"), Vol(ActiveBall) * RubberStrongSoundFactor*voladj
		Case 9 : PlaySoundAtLevelActiveBall ("Rubber_Strong_9"), Vol(ActiveBall) * RubberStrongSoundFactor*voladj
		Case 10 : PlaySoundAtLevelActiveBall ("Rubber_1_Hard"), Vol(ActiveBall) * RubberStrongSoundFactor * 0.6*voladj
	End Select
End Sub

'/////////////////////////////  RUBBERS AND POSTS - WEAK IMPACTS  ////////////////////////////
Sub RandomSoundRubberWeak()
	Select Case Int(Rnd*9)+1
		Case 1 : PlaySoundAtLevelActiveBall ("Rubber_1"), Vol(ActiveBall) * RubberWeakSoundFactor
		Case 2 : PlaySoundAtLevelActiveBall ("Rubber_2"), Vol(ActiveBall) * RubberWeakSoundFactor
		Case 3 : PlaySoundAtLevelActiveBall ("Rubber_3"), Vol(ActiveBall) * RubberWeakSoundFactor
		Case 4 : PlaySoundAtLevelActiveBall ("Rubber_3"), Vol(ActiveBall) * RubberWeakSoundFactor
		Case 5 : PlaySoundAtLevelActiveBall ("Rubber_5"), Vol(ActiveBall) * RubberWeakSoundFactor
		Case 6 : PlaySoundAtLevelActiveBall ("Rubber_6"), Vol(ActiveBall) * RubberWeakSoundFactor
		Case 7 : PlaySoundAtLevelActiveBall ("Rubber_7"), Vol(ActiveBall) * RubberWeakSoundFactor
		Case 8 : PlaySoundAtLevelActiveBall ("Rubber_8"), Vol(ActiveBall) * RubberWeakSoundFactor
		Case 9 : PlaySoundAtLevelActiveBall ("Rubber_9"), Vol(ActiveBall) * RubberWeakSoundFactor
	End Select
End Sub

'/////////////////////////////  WALL IMPACTS  ////////////////////////////
Sub Walls_Hit(idx)
 	dim finalspeed
  	finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
 	If finalspeed > 5 then
 		RandomSoundRubberStrong 1 
	End if
	If finalspeed <= 5 then
 		RandomSoundRubberWeak()
 	End If	
End Sub

Sub RandomSoundWall()
 	dim finalspeed
  	finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
 	If finalspeed > 16 then 
		Select Case Int(Rnd*5)+1
			Case 1 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_1"), Vol(ActiveBall) * WallImpactSoundFactor
			Case 2 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_2"), Vol(ActiveBall) * WallImpactSoundFactor
			Case 3 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_5"), Vol(ActiveBall) * WallImpactSoundFactor
			Case 4 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_7"), Vol(ActiveBall) * WallImpactSoundFactor
			Case 5 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_9"), Vol(ActiveBall) * WallImpactSoundFactor
		End Select
	End if
	If finalspeed >= 6 AND finalspeed <= 16 then
		Select Case Int(Rnd*4)+1
			Case 1 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_3"), Vol(ActiveBall) * WallImpactSoundFactor
			Case 2 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_4"), Vol(ActiveBall) * WallImpactSoundFactor
			Case 3 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_6"), Vol(ActiveBall) * WallImpactSoundFactor
			Case 4 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_8"), Vol(ActiveBall) * WallImpactSoundFactor
		End Select
 	End If
	If finalspeed < 6 Then
		Select Case Int(Rnd*3)+1
			Case 1 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_4"), Vol(ActiveBall) * WallImpactSoundFactor
			Case 2 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_6"), Vol(ActiveBall) * WallImpactSoundFactor
			Case 3 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_8"), Vol(ActiveBall) * WallImpactSoundFactor
		End Select
	End if
End Sub

'/////////////////////////////  METAL TOUCH SOUNDS  ////////////////////////////
Sub RandomSoundMetal()
	Select Case Int(Rnd*13)+1
		Case 1 : PlaySoundAtLevelActiveBall ("Metal_Touch_1"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 2 : PlaySoundAtLevelActiveBall ("Metal_Touch_2"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 3 : PlaySoundAtLevelActiveBall ("Metal_Touch_3"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 4 : PlaySoundAtLevelActiveBall ("Metal_Touch_4"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 5 : PlaySoundAtLevelActiveBall ("Metal_Touch_5"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 6 : PlaySoundAtLevelActiveBall ("Metal_Touch_6"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 7 : PlaySoundAtLevelActiveBall ("Metal_Touch_7"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 8 : PlaySoundAtLevelActiveBall ("Metal_Touch_8"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 9 : PlaySoundAtLevelActiveBall ("Metal_Touch_9"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 10 : PlaySoundAtLevelActiveBall ("Metal_Touch_10"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 11 : PlaySoundAtLevelActiveBall ("Metal_Touch_11"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 12 : PlaySoundAtLevelActiveBall ("Metal_Touch_12"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 13 : PlaySoundAtLevelActiveBall ("Metal_Touch_13"), Vol(ActiveBall) * MetalImpactSoundFactor
	End Select
End Sub

'/////////////////////////////  METAL - EVENTS  ////////////////////////////

Sub Metals_Hit (idx)
	RandomSoundMetal
End Sub

Sub ShooterDiverter_collide(idx)
	RandomSoundMetal
End Sub

'/////////////////////////////  BOTTOM ARCH BALL GUIDE  ////////////////////////////
'/////////////////////////////  BOTTOM ARCH BALL GUIDE - SOFT BOUNCES  ////////////////////////////
Sub RandomSoundBottomArchBallGuide()
 	dim finalspeed
  	finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
 	If finalspeed > 16 then 
 		Select Case Int(Rnd*2)+1
			Case 1 : PlaySoundAtLevelActiveBall ("Apron_Bounce_1"), Vol(ActiveBall) * BottomArchBallGuideSoundFactor
			Case 2 : PlaySoundAtLevelActiveBall ("Apron_Bounce_2"), Vol(ActiveBall) * BottomArchBallGuideSoundFactor
		End Select
	End if
	If finalspeed >= 6 AND finalspeed <= 16 then
 		Select Case Int(Rnd*2)+1
			Case 1 : PlaySoundAtLevelActiveBall ("Apron_Bounce_1"), Vol(ActiveBall) * BottomArchBallGuideSoundFactor
			Case 2 : PlaySoundAtLevelActiveBall ("Apron_Bounce_Soft_1"), Vol(ActiveBall) * BottomArchBallGuideSoundFactor
		End Select
 	End If
	If finalspeed < 6 Then
 		Select Case Int(Rnd*2)+1
			Case 1 : PlaySoundAtLevelActiveBall ("Apron_Bounce_Soft_1"), Vol(ActiveBall) * BottomArchBallGuideSoundFactor
			Case 2 : PlaySoundAtLevelActiveBall ("Apron_Medium_3"), Vol(ActiveBall) * BottomArchBallGuideSoundFactor
		End Select
	End if
End Sub

'/////////////////////////////  BOTTOM ARCH BALL GUIDE - HARD HITS  ////////////////////////////
Sub RandomSoundBottomArchBallGuideHardHit()
	Select Case Int(Rnd*3)+1
		Case 1 : PlaySoundAtLevelActiveBall ("Apron_Hard_Hit_1"), BottomArchBallGuideSoundFactor * 0.25
		Case 2 : PlaySoundAtLevelActiveBall ("Apron_Hard_Hit_2"), BottomArchBallGuideSoundFactor * 0.25
		Case 3 : PlaySoundAtLevelActiveBall ("Apron_Hard_Hit_3"), BottomArchBallGuideSoundFactor * 0.25
	End Select
End Sub


Sub Apron_Hit (idx)
	If Abs(cor.ballvelx(activeball.id) < 4) and cor.ballvely(activeball.id) > 7 then
		RandomSoundBottomArchBallGuideHardHit()
	Else
		RandomSoundBottomArchBallGuide
	End If
End Sub

'/////////////////////////////  FLIPPER BALL GUIDE  ////////////////////////////
Sub RandomSoundFlipperBallGuide()
 	dim finalspeed
  	finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
 	If finalspeed > 16 then 
 		Select Case Int(Rnd*2)+1
			Case 1 : PlaySoundAtLevelActiveBall ("Apron_Hard_1"),  Vol(ActiveBall) * FlipperBallGuideSoundFactor
			Case 2 : PlaySoundAtLevelActiveBall ("Apron_Hard_2"),  Vol(ActiveBall) * 0.8 * FlipperBallGuideSoundFactor
		End Select
	End if
	If finalspeed >= 6 AND finalspeed <= 16 then
 		Select Case Int(Rnd*3)+1
			Case 1 : PlaySoundAtLevelActiveBall ("Apron_Medium_1"),  Vol(ActiveBall) * FlipperBallGuideSoundFactor
			Case 2 : PlaySoundAtLevelActiveBall ("Apron_Medium_2"),  Vol(ActiveBall) * FlipperBallGuideSoundFactor
			Case 3 : PlaySoundAtLevelActiveBall ("Apron_Medium_3"),  Vol(ActiveBall) * FlipperBallGuideSoundFactor
		End Select
 	End If
	If finalspeed < 6 Then
 		Select Case Int(Rnd*7)+1
			Case 1 : PlaySoundAtLevelActiveBall ("Apron_Soft_1"),  Vol(ActiveBall) * FlipperBallGuideSoundFactor
			Case 2 : PlaySoundAtLevelActiveBall ("Apron_Soft_2"),  Vol(ActiveBall) * FlipperBallGuideSoundFactor
			Case 3 : PlaySoundAtLevelActiveBall ("Apron_Soft_3"),  Vol(ActiveBall) * FlipperBallGuideSoundFactor
			Case 4 : PlaySoundAtLevelActiveBall ("Apron_Soft_4"),  Vol(ActiveBall) * FlipperBallGuideSoundFactor
			Case 5 : PlaySoundAtLevelActiveBall ("Apron_Soft_5"),  Vol(ActiveBall) * FlipperBallGuideSoundFactor
			Case 6 : PlaySoundAtLevelActiveBall ("Apron_Soft_6"),  Vol(ActiveBall) * FlipperBallGuideSoundFactor
			Case 7 : PlaySoundAtLevelActiveBall ("Apron_Soft_7"),  Vol(ActiveBall) * FlipperBallGuideSoundFactor
		End Select
	End if
End Sub

'/////////////////////////////  TARGET HIT SOUNDS  ////////////////////////////
Sub RandomSoundTargetHitStrong()
	Select Case Int(Rnd*4)+1
		Case 1 : PlaySoundAtLevelActiveBall SoundFX("Target_Hit_5",DOFTargets), Vol(ActiveBall) * 0.45 * TargetSoundFactor
		Case 2 : PlaySoundAtLevelActiveBall SoundFX("Target_Hit_6",DOFTargets), Vol(ActiveBall) * 0.45 * TargetSoundFactor
		Case 3 : PlaySoundAtLevelActiveBall SoundFX("Target_Hit_7",DOFTargets), Vol(ActiveBall) * 0.45 * TargetSoundFactor
		Case 4 : PlaySoundAtLevelActiveBall SoundFX("Target_Hit_8",DOFTargets), Vol(ActiveBall) * 0.45 * TargetSoundFactor		
	End Select
End Sub

Sub RandomSoundTargetHitWeak()
	Select Case Int(Rnd*4)+1		
		Case 1 : PlaySoundAtLevelActiveBall SoundFX("Target_Hit_1",DOFTargets), Vol(ActiveBall) * TargetSoundFactor
		Case 2 : PlaySoundAtLevelActiveBall SoundFX("Target_Hit_2",DOFTargets), Vol(ActiveBall) * TargetSoundFactor
		Case 3 : PlaySoundAtLevelActiveBall SoundFX("Target_Hit_3",DOFTargets), Vol(ActiveBall) * TargetSoundFactor
		Case 4 : PlaySoundAtLevelActiveBall SoundFX("Target_Hit_4",DOFTargets), Vol(ActiveBall) * TargetSoundFactor
	End Select
End Sub

Sub PlayTargetSound()
 	dim finalspeed
  	finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
 	If finalspeed > 10 then
 		RandomSoundTargetHitStrong()
		RandomSoundBallBouncePlayfieldSoft Activeball
	Else 
 		RandomSoundTargetHitWeak()
 	End If	
End Sub

Sub Targets_Hit (idx)
	PlayTargetSound	
End Sub

'/////////////////////////////  BALL BOUNCE SOUNDS  ////////////////////////////
Sub RandomSoundBallBouncePlayfieldSoft(aBall)
	Select Case Int(Rnd*9)+1
		Case 1 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Soft_1"), volz(aBall) * BallBouncePlayfieldSoftFactor, aBall
		Case 2 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Soft_2"), volz(aBall) * BallBouncePlayfieldSoftFactor * 0.5, aBall
		Case 3 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Soft_3"), volz(aBall) * BallBouncePlayfieldSoftFactor * 0.8, aBall
		Case 4 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Soft_4"), volz(aBall) * BallBouncePlayfieldSoftFactor * 0.5, aBall
		Case 5 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Soft_5"), volz(aBall) * BallBouncePlayfieldSoftFactor, aBall
		Case 6 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Hard_1"), volz(aBall) * BallBouncePlayfieldSoftFactor * 0.2, aBall
		Case 7 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Hard_2"), volz(aBall) * BallBouncePlayfieldSoftFactor * 0.2, aBall
		Case 8 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Hard_5"), volz(aBall) * BallBouncePlayfieldSoftFactor * 0.2, aBall
		Case 9 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Hard_7"), volz(aBall) * BallBouncePlayfieldSoftFactor * 0.3, aBall
	End Select
End Sub

Sub RandomSoundBallBouncePlayfieldHard(aBall)
	Select Case Int(Rnd*7)+1
		Case 1 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Hard_1"), volz(aBall) * BallBouncePlayfieldHardFactor, aBall
		Case 2 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Hard_2"), volz(aBall) * BallBouncePlayfieldHardFactor, aBall
		Case 3 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Hard_3"), volz(aBall) * BallBouncePlayfieldHardFactor, aBall
		Case 4 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Hard_4"), volz(aBall) * BallBouncePlayfieldHardFactor, aBall
		Case 5 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Hard_5"), volz(aBall) * BallBouncePlayfieldHardFactor, aBall
		Case 6 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Hard_6"), volz(aBall) * BallBouncePlayfieldHardFactor, aBall
		Case 7 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Hard_7"), volz(aBall) * BallBouncePlayfieldHardFactor, aBall
	End Select
End Sub

'/////////////////////////////  DELAYED DROP - TO PLAYFIELD - SOUND  ////////////////////////////
Sub RandomSoundDelayedBallDropOnPlayfield(aBall)
	Select Case Int(Rnd*5)+1
		Case 1 : PlaySoundAtLevelStatic ("Ball_Drop_Playfield_1_Delayed"), DelayedBallDropOnPlayfieldSoundLevel, aBall
		Case 2 : PlaySoundAtLevelStatic ("Ball_Drop_Playfield_2_Delayed"), DelayedBallDropOnPlayfieldSoundLevel, aBall
		Case 3 : PlaySoundAtLevelStatic ("Ball_Drop_Playfield_3_Delayed"), DelayedBallDropOnPlayfieldSoundLevel, aBall
		Case 4 : PlaySoundAtLevelStatic ("Ball_Drop_Playfield_4_Delayed"), DelayedBallDropOnPlayfieldSoundLevel, aBall
		Case 5 : PlaySoundAtLevelStatic ("Ball_Drop_Playfield_5_Delayed"), DelayedBallDropOnPlayfieldSoundLevel, aBall
	End Select
End Sub

'/////////////////////////////  BALL GATES AND BRACKET GATES SOUNDS  ////////////////////////////

Sub SoundPlayfieldGate()
	Select Case Int(Rnd*2)+1				
		Case 1 : PlaySoundAtLevelStatic ("Gate_FastTrigger_1"), GateSoundLevel, Activeball
		Case 2 : PlaySoundAtLevelStatic ("Gate_FastTrigger_2"), GateSoundLevel, Activeball
	End Select
End Sub

Sub SoundHeavyGate()
	PlaySoundAtLevelStatic ("Gate_2"), GateSoundLevel, Activeball
End Sub

Sub Gates_hit(idx)
	SoundHeavyGate
End Sub

Sub GatesWire_hit(idx)	
	SoundPlayfieldGate	
End Sub	

'/////////////////////////////  LEFT LANE ENTRANCE - SOUNDS  ////////////////////////////

Sub RandomSoundLeftArch()
	Select Case Int(Rnd*4)+1
		Case 1 : PlaySoundAtLevelActiveBall ("Arch_L1"), Vol(ActiveBall) * ArchSoundFactor
		Case 2 : PlaySoundAtLevelActiveBall ("Arch_L2"), Vol(ActiveBall) * ArchSoundFactor
		Case 3 : PlaySoundAtLevelActiveBall ("Arch_L3"), Vol(ActiveBall) * ArchSoundFactor
		Case 4 : PlaySoundAtLevelActiveBall ("Arch_L4"), Vol(ActiveBall) * ArchSoundFactor
	End Select
End Sub

Sub RandomSoundRightArch()
	Select Case Int(Rnd*4)+1
		Case 1 : PlaySoundAtLevelActiveBall ("Arch_R1"), Vol(ActiveBall) * ArchSoundFactor
		Case 2 : PlaySoundAtLevelActiveBall ("Arch_R2"), Vol(ActiveBall) * ArchSoundFactor
		Case 3 : PlaySoundAtLevelActiveBall ("Arch_R3"), Vol(ActiveBall) * ArchSoundFactor
		Case 4 : PlaySoundAtLevelActiveBall ("Arch_R4"), Vol(ActiveBall) * ArchSoundFactor
	End Select
End Sub


Sub Arch1_hit()
	If Activeball.velx > 1 Then SoundPlayfieldGate
	StopSound "Arch_L1"
	StopSound "Arch_L2"
	StopSound "Arch_L3"
	StopSound "Arch_L4"
End Sub

Sub Arch1_unhit()
	If activeball.velx < -8 Then
		RandomSoundRightArch
	End If
End Sub

Sub Arch2_hit()
	If Activeball.velx < 1 Then SoundPlayfieldGate
	StopSound "Arch_R1"
	StopSound "Arch_R2"
	StopSound "Arch_R3"
	StopSound "Arch_R4"
End Sub

Sub Arch2_unhit()
	If activeball.velx > 10 Then
		RandomSoundLeftArch
	End If
End Sub

'/////////////////////////////  SAUCERS (KICKER HOLES)  ////////////////////////////

Sub SoundSaucerLock()
	Select Case Int(Rnd*2)+1	
		Case 1: PlaySoundAtLevelStatic ("Saucer_Enter_1"), SaucerLockSoundLevel, Activeball
		Case 2: PlaySoundAtLevelStatic ("Saucer_Enter_2"), SaucerLockSoundLevel, Activeball
	End Select
End Sub

Sub SoundSaucerKick(scenario, saucer)
	Select Case scenario
		Case 0: PlaySoundAtLevelStatic SoundFX("Saucer_Empty", DOFContactors), SaucerKickSoundLevel, Activeball
		Case 1: PlaySoundAtLevelStatic SoundFX("Saucer_Kick", DOFContactors), SaucerKickSoundLevel, Activeball
	End Select
End Sub

'/////////////////////////////  BALL COLLISION SOUND  ////////////////////////////
Sub OnBallBallCollision(ball1, ball2, velocity)
	Dim snd
	Select Case Int(Rnd*7)+1
		Case 1 : snd = "Ball_Collide_1"
		Case 2 : snd = "Ball_Collide_2"
		Case 3 : snd = "Ball_Collide_3"
		Case 4 : snd = "Ball_Collide_4"
		Case 5 : snd = "Ball_Collide_5"
		Case 6 : snd = "Ball_Collide_6"
		Case 7 : snd = "Ball_Collide_7"
	End Select

	PlaySound (snd), 0, Csng(velocity) ^2 / 200 * BallWithBallCollisionSoundFactor * VolumeDial, AudioPan(ball1), 0, Pitch(ball1), 0, 0, AudioFade(ball1)

	FlipperCradleCollision ball1, ball2, velocity
End Sub

'///////////////////////////  DROP TARGET HIT SOUNDS  ///////////////////////////

Sub RandomSoundDropTargetReset(obj)
	PlaySoundAtLevelStatic SoundFX("Drop_Target_Reset_" & Int(Rnd*6)+1,DOFContactors), 1, obj
End Sub

Sub SoundDropTargetDrop(obj)
	PlaySoundAtLevelStatic ("Drop_Target_Down_" & Int(Rnd*6)+1), 400, obj
End Sub

'******************************************************
'				Lights & Flashers
'******************************************************

'******************************************************
'******  START FLUPPER DOMES
'******************************************************


'Sub FlashSol187(level)
'		Objlevel(1) = level/255 : FlasherFlash1_Timer
'End Sub

'Sub FlashSol189(level)
'		Objlevel(2) = level/255 : FlasherFlash2_Timer
'End Sub

'Sub FlashSol187(flstate)
'	If Flstate Then
'		Objlevel(1) = 1 : FlasherFlash1_Timer
'	End If
'End Sub

'Sub FlashSol189(flstate)
'	If Flstate Then
'		Objlevel(2) = 1 : FlasherFlash2_Timer
'	End If
'End Sub


Dim TestFlashers, TableRef, FlasherLightIntensity, FlasherFlareIntensity, FlasherBloomIntensity, FlasherOffBrightness

								' *********************************************************************
TestFlashers = 0				' *** set this to 1 to check position of flasher object 			***
Set TableRef = Table1			' *** change this, if your table has another name       			***
FlasherLightIntensity = 0.1		' *** lower this, if the VPX lights are too bright (i.e. 0.1)		***
FlasherFlareIntensity = 0.1		' *** lower this, if the flares are too bright (i.e. 0.1)			***
FlasherBloomIntensity = 0.2		' *** lower this, if the blooms are too bright (i.e. 0.1)			***	
FlasherOffBrightness = 0.3		' *** brightness of the flasher dome when switched off (range 0-2)	***
								' *********************************************************************

Dim ObjLevel(20), objbase(20), objlit(20), objflasher(20), objbloom(20), objlight(20), ObjTargetLevel(20)
'Dim tablewidth, tableheight : tablewidth = TableRef.width : tableheight = TableRef.height
'initialise the flasher color, you can only choose from "green", "red", "purple", "blue", "white" and "yellow"

InitFlasher 1, "blue"
InitFlasher 2, "blue"

' rotate the flasher with the command below (first argument = flasher nr, second argument = angle in degrees)
RotateFlasher 1,-30 : RotateFlasher 2,30' : RotateFlasher 3,90 : RotateFlasher 4,90 

Sub InitFlasher(nr, col)
	' store all objects in an array for use in FlashFlasher subroutine
	Set objbase(nr) = Eval("Flasherbase" & nr) : Set objlit(nr) = Eval("Flasherlit" & nr)
	Set objflasher(nr) = Eval("Flasherflash" & nr) : Set objlight(nr) = Eval("Flasherlight" & nr)
	Set objbloom(nr) = Eval("Flasherbloom" & nr)
	' If the flasher is parallel to the playfield, rotate the VPX flasher object for POV and place it at the correct height
	If objbase(nr).RotY = 0 Then
		objbase(nr).ObjRotZ =  atn( (tablewidth/2 - objbase(nr).x) / (objbase(nr).y - tableheight*1.1)) * 180 / 3.14159
		objflasher(nr).RotZ = objbase(nr).ObjRotZ : objflasher(nr).height = objbase(nr).z + 40
	End If
	' set all effects to invisible and move the lit primitive at the same position and rotation as the base primitive
	objlight(nr).IntensityScale = 0 : objlit(nr).visible = 0 : objlit(nr).material = "Flashermaterial" & nr
	objlit(nr).RotX = objbase(nr).RotX : objlit(nr).RotY = objbase(nr).RotY : objlit(nr).RotZ = objbase(nr).RotZ
	objlit(nr).ObjRotX = objbase(nr).ObjRotX : objlit(nr).ObjRotY = objbase(nr).ObjRotY : objlit(nr).ObjRotZ = objbase(nr).ObjRotZ
	objlit(nr).x = objbase(nr).x : objlit(nr).y = objbase(nr).y : objlit(nr).z = objbase(nr).z
	objbase(nr).BlendDisableLighting = FlasherOffBrightness

	'rothbauerw
	'Adjust the position of the flasher object to align with the flasher base.
	'Comment out these lines if you want to manually adjust the flasher object
	If objbase(nr).roty > 135 then
		objflasher(nr).y = objbase(nr).y + 50
		objflasher(nr).height = objbase(nr).z + 20
	Else
		objflasher(nr).y = objbase(nr).y + 20
		objflasher(nr).height = objbase(nr).z + 50
	End If
	objflasher(nr).x = objbase(nr).x

	'rothbauerw
	'Adjust the position of the light object to align with the flasher base.
	'Comment out these lines if you want to manually adjust the flasher object
	objlight(nr).x = objbase(nr).x
	objlight(nr).y = objbase(nr).y
	objlight(nr).bulbhaloheight = objbase(nr).z -10

	'rothbauerw
	'Assign the appropriate bloom image basked on the location of the flasher base
	'Comment out these lines if you want to manually assign the bloom images
	dim xthird, ythird
	xthird = tablewidth/3
	ythird = tableheight/3

	If objbase(nr).x >= xthird and objbase(nr).x <= xthird*2 then
		objbloom(nr).imageA = "flasherbloomCenter"
		objbloom(nr).imageB = "flasherbloomCenter"
	elseif objbase(nr).x < xthird and objbase(nr).y < ythird then
		objbloom(nr).imageA = "flasherbloomUpperLeft"
		objbloom(nr).imageB = "flasherbloomUpperLeft"
	elseif  objbase(nr).x > xthird*2 and objbase(nr).y < ythird then
		objbloom(nr).imageA = "flasherbloomUpperRight"
		objbloom(nr).imageB = "flasherbloomUpperRight"
	elseif objbase(nr).x < xthird and objbase(nr).y < ythird*2 then
		objbloom(nr).imageA = "flasherbloomCenterLeft"
		objbloom(nr).imageB = "flasherbloomCenterLeft"
	elseif  objbase(nr).x > xthird*2 and objbase(nr).y < ythird*2 then
		objbloom(nr).imageA = "flasherbloomCenterRight"
		objbloom(nr).imageB = "flasherbloomCenterRight"
	elseif objbase(nr).x < xthird and objbase(nr).y < ythird*3 then
		objbloom(nr).imageA = "flasherbloomLowerLeft"
		objbloom(nr).imageB = "flasherbloomLowerLeft"
	elseif  objbase(nr).x > xthird*2 and objbase(nr).y < ythird*3 then
		objbloom(nr).imageA = "flasherbloomLowerRight"
		objbloom(nr).imageB = "flasherbloomLowerRight"
	end if

	' set the texture and color of all objects
	select case objbase(nr).image
		Case "dome2basewhite" : objbase(nr).image = "dome2base" & col : objlit(nr).image = "dome2lit" & col : 
		Case "ronddomebasewhite" : objbase(nr).image = "ronddomebase" & col : objlit(nr).image = "ronddomelit" & col
		Case "domeearbasewhite" : objbase(nr).image = "domeearbase" & col : objlit(nr).image = "domeearlit" & col
	end select
	If TestFlashers = 0 Then objflasher(nr).imageA = "domeflashwhite" : objflasher(nr).visible = 0 : End If
	select case col
		Case "blue" :   objlight(nr).color = RGB(4,120,255) : objflasher(nr).color = RGB(200,255,255) : objbloom(nr).color = RGB(4,120,255) : objlight(nr).intensity = 1500
		Case "green" :  objlight(nr).color = RGB(12,255,4) : objflasher(nr).color = RGB(12,255,4) : objbloom(nr).color = RGB(12,255,4)
		Case "red" :    objlight(nr).color = RGB(255,32,4) : objflasher(nr).color = RGB(255,32,4) : objbloom(nr).color = RGB(255,32,4)
		Case "purple" : objlight(nr).color = RGB(230,49,255) : objflasher(nr).color = RGB(255,64,255) : objbloom(nr).color = RGB(230,49,255) 
		Case "yellow" : objlight(nr).color = RGB(200,173,25) : objflasher(nr).color = RGB(255,200,50) : objbloom(nr).color = RGB(200,173,25)
		Case "white" :  objlight(nr).color = RGB(255,240,150) : objflasher(nr).color = RGB(100,86,59) : objbloom(nr).color = RGB(255,240,150)
		Case "orange" :  objlight(nr).color = RGB(255,70,0) : objflasher(nr).color = RGB(255,70,0) : objbloom(nr).color = RGB(255,70,0)
	end select
	objlight(nr).colorfull = objlight(nr).color
	If TableRef.ShowDT and ObjFlasher(nr).RotX = -45 Then 
		objflasher(nr).height = objflasher(nr).height - 20 * ObjFlasher(nr).y / tableheight
		ObjFlasher(nr).y = ObjFlasher(nr).y + 10
	End If
End Sub

Sub RotateFlasher(nr, angle) : angle = ((angle + 360 - objbase(nr).ObjRotZ) mod 180)/30 : objbase(nr).showframe(angle) : objlit(nr).showframe(angle) : End Sub

Sub ModFlashFlasher(nr, aValue)
	objflasher(nr).visible = 1 : objbloom(nr).visible = 1 : objlit(nr).visible = 1
	objflasher(nr).opacity = 1000 *  FlasherFlareIntensity * aValue
	objbloom(nr).opacity = 100 *  FlasherBloomIntensity * aValue
	objlight(nr).IntensityScale = 0.5 * FlasherLightIntensity * aValue
	objbase(nr).BlendDisableLighting =  FlasherOffBrightness + 10 * aValue
	objlit(nr).BlendDisableLighting = 10 * aValue
	UpdateMaterial "Flashermaterial" & nr,0,0,0,0,0,0,aValue,RGB(255,255,255),0,0,False,True,0,0,0,0 
	Select Case nr
		Case 1 : UpdateMaterial "meshflash187",0,0,0,0,0,0,aValue,RGB(247,247,247),0,0,False,True,0,0,0,0
		Case 2 : UpdateMaterial "meshflash189",0,0,0,0,0,0,aValue,RGB(247,247,247),0,0,False,True,0,0,0,0
	End Select
End Sub



sub Flash187(level)
	If DebugFlashers = True Then debug.print "Flash187 level="&level
	ModFlashFlasher 1,level
end sub


sub Flash189(level)
	debug.print "Flash189 level="&level
	ModFlashFlasher 2,level
end sub


'******************************************************
'******  END FLUPPER DOMES
'******************************************************

UpdateMaterial "meshflash182",0,0,0,0,0,0,0^3,RGB(247,247,247),0,0,False,True,0,0,0,0
flasher_scarecrow.visible = false
UpdateMaterial "meshflash183",0,0,0,0,0,0,0^3,RGB(247,247,247),0,0,False,True,0,0,0,0
flasher_bumpers.visible = false
UpdateMaterial "meshflash185",0,0,0,0,0,0,0^3,RGB(247,247,247),0,0,False,True,0,0,0,0
'flasher_leftsling.visible = false
UpdateMaterial "meshflash187",0,0,0,0,0,0,0^3,RGB(247,247,247),0,0,False,True,0,0,0,0
'flasher_rightsling.visible = false
UpdateMaterial "meshflash189",0,0,0,0,0,0,0^3,RGB(247,247,247),0,0,False,True,0,0,0,0
flasher_batmobile.visible = false
UpdateMaterial "meshflash192",0,0,0,0,0,0,0^3,RGB(247,247,247),0,0,False,True,0,0,0,0

flasher_scareinsert.visible = true
flasher_backwall.visible = true
flasher_joker.visible = true
flasher_scarecrow.visible = true
flasher_bumpers.visible = true
flasher_batmobile.visible = true

flash179 0
flash181 0
flash182 0
flash183 0
flash185 0
flash192 0

sub flash179(level)
	If DebugFlashers = True Then debug.print "flash179 level="&level
	flasher_scareinsert.opacity = 5630 * level
	psc.blenddisablelighting = 82 * level
end sub

sub flash181(level)
	If DebugFlashers = True Then debug.print "flash181 level="&level
	flasher_backwall.opacity = 230 * level
end sub

sub flash182(level)
	If DebugFlashers = True Then debug.print "flash182 level="&level
	flasher_joker.opacity = 130 * level
	bakery2Rsling.blenddisablelighting = 1.25 * level+1
	bakery2Rsling003.blenddisablelighting = 1.25 * level+1
	bakerybumps.blenddisablelighting = 1.25 * level+1
	bakerybumps001.blenddisablelighting = 1.25 * level+1
	batmobile_spot.blenddisablelighting = 1.05 * level+1
	batmobile_spot001.blenddisablelighting = 2 * level+1
	cilin.blenddisablelighting = .35 * level
	cilout.blenddisablelighting = .35 * level
	UpdateMaterial "meshflash182",0,0,0,0,0,0,level,RGB(247,247,247),0,0,False,True,0,0,0,0
end sub

sub flash183(level)
	If DebugFlashers = True Then debug.print "flash183 level="&level
	flasher_scarecrow.opacity = 50 * level
	bakery2rsling003.blenddisablelighting = .05 * level+1
	bakery2rsling.blenddisablelighting = .05 * level+1
	bakerybumps.blenddisablelighting = .05 * level+1
	bakerybumps001.blenddisablelighting = .05 * level+1
	bakery004.blenddisablelighting = .1 * level+1
	bakery4.blenddisablelighting = .1 * level+1
	UpdateMaterial "meshflash183",0,0,0,0,0,0,level,RGB(247,247,247),0,0,False,True,0,0,0,0
end sub

sub flash185(level)
	If DebugFlashers = True Then debug.print "flash185 level="&level
	flasher_bumpers.opacity = 10 * level
	cilin.blenddisablelighting = .15 * level
	cilout.blenddisablelighting = .15 * level
	UpdateMaterial "meshflash185",0,0,0,0,0,0,level,RGB(247,247,247),0,0,False,True,0,0,0,0
end sub

sub flash192(level)
	If DebugFlashers = True Then debug.print "flash192 level="&level
	flasher_batmobile.opacity = 30 * level
	bakery2lsling003.blenddisablelighting = 4 * level+1
	bakery2lsling.blenddisablelighting = 4 * level+1
	UpdateMaterial "meshflash192",0,0,0,0,0,0,level,RGB(247,247,247),0,0,False,True,0,0,0,0
end sub


'*****************************************
'      		General Illumination
'*****************************************
Set GiCallBack2 = GetRef("PFGI")

dim GIisOn
dim gilvl

Sub PFGI(nr, aLvl)
	If DebugGI=True Then debug.print "PFGI nr="&nr&" aLvl="&aLvl

	Dim ii, xx

	if Not GIisOn And aLvl > 0.5 Then
		GIisOn = True
		DOF 103, DOFOn
	Elseif GIisOn And aLvl < 0.25 Then
		GIisOn = False
		DOF 103, DOFOff
	End If

	gilvl = alvl

	For each ii in GI:ii.state=aLvl:Next

	DisableLighting backwall_fils, 25,aLvl
	DisableLighting bulbBW, 5, aLvl
	PinCab_Backglass.Blenddisablelighting = 1.3*aLvl+0.2

	UpdateMaterial "meshtop",0,0,0,0,0,0,aLvl,RGB(247,247,247),0,0,False,True,0,0,0,0
	UpdateMaterial "meshtop1",0,0,0,0,0,0,aLvl,RGB(247,247,247),0,0,False,True,0,0,0,0
	UpdateMaterial "pfoff",0,0,0,0,0,0,1-aLvl,RGB(247,247,247),0,0,False,True,0,0,0,0

	bulbBW.BlendDisableLighting = 8 * aLvl			'0-8

	flasherbase1.blenddisablelighting=0.3*aLvl
	flasherbase2.blenddisablelighting=0.3*aLvl

	UpperTrack.Blenddisablelighting = 0.1*aLvl+0.9
	DecalDropRamp.Blenddisablelighting = 0.1*aLvl+0.9
	DecalDropRamp001.Blenddisablelighting = 0.1*aLvl+0.9
	DecalDropRamp002.Blenddisablelighting = 0.1*aLvl+0.9
	DecalDropRamp003.Blenddisablelighting = 0.1*aLvl+0.9
	DecalDropRamp004.Blenddisablelighting = 0.1*aLvl+0.9
	DecalDropRamp005.Blenddisablelighting = 0.1*aLvl+0.9
	BatMobile.Blenddisablelighting = 0.1*aLvl+0.9


'	If aLvl = 0 Then numberofsources = 0 else numberofsources = numberofsources_hold 'Dynamic Ball Shadows

'	if ObjLevel(1) <= 0 And ObjLevel(2) <= 0 Then
'		'commenting this out for now, as it has issues with flashers
'		if aLvl = 0 then										'GI OFF, let's hide ON prims
'			OnPrimsVisible False
'			for each GIX in GI:GIX.state = 0:Next
'			if ballbrightness <> -1 then ballbrightness = ballbrightMin
'		Elseif aLvl = 1 then									'GI ON, let's hide OFF prims
'			OffPrimsVisible False
'			for each GIX in GI:GIX.state = 1:Next
'			if ballbrightness <> -1 then ballbrightness = ballbrightMax
'		Else
'			if giprevalvl = 0 Then								'GI has just changed from OFF to fading, let's show ON
'				'fx_relay_on
'				OnPrimsVisible True
'				ballbrightness = ballbrightMin + 1
'			elseif giprevalvl = 1 Then							'GI has just changed from ON to fading, let's show OFF
'				'fx_relay_off
'				OffPrimsVisible true
'				ballbrightness = ballbrightMax - 1
'			Else
'				'no change
'			end if
'		end if
'
'		UpdateMaterial "GI_ON_CAB",		0,0,0,0,0,0,aLvl^2,RGB(255,255,255),0,0,False,True,0,0,0,0
'		UpdateMaterial "GI_ON_Plastic",	0,0,0,0,0,0,aLvl^3,RGB(255,255,255),0,0,False,True,0,0,0,0
'		UpdateMaterial "GI_ON_Metals",	0,0,0,0,0,0,aLvl^1,RGB(255,255,255),0,0,False,True,0,0,0,0
'		UpdateMaterial "GI_ON_Bulbs",	0,0,0,0,0,0,aLvl^1,RGB(255,255,255),0,0,False,True,0,0,0,0
'	Elseif ObjLevel(1) > 0 Or ObjLevel(2) > 0 then 
'		if aLvl = 0 Or aLvl = 1 then
'			'nothing, flashers just fading and no real change to gi
'		Elseif giprevalvl = 0 then 'gi went ON while some flasher was fading
'			'debug.print "##on prims to on image"
'			OnPrimSwap "ON"
'		elseif giprevalvl = 1 Then 'gi went OFF while some flasher was fading
'			'debug.print "##on prims to OFF images"
'			OnPrimSwap "OFF"
'		end if
'		
'	end If

'Sideblades: ^5 (fastest to go off)
'Plastics: ^3 (medium speed)
'Bulbs: ^0.5 (not sure how this would look. Would be the slowest)
'metals:^2
'
'GI_ON_Bulbs
'GI_ON_CAB
'GI_ON_Metals
'GI_ON_Plastic

	'debug.print aLvl
	'debug.print aLvl^5
'
'	PLAYFIELD_GI1.opacity = PFGIOFFOpacity - (PFGIOFFOpacity * alvl^3) 'TODO 60
'
'	'debug.print "*** --> " & FlashLevelToIndex(aLvl, 3)
'
'    Select case FlashLevelToIndex(aLvl, 3)
'		Case 0:plastics.Image = "plastics_000"
'		Case 1:plastics.Image = "plastics_033"
'		Case 2:plastics.Image = "plastics_066"
'        Case 3:plastics.Image = "plastics_100"
'    End Select
'	
'	'0.7 - 0.05
'	FlasherOffBrightness = 0.7*aLvl
'	Flasherbase2.blenddisablelighting = FlasherOffBrightness
'	Flasherbase1.blenddisablelighting = FlasherOffBrightness
'
'	lamp_bulbs.blenddisablelighting = 10 * aLvl : lamp_bulbsOFF.blenddisablelighting = 10 * aLvl
'	bulbs.blenddisablelighting = 0.5 * aLvl : bulbsOFF.blenddisablelighting = 0.5 * aLvl
'
'	'ball
'	if ballbrightness <> ballbrightMax Or ballbrightness <> ballbrightMin Or ballbrightness <> -1 then ballbrightness = INT(alvl * (ballbrightMax - ballbrightMin) + ballbrightMin)
'	
End Sub

'******************************************************
'****  LAMPZ
'******************************************************

Dim NullFader : set NullFader = new NullFadingObject
Dim Lampz : Set Lampz = New VPMLampUpdater
InitLampsNF              ' Setup lamp assignments

Function FlashLevelToIndex(Input, MaxSize)
	FlashLevelToIndex = cInt(MaxSize * Input)
End Function

'Material swap arrays.
'Dim TextureArray1: TextureArray1 = Array("Plastic with an image trans", "Plastic with an image trans","Plastic with an image trans","Plastic with an image")
Dim DLintensity

Sub FadeMaterial(pri, ByVal aLvl)
	'debug.print pri.material & " --> value: " & aLvl
	UpdateMaterial pri.material,0,0,0,0,0,0,aLvl,RGB(255,255,255),0,0,False,True,0,0,0,0
End Sub

Sub DisableLighting(pri, DLintensity, ByVal aLvl)	'cp's script  DLintensity = disabled lighting intesity
	pri.blenddisablelighting = aLvl * DLintensity
End Sub

sub DisableLightingMinMax(pri, DLintensityMin, DLintensityMax, ByVal aLvl)    'cp's script  DLintensity = disabled lighting intesity
    pri.blenddisablelighting = (aLvl * (DLintensityMax-DLintensityMin)) + DLintensityMin
End Sub

Sub InitLampsNF()

	Lampz.MassAssign(1)= l1                      'Start Button
	Lampz.Callback(1) = "DisableLighting StartButton, 5,"
	Lampz.Callback(1) = "DisableLightingMinMax StartButtonInner, 1, 5,"
	Lampz.MassAssign(2)= l2                      'Tournament Start Button
	Lampz.Callback(2) = "DisableLighting VRTourneyButton, 5,"
	Lampz.MassAssign(3)= l3
	Lampz.MassAssign(3)= l3B
	Lampz.Callback(3) = "DisableLighting p3, 120,"
	Lampz.Callback(3) = "DisableLightingMinMax p3o, 1, 33,"
	Lampz.MassAssign(4)= l4
	Lampz.MassAssign(4)= l4B
	Lampz.Callback(4) = "DisableLighting p4, 120,"
	Lampz.Callback(4) = "DisableLightingMinMax p4o, 1, 33,"
	Lampz.MassAssign(5)= l5
	Lampz.MassAssign(5)= l5B
	Lampz.Callback(5) = "DisableLighting p5, 120,"
	Lampz.Callback(5) = "DisableLightingMinMax p5o, 1, 33,"
	Lampz.MassAssign(6)= l6
	Lampz.Callback(6) = "DisableLighting p6, 120,"
	Lampz.Callback(6) = "DisableLightingMinMax p6o, 1, 33,"
	Lampz.MassAssign(7)= l7
	Lampz.Callback(7) = "DisableLighting p7, 120,"
	Lampz.Callback(7) = "DisableLightingMinMax p7o, 1, 33,"
	Lampz.MassAssign(8)= l8
	Lampz.Callback(8) = "DisableLighting p8, 120,"
	Lampz.Callback(8) = "DisableLightingMinMax p8o, 1, 33,"
	Lampz.MassAssign(9)= l9
	Lampz.MassAssign(9)= l9B
	Lampz.Callback(9) = "DisableLighting p9, 120,"
	Lampz.Callback(9) = "DisableLightingMinMax p9o, 1, 33,"
	Lampz.MassAssign(10)= l10
	Lampz.MassAssign(10)= l10B
	Lampz.Callback(10) = "DisableLighting p10, 120,"
	Lampz.Callback(10) = "DisableLightingMinMax p10o, 1, 33,"
	Lampz.MassAssign(11)= l11
	Lampz.MassAssign(11)= l11B
	Lampz.Callback(11) = "DisableLighting p11, 120,"
	Lampz.Callback(11) = "DisableLightingMinMax p11o, 1, 33,"
	Lampz.MassAssign(12)= l12
	Lampz.MassAssign(12)= l12B
	Lampz.Callback(12) = "DisableLighting p12, 120,"
	Lampz.Callback(12) = "DisableLightingMinMax p12o, 1, 33,"
	Lampz.MassAssign(13)= l13
	Lampz.MassAssign(13)= l13B
	Lampz.Callback(13) = "DisableLighting p13, 120,"
	Lampz.Callback(13) = "DisableLightingMinMax p13o, 1, 33,"
	Lampz.MassAssign(14)= l14
	Lampz.MassAssign(14)= l14B
	Lampz.Callback(14) = "DisableLighting p14, 120,"
	Lampz.Callback(14) = "DisableLightingMinMax p14o, 1, 33,"
	Lampz.MassAssign(15)= l15
	Lampz.MassAssign(15)= l15B
	Lampz.Callback(15) = "DisableLighting p15, 120,"
	Lampz.Callback(15) = "DisableLightingMinMax p15o, 1, 33,"
	Lampz.MassAssign(16)= l16
	Lampz.MassAssign(16)= l16B
	Lampz.Callback(16) = "DisableLighting p16, 120,"
	Lampz.Callback(16) = "DisableLightingMinMax p16o, 1, 33,"
	Lampz.MassAssign(17)= l17
	Lampz.MassAssign(17)= l17B
	Lampz.Callback(17) = "DisableLighting p17, 120,"
	Lampz.Callback(17) = "DisableLightingMinMax p17o, 1, 33,"
	Lampz.MassAssign(18)= l18
	Lampz.MassAssign(18)= l18B
	Lampz.Callback(18) = "DisableLighting p18, 120,"
	Lampz.Callback(18) = "DisableLightingMinMax p18o, 1, 33,"
	Lampz.MassAssign(19)= l19
	Lampz.MassAssign(19)= l19B
	Lampz.Callback(19) = "DisableLighting p19, 120,"
	Lampz.Callback(19) = "DisableLightingMinMax p19o, 1, 33,"
	Lampz.MassAssign(20)= l20
	Lampz.Callback(20) = "DisableLighting p20, 120,"
	Lampz.Callback(20) = "DisableLightingMinMax p20o, 1, 33,"
	Lampz.MassAssign(21)= l21
	Lampz.Callback(21) = "DisableLighting p21, 120,"
	Lampz.Callback(21) = "DisableLightingMinMax p21o, 1, 33,"
	Lampz.MassAssign(22)= l22
	Lampz.Callback(22) = "DisableLighting p22, 120,"
	Lampz.Callback(22) = "DisableLightingMinMax p22o, 1, 33,"
	Lampz.MassAssign(23)= l23
	Lampz.Callback(23) = "DisableLighting p23, 120,"
	Lampz.Callback(23) = "DisableLightingMinMax p23o, 1, 33,"
	Lampz.MassAssign(24)= l20
	Lampz.Callback(24) = "DisableLighting p24, 120,"
	Lampz.Callback(24) = "DisableLightingMinMax p24o, 1, 33,"
	Lampz.MassAssign(25)= l20
	Lampz.Callback(25) = "DisableLighting p25, 120,"
	Lampz.Callback(25) = "DisableLightingMinMax p25o, 1, 33,"
	Lampz.MassAssign(26)= l26
	Lampz.Callback(26) = "DisableLighting p26, 120,"
	Lampz.Callback(26) = "DisableLightingMinMax p26o, 1, 33,"
	Lampz.MassAssign(27)= l27
	Lampz.Callback(27) = "DisableLighting p27, 120,"
	Lampz.Callback(27) = "DisableLightingMinMax p27o, 1, 33,"
	Lampz.MassAssign(28)= l28
	Lampz.Callback(28) = "DisableLighting p28, 120,"
	Lampz.Callback(28) = "DisableLightingMinMax p28o, 1, 33,"
	Lampz.MassAssign(29)= l29
	Lampz.Callback(29) = "DisableLighting p29, 120,"
	Lampz.Callback(29) = "DisableLightingMinMax p29o, 1, 33,"
'	Lampz.MassAssign(30)= l30
'	Lampz.MassAssign(30)= l30B
'	Lampz.Callback(30) = "DisableLighting p30, 25,"
	Lampz.MassAssign(31)= l31
	Lampz.MassAssign(31)= l31B
	Lampz.Callback(31) = "DisableLighting p31, 120,"
	Lampz.Callback(31) = "DisableLightingMinMax p31o, 1, 33,"
	Lampz.MassAssign(32)= l32
	Lampz.MassAssign(32)= l32B
	Lampz.Callback(32) = "DisableLighting p32, 120,"
	Lampz.Callback(32) = "DisableLightingMinMax p32o, 1, 33,"
	Lampz.MassAssign(33)= l33
	Lampz.Callback(33) = "DisableLighting p33, 120,"
	Lampz.Callback(33) = "DisableLightingMinMax p33o, 1, 33,"
	Lampz.MassAssign(34)= l34
	Lampz.Callback(34) = "DisableLighting p34, 120,"
	Lampz.Callback(34) = "DisableLightingMinMax p34o, 1, 33,"
	Lampz.MassAssign(35)= l35
	Lampz.Callback(35) = "DisableLighting p35, 120,"
	Lampz.Callback(35) = "DisableLightingMinMax p35o, 1, 33,"
	Lampz.MassAssign(36)= l36
	Lampz.Callback(36) = "DisableLighting p36, 120,"
	Lampz.Callback(36) = "DisableLightingMinMax p36o, 1, 33,"
	Lampz.MassAssign(37)= l37
	Lampz.Callback(37) = "DisableLightingMinMax p37, 1, 8,"
	Lampz.Callback(37) = "DisableLightingMinMax p37o, 0, 6,"
	Lampz.MassAssign(38)= l38
	Lampz.Callback(38) = "DisableLightingMinMax p38, 1, 8,"
	Lampz.Callback(38) = "DisableLightingMinMax p38o, 0, 6,"
	Lampz.MassAssign(39)= l39
	Lampz.Callback(39) = "DisableLighting p39, 120,"
	Lampz.Callback(39) = "DisableLightingMinMax p39o, 1, 33,"
	Lampz.MassAssign(40)= l40
	Lampz.Callback(40) = "DisableLighting p40, 120,"
	Lampz.Callback(40) = "DisableLightingMinMax p40o, 1, 33,"
	Lampz.MassAssign(41)= l41
	Lampz.Callback(41) = "DisableLightingMinMax p41, 1, 8,"
	Lampz.Callback(41) = "DisableLightingMinMax p41o, 0, 6,"
	Lampz.MassAssign(42)= l42
	Lampz.MassAssign(42)= l42B
	Lampz.Callback(42) = "DisableLighting p42, 120,"
	Lampz.Callback(42) = "DisableLightingMinMax p42o, 1, 33,"
	Lampz.MassAssign(43)= l43
	Lampz.MassAssign(43)= l43B
	Lampz.Callback(43) = "DisableLighting p43, 120,"
	Lampz.Callback(43) = "DisableLightingMinMax p43o, 1, 33,"	
	Lampz.MassAssign(44)= l44
	Lampz.MassAssign(44)= l44B
	Lampz.Callback(44) = "DisableLighting p44, 120,"
	Lampz.Callback(44) = "DisableLightingMinMax p44o, 1, 33,"
	Lampz.MassAssign(45)= l45
	Lampz.MassAssign(45)= l45B
	Lampz.Callback(45) = "DisableLighting p45, 120,"
	Lampz.Callback(45) = "DisableLightingMinMax p45o, 1, 33,"
	Lampz.MassAssign(47)= l47
	Lampz.Callback(47) = "DisableLighting p47, 120,"
	Lampz.Callback(47) = "DisableLightingMinMax p47o, 1, 33,"
	Lampz.MassAssign(48)= l48
	Lampz.Callback(48) = "DisableLighting p48, 120,"
	Lampz.Callback(48) = "DisableLightingMinMax p48o, 1, 33,"
	Lampz.MassAssign(49)= l49
	Lampz.Callback(49) = "DisableLighting p49, 120,"
	Lampz.Callback(49) = "DisableLightingMinMax p49o, 1, 33,"
	Lampz.MassAssign(50)= l50
	Lampz.MassAssign(50)= l50B
	Lampz.Callback(50) = "DisableLighting p50, 120,"
	Lampz.Callback(50) = "DisableLightingMinMax p50o, 1, 33,"
	Lampz.MassAssign(51)= l51
	Lampz.MassAssign(51)= l51B
	Lampz.Callback(51) = "DisableLighting p51, 120,"
	Lampz.Callback(51) = "DisableLightingMinMax p51o, 1, 33,"
	Lampz.MassAssign(52)= l52
	Lampz.MassAssign(52)= l52B
	Lampz.Callback(52) = "DisableLighting p52, 120,"
	Lampz.Callback(52) = "DisableLightingMinMax p52o, 1, 33,"
	Lampz.MassAssign(53)= l53
	Lampz.Callback(53) = "DisableLighting p53, 120,"
	Lampz.Callback(53) = "DisableLightingMinMax p53o, 1, 33,"
	Lampz.MassAssign(54)= l54
	Lampz.Callback(54) = "DisableLighting p54, 120,"
	Lampz.Callback(54) = "DisableLightingMinMax p54o, 1, 33,"
	Lampz.MassAssign(55)= l55
	Lampz.Callback(55) = "DisableLighting p55, 120,"
	Lampz.Callback(55) = "DisableLightingMinMax p55o, 1, 33,"
	Lampz.MassAssign(56)= l56
	Lampz.Callback(56) = "DisableLighting p56, 80,"
	Lampz.Callback(56) = "DisableLightingMinMax p56o, 1, 13,"
	Lampz.MassAssign(57)= l57
	Lampz.MassAssign(57)= l57B
	Lampz.Callback(57) = "DisableLighting p57, 120,"
	Lampz.Callback(57) = "DisableLightingMinMax p57o, 1, 33,"
	Lampz.MassAssign(58)= l58
	Lampz.Callback(58) = "DisableLighting p58, 120,"
	Lampz.Callback(58) = "DisableLightingMinMax p58o, 1, 33,"
	Lampz.MassAssign(59)= l59
	Lampz.Callback(59) = "DisableLighting bulbBL, 3,"
	Lampz.Callback(59) = "DisableLighting BL_fil, 28,"
	Lampz.Callback(60) = "DisableLighting bulbL60, 52,"
	Lampz.Callback(61) = "DisableLighting bulbL61, 52,"
	Lampz.MassAssign(62)= l62
	Lampz.Callback(62) = "DisableLighting bulbTL, 3,"
	Lampz.Callback(62) = "DisableLighting TL_fil, 28,"
	Lampz.MassAssign(63)= l63
	Lampz.Callback(63) = "DisableLighting p63, 120,"
	Lampz.Callback(63) = "DisableLightingMinMax p63o, 1, 33,"
	Lampz.MassAssign(64)= l64
	Lampz.Callback(64) = "DisableLighting p64, 120,"
	Lampz.Callback(64) = "DisableLightingMinMax p64o, 1, 33,"
	Lampz.MassAssign(65)= l65
	Lampz.Callback(65) = "DisableLighting p65, 120,"
	Lampz.Callback(65) = "DisableLightingMinMax p65o, 1, 33,"
	Lampz.MassAssign(66)= l66
	Lampz.Callback(66) = "DisableLighting p66, 120,"
	Lampz.Callback(66) = "DisableLightingMinMax p66o, 1, 33,"
	Lampz.MassAssign(67)= l67
	Lampz.Callback(67) = "DisableLighting p67, 120,"
	Lampz.Callback(67) = "DisableLightingMinMax p67o, 1, 33,"
	Lampz.MassAssign(68)= l68
	Lampz.Callback(68) = "DisableLighting bulbBR, 3,"
	Lampz.Callback(68) = "DisableLighting BR_fil, 28,"
	Lampz.MassAssign(69)= l69
	Lampz.MassAssign(69)= l69B
	Lampz.Callback(69) = "DisableLighting p69, 120,"
	Lampz.Callback(69) = "DisableLightingMinMax p69o, 1, 33,"
	Lampz.MassAssign(70)= l70
	Lampz.MassAssign(70)= l70B
	Lampz.Callback(70) = "DisableLighting p70, 120,"
	Lampz.Callback(70) = "DisableLightingMinMax p70o, 1, 33,"
	Lampz.MassAssign(71)= l71
	Lampz.MassAssign(71)= l71B
	Lampz.Callback(71) = "DisableLighting p71, 120,"
	Lampz.Callback(71) = "DisableLightingMinMax p71o, 1, 33,"
	Lampz.MassAssign(72)= l72
	Lampz.MassAssign(72)= l72B
	Lampz.Callback(72) = "DisableLighting p72, 120,"
	Lampz.Callback(72) = "DisableLightingMinMax p72o, 1, 33,"
	Lampz.MassAssign(73)= l73
	Lampz.MassAssign(73)= l73B
	Lampz.Callback(73) = "DisableLighting p73, 120,"
	Lampz.Callback(73) = "DisableLightingMinMax p73o, 1, 33,"
	Lampz.MassAssign(74)= l74
	Lampz.MassAssign(74)= l74B
	Lampz.Callback(74) = "DisableLighting p74, 120,"
	Lampz.Callback(74) = "DisableLightingMinMax p74o, 1, 33,"
	Lampz.MassAssign(75)= l75
	Lampz.Callback(75) = "DisableLighting bulbTR, 3,"
	Lampz.Callback(75) = "DisableLighting TR_fil, 20,"
	Lampz.MassAssign(76)= l76
	Lampz.MassAssign(76)= l76B
	Lampz.Callback(76) = "DisableLighting p76, 180,"
	Lampz.Callback(76) = "DisableLightingMinMax p76o, 1, 33,"
	Lampz.MassAssign(78)= l78A
	Lampz.MassAssign(78)= l78B
	Lampz.Callback(78) = "FadeMaterial batmobile_spot002, "
	Lampz.Callback(78) = "FadeMaterial decaldropramp003, "
	Lampz.Callback(78) = "FadeMaterial decaldropramp005, "
	Lampz.MassAssign(79)= l79A
	Lampz.MassAssign(79)= l79B
	Lampz.Callback(79) = "FadeMaterial joker002, "
	Lampz.MassAssign(80)= l80A
	Lampz.MassAssign(80)= l80B
	Lampz.Callback(80) = "FadeMaterial bakery006, "
	Lampz.Callback(80) = "DisableLighting bakery006, 2,"
	Lampz.MassAssign(86)= l86
	Lampz.Callback(86) = "DisableLighting p86, 120,"
	Lampz.Callback(86) = "DisableLightingMinMax p86o, 1, 33,"
	Lampz.MassAssign(87)= l87
	Lampz.Callback(87) = "DisableLighting p87, 120,"
	Lampz.Callback(87) = "DisableLightingMinMax p87o, 1, 33,"
	Lampz.MassAssign(88)= l88
	Lampz.Callback(88) = "DisableLighting p88, 120,"
	Lampz.Callback(88) = "DisableLightingMinMax p88o, 1, 33,"

	'Turn off all lamps on startup
	lampz.Init	'This just turns state of any lamps to 1

	'Turn off all lamps on startup
	Dim x: For x = 0 to 150: Lampz.State(x) = 0: Next


End Sub


'***************************************
'System 11 GI On/Off
'***************************************
'Sub GIOn  : SetGI False: End Sub 'These are just debug commands now
'Sub GIOff : SetGI True : End Sub


Dim GIoffMult : GIoffMult = 2 'adjust how bright the inserts get when the GI is off
Dim GIoffMultFlashers : GIoffMultFlashers = 2	'adjust how bright the Flashers get when the GI is off


'Dim TextureArray1: TextureArray1 = Array("Plastic with an image trans", "Plastic with an image trans","Plastic with an image trans","Plastic with an image")
'const ballbrightMax = 105
'const ballbrightMin = 15



'Helper functions

'Dim GiOffFOP
'Sub SetGI(aOn)
''	PlayRelay aOn, 13
'	Select Case aOn
'		Case True  'GI off
'			'fx_relay_off
'			PlaySoundAtLevelStatic ("fx_relay_off"), RelaySoundLevel, p30off
'			SetLamp 111, 0	'Inverted, Solenoid cuts GI circuit on this era of game
'			l57.intensity=66:l58.intensity=66:l59.intensity=66
'			l57.falloff=250:l58.falloff=250:l59.falloff=250
'		Case False 
'			'fx_relay_on
'			PlaySoundAtLevelStatic ("fx_relay_on"), RelaySoundLevel, p30off
'			SetLamp 111, 5
'			l57.intensity=11:l58.intensity=11:l59.intensity=11
'			l57.falloff=200:l58.falloff=200:l59.falloff=200
'	End Select
'End Sub


'****************************************************************
'				Class jungle nf (what does this mean?!?)
'****************************************************************

Class NullFadingObject
	Public Property Let IntensityScale(input)
		
	End Property
End Class


Class VPMLampUpdater
	Public Name
	Public Obj(150), OnOff(150)
	Private UseCallback(150), cCallback(150)

	Sub Class_Initialize()
		Name = "VPMLampUpdater" 'NEEDS TO BE CHANGED IF THERE'S MULTIPLE OF THESE OBJECTS, OTHERWISE CALLBACKS WILL INTERFERE WITH EACH OTHER!!
		Dim x : For x = 0 to uBound(OnOff)
		    OnOff(x) = 0
			Set Obj(x) = NullFader
		Next
	End Sub

	Public Property Let Callback(idx, String)
		UseCallBack(idx) = True
		'cCallback(idx) = String 'old execute method
		'New method: build wrapper subs using ExecuteGlobal, then call them
		cCallback(idx) = cCallback(idx) & "___" & String	'multiple strings dilineated by 3x _

		dim tmp : tmp = Split(cCallback(idx), "___")

		dim str, x : for x = 0 to uBound(tmp)	'build proc contents
			'If Not tmp(x)="" then str = str & "	" & tmp(x) & " aLVL" & "	'" & x & vbnewline	'more verbose
			If Not tmp(x)="" then str = str & tmp(x) & " aLVL:"
		Next

		dim out : out = "Sub " & name & idx & "(aLvl):" & str & "End Sub"
		'if idx = 132 then msgbox out	'debug
		ExecuteGlobal Out
	End Property
	
	'Mass assign, Builds arrays where necessary
	'Sub MassAssign(aIdx, aInput)
	Public Property Let MassAssign(aIdx, aInput)
		If typename(obj(aIdx)) = "NullFadingObject" Then 'if empty, use Set
			if IsArray(aInput) then
				obj(aIdx) = aInput
			Else
				Set obj(aIdx) = aInput
			end if
		Else
			Obj(aIdx) = AppendArray(obj(aIdx), aInput)
		end if
	End Property

	Sub SetLamp(aIdx, aOn) : state(aIdx) = aOn : End Sub

	Public Property Let state(ByVal x, input)
		Dim xx
		OnOff(x) = input
		If IsArray(obj(x)) Then
			For Each xx In obj(x)
				xx.IntensityScale = input
				'debug.print x&"  obj.Intensityscale = " & input
			Next
		Else
			obj(x).Intensityscale = input
			'debug.print "obj("&x&").Intensityscale = " & input
		End if
		'If UseCallBack(x) then execute cCallback(x) & " " & (Lvl(x))	'Callback
		If UseCallBack(x) then Proc name & x,input
	End Property

	Public Property Get state(idx) : state = OnOff(idx) : end Property

	Public Sub TurnOnStates()	'If obj contains any light objects, set their states to 1 (Fading is our job!)
		dim idx : for idx = 0 to uBound(obj)
			if IsArray(obj(idx)) then
				dim x, tmp : tmp = obj(idx) 'set tmp to array in order to access it
				for x = 0 to uBound(tmp)
					if typename(tmp(x)) = "Light" then DisableState tmp(x)' : debugstr = debugstr & tmp(x).name & " state'd" & vbnewline
					tmp(x).intensityscale = 0.001 ' this can prevent init stuttering
				Next
			Else
				if typename(obj(idx)) = "Light" then DisableState obj(idx)' : debugstr = debugstr & obj(idx).name & " state'd (not array)" & vbnewline
				obj(idx).intensityscale = 0.001 ' this can prevent init stuttering
			end if
		Next
	End Sub
	Private Sub DisableState(ByRef aObj) : aObj.FadeSpeedUp = 1000 : aObj.State = 1 : End Sub	'turn state to 1

	Public Sub Init()	'Just runs TurnOnStates right now
		TurnOnStates
	End Sub
	
End Class


'Helper functions
Sub Proc(String, Callback)	'proc using a string and one argument
	'On Error Resume Next
	Dim p
	Set P = GetRef(String)
	P Callback
	If err.number = 13 Then  MsgBox "Proc error! No such procedure: " & vbNewLine & String
	If err.number = 424 Then MsgBox "Proc error! No such Object"
End Sub

Function AppendArray(ByVal aArray, aInput)	'append one value, object, or Array onto the End of a 1 dimensional array
	If IsArray(aInput) Then 'Input is an array...
		Dim tmp
		tmp = aArray
		If Not IsArray(aArray) Then	'if not array, create an array
			tmp = aInput
		Else					'Append existing array with aInput array
			ReDim Preserve tmp(UBound(aArray) + UBound(aInput) + 1)	'If existing array, increase bounds by uBound of incoming array
			Dim x
			For x = 0 To UBound(aInput)
				If IsObject(aInput(x)) Then
					Set tmp(x + UBound(aArray) + 1 ) = aInput(x)
				Else
					tmp(x + UBound(aArray) + 1 ) = aInput(x)
				End If
			Next
			AppendArray = tmp	 'return new array
		End If
	Else 'Input is NOT an array...
		If Not IsArray(aArray) Then	'if not array, create an array
			aArray = Array(aArray, aInput)
		Else
			ReDim Preserve aArray(UBound(aArray) + 1)	'If array, increase bounds by 1
			If IsObject(aInput) Then
				Set aArray(UBound(aArray)) = aInput
			Else
				aArray(UBound(aArray)) = aInput
			End If
		End If
		AppendArray = aArray 'return new array
	End If
End Function


'******************************************************
'****  END LAMPZ
'******************************************************

''*****************************************
''      		General Illumination
''*****************************************
'Set GiCallBack = GetRef("UpdateGi")
'
'dim GIisOn
'
'Sub UpdateGi(nr,enabled)
'	Dim ii, xx
'	Select Case nr
'	Case 0
'		If enabled Then
'			DOF 103, DOFOn
'			GIisOn=true
'			For each ii in GI:ii.state=1:Next
'			For each ii in BWLamps:ii.IntensityScale=1:Next
''			Playfield_GI.visible=1
'			playfield_mesh001.visible=0
'			bulbBW.BlendDisableLighting = 8
'			For each xx in battrackcol: xx.image = "batmobile_": Next
'			For each xx in bakerycol: xx.image = "bakery1": Next
'			if Lampstate(80) <> 0 Then
'				For each xx in bakery4scareflashcol: xx.image = "scarecrow_spot": Next
'			Else
'				For each xx in bakery4scareflashcol: xx.image = "scarecrow_": Next
'			End if
'			For each xx in bakery3batflashcol: xx.image = "bakery3": Next
'			For each xx in bakery2rslingcol: xx.image = "bakery2": Next
'			For each xx in bakery2lslingcol: xx.image = "bakery2": Next
'			For each xx in bakerybumpscol: xx.image = "bakerybump": Next
'			For each xx in bakeryjokercol: xx.image = "bakeryjoke": Next
'		Else
'			DOF 103, DOFOff
'			GIisOn=false
'			For each ii in GI:ii.state=0:Next
'			For each ii in BWLamps:ii.IntensityScale=0:Next
''			Playfield_GI.visible=0
'			playfield_mesh001.visible=1
'			bulbBW.BlendDisableLighting = 0
'			For each xx in battrackcol: xx.image = "batmobile_off": Next
'			For each xx in bakerycol: xx.image = "bakery1_off": Next
'			if Lampstate(80) <> 0 Then
'				For each xx in bakery4scareflashcol: xx.image = "scarecrow_offspot": Next
'			Else
'				For each xx in bakery4scareflashcol: xx.image = "scarecrow_off": Next
'			End if
'			For each xx in bakery3batflashcol: xx.image = "bakery3_off": Next
'			For each xx in bakery2rslingcol: xx.image = "bakery2_off": Next
'			For each xx in bakery2lslingcol: xx.image = "bakery2_off": Next
'			For each xx in bakerybumpscol: xx.image = "bakerybump_off": Next
'			For each xx in bakeryjokercol: xx.image = "bakeryjoke_off": Next
'		End If
'	End Select
''	UpdateLamp78
''	UpdateLamp80
''	UpdateLamp183
''	UpdateLamp187
''	UpdateLamp189
''	UpdateLamp192
'End Sub
'
''*****************************************
'' 			Lights Mapping
''*****************************************
'
'Dim LampState(200), FadingLevel(200)
'Dim FlashSpeedUp(200), FlashSpeedDown(200), FlashMin(200), FlashMax(200), FlashLevel(200)
'
'Sub InitLights
'    Dim x
'    For x = 0 to 200
'        LampState(x) = 0       	 ' current light state
'        FadingLevel(x) = 0       ' current light fading level
'        FlashSpeedUp(x) = 0.02    ' faster speed when turning on the flasher
'        FlashSpeedDown(x) = 0.05 ' slower speed when turning off the flasher
'        FlashMax(x) = 200          ' the maximum value when on, usually 1
'        FlashMin(x) = 0          ' the minimum value when off, usually 0
'        FlashLevel(x) = 0        ' the intensity of the flashers, usually from 0 to 1
'    Next
'	LampTimer.Interval = -1
'	LampTimer.Enabled = 1
'End Sub
'
'Sub LampTimer_Timer()
'    Dim chgLamp, num, chg, ii
'    chgLamp = Controller.ChangedLamps
'    If Not IsEmpty(chgLamp) Then
'        For ii = 0 To UBound(chgLamp)
'            LampState(chgLamp(ii, 0) ) = chgLamp(ii, 1)       'keep the real state in an array
'        Next
'    End If
'    UpdateLamps
'End Sub
'
'Sub UpdateLamps
'	'Inserts
'	FadeLamp 3,  l3
'	FadeLamp 4,  l4
'	FadeLamp 5,  l5
'	FadeLamp 6,  l6
'	FadeLamp 7,  l7
'	FadeLamp 8,  l8
'	FadeLamp 9,  l9
'	FadeLamp 10,  l10
'	FadeLamp 11,  l11
'	FadeLamp 12,  l12
'	FadeLamp 13,  l13
'	FadeLamp 14,  l14
'	FadeLamp 15,  l15
'	FadeLamp 16,  l16
'	FadeLamp 17,  l17
'	FadeLamp 18,  l18
'	FadeLamp 19,  l19
'	FadeLamp 20,  l20
'	FadeLamp 21,  l21
'	FadeLamp 22,  l22
'	FadeLamp 23,  l23
'	FadeLamp 24,  l24
'	FadeLamp 25,  l25
'	FadeLamp 26,  l26
'	FadeLamp 27,  l27
'	FadeLamp 28,  l28
'	FadeLamp 29,  l29
'	FadeLamp 31,  l31
'	FadeLamp 32,  l32
'	FadeLamp 33,  l33
'	FadeLamp 34,  l34
'	FadeLamp 35,  l35
'	FadeLamp 36,  l36
'	FadeLamp 37,  l37
'	FadeLamp 38,  l38
'	FadeLamp 39,  l39
'	FadeLamp 40,  l40
'	FadeLamp 41,  l41
'	FadeLamp 42,  l42
'	FadeLamp 43,  l43
'	FadeLamp 44,  l44
'	FadeLamp 45,  l45
'	FadeLamp 47,  l47
'	FadeLamp 48,  l48
'	FadeLamp 49,  l49
'	FadeLamp 50,  l50
'	FadeLamp 51,  l51
'	FadeLamp 52,  l52
'	FadeLamp 53,  l53
'	FadeLamp 54,  l54
'	FadeLamp 55,  l55
'	FadeLamp 56,  l56
'	FadeLamp 57,  l57
'	FadeLamp 58,  l58
'	MiniPFLamps 59,  l59		'minipf BL
'	FadePrim 59,  bulbBL, 8		'minipf BL
'	FadeLamp 60,  l60			'left bumper
'	FadePrim 60,  bulbl60,20	'left bumper
'	FadeLamp 61,  l61			'right bumper
'	FadePrim 61,  bulbl61,20	'right bumper
'	MiniPFLamps 62,  l62		'minipf TL
'	FadePrim 62,  bulbTL, 8		'minipf TL
'	FadeLamp 63,  l63
'	FadeLamp 64,  l64
'	FadeLamp 65,  l65
'	FadeLamp 66,  l66
'	FadeLamp 67,  l67
'	MiniPFLamps 68,  l68		'minipf BR
'	FadePrim 68,  bulbBR, 8		'minipf BR
'	FadeLamp 69,  l69
'	FadeLamp 70,  l70
'	FadeLamp 71,  l71
'	FadeLamp 72,  l72
'	FadeLamp 73,  l73
'	FadeLamp 74,  l74
'	MiniPFLamps 75,  l75		'minipf TR
'	FadePrim 75,  bulbTR, 8		'minipf TR
'	FadeLamp 76,  l76
'	FadeLamp 77,  l77
'	FadeLamp 78,  l78a			'batmobile
'	FadeLamp 78,  l78b			'batmobile
'	FadeLamp 78, flasher_spotbatmobile
'	FadeLamp 79,  l79a			'joker
'	FadeLamp 79,  l79b			'joker
'	FadeLamp 80,  l80a			'scarecrow
'	FadeLamp 80,  l80b			'scarecrow
'	FadeLamp 86,  l86
'	FadeLamp 87,  l87
'	FadeLamp 88,  l88
'
'	'Flashers
'	FadeLamp 179,  F19a
'	FadeLamp 179,  F19b
'	FadeLamp 181,  F21
'	FadeLamp 182,  F22
'	FadeLamp 182,  F22a
'	FadeLamp 182,  F22b
'	FadeLamp 182,  F22c
'	FadeLamp 182,  flasher_joker
'	FadeLamp 183,  F23
'	FadeLamp 185,  F25a
'	FadeLamp 185,  F25b
'	FadeLamp 185,  flasher_bumpers
'	FadeLamp 187,  F27
'	FadePrim 187,  LDome, 10
'	FadeLamp 187, flasher_leftsling
'	FadeLamp 189,  F29
'	FadePrim 189,  RDome, 10
'	FadeLamp 189, flasher_rightsling
''	FadeLamp 192,  F32
'	FadeLamp 192,  F32a
'	FadeLamp 192,	flasher_batmobile
'End Sub
'
'Sub UpdateLamp78
'	if Lampstate(78) <> 0 Then
'		if GIisOn Then
'			For each xx in battrackcol: xx.image = "batmobile_spot": Next
'		Else
'			For each xx in battrackcol: xx.image = "batmobile_offspot": Next
'		end if
'	else
'		if GIisOn Then
'			For each xx in battrackcol: xx.image = "batmobile_": Next
'		Else
'			For each xx in battrackcol: xx.image = "batmobile_off": Next
'		end if
'	end if
'End Sub
'
'Sub UpdateLamp79
'	if Lampstate(79) <> 0 Then
'		joker.image = "joker_texspot"
'	Else
'		joker.image="joker_texa"
'	End if
'End Sub
'
'Sub UpdateLamp80
'	if Lampstate(80) <> 0 Then
'		if GIisOn Then
'			For each xx in bakery4scareflashcol: xx.image = "scarecrow_spot": Next
'		Else
'			For each xx in bakery4scareflashcol: xx.image = "scarecrow_offspot": Next
'		end if
'	else
'		if GIisOn Then
'			For each xx in bakery4scareflashcol: xx.image = "scarecrow_": Next
'		Else
'			For each xx in bakery4scareflashcol: xx.image = "scarecrow_off": Next
'		end if
'	end if
'End Sub
'
'Sub UpdateLamp182
'	if Lampstate(182) <> 0 Then
'		if Lampstate(79) <> 0 Then
'			joker.image="joker_texspotflash"
'		Else	
'			joker.image="joker_texflash"
'		End if
'		if GIisOn Then
'			For each xx in bakeryjokercol: xx.image = "bakeryjoke_flash": Next
'		Else
'			For each xx in bakeryjokercol: xx.image = "bakeryjoke_offflash": Next
'		end if
'	else
'		if Lampstate(79) <> 0 Then
'			joker.image="joker_texspot"
'		Else	
'			joker.image="joker_texa"
'		End if
'		if GIisOn Then
'			For each xx in bakeryjokercol: xx.image = "bakeryjoke": Next
'		Else
'			For each xx in bakeryjokercol: xx.image = "bakeryjoke_off": Next
'		end if
'	end if
'End Sub
'
'Sub UpdateLamp183
'	if Lampstate(183) <> 0 Then
'		if GIisOn Then
'			For each xx in bakery4scareflashcol: xx.image = "scarecrow_spotflash": Next
'		Else
'			For each xx in bakery4scareflashcol: xx.image = "scarecrow_offspotflash": Next
'		end if
'	else
'		if GIisOn Then
'			if Lampstate(80) <> 0 Then
'				For each xx in bakery4scareflashcol: xx.image = "scarecrow_spot": Next
'			Else
'				For each xx in bakery4scareflashcol: xx.image = "scarecrow_": Next
'			End if
'		Else
'			if Lampstate(80) <> 0 Then
'				For each xx in bakery4scareflashcol: xx.image = "scarecrow_offspot": Next
'			Else
'				For each xx in bakery4scareflashcol: xx.image = "scarecrow_off": Next
'			End if
'		end if
'	end if
'End Sub
'
'Sub UpdateLamp185
'	if Lampstate(185) <> 0 Then
'		if GIisOn Then
'			For each xx in bakerybumpscol: xx.image = "bakerybump_flash": Next
'		Else
'			For each xx in bakerybumpscol: xx.image = "bakerybump_offflash": Next
'		end if
'	else
'		if GIisOn Then
'			For each xx in bakerybumpscol: xx.image = "bakerybump": Next
'		Else
'			For each xx in bakerybumpscol: xx.image = "bakerybump_off": Next
'		end if
'	end if
'End Sub
'
'Sub UpdateLamp187
'	if Lampstate(187) <> 0 Then
'		if GIisOn Then
'			For each xx in bakery2lslingcol: xx.image = "bakery2_flash": Next
'		Else
'			For each xx in bakery2lslingcol: xx.image = "bakery2_offflash": Next
'		end if
'	else
'		if GIisOn Then
'			For each xx in bakery2lslingcol: xx.image = "bakery2": Next
'		Else
'			For each xx in bakery2lslingcol: xx.image = "bakery2_off": Next
'		end if
'	end if
'End Sub
'
'Sub UpdateLamp189
'	if Lampstate(189) <> 0 Then
'		if GIisOn Then
'			For each xx in bakery2rslingcol: xx.image = "bakery2_flash": Next
'		Else
'			For each xx in bakery2rslingcol: xx.image = "bakery2_offflash": Next
'		end if
'	else
'		if GIisOn Then
'			For each xx in bakery2rslingcol: xx.image = "bakery2": Next
'		Else
'			For each xx in bakery2rslingcol: xx.image = "bakery2_off": Next
'		end if
'	end if
'End Sub
'
'Sub UpdateLamp192
'	if Lampstate(192) <> 0 Then
'		if GIisOn Then
'			For each xx in bakery3batflashcol: xx.image = "bakery3_flash": Next
'		Else
'			For each xx in bakery3batflashcol: xx.image = "bakery3_offflash": Next
'		end if
'	else
'		if GIisOn Then
'			For each xx in bakery3batflashcol: xx.image = "bakery3": Next
'		Else
'			For each xx in bakery3batflashcol: xx.image = "bakery3_off": Next
'		end if
'	end if
'End Sub
'
'
'' Not Modulated lights and flashers
'Sub FadeLamp(nr, object)
'	If TypeName(object) = "Light" Then
'		Object.State = LampState(nr)
'	End If
'	If TypeName(object) = "Flasher" Then
'		Object.IntensityScale = LampState(nr)
'	End If
'	UpdateLamp78
'	UpdateLamp80
'	UpdateLamp182
'	UpdateLamp183
'	UpdateLamp185
'	UpdateLamp187
'	UpdateLamp189
'	UpdateLamp192
'End Sub
'
'Sub FadePrim(nr, object, factor)
'	Object.BlendDisableLighting = factor * LampState(nr)
'End Sub
'
'Sub SetLamp(nr, enabled)
'    If enabled Then
'		LampState(nr) = 1
'	Else
'		LampState(nr) = 0
'	End If
'End Sub
'
'Sub MiniPFLamps(nr, object)
'	object.IntensityScale = LampState(nr)/(LampState(59) + LampState(62) + LampState(68) + LampState(75) + 0.05)
'End Sub
'
'' Modulated lights and flashers
'Sub FadeModLamp(nr, object)
'	Object.IntensityScale = FadingLevel(nr)/255
'End Sub 
'
'Sub FadeModPrim(nr, object, factor)
'	Object.BlendDisableLighting = factor * FadingLevel(nr)/255
'End Sub
'
'Sub SetModLamp(nr, value)
'	FadingLevel(nr) = value
'End Sub

'*********************
'Cabinet Mode
'*********************

If CabinetMode = 1 and VRRoom < 1 then
'	Primitive2.Size_z=2
	Rails.visible=0
Else
'	Primitive2.Size_z=1
	Rails.visible=1
end If

'*********************
'VR Mode
'*********************
DIM VRThings
If VRRoom > 0 Then
	ScoreText.visible = 0
	DMD.visible = 1
	PinCab_Backglass.blenddisablelighting = 3
	If VRRoom = 1 Then
		for each VRThings in VR_Cab:VRThings.visible = 1:Next
        for each VRThings in VR_Min:VRThings.visible = 1:Next
        for each VRThings in VR_Max:VRThings.visible = 0:Next
        VR_LegBoltsBackMaxRm.visible = 0
        VR_LegsBackMaxRm.visible = 0

	End If
	If VRRoom = 2 Then
		for each VRThings in VR_Cab:VRThings.visible = 1:Next
        for each VRThings in VR_Min:VRThings.visible = 0:Next
        for each VRThings in VR_Max:VRThings.visible = 1:Next
        VR_LegBoltsBack.visible = 0
        VR_LegsBack.visible = 0
	End If
	If VRRoom = 3 Then
		for each VRThings in VR_Cab:VRThings.visible = 0:Next
        for each VRThings in VR_Min:VRThings.visible = 0:Next
        for each VRThings in VR_Max:VRThings.visible = 0:Next
		PinCab_Backbox.visible = 1
		PinCab_Backglass.visible = 1
	End If
Else
	for each VRThings in VR_Cab:VRThings.visible = 0:Next
	for each VRThings in VR_Min:VRThings.visible = 0:Next
	for each VRThings in VR_Max:VRThings.visible = 0:Next
	if DesktopMode then Rails.visible = true else Rails.visible = false
End if

'*********************
'Batman Model
'*********************
If BatmanModel = 1 then
	Primitive36.visible=1
Else
	Primitive36.visible=0
end If

'**********************************************************************************************************
'Plunger code
'**********************************************************************************************************

TimerVRPlunger2.enabled = true   '  This sits outside of a sub, and tells the timer2 to be enabled at table load

Sub TimerVRPlunger_Timer
if VRPlunger.Y < 1530 then VRPlunger.Y = VRPlunger.y +5  'If the plunger is not fully extend it, then extend it by 5 coordinates in the Y, 
End Sub

Sub TimerVRPlunger2_Timer
VRPlunger.Y = 2330 + (5* Plunger.Position) -20  ' This follows our dummy plunger position for analog plunger hardware users.
end sub

'**********************************************************************************************************
'VR Mega Room Lighting
'**********************************************************************************************************

WayneOffice032.blenddisablelighting = 1
WayneOffice033.blenddisablelighting = 1
WayneOffice034.blenddisablelighting = 1
WayneOffice035.blenddisablelighting = 1
WayneOffice036.blenddisablelighting = 1
WayneOffice037.blenddisablelighting = 1
WayneOffice038.blenddisablelighting = 1
WayneOffice039.blenddisablelighting = 1
WayneOffice040.blenddisablelighting = 1
WayneOffice041.blenddisablelighting = 1
WayneOffice042.blenddisablelighting = 1
WayneOffice043.blenddisablelighting = 1
WayneOffice044.blenddisablelighting = 1
WayneOffice045.blenddisablelighting = 1
WayneOffice046.blenddisablelighting = 1
WayneOffice047.blenddisablelighting = 1
WayneOffice048.blenddisablelighting = 1
WayneOffice049.blenddisablelighting = 1
WayneOffice069.blenddisablelighting = 1
WayneOffice070.blenddisablelighting = 1
WayneOffice292.blenddisablelighting = 0.5
WayneOffice296.blenddisablelighting = 1
WayneOffice333Batman.blenddisablelighting = 0.5
