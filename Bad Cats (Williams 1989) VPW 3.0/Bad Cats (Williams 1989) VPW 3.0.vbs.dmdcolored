'**********************
'  Bad Cats(1989)
' VPX table by unclewilly,Brad1X, Clark Kent, Dark
' Table Tune-Up by members of VPin Workshop, Discord
'
' version 3.0
'**********************
'
'   Benji: Project lead, blender toolkit update
'   Mcarter78: Fleep update
'	Iaakki: Scipting and physics support
'	Tomate: Ramp models
'	Rothbauerw: Physics support
'   Apophis: Scripting support 
'	MrGrynch: Scripting support
'	ClarkKent: Quality control
'
'	Special Notes: VPX 10.8 Beta 7 (or higher) required for this table. This table also takes advantage 
'   of a new options page feature in 10.8, accessed via F12 key. The 3rd page in this menu has table 
'   specific options including some sweet mirrored sideblades. These are disabled by default because 
'   they come at a decent performance cost, espeically if you are playing in anaglyph or VR. The "Day/Night" 
'   setting here is also where you will adjust the table brightness.
'
'
' version 2.0
'**********************
'
'	Plastics: Benji & Brad1X
'	Playfield & Plastics Graphics Remaster: Brad1X
'	Inserts & lights: iaakki
'	Physics: Benji & iaakki
'	VR Stuff: Unclewilly & Sixtoe
'	Debug: Sixtoe & iaakki
'	Testing: Tomato & VPin Workshop discord

'*******************************
'		VPW Revisions
'*******************************
'069 - Wrd1972 - Added new flippers from Doctor Dude
'070 - Benji - Added material to flippers, exported flipper texture and toned down saturation for more 'arcade' style flippers
'071 - iaakki - Minor GI shape adjustments near flips. Livecatch tweaked, Cabinet mode added
'072 - Sixtoe - Added VR Room & built in backbox, unified timers, removed redundant stuff, trimmed lights and fixed some lighting issues, dropped the triggers, transparancy issue remains on the centre glass roulette cover for VR, needs more work on lighting
'073 - Brad1X - Updated Table Info and Script info
'074 - iaakki - MetalSides option created, POV reworked by altering offsets only, VRBlockerWall made invisible in desktop and cabinet modes
'075 - iaakki - Flashers reworked one more time..
'076 - Benji - Re-applied POV from 074 (it got changed at some point)
'077 - iaakki - Smaller haze images
'078 - Sixtoe - Added extra sideblade primitive and refactored mode switches, center glass disabled in VR.
'079 - iaakki - Some cleanup, darksides feature removed, static rendering disabled for siderails.
'080 - Skitso - Remade GI lighting, small visual tweaks.
'2.01 - Skitso - GI rework
'2.02 - iaakki - Updated to latest physics, also separated posts and rubber bands.
'2.03 - Sixtoe - Redid VR options, minimal room added as big room is "heavy", fixed broken cabinet mode, added drop holes, various other fixes.
'2.12 - Skitso - Further improvements with GI, improved inserts to look good with the new GI, improved flashers. Improved ball.
'2.13 - apophis - Updated to latest physics. Added slingshot corrections. Added fleep sounds. Updated ball and ramp rolling sounds. Added dynamic shadows.
'2.14 - apophis - Drop target fix (Thanks Thalamus). New desktop backdrop image with functional LED display and Jackpot lights. New desktop POV. Added dSleeves collection and assignments.
'2.15b - apophis - Fixed issue with desktopmode always set to true. Automated cabinetmode. Fixed side blade reflection issue. Fixed leftflippersound and rightflippersound issue. 
'2.16 - apophis - Added sleeves to Rubbers collection. Lowered flipper strength a tad. Tweaks to the lighting.
'2.20 - Sixtoe - Trimmed new lights.
'2.21 - ClarkKent - Adjusted flippers and lowest slingshot post for better flipper tricks, adjusted pf friction, adjusted bumper/slingshot strength, adjusted LUT for better orange, adjusted ramps physics and exits, adjusted plunger for better desktop play, adjusted ball image, adjusted RubberFlipperSoundFactor  
'3.015 - Benji, Apophis - strippd tabled, reorganized and injected toolkit renders. Hooked up PWM flash stuff. 
'3.017 - Another batch. Hooked up ball shadows (way too long for some reason) and seafood wheel. Some graphical glitches to fix still BM_playfield has to be updated to 'active' material in order for room brightnes to work apparently. 
'3.020 - New Visible ramps from tomate. Edges separtated and refration probes assighed. New primitive ramps. Playfield seafood wheel transparency issues fixed.
'3.021 - mcarter78 - Convert trough & kickers to physical, update nfozzy/roth & fleep, add flipper shadows
'3.025 - Benji - New low rez batch. one of the seafood lights stuckon. Setup ramps refraction with proper depth bias. axis off on two moveables, adjusted them manually in vpx. Roth's varitarget fix/update is in place.
'3.027 - Benji -New 50% batch. Center ramp prim adjusted so ball doesn't launch, also placed cover over top of entrance in case ball still gets airborn sometimes.SFWL (seafood wheel) lights hooked up. They stay on once enebaled by ROM for some reason. All moveables hooked up. Gate7 rotation orientation is wrong, fixed in next batch. New 50% batch
'3.028 - Benji - Seafood wheel lightmap rendered and hooked up (so that it does not animate/spin with the seafood wheel)
'3.030 - Seafoodglass and light overlay tweaks. New collidable scoopmesh for DogHouse scoop, ball now decends past the playfield.
'3.031 - mcarter78 - Reposition wire ramp trigger for rolling sound, add wire ramp stop and delayed playfield drop sound
'3.032 - apophis - Set all render probe roughnesses to 0. Assigned reflection probe to BM_Playfield. Added a couple materials to room brightness arrays. Assigned "shinyenvironment3blur4" to environmental lighting. Added SetLocale. Moved playfield_mesh ot Physics layer. Fixed FlipperCradleCollision.
'3.034 - Benji - New 2k batch. Varitarget and sw22 animation/pivot fixed. Bit of normal mapping on seafood glass. New environment image (brighter Table). Rougness turned back on just for 2 probes: TigerRamp and FIshRamp (flat portions). Weird light reflection on sideblade.
'3.036 - Benji - New 2k Batch. Updated inserts to 3D cups. Fixed light rim on seafood glass. Fixed harsh refelctions on back plastic. Fixex RIger Ramp depth bias. Known issues: Tiger ramp flasher stickers clipped. Weird sideblade reflection. Sling rubbers need to be hooked up.
'3.037 - apophis - Added slingshot animations. Added missing switch and gate animations. Set "hide parts behind" for BM_Playfield
'3.038 - Benji - Mirrored Sideblades and cooresponding reflection probes added.
'3.039 - mcarter78 - Refactor SSF sounds using BOP as a guide, add sound objects
'3.040 - iaakki - moved seafood wheel update to frametimer, so it appears more smooth, fixed some duplicate subs
'3.043 - Benji - New batch. added some subtle normal maps to ramps. Fixed slings, fixed light anomaly on sideblades. New flippers (toolkit libray flippers updated by flupper). Hole cut for shooting lane switch. Temp default room brightness set to .5 in script.
'3.044 - mcarter78 - Add random ramp end sounds, Fleep sounds code cleanup
'3.045 - mcarter78 - Increase volume on ramp end sounds, remove duplicate drops sound subs
'3.046 - Benji - Adjusted center ramp colllidable mesh to move it back behind posts. cheated left post over a bit (will update visible post on next batch). Assigned metal material to VPX plunger.
'3.047 - iaakki - added ramp flap and collision sounds, fixed few triggers, added nudge sounds, used same targetbouncer as in totan 1.5.
'3.048 - iaakki - accidendally moved one collidable ramp. It is now locked in place. Cleaned out some unneccesary debug prints,  greaseGlassLevel option added - now set to 1, but this could be in adjustment menu too
'3.049 - MrGrynch - initial stub implementation of FlexDMD options menu.  Not currrently displaying.  Continued debugging and testing required
'3.050 - MrGrynch - Initial FlexDMD options menu working.  Inserted options_UpdateDMD to FrameTimer.  Added keydown handling. Added TableVersion. Added CNCDbl.
'3.051a - apophis - Set sw24 Kicker to invisible. Automated VRRoom. Set slingshot force to 3.8. Added ambient ball shadows.
'3.052 - MrGrynch - Added trough check for option menu activation. Removed PWM option. Added mirrored sideblade option. Centered option menu rect
'3.054 - Benji - New 2k batch. REMK/LEMK pivots rotated. Adjusted wire ramp, ball now allins with visible mesh. Shadow from seafood wheel net removed. Batch rendered with Blender 4.0. 
'3.055 - MrGrynch - Replaced FlexDMD options with TweakUI options supported natively in Beta 6
'3.058 - Benji - Weird plastics above drop target rendering issues fixed. Fixed dark back wall texture after increasing back wall bake resolution.
'3.059 - Benji - reduce noise on tiger ramp decal. Fixed depth bias of plastic beneath tiger Ramp (the plunger/varitarget plastic)
'3.060 - Benji - Updated lights on back wall. Still need to add missing screws.
'3.061 - Benji - Added roof over linear target
'3.062 - apophis - Updated Table1_OptionEvent to handle DisableStaticPreRendering. Re-added playfield reflections. 
'3.063 - Benji - Added missing screws.
'3.064 - mcarter78 - Added flasher relay sounds
'RC04 - Benji - Roughness removed from ramp render probes. REfraction increased on tiger ramp. Playfield reflection probe added to playfield (reflection enabled for balls only)
'RC05 - Benji - Tiger ramp decal adjusted for size.
'RC06 - apophis - Added Side Rails to option menu. MechVolume saturation fix. 
'Release 3.0
'

Option Explicit
Randomize
SetLocale 1033

'------- VR Room -------
Dim VRRoomChoice: VRRoomChoice = 1        '1 - Full Room, 2 - Minimal Room, 3 - Ultra Minimal



'//  PositionalSoundPlaybackConfiguration:
'//  Specifies the sound playback configuration. Options:
'//  1 = Mono
'//  2 = Stereo (Only L+R channels)
'//  3 = Surround (Full surround sound support for SSF - Front L + Front R + Rear L + Rear R channels)
Const PositionalSoundPlaybackConfiguration = 3
'
'
'//  RelaysPosition:
'//  1 = Relays positioned with power board (Provides sound spread from the left and right back channels)
'//  2 = Relays positioned with GI strings (Provides sound spread from left/right/front/rear surround channels)
Const RelaysPosition = 2


'************************************************************************

'Do not adjust the options here (it won't work). Use the in game options menu (press F12).
Dim MechVolume : MechVolume = 0.8			'Overall Mechanical sound effect volume. Recommended values should be no greater than 1.
Dim BallRollVolume : BallRollVolume = 0.5 	'Level of ball rolling volume. Value between 0 and 1
Dim RampRollVolume : RampRollVolume = 0.5	'Level of ramp rolling volume. Value between 0 and 1
Dim LightLevel : LightLevel = 50                'LightLevel - Value between 0 and 100 (0=Dark ... 100=Bright)
Dim greaseGlassLevel : greaseGlassLevel = 1		'have you cleaned your glass lately?

Dim xx, DNS

Dim BIP							 'Balls in play
BIP = 0
Dim BIPL							'Ball in plunger lane
BIPL = False


On Error Resume Next
ExecuteGlobal GetTextFile("controller.vbs")
If Err Then MsgBox "You need the controller.vbs in order to run this table, available in the vp10 package"
On Error Goto 0


Dim CurrentMinute ' for VR clock
Dim PlungerType
Dim VRFPCounter, VRDKCounter 
VRFPCounter = 1
VRDKCounter = 1



'************************************************************************


' VLM Arrays - Start
' Arrays per baked part
Dim BP_BGlass: BP_BGlass=Array(BM_BGlass, LM_Flashers_f126_BGlass, LM_Flashers_f127_BGlass, LM_Flashers_f128_BGlass, LM_Flashers_f130_BGlass, LM_Flashers_f131_BGlass, LM_GI_BGlass, LM_GISplit_gi11_BGlass, LM_Inserts_l47_BGlass, LM_Inserts_l48_BGlass)
Dim BP_BackWall: BP_BackWall=Array(BM_BackWall, LM_Flashers_f125_BackWall, LM_Flashers_f126_BackWall, LM_Flashers_f128_BackWall, LM_Flashers_f129_BackWall, LM_GI_BackWall)
Dim BP_BackWall2: BP_BackWall2=Array(BM_BackWall2, LM_Flashers_f125_BackWall2, LM_Flashers_f126_BackWall2, LM_Flashers_f127_BackWall2, LM_Flashers_f128_BackWall2, LM_Flashers_f129_BackWall2, LM_Flashers_f131_BackWall2, LM_GI_BackWall2, LM_GISplit_gi16_BackWall2, LM_Inserts_l10_BackWall2, LM_Inserts_l11_BackWall2, LM_Inserts_l12_BackWall2, LM_Inserts_l13_BackWall2, LM_Inserts_l17_BackWall2, LM_Inserts_l18_BackWall2, LM_Inserts_l19_BackWall2, LM_Inserts_l9_BackWall2)
Dim BP_BirdCage: BP_BirdCage=Array(BM_BirdCage, LM_Flashers_f126_BirdCage, LM_Flashers_f127_BirdCage, LM_Flashers_f128_BirdCage, LM_Flashers_f131_BirdCage, LM_GI_BirdCage, LM_GISplit_gi11_BirdCage)
Dim BP_DogHouseRoofL: BP_DogHouseRoofL=Array(BM_DogHouseRoofL, LM_Flashers_f125_DogHouseRoofL, LM_Flashers_f126_DogHouseRoofL, LM_Flashers_f127_DogHouseRoofL, LM_Flashers_f128_DogHouseRoofL, LM_Flashers_f129_DogHouseRoofL, LM_Flashers_f130_DogHouseRoofL, LM_Flashers_f131_DogHouseRoofL, LM_GI_DogHouseRoofL, LM_GISplit_gi15_DogHouseRoofL)
Dim BP_FishRamp: BP_FishRamp=Array(BM_FishRamp, LM_Flashers_f125_FishRamp, LM_Flashers_f126_FishRamp, LM_Flashers_f128_FishRamp, LM_Flashers_f129_FishRamp, LM_GI_FishRamp, LM_Inserts_l22_FishRamp, LM_Inserts_l23_FishRamp)
Dim BP_FishRampEdges: BP_FishRampEdges=Array(BM_FishRampEdges, LM_Flashers_f125_FishRampEdges, LM_Flashers_f126_FishRampEdges, LM_Flashers_f127_FishRampEdges, LM_Flashers_f128_FishRampEdges, LM_Flashers_f129_FishRampEdges, LM_Flashers_f131_FishRampEdges, LM_GI_FishRampEdges, LM_Inserts_l21_FishRampEdges)
Dim BP_FishT: BP_FishT=Array(BM_FishT, LM_Flashers_f125_FishT, LM_Flashers_f127_FishT, LM_Flashers_f128_FishT, LM_Flashers_f129_FishT, LM_GI_FishT, LM_Inserts_l53_FishT)
Dim BP_FlipperL: BP_FlipperL=Array(BM_FlipperL, LM_Flashers_f131_FlipperL, LM_GI_FlipperL, LM_GISplit_gi18_FlipperL, LM_Inserts_l1_FlipperL)
Dim BP_FlipperR: BP_FlipperR=Array(BM_FlipperR, LM_Flashers_f126_FlipperR, LM_Flashers_f128_FlipperR, LM_Flashers_f131_FlipperR, LM_GISplit_gi001_FlipperR, LM_GISplit_gi005_FlipperR, LM_GI_FlipperR, LM_Inserts_l1_FlipperR, LM_Inserts_l5_FlipperR)
Dim BP_Gate3_Wire: BP_Gate3_Wire=Array(BM_Gate3_Wire, LM_Flashers_f126_Gate3_Wire, LM_Flashers_f129_Gate3_Wire, LM_GI_Gate3_Wire, LM_GISplit_gi16_Gate3_Wire)
Dim BP_Gate4_Wire: BP_Gate4_Wire=Array(BM_Gate4_Wire, LM_Flashers_f126_Gate4_Wire, LM_Flashers_f128_Gate4_Wire, LM_Flashers_f129_Gate4_Wire, LM_GI_Gate4_Wire)
Dim BP_Gate7_Wire: BP_Gate7_Wire=Array(BM_Gate7_Wire, LM_Flashers_f125_Gate7_Wire, LM_Flashers_f129_Gate7_Wire, LM_GI_Gate7_Wire)
Dim BP_LeftSling1: BP_LeftSling1=Array(BM_LeftSling1, LM_Flashers_f127_LeftSling1, LM_Flashers_f130_LeftSling1, LM_Flashers_f131_LeftSling1, LM_GI_LeftSling1, LM_GISplit_gi18_LeftSling1, LM_GISplit_gi9_LeftSling1, LM_Inserts_l26_LeftSling1, LM_Inserts_l2_LeftSling1)
Dim BP_LeftSling2: BP_LeftSling2=Array(BM_LeftSling2, LM_Flashers_f127_LeftSling2, LM_Flashers_f131_LeftSling2, LM_GI_LeftSling2, LM_GISplit_gi18_LeftSling2, LM_GISplit_gi9_LeftSling2, LM_Inserts_l26_LeftSling2, LM_Inserts_l2_LeftSling2)
Dim BP_LeftSling3: BP_LeftSling3=Array(BM_LeftSling3, LM_Flashers_f131_LeftSling3, LM_GI_LeftSling3, LM_GISplit_gi18_LeftSling3, LM_GISplit_gi9_LeftSling3, LM_Inserts_l26_LeftSling3, LM_Inserts_l2_LeftSling3)
Dim BP_LeftSling4: BP_LeftSling4=Array(BM_LeftSling4, LM_Flashers_f127_LeftSling4, LM_Flashers_f131_LeftSling4, LM_GI_LeftSling4, LM_GISplit_gi18_LeftSling4, LM_GISplit_gi9_LeftSling4, LM_Inserts_l26_LeftSling4, LM_Inserts_l2_LeftSling4)
Dim BP_MetalRails: BP_MetalRails=Array(BM_MetalRails, LM_Flashers_SFWL_MetalRails, LM_Flashers_f125_MetalRails, LM_Flashers_f126_MetalRails, LM_Flashers_f127_MetalRails, LM_Flashers_f128_MetalRails, LM_Flashers_f129_MetalRails, LM_Flashers_f130_MetalRails, LM_Flashers_f131_MetalRails, LM_Flashers_f132_MetalRails, LM_GISplit_gi001_MetalRails, LM_GISplit_gi005_MetalRails, LM_GI_MetalRails, LM_GISplit_gi11_MetalRails, LM_GISplit_gi15_MetalRails, LM_GISplit_gi16_MetalRails, LM_GISplit_gi18_MetalRails, LM_GISplit_gi9_MetalRails, LM_Inserts_l10_MetalRails, LM_Inserts_l11_MetalRails, LM_Inserts_l13_MetalRails, LM_Inserts_l14_MetalRails, LM_Inserts_l15_MetalRails, LM_Inserts_l16_MetalRails, LM_Inserts_l17_MetalRails, LM_Inserts_l19_MetalRails, LM_Inserts_l21_MetalRails, LM_Inserts_l22_MetalRails, LM_Inserts_l23_MetalRails, LM_Inserts_l24_MetalRails, LM_Inserts_l27_MetalRails, LM_Inserts_l41_MetalRails, LM_Inserts_l43_MetalRails, LM_Inserts_l47_MetalRails, LM_Inserts_l48_MetalRails, LM_Inserts_l49_MetalRails, _
	LM_Inserts_l50_MetalRails, LM_Inserts_l51_MetalRails, LM_Inserts_l52_MetalRails, LM_Inserts_l9_MetalRails)
Dim BP_Parts: BP_Parts=Array(BM_Parts, LM_Flashers_SFWL_Parts, LM_Flashers_f125_Parts, LM_Flashers_f126_Parts, LM_Flashers_f127_Parts, LM_Flashers_f128_Parts, LM_Flashers_f129_Parts, LM_Flashers_f130_Parts, LM_Flashers_f131_Parts, LM_Flashers_f132_Parts, LM_GISplit_gi001_Parts, LM_GISplit_gi005_Parts, LM_GI_Parts, LM_GISplit_gi11_Parts, LM_GISplit_gi15_Parts, LM_GISplit_gi16_Parts, LM_GISplit_gi18_Parts, LM_GISplit_gi9_Parts, LM_Inserts_l10_Parts, LM_Inserts_l14_Parts, LM_Inserts_l15_Parts, LM_Inserts_l16_Parts, LM_Inserts_l19_Parts, LM_Inserts_l1_Parts, LM_Inserts_l21_Parts, LM_Inserts_l24_Parts, LM_Inserts_l26_Parts, LM_Inserts_l27_Parts, LM_Inserts_l28_Parts, LM_Inserts_l29_Parts, LM_Inserts_l30_Parts, LM_Inserts_l40_Parts, LM_Inserts_l43_Parts, LM_Inserts_l47_Parts, LM_Inserts_l49_Parts, LM_Inserts_l53_Parts, LM_Inserts_l8_Parts, LM_Inserts_l9_Parts)
Dim BP_Plastics: BP_Plastics=Array(BM_Plastics, LM_Flashers_f125_Plastics, LM_Flashers_f126_Plastics, LM_Flashers_f127_Plastics, LM_Flashers_f128_Plastics, LM_Flashers_f129_Plastics, LM_Flashers_f130_Plastics, LM_Flashers_f131_Plastics, LM_Flashers_f132_Plastics, LM_GISplit_gi001_Plastics, LM_GISplit_gi005_Plastics, LM_GI_Plastics, LM_GISplit_gi15_Plastics, LM_GISplit_gi16_Plastics, LM_GISplit_gi18_Plastics, LM_GISplit_gi9_Plastics, LM_Inserts_l14_Plastics, LM_Inserts_l15_Plastics, LM_Inserts_l16_Plastics, LM_Inserts_l26_Plastics, LM_Inserts_l29_Plastics, LM_Inserts_l40_Plastics, LM_Inserts_l8_Plastics)
Dim BP_PlasticsT2: BP_PlasticsT2=Array(BM_PlasticsT2, LM_Flashers_f125_PlasticsT2, LM_Flashers_f126_PlasticsT2, LM_Flashers_f127_PlasticsT2, LM_Flashers_f128_PlasticsT2, LM_Flashers_f129_PlasticsT2, LM_Flashers_f131_PlasticsT2, LM_GI_PlasticsT2, LM_Inserts_l10_PlasticsT2, LM_Inserts_l8_PlasticsT2)
Dim BP_PlasticsT3: BP_PlasticsT3=Array(BM_PlasticsT3, LM_Flashers_f125_PlasticsT3, LM_Flashers_f126_PlasticsT3, LM_Flashers_f127_PlasticsT3, LM_Flashers_f129_PlasticsT3, LM_Flashers_f130_PlasticsT3, LM_Flashers_f131_PlasticsT3, LM_GI_PlasticsT3, LM_GISplit_gi15_PlasticsT3)
Dim BP_PlasticsT4: BP_PlasticsT4=Array(BM_PlasticsT4, LM_Flashers_f127_PlasticsT4, LM_Flashers_f128_PlasticsT4, LM_Flashers_f131_PlasticsT4, LM_GI_PlasticsT4, LM_GISplit_gi11_PlasticsT4, LM_GISplit_gi9_PlasticsT4)
Dim BP_Playfield: BP_Playfield=Array(BM_Playfield, LM_Flashers_SFWL_Playfield, LM_Flashers_f125_Playfield, LM_Flashers_f126_Playfield, LM_Flashers_f127_Playfield, LM_Flashers_f128_Playfield, LM_Flashers_f129_Playfield, LM_Flashers_f130_Playfield, LM_Flashers_f131_Playfield, LM_Flashers_f132_Playfield, LM_GISplit_gi001_Playfield, LM_GISplit_gi005_Playfield, LM_GI_Playfield, LM_GISplit_gi11_Playfield, LM_GISplit_gi15_Playfield, LM_GISplit_gi16_Playfield, LM_GISplit_gi18_Playfield, LM_GISplit_gi9_Playfield, LM_Inserts_l14_Playfield, LM_Inserts_l15_Playfield, LM_Inserts_l16_Playfield, LM_Inserts_l17_Playfield, LM_Inserts_l1_Playfield, LM_Inserts_l21_Playfield, LM_Inserts_l22_Playfield, LM_Inserts_l23_Playfield, LM_Inserts_l24_Playfield, LM_Inserts_l26_Playfield, LM_Inserts_l27_Playfield, LM_Inserts_l28_Playfield, LM_Inserts_l29_Playfield, LM_Inserts_l2_Playfield, LM_Inserts_l30_Playfield, LM_Inserts_l33_Playfield, LM_Inserts_l34_Playfield, LM_Inserts_l35_Playfield, LM_Inserts_l36_Playfield, _
	LM_Inserts_l37_Playfield, LM_Inserts_l38_Playfield, LM_Inserts_l39_Playfield, LM_Inserts_l3_Playfield, LM_Inserts_l40_Playfield, LM_Inserts_l41_Playfield, LM_Inserts_l42_Playfield, LM_Inserts_l43_Playfield, LM_Inserts_l44_Playfield, LM_Inserts_l45_Playfield, LM_Inserts_l47_Playfield, LM_Inserts_l48_Playfield, LM_Inserts_l49_Playfield, LM_Inserts_l4_Playfield, LM_Inserts_l50_Playfield, LM_Inserts_l51_Playfield, LM_Inserts_l52_Playfield, LM_Inserts_l53_Playfield, LM_Inserts_l5_Playfield, LM_Inserts_l6_Playfield, LM_Inserts_l7_Playfield, LM_Inserts_l8_Playfield)
Dim BP_Remk: BP_Remk=Array(BM_Remk, LM_Flashers_f131_Remk, LM_GISplit_gi001_Remk, LM_GISplit_gi005_Remk, LM_GI_Remk)
Dim BP_Rightsling1: BP_Rightsling1=Array(BM_Rightsling1, LM_Flashers_f130_Rightsling1, LM_Flashers_f131_Rightsling1, LM_GISplit_gi001_Rightsling1, LM_GISplit_gi005_Rightsling1, LM_GI_Rightsling1, LM_Inserts_l29_Rightsling1, LM_Inserts_l7_Rightsling1)
Dim BP_Rightsling2: BP_Rightsling2=Array(BM_Rightsling2, LM_Flashers_f130_Rightsling2, LM_Flashers_f131_Rightsling2, LM_GISplit_gi001_Rightsling2, LM_GISplit_gi005_Rightsling2, LM_GI_Rightsling2, LM_Inserts_l29_Rightsling2, LM_Inserts_l7_Rightsling2)
Dim BP_Rightsling3: BP_Rightsling3=Array(BM_Rightsling3, LM_Flashers_f130_Rightsling3, LM_Flashers_f131_Rightsling3, LM_GISplit_gi001_Rightsling3, LM_GISplit_gi005_Rightsling3, LM_GI_Rightsling3, LM_Inserts_l29_Rightsling3, LM_Inserts_l7_Rightsling3)
Dim BP_Rightsling4: BP_Rightsling4=Array(BM_Rightsling4, LM_Flashers_f130_Rightsling4, LM_Flashers_f131_Rightsling4, LM_GISplit_gi001_Rightsling4, LM_GISplit_gi005_Rightsling4, LM_GI_Rightsling4, LM_Inserts_l29_Rightsling4, LM_Inserts_l7_Rightsling4)
Dim BP_SeafoodGlass: BP_SeafoodGlass=Array(BM_SeafoodGlass, LM_Flashers_SFWL_SeafoodGlass, LM_Flashers_f131_SeafoodGlass)
Dim BP_SeafoodWood: BP_SeafoodWood=Array(BM_SeafoodWood, LM_Flashers_SFWL_SeafoodWood, LM_Flashers_f126_SeafoodWood, LM_Flashers_f127_SeafoodWood, LM_Flashers_f128_SeafoodWood, LM_Flashers_f129_SeafoodWood, LM_Flashers_f130_SeafoodWood, LM_Flashers_f131_SeafoodWood, LM_GI_SeafoodWood)
Dim BP_SideBlades: BP_SideBlades=Array(BM_SideBlades, LM_Flashers_f125_SideBlades, LM_Flashers_f126_SideBlades, LM_Flashers_f127_SideBlades, LM_Flashers_f128_SideBlades, LM_Flashers_f129_SideBlades, LM_Flashers_f131_SideBlades, LM_GI_SideBlades, LM_GISplit_gi16_SideBlades)
Dim BP_SideRails: BP_SideRails=Array(BM_SideRails, LM_Flashers_f125_SideRails, LM_Flashers_f126_SideRails, LM_Flashers_f128_SideRails, LM_Flashers_f129_SideRails, LM_Flashers_f131_SideRails, LM_GI_SideRails)
Dim BP_Stickers: BP_Stickers=Array(BM_Stickers, LM_Flashers_f125_Stickers, LM_Flashers_f126_Stickers, LM_Flashers_f127_Stickers, LM_Flashers_f128_Stickers, LM_Flashers_f129_Stickers, LM_Flashers_f131_Stickers, LM_GI_Stickers, LM_GISplit_gi16_Stickers, LM_Inserts_l10_Stickers, LM_Inserts_l14_Stickers, LM_Inserts_l19_Stickers)
Dim BP_TigerRamp: BP_TigerRamp=Array(BM_TigerRamp, LM_Flashers_f125_TigerRamp, LM_Flashers_f126_TigerRamp, LM_Flashers_f127_TigerRamp, LM_Flashers_f128_TigerRamp, LM_Flashers_f129_TigerRamp, LM_Flashers_f130_TigerRamp, LM_Flashers_f131_TigerRamp, LM_GISplit_gi005_TigerRamp, LM_GI_TigerRamp, LM_Inserts_l10_TigerRamp, LM_Inserts_l17_TigerRamp, LM_Inserts_l19_TigerRamp)
Dim BP_TigerRampEdges: BP_TigerRampEdges=Array(BM_TigerRampEdges, LM_Flashers_f125_TigerRampEdges, LM_Flashers_f126_TigerRampEdges, LM_Flashers_f127_TigerRampEdges, LM_Flashers_f128_TigerRampEdges, LM_Flashers_f129_TigerRampEdges, LM_Flashers_f130_TigerRampEdges, LM_Flashers_f131_TigerRampEdges, LM_GISplit_gi005_TigerRampEdges, LM_GI_TigerRampEdges, LM_Inserts_l28_TigerRampEdges)
Dim BP_UnderPF: BP_UnderPF=Array(BM_UnderPF, LM_Flashers_f125_UnderPF, LM_Flashers_f126_UnderPF, LM_Flashers_f127_UnderPF, LM_Flashers_f128_UnderPF, LM_Flashers_f129_UnderPF, LM_Flashers_f130_UnderPF, LM_Flashers_f131_UnderPF, LM_Flashers_f132_UnderPF, LM_GISplit_gi001_UnderPF, LM_GISplit_gi005_UnderPF, LM_GI_UnderPF, LM_GISplit_gi15_UnderPF, LM_GISplit_gi16_UnderPF, LM_GISplit_gi18_UnderPF, LM_GISplit_gi9_UnderPF, LM_Inserts_l14_UnderPF, LM_Inserts_l15_UnderPF, LM_Inserts_l16_UnderPF, LM_Inserts_l1_UnderPF, LM_Inserts_l21_UnderPF, LM_Inserts_l22_UnderPF, LM_Inserts_l23_UnderPF, LM_Inserts_l24_UnderPF, LM_Inserts_l26_UnderPF, LM_Inserts_l27_UnderPF, LM_Inserts_l28_UnderPF, LM_Inserts_l29_UnderPF, LM_Inserts_l2_UnderPF, LM_Inserts_l30_UnderPF, LM_Inserts_l33_UnderPF, LM_Inserts_l34_UnderPF, LM_Inserts_l35_UnderPF, LM_Inserts_l36_UnderPF, LM_Inserts_l37_UnderPF, LM_Inserts_l38_UnderPF, LM_Inserts_l39_UnderPF, LM_Inserts_l3_UnderPF, LM_Inserts_l40_UnderPF, LM_Inserts_l41_UnderPF, LM_Inserts_l42_UnderPF, _
	LM_Inserts_l43_UnderPF, LM_Inserts_l44_UnderPF, LM_Inserts_l45_UnderPF, LM_Inserts_l46_UnderPF, LM_Inserts_l47_UnderPF, LM_Inserts_l48_UnderPF, LM_Inserts_l49_UnderPF, LM_Inserts_l4_UnderPF, LM_Inserts_l50_UnderPF, LM_Inserts_l51_UnderPF, LM_Inserts_l52_UnderPF, LM_Inserts_l53_UnderPF, LM_Inserts_l5_UnderPF, LM_Inserts_l6_UnderPF, LM_Inserts_l7_UnderPF, LM_Inserts_l8_UnderPF)
Dim BP_Wheel: BP_Wheel=Array(BM_Wheel, LM_Flashers_SFWL_Wheel, LM_Flashers_f127_Wheel, LM_Flashers_f129_Wheel, LM_Flashers_f131_Wheel)
Dim BP_sw11: BP_sw11=Array(BM_sw11, LM_Flashers_f126_sw11, LM_Flashers_f129_sw11, LM_GI_sw11, LM_GISplit_gi16_sw11)
Dim BP_sw12: BP_sw12=Array(BM_sw12, LM_Flashers_f126_sw12, LM_Flashers_f129_sw12, LM_GI_sw12, LM_GISplit_gi16_sw12)
Dim BP_sw13: BP_sw13=Array(BM_sw13, LM_Flashers_f126_sw13, LM_GI_sw13, LM_GISplit_gi16_sw13)
Dim BP_sw14: BP_sw14=Array(BM_sw14)
Dim BP_sw16_Wire: BP_sw16_Wire=Array(BM_sw16_Wire, LM_Flashers_f125_sw16_Wire, LM_Flashers_f126_sw16_Wire, LM_Flashers_f128_sw16_Wire, LM_Flashers_f129_sw16_Wire, LM_GI_sw16_Wire, LM_Inserts_l24_sw16_Wire)
Dim BP_sw23_Wire: BP_sw23_Wire=Array(BM_sw23_Wire, LM_Flashers_f127_sw23_Wire, LM_Flashers_f128_sw23_Wire, LM_GI_sw23_Wire)
Dim BP_sw25: BP_sw25=Array(BM_sw25, LM_Flashers_f131_sw25, LM_GI_sw25, LM_GISplit_gi11_sw25)
Dim BP_sw26: BP_sw26=Array(BM_sw26, LM_Flashers_f127_sw26, LM_Flashers_f129_sw26, LM_Flashers_f131_sw26, LM_GI_sw26, LM_GISplit_gi11_sw26)
Dim BP_sw27: BP_sw27=Array(BM_sw27, LM_Flashers_f127_sw27, LM_Flashers_f131_sw27, LM_GI_sw27, LM_GISplit_gi11_sw27)
Dim BP_sw28: BP_sw28=Array(BM_sw28, LM_Flashers_f127_sw28, LM_Flashers_f130_sw28, LM_Flashers_f131_sw28, LM_GI_sw28, LM_GISplit_gi11_sw28)
Dim BP_sw29: BP_sw29=Array(BM_sw29, LM_Flashers_f127_sw29, LM_Flashers_f129_sw29, LM_Flashers_f131_sw29, LM_GI_sw29)
Dim BP_sw30: BP_sw30=Array(BM_sw30, LM_GI_sw30, LM_GISplit_gi18_sw30, LM_GISplit_gi9_sw30)
Dim BP_sw31: BP_sw31=Array(BM_sw31, LM_GISplit_gi001_sw31, LM_GISplit_gi005_sw31, LM_GI_sw31)
Dim BP_sw35: BP_sw35=Array(BM_sw35, LM_GI_sw35, LM_GISplit_gi18_sw35, LM_GISplit_gi9_sw35)
Dim BP_sw36: BP_sw36=Array(BM_sw36, LM_GISplit_gi001_sw36, LM_GISplit_gi005_sw36, LM_GI_sw36)
Dim BP_sw37: BP_sw37=Array(BM_sw37, LM_Flashers_f127_sw37, LM_Flashers_f129_sw37, LM_Flashers_f131_sw37, LM_GI_sw37, LM_GISplit_gi15_sw37)
Dim BP_sw38: BP_sw38=Array(BM_sw38, LM_Flashers_f127_sw38, LM_Flashers_f129_sw38, LM_GI_sw38, LM_GISplit_gi15_sw38)
Dim BP_sw39: BP_sw39=Array(BM_sw39, LM_Flashers_f127_sw39, LM_Flashers_f129_sw39, LM_GI_sw39, LM_GISplit_gi15_sw39)
Dim BP_sw41P: BP_sw41P=Array(BM_sw41P, LM_Flashers_f126_sw41P, LM_Flashers_f128_sw41P, LM_Flashers_f129_sw41P, LM_GI_sw41P, LM_GISplit_gi16_sw41P)
Dim BP_sw43P: BP_sw43P=Array(BM_sw43P, LM_Flashers_f125_sw43P, LM_Flashers_f126_sw43P, LM_Flashers_f128_sw43P, LM_Flashers_f129_sw43P, LM_Flashers_f131_sw43P, LM_GI_sw43P, LM_GISplit_gi16_sw43P)
Dim BP_sw60_Ring: BP_sw60_Ring=Array(BM_sw60_Ring, LM_Flashers_f125_sw60_Ring, LM_Flashers_f126_sw60_Ring, LM_Flashers_f128_sw60_Ring, LM_Flashers_f129_sw60_Ring, LM_Flashers_f131_sw60_Ring, LM_Flashers_f132_sw60_Ring, LM_GI_sw60_Ring, LM_GISplit_gi16_sw60_Ring, LM_Inserts_l14_sw60_Ring, LM_Inserts_l15_sw60_Ring, LM_Inserts_l16_sw60_Ring)
Dim BP_sw61_Ring: BP_sw61_Ring=Array(BM_sw61_Ring, LM_Flashers_f126_sw61_Ring, LM_Flashers_f127_sw61_Ring, LM_Flashers_f128_sw61_Ring, LM_Flashers_f129_sw61_Ring, LM_GI_sw61_Ring, LM_GISplit_gi15_sw61_Ring, LM_GISplit_gi16_sw61_Ring, LM_Inserts_l16_sw61_Ring)
Dim BP_sw62_Ring: BP_sw62_Ring=Array(BM_sw62_Ring, LM_Flashers_f126_sw62_Ring, LM_Flashers_f127_sw62_Ring, LM_Flashers_f128_sw62_Ring, LM_Flashers_f129_sw62_Ring, LM_GI_sw62_Ring, LM_GISplit_gi15_sw62_Ring, LM_GISplit_gi16_sw62_Ring)
' Arrays per lighting scenario
Dim BL_Flashers_SFWL: BL_Flashers_SFWL=Array(LM_Flashers_SFWL_MetalRails, LM_Flashers_SFWL_Parts, LM_Flashers_SFWL_Playfield, LM_Flashers_SFWL_SeafoodGlass, LM_Flashers_SFWL_SeafoodWood, LM_Flashers_SFWL_Wheel)
Dim BL_Flashers_f125: BL_Flashers_f125=Array(LM_Flashers_f125_BackWall, LM_Flashers_f125_BackWall2, LM_Flashers_f125_DogHouseRoofL, LM_Flashers_f125_FishRamp, LM_Flashers_f125_FishRampEdges, LM_Flashers_f125_FishT, LM_Flashers_f125_Gate7_Wire, LM_Flashers_f125_MetalRails, LM_Flashers_f125_Parts, LM_Flashers_f125_Plastics, LM_Flashers_f125_PlasticsT2, LM_Flashers_f125_PlasticsT3, LM_Flashers_f125_Playfield, LM_Flashers_f125_SideBlades, LM_Flashers_f125_SideRails, LM_Flashers_f125_Stickers, LM_Flashers_f125_TigerRamp, LM_Flashers_f125_TigerRampEdges, LM_Flashers_f125_UnderPF, LM_Flashers_f125_sw16_Wire, LM_Flashers_f125_sw43P, LM_Flashers_f125_sw60_Ring)
Dim BL_Flashers_f126: BL_Flashers_f126=Array(LM_Flashers_f126_BGlass, LM_Flashers_f126_BackWall, LM_Flashers_f126_BackWall2, LM_Flashers_f126_BirdCage, LM_Flashers_f126_DogHouseRoofL, LM_Flashers_f126_FishRamp, LM_Flashers_f126_FishRampEdges, LM_Flashers_f126_FlipperR, LM_Flashers_f126_Gate3_Wire, LM_Flashers_f126_Gate4_Wire, LM_Flashers_f126_MetalRails, LM_Flashers_f126_Parts, LM_Flashers_f126_Plastics, LM_Flashers_f126_PlasticsT2, LM_Flashers_f126_PlasticsT3, LM_Flashers_f126_Playfield, LM_Flashers_f126_SeafoodWood, LM_Flashers_f126_SideBlades, LM_Flashers_f126_SideRails, LM_Flashers_f126_Stickers, LM_Flashers_f126_TigerRamp, LM_Flashers_f126_TigerRampEdges, LM_Flashers_f126_UnderPF, LM_Flashers_f126_sw11, LM_Flashers_f126_sw12, LM_Flashers_f126_sw13, LM_Flashers_f126_sw16_Wire, LM_Flashers_f126_sw41P, LM_Flashers_f126_sw43P, LM_Flashers_f126_sw60_Ring, LM_Flashers_f126_sw61_Ring, LM_Flashers_f126_sw62_Ring)
Dim BL_Flashers_f127: BL_Flashers_f127=Array(LM_Flashers_f127_BGlass, LM_Flashers_f127_BackWall2, LM_Flashers_f127_BirdCage, LM_Flashers_f127_DogHouseRoofL, LM_Flashers_f127_FishRampEdges, LM_Flashers_f127_FishT, LM_Flashers_f127_LeftSling1, LM_Flashers_f127_LeftSling2, LM_Flashers_f127_LeftSling4, LM_Flashers_f127_MetalRails, LM_Flashers_f127_Parts, LM_Flashers_f127_Plastics, LM_Flashers_f127_PlasticsT2, LM_Flashers_f127_PlasticsT3, LM_Flashers_f127_PlasticsT4, LM_Flashers_f127_Playfield, LM_Flashers_f127_SeafoodWood, LM_Flashers_f127_SideBlades, LM_Flashers_f127_Stickers, LM_Flashers_f127_TigerRamp, LM_Flashers_f127_TigerRampEdges, LM_Flashers_f127_UnderPF, LM_Flashers_f127_Wheel, LM_Flashers_f127_sw23_Wire, LM_Flashers_f127_sw26, LM_Flashers_f127_sw27, LM_Flashers_f127_sw28, LM_Flashers_f127_sw29, LM_Flashers_f127_sw37, LM_Flashers_f127_sw38, LM_Flashers_f127_sw39, LM_Flashers_f127_sw61_Ring, LM_Flashers_f127_sw62_Ring)
Dim BL_Flashers_f128: BL_Flashers_f128=Array(LM_Flashers_f128_BGlass, LM_Flashers_f128_BackWall, LM_Flashers_f128_BackWall2, LM_Flashers_f128_BirdCage, LM_Flashers_f128_DogHouseRoofL, LM_Flashers_f128_FishRamp, LM_Flashers_f128_FishRampEdges, LM_Flashers_f128_FishT, LM_Flashers_f128_FlipperR, LM_Flashers_f128_Gate4_Wire, LM_Flashers_f128_MetalRails, LM_Flashers_f128_Parts, LM_Flashers_f128_Plastics, LM_Flashers_f128_PlasticsT2, LM_Flashers_f128_PlasticsT4, LM_Flashers_f128_Playfield, LM_Flashers_f128_SeafoodWood, LM_Flashers_f128_SideBlades, LM_Flashers_f128_SideRails, LM_Flashers_f128_Stickers, LM_Flashers_f128_TigerRamp, LM_Flashers_f128_TigerRampEdges, LM_Flashers_f128_UnderPF, LM_Flashers_f128_sw16_Wire, LM_Flashers_f128_sw23_Wire, LM_Flashers_f128_sw41P, LM_Flashers_f128_sw43P, LM_Flashers_f128_sw60_Ring, LM_Flashers_f128_sw61_Ring, LM_Flashers_f128_sw62_Ring)
Dim BL_Flashers_f129: BL_Flashers_f129=Array(LM_Flashers_f129_BackWall, LM_Flashers_f129_BackWall2, LM_Flashers_f129_DogHouseRoofL, LM_Flashers_f129_FishRamp, LM_Flashers_f129_FishRampEdges, LM_Flashers_f129_FishT, LM_Flashers_f129_Gate3_Wire, LM_Flashers_f129_Gate4_Wire, LM_Flashers_f129_Gate7_Wire, LM_Flashers_f129_MetalRails, LM_Flashers_f129_Parts, LM_Flashers_f129_Plastics, LM_Flashers_f129_PlasticsT2, LM_Flashers_f129_PlasticsT3, LM_Flashers_f129_Playfield, LM_Flashers_f129_SeafoodWood, LM_Flashers_f129_SideBlades, LM_Flashers_f129_SideRails, LM_Flashers_f129_Stickers, LM_Flashers_f129_TigerRamp, LM_Flashers_f129_TigerRampEdges, LM_Flashers_f129_UnderPF, LM_Flashers_f129_Wheel, LM_Flashers_f129_sw11, LM_Flashers_f129_sw12, LM_Flashers_f129_sw16_Wire, LM_Flashers_f129_sw26, LM_Flashers_f129_sw29, LM_Flashers_f129_sw37, LM_Flashers_f129_sw38, LM_Flashers_f129_sw39, LM_Flashers_f129_sw41P, LM_Flashers_f129_sw43P, LM_Flashers_f129_sw60_Ring, LM_Flashers_f129_sw61_Ring, LM_Flashers_f129_sw62_Ring)
Dim BL_Flashers_f130: BL_Flashers_f130=Array(LM_Flashers_f130_BGlass, LM_Flashers_f130_DogHouseRoofL, LM_Flashers_f130_LeftSling1, LM_Flashers_f130_MetalRails, LM_Flashers_f130_Parts, LM_Flashers_f130_Plastics, LM_Flashers_f130_PlasticsT3, LM_Flashers_f130_Playfield, LM_Flashers_f130_Rightsling1, LM_Flashers_f130_Rightsling2, LM_Flashers_f130_Rightsling3, LM_Flashers_f130_Rightsling4, LM_Flashers_f130_SeafoodWood, LM_Flashers_f130_TigerRamp, LM_Flashers_f130_TigerRampEdges, LM_Flashers_f130_UnderPF, LM_Flashers_f130_sw28)
Dim BL_Flashers_f131: BL_Flashers_f131=Array(LM_Flashers_f131_BGlass, LM_Flashers_f131_BackWall2, LM_Flashers_f131_BirdCage, LM_Flashers_f131_DogHouseRoofL, LM_Flashers_f131_FishRampEdges, LM_Flashers_f131_FlipperL, LM_Flashers_f131_FlipperR, LM_Flashers_f131_LeftSling1, LM_Flashers_f131_LeftSling2, LM_Flashers_f131_LeftSling3, LM_Flashers_f131_LeftSling4, LM_Flashers_f131_MetalRails, LM_Flashers_f131_Parts, LM_Flashers_f131_Plastics, LM_Flashers_f131_PlasticsT2, LM_Flashers_f131_PlasticsT3, LM_Flashers_f131_PlasticsT4, LM_Flashers_f131_Playfield, LM_Flashers_f131_Remk, LM_Flashers_f131_Rightsling1, LM_Flashers_f131_Rightsling2, LM_Flashers_f131_Rightsling3, LM_Flashers_f131_Rightsling4, LM_Flashers_f131_SeafoodGlass, LM_Flashers_f131_SeafoodWood, LM_Flashers_f131_SideBlades, LM_Flashers_f131_SideRails, LM_Flashers_f131_Stickers, LM_Flashers_f131_TigerRamp, LM_Flashers_f131_TigerRampEdges, LM_Flashers_f131_UnderPF, LM_Flashers_f131_Wheel, LM_Flashers_f131_sw25, LM_Flashers_f131_sw26, LM_Flashers_f131_sw27, _
	LM_Flashers_f131_sw28, LM_Flashers_f131_sw29, LM_Flashers_f131_sw37, LM_Flashers_f131_sw43P, LM_Flashers_f131_sw60_Ring)
Dim BL_Flashers_f132: BL_Flashers_f132=Array(LM_Flashers_f132_MetalRails, LM_Flashers_f132_Parts, LM_Flashers_f132_Plastics, LM_Flashers_f132_Playfield, LM_Flashers_f132_UnderPF, LM_Flashers_f132_sw60_Ring)
Dim BL_GI: BL_GI=Array(LM_GI_BGlass, LM_GI_BackWall, LM_GI_BackWall2, LM_GI_BirdCage, LM_GI_DogHouseRoofL, LM_GI_FishRamp, LM_GI_FishRampEdges, LM_GI_FishT, LM_GI_FlipperL, LM_GI_FlipperR, LM_GI_Gate3_Wire, LM_GI_Gate4_Wire, LM_GI_Gate7_Wire, LM_GI_LeftSling1, LM_GI_LeftSling2, LM_GI_LeftSling3, LM_GI_LeftSling4, LM_GI_MetalRails, LM_GI_Parts, LM_GI_Plastics, LM_GI_PlasticsT2, LM_GI_PlasticsT3, LM_GI_PlasticsT4, LM_GI_Playfield, LM_GI_Remk, LM_GI_Rightsling1, LM_GI_Rightsling2, LM_GI_Rightsling3, LM_GI_Rightsling4, LM_GI_SeafoodWood, LM_GI_SideBlades, LM_GI_SideRails, LM_GI_Stickers, LM_GI_TigerRamp, LM_GI_TigerRampEdges, LM_GI_UnderPF, LM_GI_sw11, LM_GI_sw12, LM_GI_sw13, LM_GI_sw16_Wire, LM_GI_sw23_Wire, LM_GI_sw25, LM_GI_sw26, LM_GI_sw27, LM_GI_sw28, LM_GI_sw29, LM_GI_sw30, LM_GI_sw31, LM_GI_sw35, LM_GI_sw36, LM_GI_sw37, LM_GI_sw38, LM_GI_sw39, LM_GI_sw41P, LM_GI_sw43P, LM_GI_sw60_Ring, LM_GI_sw61_Ring, LM_GI_sw62_Ring)
Dim BL_GISplit_gi001: BL_GISplit_gi001=Array(LM_GISplit_gi001_FlipperR, LM_GISplit_gi001_MetalRails, LM_GISplit_gi001_Parts, LM_GISplit_gi001_Plastics, LM_GISplit_gi001_Playfield, LM_GISplit_gi001_Remk, LM_GISplit_gi001_Rightsling1, LM_GISplit_gi001_Rightsling2, LM_GISplit_gi001_Rightsling3, LM_GISplit_gi001_Rightsling4, LM_GISplit_gi001_UnderPF, LM_GISplit_gi001_sw31, LM_GISplit_gi001_sw36)
Dim BL_GISplit_gi005: BL_GISplit_gi005=Array(LM_GISplit_gi005_FlipperR, LM_GISplit_gi005_MetalRails, LM_GISplit_gi005_Parts, LM_GISplit_gi005_Plastics, LM_GISplit_gi005_Playfield, LM_GISplit_gi005_Remk, LM_GISplit_gi005_Rightsling1, LM_GISplit_gi005_Rightsling2, LM_GISplit_gi005_Rightsling3, LM_GISplit_gi005_Rightsling4, LM_GISplit_gi005_TigerRamp, LM_GISplit_gi005_TigerRampEdges, LM_GISplit_gi005_UnderPF, LM_GISplit_gi005_sw31, LM_GISplit_gi005_sw36)
Dim BL_GISplit_gi11: BL_GISplit_gi11=Array(LM_GISplit_gi11_BGlass, LM_GISplit_gi11_BirdCage, LM_GISplit_gi11_MetalRails, LM_GISplit_gi11_Parts, LM_GISplit_gi11_PlasticsT4, LM_GISplit_gi11_Playfield, LM_GISplit_gi11_sw25, LM_GISplit_gi11_sw26, LM_GISplit_gi11_sw27, LM_GISplit_gi11_sw28)
Dim BL_GISplit_gi15: BL_GISplit_gi15=Array(LM_GISplit_gi15_DogHouseRoofL, LM_GISplit_gi15_MetalRails, LM_GISplit_gi15_Parts, LM_GISplit_gi15_Plastics, LM_GISplit_gi15_PlasticsT3, LM_GISplit_gi15_Playfield, LM_GISplit_gi15_UnderPF, LM_GISplit_gi15_sw37, LM_GISplit_gi15_sw38, LM_GISplit_gi15_sw39, LM_GISplit_gi15_sw61_Ring, LM_GISplit_gi15_sw62_Ring)
Dim BL_GISplit_gi16: BL_GISplit_gi16=Array(LM_GISplit_gi16_BackWall2, LM_GISplit_gi16_Gate3_Wire, LM_GISplit_gi16_MetalRails, LM_GISplit_gi16_Parts, LM_GISplit_gi16_Plastics, LM_GISplit_gi16_Playfield, LM_GISplit_gi16_SideBlades, LM_GISplit_gi16_Stickers, LM_GISplit_gi16_UnderPF, LM_GISplit_gi16_sw11, LM_GISplit_gi16_sw12, LM_GISplit_gi16_sw13, LM_GISplit_gi16_sw41P, LM_GISplit_gi16_sw43P, LM_GISplit_gi16_sw60_Ring, LM_GISplit_gi16_sw61_Ring, LM_GISplit_gi16_sw62_Ring)
Dim BL_GISplit_gi18: BL_GISplit_gi18=Array(LM_GISplit_gi18_FlipperL, LM_GISplit_gi18_LeftSling1, LM_GISplit_gi18_LeftSling2, LM_GISplit_gi18_LeftSling3, LM_GISplit_gi18_LeftSling4, LM_GISplit_gi18_MetalRails, LM_GISplit_gi18_Parts, LM_GISplit_gi18_Plastics, LM_GISplit_gi18_Playfield, LM_GISplit_gi18_UnderPF, LM_GISplit_gi18_sw30, LM_GISplit_gi18_sw35)
Dim BL_GISplit_gi9: BL_GISplit_gi9=Array(LM_GISplit_gi9_LeftSling1, LM_GISplit_gi9_LeftSling2, LM_GISplit_gi9_LeftSling3, LM_GISplit_gi9_LeftSling4, LM_GISplit_gi9_MetalRails, LM_GISplit_gi9_Parts, LM_GISplit_gi9_Plastics, LM_GISplit_gi9_PlasticsT4, LM_GISplit_gi9_Playfield, LM_GISplit_gi9_UnderPF, LM_GISplit_gi9_sw30, LM_GISplit_gi9_sw35)
Dim BL_Inserts_l1: BL_Inserts_l1=Array(LM_Inserts_l1_FlipperL, LM_Inserts_l1_FlipperR, LM_Inserts_l1_Parts, LM_Inserts_l1_Playfield, LM_Inserts_l1_UnderPF)
Dim BL_Inserts_l10: BL_Inserts_l10=Array(LM_Inserts_l10_BackWall2, LM_Inserts_l10_MetalRails, LM_Inserts_l10_Parts, LM_Inserts_l10_PlasticsT2, LM_Inserts_l10_Stickers, LM_Inserts_l10_TigerRamp)
Dim BL_Inserts_l11: BL_Inserts_l11=Array(LM_Inserts_l11_BackWall2, LM_Inserts_l11_MetalRails)
Dim BL_Inserts_l12: BL_Inserts_l12=Array(LM_Inserts_l12_BackWall2)
Dim BL_Inserts_l13: BL_Inserts_l13=Array(LM_Inserts_l13_BackWall2, LM_Inserts_l13_MetalRails)
Dim BL_Inserts_l14: BL_Inserts_l14=Array(LM_Inserts_l14_MetalRails, LM_Inserts_l14_Parts, LM_Inserts_l14_Plastics, LM_Inserts_l14_Playfield, LM_Inserts_l14_Stickers, LM_Inserts_l14_UnderPF, LM_Inserts_l14_sw60_Ring)
Dim BL_Inserts_l15: BL_Inserts_l15=Array(LM_Inserts_l15_MetalRails, LM_Inserts_l15_Parts, LM_Inserts_l15_Plastics, LM_Inserts_l15_Playfield, LM_Inserts_l15_UnderPF, LM_Inserts_l15_sw60_Ring)
Dim BL_Inserts_l16: BL_Inserts_l16=Array(LM_Inserts_l16_MetalRails, LM_Inserts_l16_Parts, LM_Inserts_l16_Plastics, LM_Inserts_l16_Playfield, LM_Inserts_l16_UnderPF, LM_Inserts_l16_sw60_Ring, LM_Inserts_l16_sw61_Ring)
Dim BL_Inserts_l17: BL_Inserts_l17=Array(LM_Inserts_l17_BackWall2, LM_Inserts_l17_MetalRails, LM_Inserts_l17_Playfield, LM_Inserts_l17_TigerRamp)
Dim BL_Inserts_l18: BL_Inserts_l18=Array(LM_Inserts_l18_BackWall2)
Dim BL_Inserts_l19: BL_Inserts_l19=Array(LM_Inserts_l19_BackWall2, LM_Inserts_l19_MetalRails, LM_Inserts_l19_Parts, LM_Inserts_l19_Stickers, LM_Inserts_l19_TigerRamp)
Dim BL_Inserts_l2: BL_Inserts_l2=Array(LM_Inserts_l2_LeftSling1, LM_Inserts_l2_LeftSling2, LM_Inserts_l2_LeftSling3, LM_Inserts_l2_LeftSling4, LM_Inserts_l2_Playfield, LM_Inserts_l2_UnderPF)
Dim BL_Inserts_l21: BL_Inserts_l21=Array(LM_Inserts_l21_FishRampEdges, LM_Inserts_l21_MetalRails, LM_Inserts_l21_Parts, LM_Inserts_l21_Playfield, LM_Inserts_l21_UnderPF)
Dim BL_Inserts_l22: BL_Inserts_l22=Array(LM_Inserts_l22_FishRamp, LM_Inserts_l22_MetalRails, LM_Inserts_l22_Playfield, LM_Inserts_l22_UnderPF)
Dim BL_Inserts_l23: BL_Inserts_l23=Array(LM_Inserts_l23_FishRamp, LM_Inserts_l23_MetalRails, LM_Inserts_l23_Playfield, LM_Inserts_l23_UnderPF)
Dim BL_Inserts_l24: BL_Inserts_l24=Array(LM_Inserts_l24_MetalRails, LM_Inserts_l24_Parts, LM_Inserts_l24_Playfield, LM_Inserts_l24_UnderPF, LM_Inserts_l24_sw16_Wire)
Dim BL_Inserts_l26: BL_Inserts_l26=Array(LM_Inserts_l26_LeftSling1, LM_Inserts_l26_LeftSling2, LM_Inserts_l26_LeftSling3, LM_Inserts_l26_LeftSling4, LM_Inserts_l26_Parts, LM_Inserts_l26_Plastics, LM_Inserts_l26_Playfield, LM_Inserts_l26_UnderPF)
Dim BL_Inserts_l27: BL_Inserts_l27=Array(LM_Inserts_l27_MetalRails, LM_Inserts_l27_Parts, LM_Inserts_l27_Playfield, LM_Inserts_l27_UnderPF)
Dim BL_Inserts_l28: BL_Inserts_l28=Array(LM_Inserts_l28_Parts, LM_Inserts_l28_Playfield, LM_Inserts_l28_TigerRampEdges, LM_Inserts_l28_UnderPF)
Dim BL_Inserts_l29: BL_Inserts_l29=Array(LM_Inserts_l29_Parts, LM_Inserts_l29_Plastics, LM_Inserts_l29_Playfield, LM_Inserts_l29_Rightsling1, LM_Inserts_l29_Rightsling2, LM_Inserts_l29_Rightsling3, LM_Inserts_l29_Rightsling4, LM_Inserts_l29_UnderPF)
Dim BL_Inserts_l3: BL_Inserts_l3=Array(LM_Inserts_l3_Playfield, LM_Inserts_l3_UnderPF)
Dim BL_Inserts_l30: BL_Inserts_l30=Array(LM_Inserts_l30_Parts, LM_Inserts_l30_Playfield, LM_Inserts_l30_UnderPF)
Dim BL_Inserts_l33: BL_Inserts_l33=Array(LM_Inserts_l33_Playfield, LM_Inserts_l33_UnderPF)
Dim BL_Inserts_l34: BL_Inserts_l34=Array(LM_Inserts_l34_Playfield, LM_Inserts_l34_UnderPF)
Dim BL_Inserts_l35: BL_Inserts_l35=Array(LM_Inserts_l35_Playfield, LM_Inserts_l35_UnderPF)
Dim BL_Inserts_l36: BL_Inserts_l36=Array(LM_Inserts_l36_Playfield, LM_Inserts_l36_UnderPF)
Dim BL_Inserts_l37: BL_Inserts_l37=Array(LM_Inserts_l37_Playfield, LM_Inserts_l37_UnderPF)
Dim BL_Inserts_l38: BL_Inserts_l38=Array(LM_Inserts_l38_Playfield, LM_Inserts_l38_UnderPF)
Dim BL_Inserts_l39: BL_Inserts_l39=Array(LM_Inserts_l39_Playfield, LM_Inserts_l39_UnderPF)
Dim BL_Inserts_l4: BL_Inserts_l4=Array(LM_Inserts_l4_Playfield, LM_Inserts_l4_UnderPF)
Dim BL_Inserts_l40: BL_Inserts_l40=Array(LM_Inserts_l40_Parts, LM_Inserts_l40_Plastics, LM_Inserts_l40_Playfield, LM_Inserts_l40_UnderPF)
Dim BL_Inserts_l41: BL_Inserts_l41=Array(LM_Inserts_l41_MetalRails, LM_Inserts_l41_Playfield, LM_Inserts_l41_UnderPF)
Dim BL_Inserts_l42: BL_Inserts_l42=Array(LM_Inserts_l42_Playfield, LM_Inserts_l42_UnderPF)
Dim BL_Inserts_l43: BL_Inserts_l43=Array(LM_Inserts_l43_MetalRails, LM_Inserts_l43_Parts, LM_Inserts_l43_Playfield, LM_Inserts_l43_UnderPF)
Dim BL_Inserts_l44: BL_Inserts_l44=Array(LM_Inserts_l44_Playfield, LM_Inserts_l44_UnderPF)
Dim BL_Inserts_l45: BL_Inserts_l45=Array(LM_Inserts_l45_Playfield, LM_Inserts_l45_UnderPF)
Dim BL_Inserts_l46: BL_Inserts_l46=Array(LM_Inserts_l46_UnderPF)
Dim BL_Inserts_l47: BL_Inserts_l47=Array(LM_Inserts_l47_BGlass, LM_Inserts_l47_MetalRails, LM_Inserts_l47_Parts, LM_Inserts_l47_Playfield, LM_Inserts_l47_UnderPF)
Dim BL_Inserts_l48: BL_Inserts_l48=Array(LM_Inserts_l48_BGlass, LM_Inserts_l48_MetalRails, LM_Inserts_l48_Playfield, LM_Inserts_l48_UnderPF)
Dim BL_Inserts_l49: BL_Inserts_l49=Array(LM_Inserts_l49_MetalRails, LM_Inserts_l49_Parts, LM_Inserts_l49_Playfield, LM_Inserts_l49_UnderPF)
Dim BL_Inserts_l5: BL_Inserts_l5=Array(LM_Inserts_l5_FlipperR, LM_Inserts_l5_Playfield, LM_Inserts_l5_UnderPF)
Dim BL_Inserts_l50: BL_Inserts_l50=Array(LM_Inserts_l50_MetalRails, LM_Inserts_l50_Playfield, LM_Inserts_l50_UnderPF)
Dim BL_Inserts_l51: BL_Inserts_l51=Array(LM_Inserts_l51_MetalRails, LM_Inserts_l51_Playfield, LM_Inserts_l51_UnderPF)
Dim BL_Inserts_l52: BL_Inserts_l52=Array(LM_Inserts_l52_MetalRails, LM_Inserts_l52_Playfield, LM_Inserts_l52_UnderPF)
Dim BL_Inserts_l53: BL_Inserts_l53=Array(LM_Inserts_l53_FishT, LM_Inserts_l53_Parts, LM_Inserts_l53_Playfield, LM_Inserts_l53_UnderPF)
Dim BL_Inserts_l6: BL_Inserts_l6=Array(LM_Inserts_l6_Playfield, LM_Inserts_l6_UnderPF)
Dim BL_Inserts_l7: BL_Inserts_l7=Array(LM_Inserts_l7_Playfield, LM_Inserts_l7_Rightsling1, LM_Inserts_l7_Rightsling2, LM_Inserts_l7_Rightsling3, LM_Inserts_l7_Rightsling4, LM_Inserts_l7_UnderPF)
Dim BL_Inserts_l8: BL_Inserts_l8=Array(LM_Inserts_l8_Parts, LM_Inserts_l8_Plastics, LM_Inserts_l8_PlasticsT2, LM_Inserts_l8_Playfield, LM_Inserts_l8_UnderPF)
Dim BL_Inserts_l9: BL_Inserts_l9=Array(LM_Inserts_l9_BackWall2, LM_Inserts_l9_MetalRails, LM_Inserts_l9_Parts)
Dim BL_Room: BL_Room=Array(BM_BGlass, BM_BackWall, BM_BackWall2, BM_BirdCage, BM_DogHouseRoofL, BM_FishRamp, BM_FishRampEdges, BM_FishT, BM_FlipperL, BM_FlipperR, BM_Gate3_Wire, BM_Gate4_Wire, BM_Gate7_Wire, BM_LeftSling1, BM_LeftSling2, BM_LeftSling3, BM_LeftSling4, BM_MetalRails, BM_Parts, BM_Plastics, BM_PlasticsT2, BM_PlasticsT3, BM_PlasticsT4, BM_Playfield, BM_Remk, BM_Rightsling1, BM_Rightsling2, BM_Rightsling3, BM_Rightsling4, BM_SeafoodGlass, BM_SeafoodWood, BM_SideBlades, BM_SideRails, BM_Stickers, BM_TigerRamp, BM_TigerRampEdges, BM_UnderPF, BM_Wheel, BM_sw11, BM_sw12, BM_sw13, BM_sw14, BM_sw16_Wire, BM_sw23_Wire, BM_sw25, BM_sw26, BM_sw27, BM_sw28, BM_sw29, BM_sw30, BM_sw31, BM_sw35, BM_sw36, BM_sw37, BM_sw38, BM_sw39, BM_sw41P, BM_sw43P, BM_sw60_Ring, BM_sw61_Ring, BM_sw62_Ring)
' Global arrays
Dim BG_Bakemap: BG_Bakemap=Array(BM_BGlass, BM_BackWall, BM_BackWall2, BM_BirdCage, BM_DogHouseRoofL, BM_FishRamp, BM_FishRampEdges, BM_FishT, BM_FlipperL, BM_FlipperR, BM_Gate3_Wire, BM_Gate4_Wire, BM_Gate7_Wire, BM_LeftSling1, BM_LeftSling2, BM_LeftSling3, BM_LeftSling4, BM_MetalRails, BM_Parts, BM_Plastics, BM_PlasticsT2, BM_PlasticsT3, BM_PlasticsT4, BM_Playfield, BM_Remk, BM_Rightsling1, BM_Rightsling2, BM_Rightsling3, BM_Rightsling4, BM_SeafoodGlass, BM_SeafoodWood, BM_SideBlades, BM_SideRails, BM_Stickers, BM_TigerRamp, BM_TigerRampEdges, BM_UnderPF, BM_Wheel, BM_sw11, BM_sw12, BM_sw13, BM_sw14, BM_sw16_Wire, BM_sw23_Wire, BM_sw25, BM_sw26, BM_sw27, BM_sw28, BM_sw29, BM_sw30, BM_sw31, BM_sw35, BM_sw36, BM_sw37, BM_sw38, BM_sw39, BM_sw41P, BM_sw43P, BM_sw60_Ring, BM_sw61_Ring, BM_sw62_Ring)
Dim BG_Lightmap: BG_Lightmap=Array(LM_Flashers_SFWL_MetalRails, LM_Flashers_SFWL_Parts, LM_Flashers_SFWL_Playfield, LM_Flashers_SFWL_SeafoodGlass, LM_Flashers_SFWL_SeafoodWood, LM_Flashers_SFWL_Wheel, LM_Flashers_f125_BackWall, LM_Flashers_f125_BackWall2, LM_Flashers_f125_DogHouseRoofL, LM_Flashers_f125_FishRamp, LM_Flashers_f125_FishRampEdges, LM_Flashers_f125_FishT, LM_Flashers_f125_Gate7_Wire, LM_Flashers_f125_MetalRails, LM_Flashers_f125_Parts, LM_Flashers_f125_Plastics, LM_Flashers_f125_PlasticsT2, LM_Flashers_f125_PlasticsT3, LM_Flashers_f125_Playfield, LM_Flashers_f125_SideBlades, LM_Flashers_f125_SideRails, LM_Flashers_f125_Stickers, LM_Flashers_f125_TigerRamp, LM_Flashers_f125_TigerRampEdges, LM_Flashers_f125_UnderPF, LM_Flashers_f125_sw16_Wire, LM_Flashers_f125_sw43P, LM_Flashers_f125_sw60_Ring, LM_Flashers_f126_BGlass, LM_Flashers_f126_BackWall, LM_Flashers_f126_BackWall2, LM_Flashers_f126_BirdCage, LM_Flashers_f126_DogHouseRoofL, LM_Flashers_f126_FishRamp, LM_Flashers_f126_FishRampEdges, _
	LM_Flashers_f126_FlipperR, LM_Flashers_f126_Gate3_Wire, LM_Flashers_f126_Gate4_Wire, LM_Flashers_f126_MetalRails, LM_Flashers_f126_Parts, LM_Flashers_f126_Plastics, LM_Flashers_f126_PlasticsT2, LM_Flashers_f126_PlasticsT3, LM_Flashers_f126_Playfield, LM_Flashers_f126_SeafoodWood, LM_Flashers_f126_SideBlades, LM_Flashers_f126_SideRails, LM_Flashers_f126_Stickers, LM_Flashers_f126_TigerRamp, LM_Flashers_f126_TigerRampEdges, LM_Flashers_f126_UnderPF, LM_Flashers_f126_sw11, LM_Flashers_f126_sw12, LM_Flashers_f126_sw13, LM_Flashers_f126_sw16_Wire, LM_Flashers_f126_sw41P, LM_Flashers_f126_sw43P, LM_Flashers_f126_sw60_Ring, LM_Flashers_f126_sw61_Ring, LM_Flashers_f126_sw62_Ring, LM_Flashers_f127_BGlass, LM_Flashers_f127_BackWall2, LM_Flashers_f127_BirdCage, LM_Flashers_f127_DogHouseRoofL, LM_Flashers_f127_FishRampEdges, LM_Flashers_f127_FishT, LM_Flashers_f127_LeftSling1, LM_Flashers_f127_LeftSling2, LM_Flashers_f127_LeftSling4, LM_Flashers_f127_MetalRails, LM_Flashers_f127_Parts, LM_Flashers_f127_Plastics, _
	LM_Flashers_f127_PlasticsT2, LM_Flashers_f127_PlasticsT3, LM_Flashers_f127_PlasticsT4, LM_Flashers_f127_Playfield, LM_Flashers_f127_SeafoodWood, LM_Flashers_f127_SideBlades, LM_Flashers_f127_Stickers, LM_Flashers_f127_TigerRamp, LM_Flashers_f127_TigerRampEdges, LM_Flashers_f127_UnderPF, LM_Flashers_f127_Wheel, LM_Flashers_f127_sw23_Wire, LM_Flashers_f127_sw26, LM_Flashers_f127_sw27, LM_Flashers_f127_sw28, LM_Flashers_f127_sw29, LM_Flashers_f127_sw37, LM_Flashers_f127_sw38, LM_Flashers_f127_sw39, LM_Flashers_f127_sw61_Ring, LM_Flashers_f127_sw62_Ring, LM_Flashers_f128_BGlass, LM_Flashers_f128_BackWall, LM_Flashers_f128_BackWall2, LM_Flashers_f128_BirdCage, LM_Flashers_f128_DogHouseRoofL, LM_Flashers_f128_FishRamp, LM_Flashers_f128_FishRampEdges, LM_Flashers_f128_FishT, LM_Flashers_f128_FlipperR, LM_Flashers_f128_Gate4_Wire, LM_Flashers_f128_MetalRails, LM_Flashers_f128_Parts, LM_Flashers_f128_Plastics, LM_Flashers_f128_PlasticsT2, LM_Flashers_f128_PlasticsT4, LM_Flashers_f128_Playfield, _
	LM_Flashers_f128_SeafoodWood, LM_Flashers_f128_SideBlades, LM_Flashers_f128_SideRails, LM_Flashers_f128_Stickers, LM_Flashers_f128_TigerRamp, LM_Flashers_f128_TigerRampEdges, LM_Flashers_f128_UnderPF, LM_Flashers_f128_sw16_Wire, LM_Flashers_f128_sw23_Wire, LM_Flashers_f128_sw41P, LM_Flashers_f128_sw43P, LM_Flashers_f128_sw60_Ring, LM_Flashers_f128_sw61_Ring, LM_Flashers_f128_sw62_Ring, LM_Flashers_f129_BackWall, LM_Flashers_f129_BackWall2, LM_Flashers_f129_DogHouseRoofL, LM_Flashers_f129_FishRamp, LM_Flashers_f129_FishRampEdges, LM_Flashers_f129_FishT, LM_Flashers_f129_Gate3_Wire, LM_Flashers_f129_Gate4_Wire, LM_Flashers_f129_Gate7_Wire, LM_Flashers_f129_MetalRails, LM_Flashers_f129_Parts, LM_Flashers_f129_Plastics, LM_Flashers_f129_PlasticsT2, LM_Flashers_f129_PlasticsT3, LM_Flashers_f129_Playfield, LM_Flashers_f129_SeafoodWood, LM_Flashers_f129_SideBlades, LM_Flashers_f129_SideRails, LM_Flashers_f129_Stickers, LM_Flashers_f129_TigerRamp, LM_Flashers_f129_TigerRampEdges, LM_Flashers_f129_UnderPF, _
	LM_Flashers_f129_Wheel, LM_Flashers_f129_sw11, LM_Flashers_f129_sw12, LM_Flashers_f129_sw16_Wire, LM_Flashers_f129_sw26, LM_Flashers_f129_sw29, LM_Flashers_f129_sw37, LM_Flashers_f129_sw38, LM_Flashers_f129_sw39, LM_Flashers_f129_sw41P, LM_Flashers_f129_sw43P, LM_Flashers_f129_sw60_Ring, LM_Flashers_f129_sw61_Ring, LM_Flashers_f129_sw62_Ring, LM_Flashers_f130_BGlass, LM_Flashers_f130_DogHouseRoofL, LM_Flashers_f130_LeftSling1, LM_Flashers_f130_MetalRails, LM_Flashers_f130_Parts, LM_Flashers_f130_Plastics, LM_Flashers_f130_PlasticsT3, LM_Flashers_f130_Playfield, LM_Flashers_f130_Rightsling1, LM_Flashers_f130_Rightsling2, LM_Flashers_f130_Rightsling3, LM_Flashers_f130_Rightsling4, LM_Flashers_f130_SeafoodWood, LM_Flashers_f130_TigerRamp, LM_Flashers_f130_TigerRampEdges, LM_Flashers_f130_UnderPF, LM_Flashers_f130_sw28, LM_Flashers_f131_BGlass, LM_Flashers_f131_BackWall2, LM_Flashers_f131_BirdCage, LM_Flashers_f131_DogHouseRoofL, LM_Flashers_f131_FishRampEdges, LM_Flashers_f131_FlipperL, _
	LM_Flashers_f131_FlipperR, LM_Flashers_f131_LeftSling1, LM_Flashers_f131_LeftSling2, LM_Flashers_f131_LeftSling3, LM_Flashers_f131_LeftSling4, LM_Flashers_f131_MetalRails, LM_Flashers_f131_Parts, LM_Flashers_f131_Plastics, LM_Flashers_f131_PlasticsT2, LM_Flashers_f131_PlasticsT3, LM_Flashers_f131_PlasticsT4, LM_Flashers_f131_Playfield, LM_Flashers_f131_Remk, LM_Flashers_f131_Rightsling1, LM_Flashers_f131_Rightsling2, LM_Flashers_f131_Rightsling3, LM_Flashers_f131_Rightsling4, LM_Flashers_f131_SeafoodGlass, LM_Flashers_f131_SeafoodWood, LM_Flashers_f131_SideBlades, LM_Flashers_f131_SideRails, LM_Flashers_f131_Stickers, LM_Flashers_f131_TigerRamp, LM_Flashers_f131_TigerRampEdges, LM_Flashers_f131_UnderPF, LM_Flashers_f131_Wheel, LM_Flashers_f131_sw25, LM_Flashers_f131_sw26, LM_Flashers_f131_sw27, LM_Flashers_f131_sw28, LM_Flashers_f131_sw29, LM_Flashers_f131_sw37, LM_Flashers_f131_sw43P, LM_Flashers_f131_sw60_Ring, LM_Flashers_f132_MetalRails, LM_Flashers_f132_Parts, LM_Flashers_f132_Plastics, _
	LM_Flashers_f132_Playfield, LM_Flashers_f132_UnderPF, LM_Flashers_f132_sw60_Ring, LM_GI_BGlass, LM_GI_BackWall, LM_GI_BackWall2, LM_GI_BirdCage, LM_GI_DogHouseRoofL, LM_GI_FishRamp, LM_GI_FishRampEdges, LM_GI_FishT, LM_GI_FlipperL, LM_GI_FlipperR, LM_GI_Gate3_Wire, LM_GI_Gate4_Wire, LM_GI_Gate7_Wire, LM_GI_LeftSling1, LM_GI_LeftSling2, LM_GI_LeftSling3, LM_GI_LeftSling4, LM_GI_MetalRails, LM_GI_Parts, LM_GI_Plastics, LM_GI_PlasticsT2, LM_GI_PlasticsT3, LM_GI_PlasticsT4, LM_GI_Playfield, LM_GI_Remk, LM_GI_Rightsling1, LM_GI_Rightsling2, LM_GI_Rightsling3, LM_GI_Rightsling4, LM_GI_SeafoodWood, LM_GI_SideBlades, LM_GI_SideRails, LM_GI_Stickers, LM_GI_TigerRamp, LM_GI_TigerRampEdges, LM_GI_UnderPF, LM_GI_sw11, LM_GI_sw12, LM_GI_sw13, LM_GI_sw16_Wire, LM_GI_sw23_Wire, LM_GI_sw25, LM_GI_sw26, LM_GI_sw27, LM_GI_sw28, LM_GI_sw29, LM_GI_sw30, LM_GI_sw31, LM_GI_sw35, LM_GI_sw36, LM_GI_sw37, LM_GI_sw38, LM_GI_sw39, LM_GI_sw41P, LM_GI_sw43P, LM_GI_sw60_Ring, LM_GI_sw61_Ring, LM_GI_sw62_Ring, LM_GISplit_gi001_FlipperR, _
	LM_GISplit_gi001_MetalRails, LM_GISplit_gi001_Parts, LM_GISplit_gi001_Plastics, LM_GISplit_gi001_Playfield, LM_GISplit_gi001_Remk, LM_GISplit_gi001_Rightsling1, LM_GISplit_gi001_Rightsling2, LM_GISplit_gi001_Rightsling3, LM_GISplit_gi001_Rightsling4, LM_GISplit_gi001_UnderPF, LM_GISplit_gi001_sw31, LM_GISplit_gi001_sw36, LM_GISplit_gi005_FlipperR, LM_GISplit_gi005_MetalRails, LM_GISplit_gi005_Parts, LM_GISplit_gi005_Plastics, LM_GISplit_gi005_Playfield, LM_GISplit_gi005_Remk, LM_GISplit_gi005_Rightsling1, LM_GISplit_gi005_Rightsling2, LM_GISplit_gi005_Rightsling3, LM_GISplit_gi005_Rightsling4, LM_GISplit_gi005_TigerRamp, LM_GISplit_gi005_TigerRampEdges, LM_GISplit_gi005_UnderPF, LM_GISplit_gi005_sw31, LM_GISplit_gi005_sw36, LM_GISplit_gi11_BGlass, LM_GISplit_gi11_BirdCage, LM_GISplit_gi11_MetalRails, LM_GISplit_gi11_Parts, LM_GISplit_gi11_PlasticsT4, LM_GISplit_gi11_Playfield, LM_GISplit_gi11_sw25, LM_GISplit_gi11_sw26, LM_GISplit_gi11_sw27, LM_GISplit_gi11_sw28, LM_GISplit_gi15_DogHouseRoofL, _
	LM_GISplit_gi15_MetalRails, LM_GISplit_gi15_Parts, LM_GISplit_gi15_Plastics, LM_GISplit_gi15_PlasticsT3, LM_GISplit_gi15_Playfield, LM_GISplit_gi15_UnderPF, LM_GISplit_gi15_sw37, LM_GISplit_gi15_sw38, LM_GISplit_gi15_sw39, LM_GISplit_gi15_sw61_Ring, LM_GISplit_gi15_sw62_Ring, LM_GISplit_gi16_BackWall2, LM_GISplit_gi16_Gate3_Wire, LM_GISplit_gi16_MetalRails, LM_GISplit_gi16_Parts, LM_GISplit_gi16_Plastics, LM_GISplit_gi16_Playfield, LM_GISplit_gi16_SideBlades, LM_GISplit_gi16_Stickers, LM_GISplit_gi16_UnderPF, LM_GISplit_gi16_sw11, LM_GISplit_gi16_sw12, LM_GISplit_gi16_sw13, LM_GISplit_gi16_sw41P, LM_GISplit_gi16_sw43P, LM_GISplit_gi16_sw60_Ring, LM_GISplit_gi16_sw61_Ring, LM_GISplit_gi16_sw62_Ring, LM_GISplit_gi18_FlipperL, LM_GISplit_gi18_LeftSling1, LM_GISplit_gi18_LeftSling2, LM_GISplit_gi18_LeftSling3, LM_GISplit_gi18_LeftSling4, LM_GISplit_gi18_MetalRails, LM_GISplit_gi18_Parts, LM_GISplit_gi18_Plastics, LM_GISplit_gi18_Playfield, LM_GISplit_gi18_UnderPF, LM_GISplit_gi18_sw30, LM_GISplit_gi18_sw35, _
	LM_GISplit_gi9_LeftSling1, LM_GISplit_gi9_LeftSling2, LM_GISplit_gi9_LeftSling3, LM_GISplit_gi9_LeftSling4, LM_GISplit_gi9_MetalRails, LM_GISplit_gi9_Parts, LM_GISplit_gi9_Plastics, LM_GISplit_gi9_PlasticsT4, LM_GISplit_gi9_Playfield, LM_GISplit_gi9_UnderPF, LM_GISplit_gi9_sw30, LM_GISplit_gi9_sw35, LM_Inserts_l1_FlipperL, LM_Inserts_l1_FlipperR, LM_Inserts_l1_Parts, LM_Inserts_l1_Playfield, LM_Inserts_l1_UnderPF, LM_Inserts_l10_BackWall2, LM_Inserts_l10_MetalRails, LM_Inserts_l10_Parts, LM_Inserts_l10_PlasticsT2, LM_Inserts_l10_Stickers, LM_Inserts_l10_TigerRamp, LM_Inserts_l11_BackWall2, LM_Inserts_l11_MetalRails, LM_Inserts_l12_BackWall2, LM_Inserts_l13_BackWall2, LM_Inserts_l13_MetalRails, LM_Inserts_l14_MetalRails, LM_Inserts_l14_Parts, LM_Inserts_l14_Plastics, LM_Inserts_l14_Playfield, LM_Inserts_l14_Stickers, LM_Inserts_l14_UnderPF, LM_Inserts_l14_sw60_Ring, LM_Inserts_l15_MetalRails, LM_Inserts_l15_Parts, LM_Inserts_l15_Plastics, LM_Inserts_l15_Playfield, LM_Inserts_l15_UnderPF, _
	LM_Inserts_l15_sw60_Ring, LM_Inserts_l16_MetalRails, LM_Inserts_l16_Parts, LM_Inserts_l16_Plastics, LM_Inserts_l16_Playfield, LM_Inserts_l16_UnderPF, LM_Inserts_l16_sw60_Ring, LM_Inserts_l16_sw61_Ring, LM_Inserts_l17_BackWall2, LM_Inserts_l17_MetalRails, LM_Inserts_l17_Playfield, LM_Inserts_l17_TigerRamp, LM_Inserts_l18_BackWall2, LM_Inserts_l19_BackWall2, LM_Inserts_l19_MetalRails, LM_Inserts_l19_Parts, LM_Inserts_l19_Stickers, LM_Inserts_l19_TigerRamp, LM_Inserts_l2_LeftSling1, LM_Inserts_l2_LeftSling2, LM_Inserts_l2_LeftSling3, LM_Inserts_l2_LeftSling4, LM_Inserts_l2_Playfield, LM_Inserts_l2_UnderPF, LM_Inserts_l21_FishRampEdges, LM_Inserts_l21_MetalRails, LM_Inserts_l21_Parts, LM_Inserts_l21_Playfield, LM_Inserts_l21_UnderPF, LM_Inserts_l22_FishRamp, LM_Inserts_l22_MetalRails, LM_Inserts_l22_Playfield, LM_Inserts_l22_UnderPF, LM_Inserts_l23_FishRamp, LM_Inserts_l23_MetalRails, LM_Inserts_l23_Playfield, LM_Inserts_l23_UnderPF, LM_Inserts_l24_MetalRails, LM_Inserts_l24_Parts, LM_Inserts_l24_Playfield, _
	LM_Inserts_l24_UnderPF, LM_Inserts_l24_sw16_Wire, LM_Inserts_l26_LeftSling1, LM_Inserts_l26_LeftSling2, LM_Inserts_l26_LeftSling3, LM_Inserts_l26_LeftSling4, LM_Inserts_l26_Parts, LM_Inserts_l26_Plastics, LM_Inserts_l26_Playfield, LM_Inserts_l26_UnderPF, LM_Inserts_l27_MetalRails, LM_Inserts_l27_Parts, LM_Inserts_l27_Playfield, LM_Inserts_l27_UnderPF, LM_Inserts_l28_Parts, LM_Inserts_l28_Playfield, LM_Inserts_l28_TigerRampEdges, LM_Inserts_l28_UnderPF, LM_Inserts_l29_Parts, LM_Inserts_l29_Plastics, LM_Inserts_l29_Playfield, LM_Inserts_l29_Rightsling1, LM_Inserts_l29_Rightsling2, LM_Inserts_l29_Rightsling3, LM_Inserts_l29_Rightsling4, LM_Inserts_l29_UnderPF, LM_Inserts_l3_Playfield, LM_Inserts_l3_UnderPF, LM_Inserts_l30_Parts, LM_Inserts_l30_Playfield, LM_Inserts_l30_UnderPF, LM_Inserts_l33_Playfield, LM_Inserts_l33_UnderPF, LM_Inserts_l34_Playfield, LM_Inserts_l34_UnderPF, LM_Inserts_l35_Playfield, LM_Inserts_l35_UnderPF, LM_Inserts_l36_Playfield, LM_Inserts_l36_UnderPF, LM_Inserts_l37_Playfield, _
	LM_Inserts_l37_UnderPF, LM_Inserts_l38_Playfield, LM_Inserts_l38_UnderPF, LM_Inserts_l39_Playfield, LM_Inserts_l39_UnderPF, LM_Inserts_l4_Playfield, LM_Inserts_l4_UnderPF, LM_Inserts_l40_Parts, LM_Inserts_l40_Plastics, LM_Inserts_l40_Playfield, LM_Inserts_l40_UnderPF, LM_Inserts_l41_MetalRails, LM_Inserts_l41_Playfield, LM_Inserts_l41_UnderPF, LM_Inserts_l42_Playfield, LM_Inserts_l42_UnderPF, LM_Inserts_l43_MetalRails, LM_Inserts_l43_Parts, LM_Inserts_l43_Playfield, LM_Inserts_l43_UnderPF, LM_Inserts_l44_Playfield, LM_Inserts_l44_UnderPF, LM_Inserts_l45_Playfield, LM_Inserts_l45_UnderPF, LM_Inserts_l46_UnderPF, LM_Inserts_l47_BGlass, LM_Inserts_l47_MetalRails, LM_Inserts_l47_Parts, LM_Inserts_l47_Playfield, LM_Inserts_l47_UnderPF, LM_Inserts_l48_BGlass, LM_Inserts_l48_MetalRails, LM_Inserts_l48_Playfield, LM_Inserts_l48_UnderPF, LM_Inserts_l49_MetalRails, LM_Inserts_l49_Parts, LM_Inserts_l49_Playfield, LM_Inserts_l49_UnderPF, LM_Inserts_l5_FlipperR, LM_Inserts_l5_Playfield, LM_Inserts_l5_UnderPF, _
	LM_Inserts_l50_MetalRails, LM_Inserts_l50_Playfield, LM_Inserts_l50_UnderPF, LM_Inserts_l51_MetalRails, LM_Inserts_l51_Playfield, LM_Inserts_l51_UnderPF, LM_Inserts_l52_MetalRails, LM_Inserts_l52_Playfield, LM_Inserts_l52_UnderPF, LM_Inserts_l53_FishT, LM_Inserts_l53_Parts, LM_Inserts_l53_Playfield, LM_Inserts_l53_UnderPF, LM_Inserts_l6_Playfield, LM_Inserts_l6_UnderPF, LM_Inserts_l7_Playfield, LM_Inserts_l7_Rightsling1, LM_Inserts_l7_Rightsling2, LM_Inserts_l7_Rightsling3, LM_Inserts_l7_Rightsling4, LM_Inserts_l7_UnderPF, LM_Inserts_l8_Parts, LM_Inserts_l8_Plastics, LM_Inserts_l8_PlasticsT2, LM_Inserts_l8_Playfield, LM_Inserts_l8_UnderPF, LM_Inserts_l9_BackWall2, LM_Inserts_l9_MetalRails, LM_Inserts_l9_Parts)
Dim BG_All: BG_All=Array(BM_BGlass, BM_BackWall, BM_BackWall2, BM_BirdCage, BM_DogHouseRoofL, BM_FishRamp, BM_FishRampEdges, BM_FishT, BM_FlipperL, BM_FlipperR, BM_Gate3_Wire, BM_Gate4_Wire, BM_Gate7_Wire, BM_LeftSling1, BM_LeftSling2, BM_LeftSling3, BM_LeftSling4, BM_MetalRails, BM_Parts, BM_Plastics, BM_PlasticsT2, BM_PlasticsT3, BM_PlasticsT4, BM_Playfield, BM_Remk, BM_Rightsling1, BM_Rightsling2, BM_Rightsling3, BM_Rightsling4, BM_SeafoodGlass, BM_SeafoodWood, BM_SideBlades, BM_SideRails, BM_Stickers, BM_TigerRamp, BM_TigerRampEdges, BM_UnderPF, BM_Wheel, BM_sw11, BM_sw12, BM_sw13, BM_sw14, BM_sw16_Wire, BM_sw23_Wire, BM_sw25, BM_sw26, BM_sw27, BM_sw28, BM_sw29, BM_sw30, BM_sw31, BM_sw35, BM_sw36, BM_sw37, BM_sw38, BM_sw39, BM_sw41P, BM_sw43P, BM_sw60_Ring, BM_sw61_Ring, BM_sw62_Ring, LM_Flashers_SFWL_MetalRails, LM_Flashers_SFWL_Parts, LM_Flashers_SFWL_Playfield, LM_Flashers_SFWL_SeafoodGlass, LM_Flashers_SFWL_SeafoodWood, LM_Flashers_SFWL_Wheel, LM_Flashers_f125_BackWall, LM_Flashers_f125_BackWall2, _
	LM_Flashers_f125_DogHouseRoofL, LM_Flashers_f125_FishRamp, LM_Flashers_f125_FishRampEdges, LM_Flashers_f125_FishT, LM_Flashers_f125_Gate7_Wire, LM_Flashers_f125_MetalRails, LM_Flashers_f125_Parts, LM_Flashers_f125_Plastics, LM_Flashers_f125_PlasticsT2, LM_Flashers_f125_PlasticsT3, LM_Flashers_f125_Playfield, LM_Flashers_f125_SideBlades, LM_Flashers_f125_SideRails, LM_Flashers_f125_Stickers, LM_Flashers_f125_TigerRamp, LM_Flashers_f125_TigerRampEdges, LM_Flashers_f125_UnderPF, LM_Flashers_f125_sw16_Wire, LM_Flashers_f125_sw43P, LM_Flashers_f125_sw60_Ring, LM_Flashers_f126_BGlass, LM_Flashers_f126_BackWall, LM_Flashers_f126_BackWall2, LM_Flashers_f126_BirdCage, LM_Flashers_f126_DogHouseRoofL, LM_Flashers_f126_FishRamp, LM_Flashers_f126_FishRampEdges, LM_Flashers_f126_FlipperR, LM_Flashers_f126_Gate3_Wire, LM_Flashers_f126_Gate4_Wire, LM_Flashers_f126_MetalRails, LM_Flashers_f126_Parts, LM_Flashers_f126_Plastics, LM_Flashers_f126_PlasticsT2, LM_Flashers_f126_PlasticsT3, LM_Flashers_f126_Playfield, _
	LM_Flashers_f126_SeafoodWood, LM_Flashers_f126_SideBlades, LM_Flashers_f126_SideRails, LM_Flashers_f126_Stickers, LM_Flashers_f126_TigerRamp, LM_Flashers_f126_TigerRampEdges, LM_Flashers_f126_UnderPF, LM_Flashers_f126_sw11, LM_Flashers_f126_sw12, LM_Flashers_f126_sw13, LM_Flashers_f126_sw16_Wire, LM_Flashers_f126_sw41P, LM_Flashers_f126_sw43P, LM_Flashers_f126_sw60_Ring, LM_Flashers_f126_sw61_Ring, LM_Flashers_f126_sw62_Ring, LM_Flashers_f127_BGlass, LM_Flashers_f127_BackWall2, LM_Flashers_f127_BirdCage, LM_Flashers_f127_DogHouseRoofL, LM_Flashers_f127_FishRampEdges, LM_Flashers_f127_FishT, LM_Flashers_f127_LeftSling1, LM_Flashers_f127_LeftSling2, LM_Flashers_f127_LeftSling4, LM_Flashers_f127_MetalRails, LM_Flashers_f127_Parts, LM_Flashers_f127_Plastics, LM_Flashers_f127_PlasticsT2, LM_Flashers_f127_PlasticsT3, LM_Flashers_f127_PlasticsT4, LM_Flashers_f127_Playfield, LM_Flashers_f127_SeafoodWood, LM_Flashers_f127_SideBlades, LM_Flashers_f127_Stickers, LM_Flashers_f127_TigerRamp, _
	LM_Flashers_f127_TigerRampEdges, LM_Flashers_f127_UnderPF, LM_Flashers_f127_Wheel, LM_Flashers_f127_sw23_Wire, LM_Flashers_f127_sw26, LM_Flashers_f127_sw27, LM_Flashers_f127_sw28, LM_Flashers_f127_sw29, LM_Flashers_f127_sw37, LM_Flashers_f127_sw38, LM_Flashers_f127_sw39, LM_Flashers_f127_sw61_Ring, LM_Flashers_f127_sw62_Ring, LM_Flashers_f128_BGlass, LM_Flashers_f128_BackWall, LM_Flashers_f128_BackWall2, LM_Flashers_f128_BirdCage, LM_Flashers_f128_DogHouseRoofL, LM_Flashers_f128_FishRamp, LM_Flashers_f128_FishRampEdges, LM_Flashers_f128_FishT, LM_Flashers_f128_FlipperR, LM_Flashers_f128_Gate4_Wire, LM_Flashers_f128_MetalRails, LM_Flashers_f128_Parts, LM_Flashers_f128_Plastics, LM_Flashers_f128_PlasticsT2, LM_Flashers_f128_PlasticsT4, LM_Flashers_f128_Playfield, LM_Flashers_f128_SeafoodWood, LM_Flashers_f128_SideBlades, LM_Flashers_f128_SideRails, LM_Flashers_f128_Stickers, LM_Flashers_f128_TigerRamp, LM_Flashers_f128_TigerRampEdges, LM_Flashers_f128_UnderPF, LM_Flashers_f128_sw16_Wire, _
	LM_Flashers_f128_sw23_Wire, LM_Flashers_f128_sw41P, LM_Flashers_f128_sw43P, LM_Flashers_f128_sw60_Ring, LM_Flashers_f128_sw61_Ring, LM_Flashers_f128_sw62_Ring, LM_Flashers_f129_BackWall, LM_Flashers_f129_BackWall2, LM_Flashers_f129_DogHouseRoofL, LM_Flashers_f129_FishRamp, LM_Flashers_f129_FishRampEdges, LM_Flashers_f129_FishT, LM_Flashers_f129_Gate3_Wire, LM_Flashers_f129_Gate4_Wire, LM_Flashers_f129_Gate7_Wire, LM_Flashers_f129_MetalRails, LM_Flashers_f129_Parts, LM_Flashers_f129_Plastics, LM_Flashers_f129_PlasticsT2, LM_Flashers_f129_PlasticsT3, LM_Flashers_f129_Playfield, LM_Flashers_f129_SeafoodWood, LM_Flashers_f129_SideBlades, LM_Flashers_f129_SideRails, LM_Flashers_f129_Stickers, LM_Flashers_f129_TigerRamp, LM_Flashers_f129_TigerRampEdges, LM_Flashers_f129_UnderPF, LM_Flashers_f129_Wheel, LM_Flashers_f129_sw11, LM_Flashers_f129_sw12, LM_Flashers_f129_sw16_Wire, LM_Flashers_f129_sw26, LM_Flashers_f129_sw29, LM_Flashers_f129_sw37, LM_Flashers_f129_sw38, LM_Flashers_f129_sw39, LM_Flashers_f129_sw41P, _
	LM_Flashers_f129_sw43P, LM_Flashers_f129_sw60_Ring, LM_Flashers_f129_sw61_Ring, LM_Flashers_f129_sw62_Ring, LM_Flashers_f130_BGlass, LM_Flashers_f130_DogHouseRoofL, LM_Flashers_f130_LeftSling1, LM_Flashers_f130_MetalRails, LM_Flashers_f130_Parts, LM_Flashers_f130_Plastics, LM_Flashers_f130_PlasticsT3, LM_Flashers_f130_Playfield, LM_Flashers_f130_Rightsling1, LM_Flashers_f130_Rightsling2, LM_Flashers_f130_Rightsling3, LM_Flashers_f130_Rightsling4, LM_Flashers_f130_SeafoodWood, LM_Flashers_f130_TigerRamp, LM_Flashers_f130_TigerRampEdges, LM_Flashers_f130_UnderPF, LM_Flashers_f130_sw28, LM_Flashers_f131_BGlass, LM_Flashers_f131_BackWall2, LM_Flashers_f131_BirdCage, LM_Flashers_f131_DogHouseRoofL, LM_Flashers_f131_FishRampEdges, LM_Flashers_f131_FlipperL, LM_Flashers_f131_FlipperR, LM_Flashers_f131_LeftSling1, LM_Flashers_f131_LeftSling2, LM_Flashers_f131_LeftSling3, LM_Flashers_f131_LeftSling4, LM_Flashers_f131_MetalRails, LM_Flashers_f131_Parts, LM_Flashers_f131_Plastics, LM_Flashers_f131_PlasticsT2, _
	LM_Flashers_f131_PlasticsT3, LM_Flashers_f131_PlasticsT4, LM_Flashers_f131_Playfield, LM_Flashers_f131_Remk, LM_Flashers_f131_Rightsling1, LM_Flashers_f131_Rightsling2, LM_Flashers_f131_Rightsling3, LM_Flashers_f131_Rightsling4, LM_Flashers_f131_SeafoodGlass, LM_Flashers_f131_SeafoodWood, LM_Flashers_f131_SideBlades, LM_Flashers_f131_SideRails, LM_Flashers_f131_Stickers, LM_Flashers_f131_TigerRamp, LM_Flashers_f131_TigerRampEdges, LM_Flashers_f131_UnderPF, LM_Flashers_f131_Wheel, LM_Flashers_f131_sw25, LM_Flashers_f131_sw26, LM_Flashers_f131_sw27, LM_Flashers_f131_sw28, LM_Flashers_f131_sw29, LM_Flashers_f131_sw37, LM_Flashers_f131_sw43P, LM_Flashers_f131_sw60_Ring, LM_Flashers_f132_MetalRails, LM_Flashers_f132_Parts, LM_Flashers_f132_Plastics, LM_Flashers_f132_Playfield, LM_Flashers_f132_UnderPF, LM_Flashers_f132_sw60_Ring, LM_GI_BGlass, LM_GI_BackWall, LM_GI_BackWall2, LM_GI_BirdCage, LM_GI_DogHouseRoofL, LM_GI_FishRamp, LM_GI_FishRampEdges, LM_GI_FishT, LM_GI_FlipperL, LM_GI_FlipperR, LM_GI_Gate3_Wire, _
	LM_GI_Gate4_Wire, LM_GI_Gate7_Wire, LM_GI_LeftSling1, LM_GI_LeftSling2, LM_GI_LeftSling3, LM_GI_LeftSling4, LM_GI_MetalRails, LM_GI_Parts, LM_GI_Plastics, LM_GI_PlasticsT2, LM_GI_PlasticsT3, LM_GI_PlasticsT4, LM_GI_Playfield, LM_GI_Remk, LM_GI_Rightsling1, LM_GI_Rightsling2, LM_GI_Rightsling3, LM_GI_Rightsling4, LM_GI_SeafoodWood, LM_GI_SideBlades, LM_GI_SideRails, LM_GI_Stickers, LM_GI_TigerRamp, LM_GI_TigerRampEdges, LM_GI_UnderPF, LM_GI_sw11, LM_GI_sw12, LM_GI_sw13, LM_GI_sw16_Wire, LM_GI_sw23_Wire, LM_GI_sw25, LM_GI_sw26, LM_GI_sw27, LM_GI_sw28, LM_GI_sw29, LM_GI_sw30, LM_GI_sw31, LM_GI_sw35, LM_GI_sw36, LM_GI_sw37, LM_GI_sw38, LM_GI_sw39, LM_GI_sw41P, LM_GI_sw43P, LM_GI_sw60_Ring, LM_GI_sw61_Ring, LM_GI_sw62_Ring, LM_GISplit_gi001_FlipperR, LM_GISplit_gi001_MetalRails, LM_GISplit_gi001_Parts, LM_GISplit_gi001_Plastics, LM_GISplit_gi001_Playfield, LM_GISplit_gi001_Remk, LM_GISplit_gi001_Rightsling1, LM_GISplit_gi001_Rightsling2, LM_GISplit_gi001_Rightsling3, LM_GISplit_gi001_Rightsling4, _
	LM_GISplit_gi001_UnderPF, LM_GISplit_gi001_sw31, LM_GISplit_gi001_sw36, LM_GISplit_gi005_FlipperR, LM_GISplit_gi005_MetalRails, LM_GISplit_gi005_Parts, LM_GISplit_gi005_Plastics, LM_GISplit_gi005_Playfield, LM_GISplit_gi005_Remk, LM_GISplit_gi005_Rightsling1, LM_GISplit_gi005_Rightsling2, LM_GISplit_gi005_Rightsling3, LM_GISplit_gi005_Rightsling4, LM_GISplit_gi005_TigerRamp, LM_GISplit_gi005_TigerRampEdges, LM_GISplit_gi005_UnderPF, LM_GISplit_gi005_sw31, LM_GISplit_gi005_sw36, LM_GISplit_gi11_BGlass, LM_GISplit_gi11_BirdCage, LM_GISplit_gi11_MetalRails, LM_GISplit_gi11_Parts, LM_GISplit_gi11_PlasticsT4, LM_GISplit_gi11_Playfield, LM_GISplit_gi11_sw25, LM_GISplit_gi11_sw26, LM_GISplit_gi11_sw27, LM_GISplit_gi11_sw28, LM_GISplit_gi15_DogHouseRoofL, LM_GISplit_gi15_MetalRails, LM_GISplit_gi15_Parts, LM_GISplit_gi15_Plastics, LM_GISplit_gi15_PlasticsT3, LM_GISplit_gi15_Playfield, LM_GISplit_gi15_UnderPF, LM_GISplit_gi15_sw37, LM_GISplit_gi15_sw38, LM_GISplit_gi15_sw39, LM_GISplit_gi15_sw61_Ring, _
	LM_GISplit_gi15_sw62_Ring, LM_GISplit_gi16_BackWall2, LM_GISplit_gi16_Gate3_Wire, LM_GISplit_gi16_MetalRails, LM_GISplit_gi16_Parts, LM_GISplit_gi16_Plastics, LM_GISplit_gi16_Playfield, LM_GISplit_gi16_SideBlades, LM_GISplit_gi16_Stickers, LM_GISplit_gi16_UnderPF, LM_GISplit_gi16_sw11, LM_GISplit_gi16_sw12, LM_GISplit_gi16_sw13, LM_GISplit_gi16_sw41P, LM_GISplit_gi16_sw43P, LM_GISplit_gi16_sw60_Ring, LM_GISplit_gi16_sw61_Ring, LM_GISplit_gi16_sw62_Ring, LM_GISplit_gi18_FlipperL, LM_GISplit_gi18_LeftSling1, LM_GISplit_gi18_LeftSling2, LM_GISplit_gi18_LeftSling3, LM_GISplit_gi18_LeftSling4, LM_GISplit_gi18_MetalRails, LM_GISplit_gi18_Parts, LM_GISplit_gi18_Plastics, LM_GISplit_gi18_Playfield, LM_GISplit_gi18_UnderPF, LM_GISplit_gi18_sw30, LM_GISplit_gi18_sw35, LM_GISplit_gi9_LeftSling1, LM_GISplit_gi9_LeftSling2, LM_GISplit_gi9_LeftSling3, LM_GISplit_gi9_LeftSling4, LM_GISplit_gi9_MetalRails, LM_GISplit_gi9_Parts, LM_GISplit_gi9_Plastics, LM_GISplit_gi9_PlasticsT4, LM_GISplit_gi9_Playfield, _
	LM_GISplit_gi9_UnderPF, LM_GISplit_gi9_sw30, LM_GISplit_gi9_sw35, LM_Inserts_l1_FlipperL, LM_Inserts_l1_FlipperR, LM_Inserts_l1_Parts, LM_Inserts_l1_Playfield, LM_Inserts_l1_UnderPF, LM_Inserts_l10_BackWall2, LM_Inserts_l10_MetalRails, LM_Inserts_l10_Parts, LM_Inserts_l10_PlasticsT2, LM_Inserts_l10_Stickers, LM_Inserts_l10_TigerRamp, LM_Inserts_l11_BackWall2, LM_Inserts_l11_MetalRails, LM_Inserts_l12_BackWall2, LM_Inserts_l13_BackWall2, LM_Inserts_l13_MetalRails, LM_Inserts_l14_MetalRails, LM_Inserts_l14_Parts, LM_Inserts_l14_Plastics, LM_Inserts_l14_Playfield, LM_Inserts_l14_Stickers, LM_Inserts_l14_UnderPF, LM_Inserts_l14_sw60_Ring, LM_Inserts_l15_MetalRails, LM_Inserts_l15_Parts, LM_Inserts_l15_Plastics, LM_Inserts_l15_Playfield, LM_Inserts_l15_UnderPF, LM_Inserts_l15_sw60_Ring, LM_Inserts_l16_MetalRails, LM_Inserts_l16_Parts, LM_Inserts_l16_Plastics, LM_Inserts_l16_Playfield, LM_Inserts_l16_UnderPF, LM_Inserts_l16_sw60_Ring, LM_Inserts_l16_sw61_Ring, LM_Inserts_l17_BackWall2, LM_Inserts_l17_MetalRails, _
	LM_Inserts_l17_Playfield, LM_Inserts_l17_TigerRamp, LM_Inserts_l18_BackWall2, LM_Inserts_l19_BackWall2, LM_Inserts_l19_MetalRails, LM_Inserts_l19_Parts, LM_Inserts_l19_Stickers, LM_Inserts_l19_TigerRamp, LM_Inserts_l2_LeftSling1, LM_Inserts_l2_LeftSling2, LM_Inserts_l2_LeftSling3, LM_Inserts_l2_LeftSling4, LM_Inserts_l2_Playfield, LM_Inserts_l2_UnderPF, LM_Inserts_l21_FishRampEdges, LM_Inserts_l21_MetalRails, LM_Inserts_l21_Parts, LM_Inserts_l21_Playfield, LM_Inserts_l21_UnderPF, LM_Inserts_l22_FishRamp, LM_Inserts_l22_MetalRails, LM_Inserts_l22_Playfield, LM_Inserts_l22_UnderPF, LM_Inserts_l23_FishRamp, LM_Inserts_l23_MetalRails, LM_Inserts_l23_Playfield, LM_Inserts_l23_UnderPF, LM_Inserts_l24_MetalRails, LM_Inserts_l24_Parts, LM_Inserts_l24_Playfield, LM_Inserts_l24_UnderPF, LM_Inserts_l24_sw16_Wire, LM_Inserts_l26_LeftSling1, LM_Inserts_l26_LeftSling2, LM_Inserts_l26_LeftSling3, LM_Inserts_l26_LeftSling4, LM_Inserts_l26_Parts, LM_Inserts_l26_Plastics, LM_Inserts_l26_Playfield, LM_Inserts_l26_UnderPF, _
	LM_Inserts_l27_MetalRails, LM_Inserts_l27_Parts, LM_Inserts_l27_Playfield, LM_Inserts_l27_UnderPF, LM_Inserts_l28_Parts, LM_Inserts_l28_Playfield, LM_Inserts_l28_TigerRampEdges, LM_Inserts_l28_UnderPF, LM_Inserts_l29_Parts, LM_Inserts_l29_Plastics, LM_Inserts_l29_Playfield, LM_Inserts_l29_Rightsling1, LM_Inserts_l29_Rightsling2, LM_Inserts_l29_Rightsling3, LM_Inserts_l29_Rightsling4, LM_Inserts_l29_UnderPF, LM_Inserts_l3_Playfield, LM_Inserts_l3_UnderPF, LM_Inserts_l30_Parts, LM_Inserts_l30_Playfield, LM_Inserts_l30_UnderPF, LM_Inserts_l33_Playfield, LM_Inserts_l33_UnderPF, LM_Inserts_l34_Playfield, LM_Inserts_l34_UnderPF, LM_Inserts_l35_Playfield, LM_Inserts_l35_UnderPF, LM_Inserts_l36_Playfield, LM_Inserts_l36_UnderPF, LM_Inserts_l37_Playfield, LM_Inserts_l37_UnderPF, LM_Inserts_l38_Playfield, LM_Inserts_l38_UnderPF, LM_Inserts_l39_Playfield, LM_Inserts_l39_UnderPF, LM_Inserts_l4_Playfield, LM_Inserts_l4_UnderPF, LM_Inserts_l40_Parts, LM_Inserts_l40_Plastics, LM_Inserts_l40_Playfield, _
	LM_Inserts_l40_UnderPF, LM_Inserts_l41_MetalRails, LM_Inserts_l41_Playfield, LM_Inserts_l41_UnderPF, LM_Inserts_l42_Playfield, LM_Inserts_l42_UnderPF, LM_Inserts_l43_MetalRails, LM_Inserts_l43_Parts, LM_Inserts_l43_Playfield, LM_Inserts_l43_UnderPF, LM_Inserts_l44_Playfield, LM_Inserts_l44_UnderPF, LM_Inserts_l45_Playfield, LM_Inserts_l45_UnderPF, LM_Inserts_l46_UnderPF, LM_Inserts_l47_BGlass, LM_Inserts_l47_MetalRails, LM_Inserts_l47_Parts, LM_Inserts_l47_Playfield, LM_Inserts_l47_UnderPF, LM_Inserts_l48_BGlass, LM_Inserts_l48_MetalRails, LM_Inserts_l48_Playfield, LM_Inserts_l48_UnderPF, LM_Inserts_l49_MetalRails, LM_Inserts_l49_Parts, LM_Inserts_l49_Playfield, LM_Inserts_l49_UnderPF, LM_Inserts_l5_FlipperR, LM_Inserts_l5_Playfield, LM_Inserts_l5_UnderPF, LM_Inserts_l50_MetalRails, LM_Inserts_l50_Playfield, LM_Inserts_l50_UnderPF, LM_Inserts_l51_MetalRails, LM_Inserts_l51_Playfield, LM_Inserts_l51_UnderPF, LM_Inserts_l52_MetalRails, LM_Inserts_l52_Playfield, LM_Inserts_l52_UnderPF, LM_Inserts_l53_FishT, _
	LM_Inserts_l53_Parts, LM_Inserts_l53_Playfield, LM_Inserts_l53_UnderPF, LM_Inserts_l6_Playfield, LM_Inserts_l6_UnderPF, LM_Inserts_l7_Playfield, LM_Inserts_l7_Rightsling1, LM_Inserts_l7_Rightsling2, LM_Inserts_l7_Rightsling3, LM_Inserts_l7_Rightsling4, LM_Inserts_l7_UnderPF, LM_Inserts_l8_Parts, LM_Inserts_l8_Plastics, LM_Inserts_l8_PlasticsT2, LM_Inserts_l8_Playfield, LM_Inserts_l8_UnderPF, LM_Inserts_l9_BackWall2, LM_Inserts_l9_MetalRails, LM_Inserts_l9_Parts)
' VLM Arrays - End



'*********************** VR Part 1**************************************
'**********  THE CODE BELOW RUNS THE ANIMATION TIMERS FOR THE DONKEY KONG MACHINE, FIREPLACE, AND OTHER MACHINE DMD'S.  DELETE THE CODE BELOW IF YOU HAVE DELETED THOSE OBJECTS FROM THE ROOM (You can also delete the timers on the table, but you don't have To) **************

Sub TimerAnimateCard1_Timer() ' DONKEY KONG MACHINE ANIMATION
	VRDKTube.Image = "DK " & VRDKCounter
	VRDKCounter = VRDKCounter + 1
	If VRDKCounter > 21 Then
		VRDKCounter = 1
	End If
End Sub

Sub TimerAnimateCard2_Timer() ' FIREPLACE ANIMATION
	VRFire.Image = "FP " & VRFPCounter
	VRFPCounter = VRFPCounter + 1
	If VRFPCounter > 13 Then
		VRFPCounter = 1
	End If
End Sub

'working Kit Cat Clock featured in bttf.
'**********************************************************************************************

'model from the web
'thanks rob ross for exporting the pieces
'rascal clock code
'unclewilly eye and tail animation
'copy models and timers into room add code to bottom of script


Sub kktimer()
    'update clock hands from Rascal vp9 clock Table
	kkhour.ObjRotY = Hour(Now()) * 30 + (Minute(Now())/2)
	kkminute.ObjRotY = (Minute(Now()) + (Second(Now())/100))*6
End Sub

dim kkCount : kkCount = 0
dim kkDir : kkDir = 1

Sub kkEyeTail_timer()
    'wag tail and move eyes 1 full rotation every second
	kkCount = kkCount + kkDir
	kktail.ObjRotY = kkCount
	kkreye.ObjRotZ = -(kkCount * 2)
	kkleye.ObjRotZ = -(kkCount * 2)
	If kkCount = 15 then kkDir = -1
	If kkCount = -15 then kkDir = 1
End Sub

'***************** CODE BELOW IS FOR THE VR CLOCK.  DELETE THIS CODE IF YOU DELETE THE VR CLOCK OBJECTS *******************************

Sub ClockTimer()
	Pminutes.RotAndTra2 = (Minute(Now())+(Second(Now())/100))*6
	Phours.RotAndTra2 = Hour(Now())*30+(Minute(Now())/2)
    Pseconds.RotAndTra2 = (Second(Now()))*6
	CurrentMinute=Minute(Now())
End Sub

Dim CabinetMode, DesktopMode: DesktopMode = Table1.ShowDT
'Dim UseVPMDMD, VRRoom
Dim VRRoom
If RenderingMode = 2 Then  VRRoom = VRRoomChoice Else VRRoom = 0 					
If VRRoom <> 0 Then UseVPMColoredDMD = True Else UseVPMColoredDMD = DesktopMode
If Not DesktopMode and VRRoom=0 Then CabinetMode=1 Else CabinetMode=0


'Dim DesktopMode  
'Dim UseVPMColoredDMD
'Dim VarHidden, UseVPMDMD
'DesktopMode = Table1.ShowDT
'UseVPMColoredDMD = true
'UseVPMDMD        = true
'VarHidden        = 1

'********** End Of VR Part 1*************


Const BallSize = 50					'Ball size must be 50
Const BallMass = 1					'Ball mass must be 1
Const tnob = 1						'Total number of balls
Const lob = 0						'Locked balls

Dim tablewidth : tablewidth = Table1.width
Dim tableheight : tableheight = Table1.height

Const UseVPMModSol = True 
Const UseSolenoids = 2
Const UseLamps = 1
Const UseGI = 0
Const UseSync = 1
Const HandleMech = 0

'Colored Dmd Hack
'to have a colored Dmd, put the serum diner_l4.cRZ file in your pinmame/altcolor/diner_l4 folder
Dim UseVPMColoredDMD
UseVPMColoredDMD=DesktopMode
Sub ImplicitDMD_Init
   Me.x = 20
   Me.y = 120
   Me.width = 128 * 2
   Me.height = 32 * 2
   Me.visible = true
   Me.intensityScale = 2
End Sub
'End of Colored Dmd Hack

LoadVPM "03060000", "S11.vbs", 3.26

Dim bsTrash
Dim BCBall1, gBOT
'Const cGameName = "bcats_l5"
Const cGameName = "bcats_tcm"


'Standard Sounds
Const SSolenoidOn = ""
Const SSolenoidOff = ""
Const SCoin = ""


'************
' Table init.
'************


Sub Table1_Init

	TableOptions
	vpmInit me

    With Controller
        .GameName = cGameName
        If Err Then MsgBox "Can't start Game" & cGameName & vbNewLine & Err.Description:Exit Sub
        .SplashInfoLine = "BadCats, Williams 1989" & vbNewLine & "VPW"
        .Games(cGameName).Settings.Value("rol") = 0 '1= rotated display, 0= normal
        .HandleMechanics = 0
        .HandleKeyboard = 0
        .ShowDMDOnly = 1
        .ShowFrame = 0
        .ShowTitle = 0
		.Hidden = DesktopMode
        If Err Then MsgBox Err.Description
    End With
    On Error Goto 0
    Controller.Run

    'Nudging
    vpmNudge.TiltSwitch = swTilt
    vpmNudge.Sensitivity = 7
    vpmNudge.TiltObj = Array(sw60, sw61, sw62, LeftSlingshot, RightSlingShot)

    Set BCBall1 = sw10.CreateSizedballWithMass(Ballsize/2,Ballmass)

	gBOT = Array(BCBall1)

    Controller.Switch(10) = 1

    ' Seafood Wheel
    Dim mSFWheelMech
    Set mSFWheelMech = New cvpmMech
    With mSFWheelMech
        .MType = vpmMechStepSol + vpmMechCircle + vpmMechLinear + vpmMechFast
        .Sol1 = 16
        .Sol2 = 15
        .Length = 200
        .Steps = 200
        .AddSw 44, 0, 99
        .Callback = GetRef("UpdateWheel")
        .Start
    End With

    'Main Timer init
    PinMAMETimer.Interval = PinMAMEInterval
    PinMAMETimer.Enabled = 1

    vpmMapLights AllLamps ' Map all lamps to the corresponding ROM output using value of TimerInverval

	center_digits()
	solGI 0

	Dim six
	If desktopmode and vrroom = 0 then
		For each six in DT_LED:six.visible = 1 : Next
		l55.visible = 1
		l57.visible = 1
		l58.visible = 1
		l59.visible = 1
		l60.visible = 1
		l61.visible = 1
		l62.visible = 1
		l63.visible = 1
		l64.visible = 1
	Else 
		For each six in DT_LED:six.visible = 0 : Next
		l55.visible = 0
		l57.visible = 0
		l58.visible = 0
		l59.visible = 0
		l60.visible = 0
		l61.visible = 0
		l62.visible = 0
		l63.visible = 0
		l64.visible = 0
	End If

	'************  VLM	**************

	'Room brightness
	SetRoomBrightness LightLevel/100
	SolGI true

	' Setup new PWM flasher masks if possible
	InitPWM()  				' Initialize beta PWM

	'Initialize slings
	RStep = 0:RightSlingShot.Timerenabled=True
	LStep = 0:LeftSlingShot.Timerenabled=True

End Sub

Sub table1_Paused:Controller.Pause = 1:End Sub
Sub table1_unPaused:Controller.Pause = 0:End Sub
Sub table1_exit:Controller.Stop:End Sub


'****************************
'	Room Brightness
'****************************

' Update these arrays if you want to change more materials with room light level
Dim RoomBrightnessMtlArray: RoomBrightnessMtlArray = Array("VLM.Bake.Active","VLM.Bake.Blades","VLM.Bake.BumpIn","VLM.Bake.BumpOut", _
	"VLM.Bake.Flippers","VLM.Bake.Ramp","VLM.Bake.RampEdges","VLM.Bake.Ramp2","VLM.Bake.Solid","DogHouseRoofL","SeafoodGlass")
Dim SavedMtlColorArray:     SavedMtlColorArray     = Array(0,0,0,0,0,0,0,0,0,0,0)


Sub SetRoomBrightness(lvl)
	If lvl > 1 Then lvl = 1
	If lvl < 0 Then lvl = 0

	' Lighting level
	Dim v: v=(lvl * 220 + 35)/255

	Dim i: For i = 0 to UBound(RoomBrightnessMtlArray)
		ModulateMaterialBaseColor RoomBrightnessMtlArray(i), i, v
	Next

	' VR room stuff
'	Dim x
'	For Each x in VRCabinet
'        x.Color = RGB(255*v, 255*v, 255*v)
'    Next
'	For Each x in VRMinimalRoom
'        x.Color = RGB(255*v, 255*v, 255*v)
'    Next
End Sub

SaveMtlColors
Sub SaveMtlColors
	Dim i: For i = 0 to UBound(RoomBrightnessMtlArray)
		SaveMaterialBaseColor RoomBrightnessMtlArray(i), i
	Next
End Sub

Sub SaveMaterialBaseColor(name, idx)
    Dim wrapLighting, roughness, glossyImageLerp, thickness, edge, edgeAlpha, opacity, base, glossy, clearcoat, isMetal, opacityActive, elasticity, elasticityFalloff, friction, scatterAngle
	GetMaterial name, wrapLighting, roughness, glossyImageLerp, thickness, edge, edgeAlpha, opacity, base, glossy, clearcoat, isMetal, opacityActive, elasticity, elasticityFalloff, friction, scatterAngle
	SavedMtlColorArray(idx) = round(base,0)
End Sub


Sub ModulateMaterialBaseColor(name, idx, val)
    Dim wrapLighting, roughness, glossyImageLerp, thickness, edge, edgeAlpha, opacity, base, glossy, clearcoat, isMetal, opacityActive, elasticity, elasticityFalloff, friction, scatterAngle
	Dim red, green, blue, saved_base, new_base
 
	'First get the existing material properties
	GetMaterial name, wrapLighting, roughness, glossyImageLerp, thickness, edge, edgeAlpha, opacity, base, glossy, clearcoat, isMetal, opacityActive, elasticity, elasticityFalloff, friction, scatterAngle

	'Get saved color
	saved_base = SavedMtlColorArray(idx)
	
	'Next extract the r,g,b values from the base color
	red = saved_base And &HFF
	green = (saved_base \ &H100) And &HFF
	blue = (saved_base \ &H10000) And &HFF
	'msgbox red & " " & green & " " & blue

	'Create new color scaled down by 'val', and update the material
	new_base = RGB(red*val, green*val, blue*val)
    UpdateMaterial name, wrapLighting, roughness, glossyImageLerp, thickness, edge, edgeAlpha, opacity, new_base, glossy, clearcoat, isMetal, opacityActive, elasticity, elasticityFalloff, friction, scatterAngle
End Sub

'UpdateMaterial(string, float wrapLighting, float roughness, float glossyImageLerp, float thickness, float edge, float edgeAlpha, float opacity,
'               OLE_COLOR base, OLE_COLOR glossy, OLE_COLOR clearcoat, VARIANT_BOOL isMetal, VARIANT_BOOL opacityActive,
'               float elasticity, float elasticityFalloff, float friction, float scatterAngle)

'**********
'Timer Code
'**********

' The game timer interval is 10 ms
Sub GameTimer_Timer()
	Cor.Update 						'update ball tracking (this sometimes goes in the RDampen_Timer sub)
	DoDTAnim						'handle drop target animations
	UpdateDropTargets
	RollingUpdate					'update rolling sounds
	'DoDTAnim 						'handle drop target animations
End Sub

' The frame timer interval is -1, so executes at the display frame rate
Sub FrameTimer_Timer()
	BSUpdate
	DisplayTimer
	if VRRoom > 0 then 
		ClockTimer
		kktimer
		VRPlungerTimer
	end if
'	FlipperL.ObjRotZ=LeftFlipper.currentangle
'    FlipperR.ObjRotZ=RightFlipper.currentangle
	dim BP
	if aWheelUpdate <> -1 then
		for each BP in BP_Wheel: BP.ObjRotZ= aWheelUpdate * 1.8 : next
'		debug.Print "wheel upfate in frame"
	end if
End Sub

'**********
' Keys
'**********

Sub table1_KeyDown(ByVal Keycode)
    If Keycode = LeftFlipperKey Then
        FlipperActivate LeftFlipper, LFPress
        VRFlipperButtonLeft.X = VRFlipperButtonLeft.X + 10
	End if

	If Keycode = RightFlipperKey Then
        FlipperActivate RightFlipper, RFPress
		VRFlipperButtonRight.X = VRFlipperButtonRight.X - 10
	End if

	If Keycode = StartGameKey Then
        SoundStartButton		
		StartButton.y = StartButton.y -5
		StartButton2.y = StartButton2.y -5
	End If

    If keycode = LeftTiltKey Then Nudge 90, 1:SoundNudgeLeft
    If keycode = RightTiltKey Then Nudge 270, 1:SoundNudgeRight
    If keycode = CenterTiltKey Then Nudge 0, 1:SoundNudgeCenter
    If keycode = PlungerKey Then SoundPlungerPull : Plunger.Pullback

	If keycode = keyInsertCoin1 or keycode = keyInsertCoin2 or keycode = keyInsertCoin3 or keycode = keyInsertCoin4 Then 'Use this for ROM based games
		Select Case Int(rnd*3)
			Case 0: PlaySound ("Coin_In_1"), 0, CoinSoundLevel, 0, 0.25
			Case 1: PlaySound ("Coin_In_2"), 0, CoinSoundLevel, 0, 0.25
			Case 2: PlaySound ("Coin_In_3"), 0, CoinSoundLevel, 0, 0.25
		End Select
	End If

    If vpmKeyDown(keycode) Then Exit Sub
End Sub

Sub table1_KeyUp(ByVal Keycode)
	If Keycode = LeftFlipperKey Then
        FlipperDeActivate LeftFlipper, LFPress
		VRFlipperButtonLeft.X = VRFlipperButtonLeft.X -10
	End if

	If Keycode = RightFlipperKey Then
        FlipperDeActivate RightFlipper, RFPress
		VRFlipperButtonRight.X = VRFlipperButtonRight.X + 10
	End if

	If Keycode = StartGameKey Then		
		StartButton.y = StartButton.y +5
		StartButton2.y = StartButton2.y +5
	End If

	If keycode = PlungerKey Then : SoundPlungerReleaseBall : Plunger.Fire : End If

    If vpmKeyUp(keycode) Then Exit Sub
End Sub

Sub VRPlungerTimer
	VRPlunger.Y = 1091 + (5* Plunger.Position) -20
end sub


'*********
' Switches
'*********

'Trough
Sub sw10_Hit():RandomSoundOutholeHit sw10:Controller.Switch(10) = 1:End Sub
Sub sw10_UnHit():Controller.Switch(10) = 0:End Sub




'**********Sling Shot Animations
' Rstep and Lstep  are the variables that increment the animation
'****************
Dim LStep, RStep

Sub RightSlingShot_Slingshot
	RS.VelocityCorrect(Activeball)
	vpmtimer.pulsesw(64)
	RandomSoundSlingshotRight
	RStep = 0 : RightSlingShot_Timer ' Initialize Step to 0
	RightSlingShot.TimerInterval = 17
	RightSlingShot.TimerEnabled = 1
End Sub

Sub RightSlingShot_Timer
	Dim BP
	Dim v1, v2, v3, v4, x
	v1 = False: v2 = False: v3 = False: v4 = True: x = -30
	Select Case RStep
		Case 2:v1 = False: v2 = False: v3 = True:  v4 = False: x = -20
		Case 3:v1 = False: v2 = True:  v3 = False: v4 = False: x = -10
		Case 4:v1 = True:  v2 = False: v3 = False: v4 = False: x = 0: RightSlingShot.TimerEnabled = 0
	End Select

	For Each BP in BP_Rightsling1 : BP.Visible = v1: Next
	For Each BP in BP_Rightsling2 : BP.Visible = v2: Next
	For Each BP in BP_Rightsling3 : BP.Visible = v3: Next
	For Each BP in BP_Rightsling4 : BP.Visible = v4: Next
	'For Each BP in BP_Remk : BP.transx = x: Next

	RStep = RStep + 1
End Sub


Sub LeftSlingShot_Slingshot
	LS.VelocityCorrect(Activeball)
	vpmtimer.pulsesw(63)
	RandomSoundSlingshotLeft
	LStep = 0 : LeftSlingShot_Timer ' Initialize Step to 0
	LeftSlingShot.TimerInterval = 17
	LeftSlingShot.TimerEnabled = 1
End Sub

Sub LeftSlingShot_Timer
	Dim BP
	Dim v1, v2, v3, v4, x
	v1 = False: v2 = False: v3 = False: v4 = True: x = -30
	Select Case LStep
		Case 2:v1 = False: v2 = False: v3 = True:  v4 = False: x = -20
		Case 3:v1 = False: v2 = True:  v3 = False: v4 = False: x = -10
		Case 4:v1 = True:  v2 = False: v3 = False: v4 = False: x = 0: LeftSlingShot.TimerEnabled = 0
	End Select

	For Each BP in BP_Leftsling1 : BP.Visible = v1: Next
	For Each BP in BP_Leftsling2 : BP.Visible = v2: Next
	For Each BP in BP_Leftsling3 : BP.Visible = v3: Next
	For Each BP in BP_Leftsling4 : BP.Visible = v4: Next
'	For Each BP in BP_Lemk : BP.transx = x: Next

	LStep = LStep + 1
End Sub


'Rubbers

Sub sw40_Hit():vpmTimer.PulseSw 40:End Sub
Sub sw33_Hit():vpmTimer.PulseSw 33:End Sub
Sub sw34_Hit():vpmTimer.PulseSw 34:End Sub


' Bumpers
Sub sw60_Hit:vpmTimer.PulseSw 60:RandomSoundBumperUp sw60:End Sub
Sub sw61_Hit:vpmTimer.PulseSw 61:RandomSoundBumperLeft sw61:End Sub
Sub sw62_Hit:vpmTimer.PulseSw 62:RandomSoundBumperLow sw62:End Sub

'Rollover & Ramp Switches
Sub sw11_Hit:Controller.Switch(11) = 1:End Sub
Sub sw11_UnHit:Controller.Switch(11) = 0:End Sub

Sub sw12_Hit:Controller.Switch(12) = 1:End Sub
Sub sw12_UnHit:Controller.Switch(12) = 0:End Sub

Sub sw13_Hit:Controller.Switch(13) = 1:End Sub
Sub sw13_UnHit:Controller.Switch(13) = 0:End Sub

Sub sw14_Hit:Controller.Switch(14) = 1:End Sub
Sub sw14_UnHit:Controller.Switch(14) = 0:End Sub

Sub sw36_Hit:Controller.Switch(36) = 1:End Sub
Sub sw36_UnHit:Controller.Switch(36) = 0:End Sub

Sub sw30_Hit:Controller.Switch(30) = 1:End Sub
Sub sw30_UnHit:Controller.Switch(30) = 0:End Sub

Sub sw31_Hit:Controller.Switch(31) = 1:End Sub
Sub sw31_UnHit:Controller.Switch(31) = 0:End Sub

Sub sw35_Hit:Controller.Switch(35) = 1:End Sub
Sub sw35_UnHit:Controller.Switch(35) = 0:End Sub

Sub sw41_Hit:Controller.Switch(41) = 1:End Sub

Sub sw41_UnHit:Controller.Switch(41) = 0:End Sub

Sub sw43_Hit:Controller.Switch(43) = 1:End Sub ':sw43.Timerenabled = 1:End Sub
Sub sw43_UnHit:Controller.Switch(43) = 0:End Sub
dim sw43Dir
sw43Dir = -1
Sub sw43_Timer()
    If sw43P.ObjRotZ = 60 then sw43Dir = 5
    If sw43P.ObjRotZ = 90 then sw43Dir = -5
    sw43P.ObjRotZ = sw43P.ObjRotZ + sw43Dir
    If sw43P.ObjRotZ = 90 then sw43.timerenabled = 0
End Sub

'Ramp Gates
Sub sw16_Hit:vpmTimer.PulseSw 16:End Sub

Sub sw23_Hit:vpmTimer.PulseSw 23:End Sub

'******************************************************
'*   LINEAR FISH TARGET
'******************************************************

'Linear Target
Sub LinearTargetStart_Hit: LTHit 19: End Sub		

Class LinearTarget
  Private m_primary, m_secondary, m_prim, m_sw, m_animate

  Public Property Get Primary(): Set Primary = m_primary: End Property
  Public Property Let Primary(input): Set m_primary = input: End Property

  Public Property Get Secondary(): Set Secondary = m_secondary: End Property
  Public Property Let Secondary(input): Set m_secondary = input: End Property

  Public Property Get Prim(): Set Prim = m_prim: End Property
  Public Property Let Prim(input): Set m_prim = input: End Property

  Public Property Get Sw(): Sw = m_sw: End Property
  Public Property Let Sw(input): m_sw = input: End Property

  Public Property Get Animate(): Animate = m_animate: End Property
  Public Property Let Animate(input): m_animate = input: End Property

  Public default Function init(primary, secondary, prim, sw, animate)
    Set m_primary = primary
	Set m_secondary = secondary
    Set m_prim = prim
    m_sw = sw
    m_animate = animate

    Set Init = Me
  End Function
End Class

'Define a variable for each linear target
Dim LT19

'Set array with linear target objects
'
'LinearTargetvar = Array(primary, prim, swtich)
'   primary:		vp target to determine target hit
'   secondary:		vp target at the end of the linear target path
'   prim:		   	primitive target used for visuals and animation
'				   	IMPORTANT!!!
'				   	transy must be used to offset the target animation
'   switch:	 		ROM switch number
'   animate:		Arrary slot for handling the animation instrucitons, set to 0
'

'TODO: Update with new primitives after toolkit import. Delete old primitives

Set LT19 = (new LinearTarget)(LinearTargetStart, LinearTargetStop, BM_FishT, 19, 0)

'Add all the Linear Target Arrays to Linear Target Animation Array
'   LTAnimationArray = Array(LT1, LT2, ....)
Dim LTArray
LTArray = Array(LT19)

' lSpring 	- strength of the target spring
' lWidth	- total width of the target
' lReturn	- return speed of target (vp units per second)
Dim lSpring, lWidth, lReturn, lLength
lSpring = 12.5 
lWidth = 48
lReturn = 300
lLength = 120.34

'''''' LINEAR TARGET FUNCTIONS

Sub LTHit(switch)
	Dim i
	i = LTArrayID(switch)
	
	PlayTargetSound
	LTArray(i).animate = STCheckHit(ActiveBall,LTArray(i).primary)
	
	Activeball.velx = cor.BallVelx(Activeball.id)
	Activeball.vely = cor.BallVely(Activeball.id)

	DoLTAnim
End Sub

Function STCheckHit(aBall, target) 'Check if target is hit on it's face
	Dim bangle, bangleafter, rangle, rangle2, perpvel, perpvelafter, paravel, paravelafter
	rangle = (target.orientation - 90) * 3.1416 / 180
	bangle = atn2(cor.ballvely(aball.id),cor.ballvelx(aball.id))
	bangleafter = Atn2(aBall.vely,aball.velx)
	
	perpvel = cor.BallVel(aball.id) * Cos(bangle - rangle)
	paravel = cor.BallVel(aball.id) * Sin(bangle - rangle)
	
	perpvelafter = BallSpeed(aBall) * Cos(bangleafter - rangle)
	paravelafter = BallSpeed(aBall) * Sin(bangleafter - rangle)
	
	If perpvel > 0 And  perpvelafter <= 0 Then
		STCheckHit = 1
	ElseIf perpvel > 0 And ((paravel > 0 And paravelafter > 0) Or (paravel < 0 And paravelafter < 0)) Then
		STCheckHit = 1
	Else
		STCheckHit = 0
	End If
End Function

Function LTArrayID(switch)
	Dim i
	For i = 0 To UBound(LTArray)
		If LTArray(i).sw = switch Then
			LTArrayID = i
			Exit Function
		End If
	Next
End Function

Sub LTAnim_Timer
	DoLTAnim
	LM_GI_FishT.transy = BM_FishT.transy
End Sub

Sub DoLTAnim()
	Dim i
	For i = 0 To UBound(LTArray)
		LTArray(i).animate = LTAnimate(LTArray(i).primary,LTArray(i).secondary,LTArray(i).prim,LTArray(i).sw,LTArray(i).animate)
	Next
End Sub

Function LTAnimate(primary, secondary, prim, switch,  animate)
	LTAnimate = animate
	
	If animate = 0  Then
		primary.uservalue = 0
		LTAnimate = 0
		primary.collidable = 1
		Exit Function
	ElseIf primary.uservalue = 0 Then
		primary.uservalue = GameTime
	End If

	Dim animtime, btdist, btdist2, btwidth, btangle, bangle, angle, nposx, nposy, tdist
	tdist = 31.31

	angle = primary.orientation
	
	animtime = GameTime - primary.uservalue
	primary.uservalue = GameTime

	nposx = primary.x + prim.transy * dCos(angle + 90)
	nposy = primary.y + prim.transy * dSin(angle + 90)
	btdist = DistancePL(BCBall1.x,BCBall1.y,nposx,nposy,nposx+dcos(angle),nposy+dsin(angle))

	nposx = secondary.x
	nposy = secondary.y
	btdist2 = DistancePL(BCBall1.x,BCBall1.y,nposx,nposy,nposx+dcos(angle),nposy+dsin(angle))-tdist
		
	btwidth = DistancePL(BCBall1.x,BCBall1.y,primary.x,primary.y,primary.x+dcos(angle+90),primary.y+dsin(angle+90))

	If (btdist2 > 98 and btdist2 < 105) or (btdist2 > 63 and btdist2 < 70) or (btdist2 > 28 and btdist2 < 35) Then
		controller.Switch(Switch) = 1
	Else
		controller.Switch(Switch) = 0
	End If

	'debug.print btdist2 & " " & controller.Switch(19)

	If animate = 1 Then
		primary.collidable = 0

		If lLength + prim.transy => btdist2 and btwidth < lWidth/2 + 25 Then
			BCBall1.velx = BCBall1.velx - (lSpring * dsin(angle) * abs(prim.transy) * animtime/1000)
			BCBall1.vely = BCBall1.vely + (lSpring * dcos(angle) * abs(prim.transy) * animtime/1000)
			prim.transy =  btdist2 - lLength
		Else
			prim.transy = prim.transy + lReturn * animtime/1000
			If prim.transy > btdist2 - lLength Then
				'debug.print "Target Faster " & btdist2 & " " & prim.transy
				If btwidth < lWidth/2 + 25 Then
					BCBall1.velx = BCBall1.velx - (lSpring * dsin(angle) * abs(prim.transy) * animtime/1000)
					BCBall1.vely = BCBall1.vely + (lSpring * dcos(angle) * abs(prim.transy) * animtime/1000)
				End If
				prim.transy = btdist2 - lLength
			End If
			if prim.transy >= 0 Then
				prim.transy = 0 
				LTAnimate = 0
				Exit Function
			end If
		End If
	End If
End Function

'******************************************************
'*   END LINEAR TARGET
'******************************************************

'********************************************
'  Drop Target Controls
'********************************************

Sub sw25_Hit:DTHit 25:End Sub
Sub sw26_Hit:DTHit 26:End Sub
Sub sw27_Hit:DTHit 27:End Sub
Sub sw28_Hit:DTHit 28:End Sub
Sub sw29_Hit:DTHit 29:End Sub

Sub sw37_Hit:DTHit 37:End Sub
Sub sw38_Hit:DTHit 38:End Sub
Sub sw39_Hit:DTHit 39:End Sub


' Drain & holes
Sub sw24_Hit:Controller.Switch(24) = 1:RandomSoundEjectHoleEnter sw24:End Sub 'Trash
Sub sw22_Hit:Controller.Switch(22) = 1:RandomSoundEjectHoleEnter sw22:End Sub 'Ralfie


'***********
' BUMPER ANIMATIONS
'***********

Sub sw60_Animate
	Dim z, BL
	z = sw60.CurrentRingOffset
	For Each BL in BP_sw60_Ring : BL.transz = z: Next
End Sub

Sub sw61_Animate
	Dim z, BL
	z = sw61.CurrentRingOffset
	For Each BL in BP_sw61_Ring : BL.transz = z: Next
End Sub

Sub sw62_Animate
	Dim z, BL
	z = sw62.CurrentRingOffset
	For Each BL in BP_sw62_Ring : BL.transz = z: Next
End Sub


'***********
' SWITCH ANIMATIONS
'***********

Sub sw11_Animate
	Dim z : z = sw11.CurrentAnimOffset
	Dim BL : For Each BL in BP_sw11 : BL.transz = z: Next
End Sub

Sub sw12_Animate
	Dim z : z = sw12.CurrentAnimOffset
	Dim BL : For Each BL in BP_sw12 : BL.transz = z: Next
End Sub

Sub sw13_Animate
	Dim z : z = sw14.CurrentAnimOffset
	Dim BL : For Each BL in BP_sw14 : BL.transz = z: Next
End Sub

Sub sw14_Animate
	Dim z : z = sw13.CurrentAnimOffset
	Dim BL : For Each BL in BP_sw13 : BL.transz = z: Next
End Sub

Sub sw35_Animate
	Dim z : z = sw35.CurrentAnimOffset
	Dim BL : For Each BL in BP_sw35 : BL.transz = z: Next
End Sub

Sub sw30_Animate
	Dim z : z = sw30.CurrentAnimOffset
	Dim BL : For Each BL in BP_sw30 : BL.transz = z: Next
End Sub

Sub sw31_Animate
	Dim z : z = sw31.CurrentAnimOffset
	Dim BL : For Each BL in BP_sw31 : BL.transz = z: Next
End Sub


Sub sw36_Animate
	Dim z : z = sw36.CurrentAnimOffset
	Dim BL : For Each BL in BP_sw36 : BL.transz = z: Next
End Sub

Sub sw41_animate
	dim BP
    for each BP in BP_sw41P: BP.ObjRotZ= sw41.CurrentAnimOffset/3: next
End Sub

Sub sw43_animate
	dim BP
    for each BP in BP_sw43P: BP.ObjRotZ= sw43.CurrentAnimOffset/3: next
End Sub


'***********
' GATE ANIMATIONS
'***********

Sub sw23_Animate
	Dim a : a = sw23.CurrentAngle
	Dim BP : For Each BP in BP_sw23_Wire : BP.rotx = a: Next
End Sub

Sub sw16_Animate
	Dim a : a = sw16.CurrentAngle
	Dim BP : For Each BP in BP_sw16_Wire : BP.rotx = a: Next
End Sub

Sub Gate3_Animate
	Dim a : a = Gate3.CurrentAngle
	Dim BP : For Each BP in BP_Gate3_Wire : BP.rotx = a: Next
End Sub

Sub Gate4_Animate
	Dim a : a = Gate4.CurrentAngle
	Dim BP : For Each BP in BP_Gate4_Wire : BP.rotx = a: Next
End Sub

Sub Gate7_Animate
	Dim a : a = Gate7.CurrentAngle
	Dim BP : For Each BP in BP_Gate7_Wire : BP.rotx = a: Next
End Sub


'***********
' Solenoids
'***********
' from pacdudes script
SolCallback(1) = "SolBallRelease"
SolCallback(2) = "KnockerSolenoid"
SolCallback(3) = "SolDogOut"
SolCallback(4) = "solMT"  'dtMilk.SolDropUp
SolCallback(5) = "SolTrashOut"
SolCallback(6) = "SolBT"    'dtBird.SolDropUp
SolCallback(9) = "SolbgCat"
SolCallback(13) = "SolbgWoman"
SolCallback(10)= "SolGIBlink"
SolCallBack(23)= "SolGION"  'check to see if 10 works
SolCallBack(11)= "SolbbGION"

'Flashers
SolModCallback(15) = "FlashMod15"
'SolModCallback(16) = "FlashMod16" '(secondary seafood flasher solenoid - apparently doesn't exist IRL)
SolModCallback(25) = "FlashMod125" 
SolModCallback(26) = "FlashMod126"
SolModCallback(27) = "FlashMod127"
SolModCallback(28) = "FlashMod128"
SolModCallback(29) = "FlashMod129"
SolModCallback(30) = "FlashMod130"
SolModCallback(31) = "FlashMod131"
SolModCallback(32) = "FlashMod132"

'Solenoid Subs
Sub SolBallRelease(enabled)
    If enabled Then
        BIP = BIP + 1
		sw10.kick 90, 45
		RandomSoundShooterFeeder
    End If
End Sub

Sub SolbgCat(enabled)
	If enabled Then
		'If vrCatTimer.enabled = False then vrCatTimer.enabled = true
	End If
End Sub

Sub SolbgWoman(enabled)
	If enabled Then
		If vrWomanTimer.Enabled = False then vrWomanTimer.enabled = True
	End If
End Sub

dim vrwdir:vrwdir = -1
Sub vrWomanTimer_Timer()
	If VrWoman.RotY = 0 Then vrwdir = -1
	If VrWoman.RotY = -35 Then vrwdir = 1
	VrWoman.RotY = VrWoman.RotY + vrwdir
	'VrCat.objRotY = VrCat.objRotY - 14.4
    VrCat.RotY = VrCat.RotY - 14.4 
	If VrWoman.RotY = 0 then vrWomanTimer.enabled = False
End Sub

Sub vrCatTimer_Timer()
'	VrCat.objRotY = VrCat.objRotY - 14.4 
	'If VrCat.objRotY = -1080 then 
		''vrCatTimer.Enabled = False
		'VrCat.objRotY = 0
	'End If
End Sub

Sub SolDogOut(enabled)
    If Enabled Then
        'sw22.Kick 180, 25
		sw22.kick 35,35, 1.56
		RandomSoundEjectHoleSolenoid sw22
        Controller.Switch(22) = 0
    End If
End Sub

Sub SolTrashOut(enabled)
    If Enabled Then
        sw24.Kick 85, 35
        RandomSoundEjectHoleSolenoid sw24
        Controller.Switch(24) = 0
    End If
End Sub

Sub SolSFW(enabled)
  If enabled Then
    ' SetLamp 190, 1
  Else
    ' SetLamp 190, 0
  end If



end Sub

Sub SolSFW1(enabled)

  If enabled Then
    ' SetLamp 190, 1
  Else
    ' SetLamp 190, 0
  end If

end Sub

Sub solMT(enabled)
	If enabled Then
		RandomSoundDropTargetReset BM_SW38
		DTRaise 37
		DTRaise 38
		DTRaise 39
		For each xx in MTGi:xx.State = 0:next
		'For each xx in MT:xx.Image = "Milk":next
	Else
	end If
end Sub

Sub solBT(enabled)
	If enabled Then
		RandomSoundDropTargetReset BM_SW27
		DTRaise 25
		DTRaise 26
		DTRaise 27
		DTRaise 28
		DTRaise 29
		For each xx in BTGi:xx.State = 0:next
	Else
	end If
end Sub

' Sub Flash127(enabled)
'   If enabled Then
'     Setlamp 127, 1
'   Else
'     SetLamp 127, 0
'   end If
' end Sub

' Sub Flash125(enabled)
'   If enabled Then
'     Setlamp 125, 1
'   Else
'     SetLamp 125, 0
'   end If
' end Sub

' Sub Flash126(enabled)
'   If enabled Then
'     Setlamp 126, 1
'   Else
'     SetLamp 126, 0
'   end If
' end Sub

' Sub Flash128(enabled)
'   If enabled Then
'     Setlamp 128, 1
'   Else
'     SetLamp 128, 0
'   end If
' end Sub

' Sub Flash129(enabled)
'   If enabled Then
'     Setlamp 129, 1
'   Else
'     SetLamp 129, 0
'   end If
' end Sub

' ' Sub Flash130(enabled)
' '   If enabled Then
' '     Setlamp 130, 1
' '   Else
' '     SetLamp 130, 0
' '   end If
' ' end Sub

'  Sub Flash131(enabled)
'    If enabled Then
'      Setlamp 131, 1
'    Else
'      SetLamp 131, 0
'    end If
'  end Sub

' Sub Flash132(enabled)
'   If enabled Then
'     Setlamp 132, 1
'   Else
'     SetLamp 132, 0
'   end If
' end Sub

Sub ACRelay(enabled)
    vpmNudge.SolGameOn enabled
End Sub

'*************************************************************
'PWM Flasher Stuff
'*************************************************************


'1001 to 1032 for solenoids, 1201 to 1025 for GIs (WPC only), 1301+ for lamps (not yet implemented)
Const VPM_MODOUT_DEFAULT              =   0 ' Uses default driver modulated solenoid implementation
Const VPM_MODOUT_PWM_RATIO            =   1 ' pulse ratio over the last integration period, allow (approximated) device emulation by the calling app
Const VPM_MODOUT_BULB_44_6_3V_AC      = 100 ' Incandescent #44/555 Bulb connected to 6.3V, commonly used for GI
Const VPM_MODOUT_BULB_47_6_3V_AC      = 101 ' Incandescent #47 Bulb connected to 6.3V, commonly used for (darker) GI with less heat
Const VPM_MODOUT_BULB_86_6_3V_AC      = 102 ' Incandescent #86 Bulb connected to 6.3V, seldom use: TZ, CFTBL,...
Const VPM_MODOUT_BULB_44_18V_DC_WPC   = 201 ' Incandescent #44/555 Bulb connected to 18V, commonly used for lamp matrix with short strobing
Const VPM_MODOUT_BULB_44_18V_DC_GTS3  = 202 ' Incandescent #44/555 Bulb connected to 18V, commonly used for lamp matrix with short strobing
Const VPM_MODOUT_BULB_44_18V_DC_S11   = 203 ' Incandescent #44/555 Bulb connected to 18V, commonly used for lamp matrix with short strobing
Const VPM_MODOUT_BULB_89_20V_DC_WPC   = 301 ' Incandescent #89/906 Bulb connected to 12V, commonly used for flashers
Const VPM_MODOUT_BULB_89_20V_DC_GTS3  = 302 ' Incandescent #89/906 Bulb connected to 12V, commonly used for flashers
Const VPM_MODOUT_BULB_89_32V_DC_S11   = 303 ' Incandescent #89/906 Bulb connected to 32V, used for flashers on S11 with output strobing
Const VPM_MODOUT_LED                  = 400 ' LED PWM (in fact mostly human eye reaction, since LED are nearly instantaneous)

Sub InitPWM() ' called from Table_Init
	dim BulbType : BulbType = VPM_MODOUT_BULB_89_20V_DC_WPC
'   dim BulbType : BulbType = VPM_MODOUT_LED
    	Controller.SolMask(1015) = BulbType 'Seafood Wheel Flash 1              SFWL   	
        Controller.SolMask(1025) = BulbType 'FishT Insert Flasher               f125
        Controller.SolMask(1026) = BulbType 'Upper Right dome                   f126
        Controller.SolMask(1027) = BulbType 'Birdcage/Middle Left Dome          f127
        Controller.SolMask(1028) = BulbType 'Upper Left Dome                    f128
        Controller.SolMask(1029) = BulbType 'Fish Bowl Dome              		f129
        Controller.SolMask(1030) = BulbType 'DogHouse Cat Insert Flasher        f130
        Controller.SolMask(1031) = BulbType 'End Tiger Ramp/Lower Right Dome    f131
        Controller.SolMask(1032) = BulbType 'BBQ Insert Flasher                 f132
End Sub

Sub FlashMod125(pwm)
    'If DebugFlashers Then Debug.print "FlashMod125 level=" & pwm
    Dim p : p = pwm / 255.0
    f125.State = p

	If p = 0 then
		Sound_Flasher_Relay SoundOn, f125
	Else 
		Sound_Flasher_Relay SoundOff, f125
	End If
End Sub

f126_mayo.intensityscale = 0
Sub FlashMod126(pwm)
  ''  If DebugFlashers Then Debug.print "FlashMod126 level=" & pwm
    Dim p : p = pwm / 255.0
    f126.State = p
	f126_mayo.intensityscale = p * greaseGlassLevel

	If p = 0 then
		Sound_Flasher_Relay SoundOn, f126
	Else 
		Sound_Flasher_Relay SoundOff, f126
	End If
End Sub

f127_mayo.intensityscale = 0
Sub FlashMod127(pwm)
 ''   If DebugFlashers Then Debug.print "FlashMod127 level=" & pwm
    Dim p : p = pwm / 255.0
    f127.State = p
	f127_mayo.intensityscale = p * greaseGlassLevel

	If p = 0 then
		Sound_Flasher_Relay SoundOn, f127
	Else 
		Sound_Flasher_Relay SoundOff, f127
	End If
End Sub

f128_mayo.intensityscale = 0
Sub FlashMod128(pwm)
 ''   If DebugFlashers Then Debug.print "FlashMod128 level=" & pwm
    Dim p : p = pwm / 255.0
    f128.State = p
	f128_mayo.intensityscale = p * greaseGlassLevel

	If p = 0 then
		Sound_Flasher_Relay SoundOn, f128
	Else 
		Sound_Flasher_Relay SoundOff, f128
	End If
End Sub

f129_mayo.intensityscale = 0
Sub FlashMod129(pwm)
 ''   If DebugFlashers Then Debug.print "FlashMod129 level=" & pwm
    Dim p : p = pwm / 255.0
    f129.State = p
	f129_mayo.intensityscale = p * greaseGlassLevel

	If p = 0 then
		Sound_Flasher_Relay SoundOn, f129
	Else 
		Sound_Flasher_Relay SoundOff, f129
	End If
End Sub

Sub FlashMod130(pwm)
 ''   If DebugFlashers Then Debug.print "FlashMod130 level=" & pwm
    Dim p : p = pwm / 255.0
    f130.State = p

	If p = 0 then
		Sound_Flasher_Relay SoundOn, f130
	Else 
		Sound_Flasher_Relay SoundOff, f130
	End If
End Sub

f131_mayo.intensityscale = 0
Sub FlashMod131(pwm)
  ''  If DebugFlashers Then Debug.print "FlashMod131 level=" & pwm
    Dim p : p = pwm / 255.0
    f131.State = p
	f131_mayo.intensityscale = p * greaseGlassLevel

	If p = 0 then
		Sound_Flasher_Relay SoundOn, f131
	Else 
		Sound_Flasher_Relay SoundOff, f131
	End If
End Sub

Sub FlashMod132(pwm)
  '  If DebugFlashers Then Debug.print "FlashMod132 level=" & pwm
    Dim p : p = pwm / 255.0
    f132.State = p

	If p = 0 then
		Sound_Flasher_Relay SoundOn, f132
	Else 
		Sound_Flasher_Relay SoundOff, f132
	End If
End Sub

Sub FlashMod15(pwm)
  '  If DebugFlashers Then Debug.print "FlashMod15 level=" & pwm
    Dim p : p = pwm / 255.0
    SFWL.State = p

	If p = 0 then
		Sound_Flasher_Relay SoundOn, SFWL
	Else 
		Sound_Flasher_Relay SoundOff, SFWL
	End If
End Sub


'**************
' Flipper Subs
'**************

SolCallback(sLRFlipper) = "SolRFlipper"
SolCallback(sLLFlipper) = "SolLFlipper"

Const ReflipAngle = 20
Const QuickFlipAngle = 20

Sub SolLFlipper(Enabled)
	If Enabled Then
		LF.Fire  'leftflipper.rotatetoend

		If LeftFlipper.currentangle < LeftFlipper.endangle + ReflipAngle Then 
			'Play partial flip sound and stop any flip down sound
			'Debug.print "Flip Reflip"
			StopAnyFlipperLowerLeftDown()
'			RandomSoundLowerLeftReflip()
			RandomSoundFlipperLowerLeftReflip LeftFlipper
		Else
			'Play full flip sound
			If BallNearLF = 0 Then 
				RandomSoundFlipperLowerLeftUpFullStroke LeftFlipper
			End If
			If BallNearLF = 1 Then 
				Select Case Int(Rnd*2)+1
					Case 1 : RandomSoundFlipperLowerLeftUpDampenedStroke LeftFlipper
					Case 2 : RandomSoundFlipperLowerLeftUpFullStroke LeftFlipper
				End Select		
			End If
		End If		
	Else
		LeftFlipper.RotateToStart
		If LeftFlipper.currentangle < LeftFlipper.startAngle - 5 Then
			'Play flip down sound
			'Debug.print "Flip Down"
			RandomSoundFlipperLowerLeftDown LeftFlipper
		End If
		If LeftFlipper.currentangle < LeftFlipper.startAngle + QuickFlipAngle and LeftFlipper.currentangle <> LeftFlipper.endangle Then
			'Play quick flip sound and stop any flip up sound
'			Debug.print "Flip Quick"
			StopAnyFlipperLowerLeftUp()
			RandomSoundLowerLeftQuickFlipUp()
		Else
			FlipperLeftLowerHitParm = FlipperUpSoundLevel
		End If
	End If
End Sub


Sub SolRFlipper(Enabled)
	If Enabled Then
		RF.Fire 'rightflipper.rotatetoend

		If RightFlipper.currentangle > RightFlipper.endangle - ReflipAngle Then
			'Play partial flip sound and stop any flip down sound
			StopAnyFlipperLowerRightDown()
			RandomSoundFlipperLowerRightReflip RightFlipper
		Else 
			'Play full flip sound
			'RightFlipper.RotateToEnd
			If BallNearRF = 0 Then 
				RandomSoundFlipperLowerRightUpFullStroke RightFlipper
			End If
			
			If BallNearRF = 1 Then 
				Select Case Int(Rnd*2)+1
					Case 1 : RandomSoundFlipperLowerRightUpDampenedStroke RightFlipper
					Case 2 : RandomSoundFlipperLowerRightUpFullStroke RightFlipper
				End Select		
			End If
		End If
	Else
		RightFlipper.RotateToStart
		If RightFlipper.currentangle > RightFlipper.startAngle + 5 Then
			'Play flip down sound
			RandomSoundFlipperLowerRightDown RightFlipper
		End If
		If RightFlipper.currentangle < RightFlipper.startAngle + QuickFlipAngle and RightFlipper.currentangle <> RightFlipper.endangle Then
			'Play quick flip sound and stop any flip up sound
			StopAnyFlipperLowerRightUp()
			RandomSoundLowerRightQuickFlipUp()
		Else
			FlipperRightLowerHitParm = FlipperUpSoundLevel
		End If
	End If
End Sub

Sub LeftFlipper_Animate
	Dim lfa : lfa = LeftFlipper.CurrentAngle
	FlipperLSh.RotZ = lfa
	Dim BL : For Each BL in BP_FlipperL : BL.RotZ = lfa: Next
End Sub

Sub RightFlipper_Animate
	Dim rfa : rfa = RightFlipper.CurrentAngle
	FlipperRSh.RotZ = rfa
	Dim BL : For Each BL in BP_FlipperR : BL.RotZ = rfa: Next
End Sub


'#######################################################################

''		Begin NFozzy Physics. Flipper Tricks and Rubber Dampening'
'#######################################################################'


'**************************************************
'		Flipper Collision Subs
'NOTE: COpy and overwrite collision sound from original collision subs over
'RandomSoundFlipper()' below
'**************************************************'

' Flipper collide subs
'Sub LeftFlipper_Collide(parm)
'	CheckLiveCatch Activeball, LeftFlipper, LFCount, parm
'	LeftFlipperCollide parm
'End Sub
'
'Sub RightFlipper_Collide(parm)
'	CheckLiveCatch Activeball, RightFlipper, RFCount, parm
'	RightFlipperCollide parm
'End Sub


' Don't forget to add fipper collisions to any additional flippers!

'******************************************************
'		FLIPPER CORRECTION INITIALIZATION
'******************************************************

dim LF : Set LF = New FlipperPolarity
dim RF : Set RF = New FlipperPolarity

InitPolarity

Sub InitPolarity()
	dim x, a : a = Array(LF, RF)
	for each x in a
		x.AddPoint "Ycoef", 0, RightFlipper.Y-65, 1        'disabled
		x.AddPoint "Ycoef", 1, RightFlipper.Y-11, 1
		x.enabled = True
		x.TimeDelay = 60
	Next

	AddPt "Polarity", 0, 0, 0
	AddPt "Polarity", 1, 0.05, -5
	AddPt "Polarity", 2, 0.4, -5
	AddPt "Polarity", 3, 0.6, -4.5
	AddPt "Polarity", 4, 0.65, -4.0
	AddPt "Polarity", 5, 0.7, -3.5
	AddPt "Polarity", 6, 0.75, -3.0
	AddPt "Polarity", 7, 0.8, -2.5
	AddPt "Polarity", 8, 0.85, -2.0
	AddPt "Polarity", 9, 0.9,-1.5
	AddPt "Polarity", 10, 0.95, -1.0
	AddPt "Polarity", 11, 1, -0.5
	AddPt "Polarity", 12, 1.1, 0
	AddPt "Polarity", 13, 1.3, 0

	addpt "Velocity", 0, 0,         1
	addpt "Velocity", 1, 0.16, 1.06
	addpt "Velocity", 2, 0.41,         1.05
	addpt "Velocity", 3, 0.53,         1'0.982
	addpt "Velocity", 4, 0.702, 0.968
	addpt "Velocity", 5, 0.95,  0.968
	addpt "Velocity", 6, 1.03,         0.945

	LF.Object = LeftFlipper        
	LF.EndPoint = EndPointLp
	RF.Object = RightFlipper
	RF.EndPoint = EndPointRp
End Sub

Sub TriggerLF_Hit() : LF.Addball activeball : End Sub
Sub TriggerLF_UnHit() : LF.PolarityCorrect activeball : End Sub
Sub TriggerRF_Hit() : RF.Addball activeball : End Sub
Sub TriggerRF_UnHit() : RF.PolarityCorrect activeball : End Sub

'******************************************************
'			FLIPPER CORRECTION FUNCTIONS
'******************************************************

Sub AddPt(aStr, idx, aX, aY)	'debugger wrapper for adjusting flipper script in-game
	dim a : a = Array(LF, RF)
	dim x : for each x in a
		x.addpoint aStr, idx, aX, aY
	Next
End Sub

Class FlipperPolarity
	Public DebugOn, Enabled
	Private FlipAt        'Timer variable (IE 'flip at 723,530ms...)
	Public TimeDelay        'delay before trigger turns off and polarity is disabled TODO set time!
	private Flipper, FlipperStart,FlipperEnd, FlipperEndY, LR, PartialFlipCoef
	Private Balls(20), balldata(20)

	dim PolarityIn, PolarityOut
	dim VelocityIn, VelocityOut
	dim YcoefIn, YcoefOut
	Public Sub Class_Initialize 
		redim PolarityIn(0) : redim PolarityOut(0) : redim VelocityIn(0) : redim VelocityOut(0) : redim YcoefIn(0) : redim YcoefOut(0)
		Enabled = True : TimeDelay = 50 : LR = 1:  dim x : for x = 0 to uBound(balls) : balls(x) = Empty : set Balldata(x) = new SpoofBall : next 
	End Sub

	Public Property let Object(aInput) : Set Flipper = aInput : StartPoint = Flipper.x : End Property
	Public Property Let StartPoint(aInput) : if IsObject(aInput) then FlipperStart = aInput.x else FlipperStart = aInput : end if : End Property
	Public Property Get StartPoint : StartPoint = FlipperStart : End Property
	Public Property Let EndPoint(aInput) : FlipperEnd = aInput.x: FlipperEndY = aInput.y: End Property
	Public Property Get EndPoint : EndPoint = FlipperEnd : End Property        
	Public Property Get EndPointY: EndPointY = FlipperEndY : End Property

	Public Sub AddPoint(aChooseArray, aIDX, aX, aY) 'Index #, X position, (in) y Position (out) 
		Select Case aChooseArray
			case "Polarity" : ShuffleArrays PolarityIn, PolarityOut, 1 : PolarityIn(aIDX) = aX : PolarityOut(aIDX) = aY : ShuffleArrays PolarityIn, PolarityOut, 0
			Case "Velocity" : ShuffleArrays VelocityIn, VelocityOut, 1 :VelocityIn(aIDX) = aX : VelocityOut(aIDX) = aY : ShuffleArrays VelocityIn, VelocityOut, 0
			Case "Ycoef" : ShuffleArrays YcoefIn, YcoefOut, 1 :YcoefIn(aIDX) = aX : YcoefOut(aIDX) = aY : ShuffleArrays YcoefIn, YcoefOut, 0
		End Select
		if gametime > 100 then Report aChooseArray
	End Sub 

	Public Sub Report(aChooseArray)         'debug, reports all coords in tbPL.text
		if not DebugOn then exit sub
		dim a1, a2 : Select Case aChooseArray
			case "Polarity" : a1 = PolarityIn : a2 = PolarityOut
			Case "Velocity" : a1 = VelocityIn : a2 = VelocityOut
			Case "Ycoef" : a1 = YcoefIn : a2 = YcoefOut 
				case else :tbpl.text = "wrong string" : exit sub
		End Select
		dim str, x : for x = 0 to uBound(a1) : str = str & aChooseArray & " x: " & round(a1(x),4) & ", " & round(a2(x),4) & vbnewline : next
		tbpl.text = str
	End Sub

	Public Sub AddBall(aBall) : dim x : for x = 0 to uBound(balls) : if IsEmpty(balls(x)) then set balls(x) = aBall : exit sub :end if : Next  : End Sub

	Private Sub RemoveBall(aBall)
		dim x : for x = 0 to uBound(balls)
			if TypeName(balls(x) ) = "IBall" then 
				if aBall.ID = Balls(x).ID Then
					balls(x) = Empty
					Balldata(x).Reset
				End If
			End If
		Next
	End Sub

	Public Sub Fire() 
		Flipper.RotateToEnd
		processballs
	End Sub

	Public Property Get Pos 'returns % position a ball. For debug stuff.
		dim x : for x = 0 to uBound(balls)
			if not IsEmpty(balls(x) ) then
				pos = pSlope(Balls(x).x, FlipperStart, 0, FlipperEnd, 1)
			End If
		Next                
	End Property

	Public Sub ProcessBalls() 'save data of balls in flipper range
		FlipAt = GameTime
		dim x : for x = 0 to uBound(balls)
			if not IsEmpty(balls(x) ) then
				balldata(x).Data = balls(x)
			End If
		Next
		PartialFlipCoef = ((Flipper.StartAngle - Flipper.CurrentAngle) / (Flipper.StartAngle - Flipper.EndAngle))
		PartialFlipCoef = abs(PartialFlipCoef-1)
	End Sub
	Private Function FlipperOn() : if gameTime < FlipAt+TimeDelay then FlipperOn = True : End If : End Function        'Timer shutoff for polaritycorrect

	Public Sub PolarityCorrect(aBall)
		if FlipperOn() then 
			dim tmp, BallPos, x, IDX, Ycoef : Ycoef = 1

			'y safety Exit
			if aBall.VelY > -8 then 'ball going down
				RemoveBall aBall
				exit Sub
			end if

			'Find balldata. BallPos = % on Flipper
			for x = 0 to uBound(Balls)
				if aBall.id = BallData(x).id AND not isempty(BallData(x).id) then 
					idx = x
					BallPos = PSlope(BallData(x).x, FlipperStart, 0, FlipperEnd, 1)
					if ballpos > 0.65 then  Ycoef = LinearEnvelope(BallData(x).Y, YcoefIn, YcoefOut)                                'find safety coefficient 'ycoef' data
				end if
			Next

			If BallPos = 0 Then 'no ball data meaning the ball is entering and exiting pretty close to the same position, use current values.
				BallPos = PSlope(aBall.x, FlipperStart, 0, FlipperEnd, 1)
				if ballpos > 0.65 then  Ycoef = LinearEnvelope(aBall.Y, YcoefIn, YcoefOut)                                                'find safety coefficient 'ycoef' data
			End If

			'Velocity correction
			if not IsEmpty(VelocityIn(0) ) then
				Dim VelCoef
				VelCoef = LinearEnvelope(BallPos, VelocityIn, VelocityOut)

				if partialflipcoef < 1 then VelCoef = PSlope(partialflipcoef, 0, 1, 1, VelCoef)

				if Enabled then aBall.Velx = aBall.Velx*VelCoef
				if Enabled then aBall.Vely = aBall.Vely*VelCoef
			End If

			'Polarity Correction (optional now)
			if not IsEmpty(PolarityIn(0) ) then
				If StartPoint > EndPoint then LR = -1        'Reverse polarity if left flipper
				dim AddX : AddX = LinearEnvelope(BallPos, PolarityIn, PolarityOut) * LR

				if Enabled then aBall.VelX = aBall.VelX + 1 * (AddX*ycoef*PartialFlipcoef)
			End If
		End If
		RemoveBall aBall
	End Sub
End Class


'******************************************************
'		FLIPPER POLARITY AND RUBBER DAMPENER
'			SUPPORTING FUNCTIONS 
'******************************************************

' Used for flipper correction and rubber dampeners
Sub ShuffleArray(ByRef aArray, byVal offset) 'shuffle 1d array
	dim x, aCount : aCount = 0
	redim a(uBound(aArray) )
	for x = 0 to uBound(aArray)        'Shuffle objects in a temp array
		if not IsEmpty(aArray(x) ) Then
			if IsObject(aArray(x)) then 
				Set a(aCount) = aArray(x)
			Else
				a(aCount) = aArray(x)
			End If
			aCount = aCount + 1
		End If
	Next
	if offset < 0 then offset = 0
	redim aArray(aCount-1+offset)        'Resize original array
	for x = 0 to aCount-1                'set objects back into original array
		if IsObject(a(x)) then 
			Set aArray(x) = a(x)
		Else
			aArray(x) = a(x)
		End If
	Next
End Sub

' Used for flipper correction and rubber dampeners
Sub ShuffleArrays(aArray1, aArray2, offset)
	ShuffleArray aArray1, offset
	ShuffleArray aArray2, offset
End Sub

' Used for flipper correction, rubber dampeners, and drop targets
Function BallSpeed(ball) 'Calculates the ball speed
	BallSpeed = SQR(ball.VelX^2 + ball.VelY^2 + ball.VelZ^2)
End Function

' Used for flipper correction and rubber dampeners
Function PSlope(Input, X1, Y1, X2, Y2)        'Set up line via two points, no clamping. Input X, output Y
	dim x, y, b, m : x = input : m = (Y2 - Y1) / (X2 - X1) : b = Y2 - m*X2
	Y = M*x+b
	PSlope = Y
End Function

' Used for flipper correction
Class spoofball 
	Public X, Y, Z, VelX, VelY, VelZ, ID, Mass, Radius 
	Public Property Let Data(aBall)
		With aBall
			x = .x : y = .y : z = .z : velx = .velx : vely = .vely : velz = .velz
			id = .ID : mass = .mass : radius = .radius
		end with
	End Property
	Public Sub Reset()
		x = Empty : y = Empty : z = Empty  : velx = Empty : vely = Empty : velz = Empty 
		id = Empty : mass = Empty : radius = Empty
	End Sub
End Class

' Used for flipper correction and rubber dampeners
Function LinearEnvelope(xInput, xKeyFrame, yLvl)
	dim y 'Y output
	dim L 'Line
	dim ii : for ii = 1 to uBound(xKeyFrame)        'find active line
		if xInput <= xKeyFrame(ii) then L = ii : exit for : end if
	Next
	if xInput > xKeyFrame(uBound(xKeyFrame) ) then L = uBound(xKeyFrame)        'catch line overrun
	Y = pSlope(xInput, xKeyFrame(L-1), yLvl(L-1), xKeyFrame(L), yLvl(L) )

	if xInput <= xKeyFrame(lBound(xKeyFrame) ) then Y = yLvl(lBound(xKeyFrame) )         'Clamp lower
	if xInput >= xKeyFrame(uBound(xKeyFrame) ) then Y = yLvl(uBound(xKeyFrame) )        'Clamp upper

	LinearEnvelope = Y
End Function

'******************************************************
'			FLIPPER TRICKS
'******************************************************

RightFlipper.timerinterval=1
Rightflipper.timerenabled=True

sub RightFlipper_timer()
	FlipperTricks LeftFlipper, LFPress, LFCount, LFEndAngle, LFState
	FlipperTricks RightFlipper, RFPress, RFCount, RFEndAngle, RFState
	FlipperNudge RightFlipper, RFEndAngle, RFEOSNudge, LeftFlipper, LFEndAngle
	FlipperNudge LeftFlipper, LFEndAngle, LFEOSNudge,  RightFlipper, RFEndAngle
end sub

Dim LFEOSNudge, RFEOSNudge

Sub FlipperNudge(Flipper1, Endangle1, EOSNudge1, Flipper2, EndAngle2)
	Dim b

	If Flipper1.currentangle = Endangle1 and EOSNudge1 <> 1 Then
		EOSNudge1 = 1
		'debug.print Flipper1.currentangle &" = "& Endangle1 &"--"& Flipper2.currentangle &" = "& EndAngle2
		If Flipper2.currentangle = EndAngle2 Then 
			For b = 0 to Ubound(gBOT)
				If FlipperTrigger(gBOT(b).x, gBOT(b).y, Flipper1) Then
					'Debug.Print "ball in flip1. exit"
					exit Sub
				end If
			Next
			For b = 0 to Ubound(gBOT)
				If FlipperTrigger(gBOT(b).x, gBOT(b).y, Flipper2) Then
					gBOT(b).velx = gBOT(b).velx / 1.3
					gBOT(b).vely = gBOT(b).vely - 0.5
				end If
			Next
		End If
	Else 
		If Abs(Flipper1.currentangle) > Abs(EndAngle1) + 30 then EOSNudge1 = 0
	End If
End Sub

Dim FCCDamping: FCCDamping = 0.4

Sub FlipperCradleCollision(ball1, ball2, velocity)
	if velocity < 0.7 then exit sub		'filter out gentle collisions
    Dim DoDamping, coef
    DoDamping = false
    'Check left flipper
    If LeftFlipper.currentangle = LFEndAngle Then
		If FlipperTrigger(ball1.x, ball1.y, LeftFlipper) OR FlipperTrigger(ball2.x, ball2.y, LeftFlipper) Then DoDamping = true
    End If
    'Check right flipper
    If RightFlipper.currentangle = RFEndAngle Then
		If FlipperTrigger(ball1.x, ball1.y, RightFlipper) OR FlipperTrigger(ball2.x, ball2.y, RightFlipper) Then DoDamping = true
    End If
    If DoDamping Then
		coef = FCCDamping
        ball1.velx = ball1.velx * coef: ball1.vely = ball1.vely * coef: ball1.velz = ball1.velz * coef
        ball2.velx = ball2.velx * coef: ball2.vely = ball2.vely * coef: ball2.velz = ball2.velz * coef
    End If
End Sub

'*****************
' Maths
'*****************
Dim PI: PI = 4*Atn(1)

Function dSin(degrees)
	dsin = sin(degrees * Pi/180)
End Function

Function dCos(degrees)
	dcos = cos(degrees * Pi/180)
End Function

Function Atn2(dy, dx)
	If dx > 0 Then
		Atn2 = Atn(dy / dx)
	ElseIf dx < 0 Then
		If dy = 0 Then 
			Atn2 = pi
		Else
			Atn2 = Sgn(dy) * (pi - Atn(Abs(dy / dx)))
		end if
	ElseIf dx = 0 Then
		if dy = 0 Then
			Atn2 = 0
		else
			Atn2 = Sgn(dy) * pi / 2
		end if
	End If
End Function

Function ArcCos(x)
	If x = 1 Then
		ArcCos = 0/180*PI
	ElseIf x = -1 Then
		ArcCos = 180/180*PI
	Else
		ArcCos = Atn(-x/Sqr(-x * x + 1)) + 2 * Atn(1)
	End If
End Function

Function max(a,b)
	if a > b then 
		max = a
	Else
		max = b
	end if
end Function

Function min(a,b)
	if a > b then 
		min = b
	Else
		min = a
	end if
end Function

Function RndInt(min, max)
    RndInt = Int(Rnd() * (max-min + 1) + min)' Sets a random number integer between min and max
End Function

Function RndNum(min, max)
    RndNum = Rnd() * (max-min) + min' Sets a random number between min and max
End Function

'*************************************************
'  Check ball distance from Flipper for Rem
'*************************************************

Function Distance(ax,ay,bx,by)
	Distance = SQR((ax - bx)^2 + (ay - by)^2)
End Function

Function DistancePL(px,py,ax,ay,bx,by) ' Distance between a point and a line where point is px,py
	DistancePL = ABS((by - ay)*px - (bx - ax) * py + bx*ay - by*ax)/Distance(ax,ay,bx,by)
End Function

Function Radians(Degrees)
	Radians = Degrees * PI /180
End Function

Function AnglePP(ax,ay,bx,by)
	AnglePP = Atn2((by - ay),(bx - ax))*180/PI
End Function

Function DistanceFromFlipper(ballx, bally, Flipper)
	DistanceFromFlipper = DistancePL(ballx, bally, Flipper.x, Flipper.y, Cos(Radians(Flipper.currentangle+90))+Flipper.x, Sin(Radians(Flipper.currentangle+90))+Flipper.y)
End Function

Function FlipperTrigger(ballx, bally, Flipper)
	Dim DiffAngle
	DiffAngle  = ABS(Flipper.currentangle - AnglePP(Flipper.x, Flipper.y, ballx, bally) - 90)
	If DiffAngle > 180 Then DiffAngle = DiffAngle - 360

	If DistanceFromFlipper(ballx,bally,Flipper) < 48 and DiffAngle <= 90 and Distance(ballx,bally,Flipper.x,Flipper.y) < Flipper.Length Then
		FlipperTrigger = True
	Else
		FlipperTrigger = False
	End If        
End Function


'*************************************************
'  End - Check ball distance from Flipper for Rem
'*************************************************

dim LFPress, RFPress, LFCount, RFCount
dim LFState, RFState
dim EOST, EOSA,Frampup, FElasticity,FReturn
dim RFEndAngle, LFEndAngle

Const FlipperCoilRampupMode = 0   	'0 = fast, 1 = medium, 2 = slow (tap passes should work)

LFState = 1
RFState = 1
EOST = leftflipper.eostorque
EOSA = leftflipper.eostorqueangle
Frampup = LeftFlipper.rampup
FElasticity = LeftFlipper.elasticity
FReturn = LeftFlipper.return
'Const EOSTnew = 1 'EM's to late 80's
Const EOSTnew = 0.8 '90's and later
Const EOSAnew = 1
Const EOSRampup = 0
Dim SOSRampup
Select Case FlipperCoilRampupMode 
	Case 0:
		SOSRampup = 2.5
	Case 1:
		SOSRampup = 6
	Case 2:
		SOSRampup = 8.5
End Select

Const LiveCatch = 16
Const LiveElasticity = 0.45
Const SOSEM = 0.815
'Const EOSReturn = 0.055  'EM's
'Const EOSReturn = 0.045  'late 70's to mid 80's
Const EOSReturn = 0.035  'mid 80's to early 90's
'Const EOSReturn = 0.025  'mid 90's and later

LFEndAngle = Leftflipper.endangle
RFEndAngle = RightFlipper.endangle

Sub FlipperActivate(Flipper, FlipperPress)
	FlipperPress = 1
	Flipper.Elasticity = FElasticity

	Flipper.eostorque = EOST         
	Flipper.eostorqueangle = EOSA         
End Sub

Sub FlipperDeactivate(Flipper, FlipperPress)
	FlipperPress = 0
	Flipper.eostorqueangle = EOSA
	Flipper.eostorque = EOST*EOSReturn/FReturn


	If Abs(Flipper.currentangle) <= Abs(Flipper.endangle) + 0.1 Then
		Dim b

		For b = 0 to UBound(gBOT)
			If Distance(gBOT(b).x, gBOT(b).y, Flipper.x, Flipper.y) < 55 Then 'check for cradle
				If gBOT(b).vely >= -0.4 Then gBOT(b).vely = -0.4
			End If
		Next
	End If
End Sub

Sub FlipperTricks (Flipper, FlipperPress, FCount, FEndAngle, FState) 
	Dim Dir
	Dir = Flipper.startangle/Abs(Flipper.startangle)        '-1 for Right Flipper

	If Abs(Flipper.currentangle) > Abs(Flipper.startangle) - 0.05 Then
		If FState <> 1 Then
			Flipper.rampup = SOSRampup 
			Flipper.endangle = FEndAngle - 3*Dir
			Flipper.Elasticity = FElasticity * SOSEM
			FCount = 0 
			FState = 1
		End If
	ElseIf Abs(Flipper.currentangle) <= Abs(Flipper.endangle) and FlipperPress = 1 then
		if FCount = 0 Then FCount = GameTime

		If FState <> 2 Then
			Flipper.eostorqueangle = EOSAnew
			Flipper.eostorque = EOSTnew
			Flipper.rampup = EOSRampup                        
			Flipper.endangle = FEndAngle
			FState = 2
		End If
	Elseif Abs(Flipper.currentangle) > Abs(Flipper.endangle) + 0.01 and FlipperPress = 1 Then 
		If FState <> 3 Then
			Flipper.eostorque = EOST        
			Flipper.eostorqueangle = EOSA
			Flipper.rampup = Frampup
			Flipper.Elasticity = FElasticity
			FState = 3
		End If

	End If
End Sub

Const LiveDistanceMin = 30  'minimum distance in vp units from flipper base live catch dampening will occur
Const LiveDistanceMax = 114  'maximum distance in vp units from flipper base live catch dampening will occur (tip protection)

Sub CheckLiveCatch(ball, Flipper, FCount, parm) 'Experimental new live catch
	Dim Dir
	Dir = Flipper.startangle/Abs(Flipper.startangle)    '-1 for Right Flipper
	Dim LiveCatchBounce                                                                                                                        'If live catch is not perfect, it won't freeze ball totally
	Dim CatchTime : CatchTime = GameTime - FCount

	if CatchTime <= LiveCatch and parm > 6 and ABS(Flipper.x - ball.x) > LiveDistanceMin and ABS(Flipper.x - ball.x) < LiveDistanceMax Then
		if CatchTime <= LiveCatch*0.5 Then                                                'Perfect catch only when catch time happens in the beginning of the window
			LiveCatchBounce = 0
		else
			LiveCatchBounce = Abs((LiveCatch/2) - CatchTime)        'Partial catch when catch happens a bit late
		end If

		If LiveCatchBounce = 0 and ball.velx * Dir > 0 Then ball.velx = 0
		ball.vely = LiveCatchBounce * (32 / LiveCatch) ' Multiplier for inaccuracy bounce
		ball.angmomx= 0
		ball.angmomy= 0
		ball.angmomz= 0
    Else
        If Abs(Flipper.currentangle) <= Abs(Flipper.endangle) + 1 Then FlippersD.Dampenf Activeball, parm
	End If
End Sub


'******************************************************
' VPW TargetBouncer for targets and posts by Iaakki, Wrd1972, Apophis
'******************************************************

Const TargetBouncerEnabled = 1 		'0 = normal standup targets, 1 = bouncy targets
Const TargetBouncerFactor = 0.7 	'Level of bounces. Recommmended value of 0.7

'sub TargetBouncer(aBall,defvalue)
'    dim zMultiplier, vel, vratio
'    if TargetBouncerEnabled = 1 and aball.z < 30 then
'        debug.print "velx: " & aball.velx & " vely: " & aball.vely & " velz: " & aball.velz
'        vel = BallSpeed(aBall)
'        if aBall.velx = 0 then vratio = 1 else vratio = aBall.vely/aBall.velx
'        Select Case Int(Rnd * 6) + 1
'            Case 1: zMultiplier = 0.2*defvalue
'			Case 2: zMultiplier = 0.25*defvalue
'            Case 3: zMultiplier = 0.3*defvalue
'			Case 4: zMultiplier = 0.4*defvalue
'            Case 5: zMultiplier = 0.45*defvalue
'            Case 6: zMultiplier = 0.5*defvalue
'        End Select
'        aBall.velz = abs(vel * zMultiplier * TargetBouncerFactor)
'        aBall.velx = sgn(aBall.velx) * sqr(abs((vel^2 - aBall.velz^2)/(1+vratio^2)))
'        aBall.vely = aBall.velx * vratio
'        debug.print "---> velx: " & aball.velx & " vely: " & aball.vely & " velz: " & aball.velz
'        'debug.print "conservation check: " & BallSpeed(aBall)/vel
'	end if
'end sub

''iaakki - TargetBouncer for standup targets
sub TargetBouncer(aBall,defvalue)
	Dim zMultiplier, vel
	'vel = BallSpeed(aBall)
	if TargetBouncerEnabled <> 0 and aball.z < 30 and aBall.vely > 0 then
		'debug.print "vely: " & activeball.vely
		Select Case Int(Rnd * 4) + 1
			Case 1: zMultiplier = defvalue+1.1
			Case 2: zMultiplier = defvalue+1.05
			Case 3: zMultiplier = defvalue+0.7
			Case 4: zMultiplier = defvalue+0.3
		End Select
		aBall.velz = aBall.velz * zMultiplier * TargetBouncerFactor
		'debug.print "----> velz: " & activeball.velz
		'debug.print "conservation check: " & BallSpeed(aBall)/vel
	end if
end sub

' Add targets or posts to the TargetBounce collection if you want to activate the targetbouncer code from them
Sub TargetBounce_Hit(idx)
	TargetBouncer activeball, 1
End Sub




'****************************************************************************
'PHYSICS DAMPENERS

'These are data mined bounce curves, 
'dialed in with the in-game elasticity as much as possible to prevent angle / spin issues.
'Requires tracking ballspeed to calculate COR


Sub dPosts_Hit(idx) 
	RubbersD.dampen Activeball
	TargetBouncer Activeball, 1
End Sub

Sub dSleeves_Hit(idx) 
	SleevesD.Dampen Activeball
	TargetBouncer Activeball, 0.7
End Sub


dim RubbersD : Set RubbersD = new Dampener        'frubber
RubbersD.name = "Rubbers"
RubbersD.debugOn = False        'shows info in textbox "TBPout"
RubbersD.Print = False        'debug, reports in debugger (in vel, out cor)
'cor bounce curve (linear)
'for best results, try to match in-game velocity as closely as possible to the desired curve
'RubbersD.addpoint 0, 0, 0.935        'point# (keep sequential), ballspeed, CoR (elasticity)
RubbersD.addpoint 0, 0, 1.1        'point# (keep sequential), ballspeed, CoR (elasticity)
RubbersD.addpoint 1, 3.77, 0.97
RubbersD.addpoint 2, 5.76, 0.967        'dont take this as gospel. if you can data mine rubber elasticitiy, please help!
RubbersD.addpoint 3, 15.84, 0.874
RubbersD.addpoint 4, 56, 0.64        'there's clamping so interpolate up to 56 at least

dim SleevesD : Set SleevesD = new Dampener        'this is just rubber but cut down to 85%...
SleevesD.name = "Sleeves"
SleevesD.debugOn = False        'shows info in textbox "TBPout"
SleevesD.Print = False        'debug, reports in debugger (in vel, out cor)
SleevesD.CopyCoef RubbersD, 0.85

'######################### Add new FlippersD Profile
'#########################    Adjust these values to increase or lessen the elasticity

dim FlippersD : Set FlippersD = new Dampener
FlippersD.name = "Flippers"
FlippersD.debugOn = False
FlippersD.Print = False	
FlippersD.addpoint 0, 0, 1.1	
FlippersD.addpoint 1, 3.77, 0.99
FlippersD.addpoint 2, 6, 0.99

Class Dampener
	Public Print, debugOn 'tbpOut.text
	public name, Threshold         'Minimum threshold. Useful for Flippers, which don't have a hit threshold.
	Public ModIn, ModOut
	Private Sub Class_Initialize : redim ModIn(0) : redim Modout(0): End Sub 

	Public Sub AddPoint(aIdx, aX, aY) 
		ShuffleArrays ModIn, ModOut, 1 : ModIn(aIDX) = aX : ModOut(aIDX) = aY : ShuffleArrays ModIn, ModOut, 0
		if gametime > 100 then Report
	End Sub

	public sub Dampen(aBall)
		if threshold then if BallSpeed(aBall) < threshold then exit sub end if end if
		dim RealCOR, DesiredCOR, str, coef
		DesiredCor = LinearEnvelope(cor.ballvel(aBall.id), ModIn, ModOut )
		RealCOR = BallSpeed(aBall) / (cor.ballvel(aBall.id)+0.0001)
		coef = desiredcor / realcor 
		if debugOn then str = name & " in vel:" & round(cor.ballvel(aBall.id),2 ) & vbnewline & "desired cor: " & round(desiredcor,4) & vbnewline & _
		"actual cor: " & round(realCOR,4) & vbnewline & "ballspeed coef: " & round(coef, 3) & vbnewline 
		if Print then debug.print Round(cor.ballvel(aBall.id),2) & ", " & round(desiredcor,3)

		aBall.velx = aBall.velx * coef : aBall.vely = aBall.vely * coef
		if debugOn then TBPout.text = str
	End Sub

	public sub Dampenf(aBall, parm) 'Rubberizer is handle here
		dim RealCOR, DesiredCOR, str, coef
		DesiredCor = LinearEnvelope(cor.ballvel(aBall.id), ModIn, ModOut )
		RealCOR = BallSpeed(aBall) / (cor.ballvel(aBall.id)+0.0001)
		coef = desiredcor / realcor 
		If abs(aball.velx) < 2 and aball.vely < 0 and aball.vely > -3.75 then 
			aBall.velx = aBall.velx * coef : aBall.vely = aBall.vely * coef
		End If
	End Sub

	Public Sub CopyCoef(aObj, aCoef) 'alternative addpoints, copy with coef
		dim x : for x = 0 to uBound(aObj.ModIn)
			addpoint x, aObj.ModIn(x), aObj.ModOut(x)*aCoef
		Next
	End Sub


	Public Sub Report()         'debug, reports all coords in tbPL.text
		if not debugOn then exit sub
		dim a1, a2 : a1 = ModIn : a2 = ModOut
		dim str, x : for x = 0 to uBound(a1) : str = str & x & ": " & round(a1(x),4) & ", " & round(a2(x),4) & vbnewline : next
		TBPout.text = str
	End Sub

End Class

'******************************************************
'		TRACK ALL BALL VELOCITIES
' 		FOR RUBBER DAMPENER AND DROP TARGETS
'******************************************************

dim cor : set cor = New CoRTracker

Class CoRTracker
	public ballvel, ballvelx, ballvely

	Private Sub Class_Initialize : redim ballvel(0) : redim ballvelx(0): redim ballvely(0) : End Sub 

	Public Sub Update()	'tracks in-ball-velocity
		dim str, b, AllBalls, highestID : allBalls = getballs

		for each b in allballs
			if b.id >= HighestID then highestID = b.id
		Next

		if uBound(ballvel) < highestID then redim ballvel(highestID)	'set bounds
		if uBound(ballvelx) < highestID then redim ballvelx(highestID)	'set bounds
		if uBound(ballvely) < highestID then redim ballvely(highestID)	'set bounds

		for each b in allballs
			ballvel(b.id) = BallSpeed(b)
			ballvelx(b.id) = b.velx
			ballvely(b.id) = b.vely
		Next
	End Sub
End Class



'******************************************************
'  SLINGSHOT CORRECTION FUNCTIONS
'******************************************************
' To add these slingshot corrections:
' 	- On the table, add the endpoint primitives that define the two ends of the Slingshot
'	- Initialize the SlingshotCorrection objects in InitSlingCorrection
' 	- Call the .VelocityCorrect methods from the respective _Slingshot event sub


dim LS : Set LS = New SlingshotCorrection
dim RS : Set RS = New SlingshotCorrection

InitSlingCorrection

Sub InitSlingCorrection

	LS.Object = LeftSlingshot
	LS.EndPoint1 = EndPoint1LS
	LS.EndPoint2 = EndPoint2LS

	RS.Object = RightSlingshot
	RS.EndPoint1 = EndPoint1RS
	RS.EndPoint2 = EndPoint2RS

	'Slingshot angle corrections (pt, BallPos in %, Angle in deg)
	' These values are best guesses. Retune them if needed based on specific table research.
	AddSlingsPt 0, 0.00,	-4
	AddSlingsPt 1, 0.45,	-7
	AddSlingsPt 2, 0.48,	0
	AddSlingsPt 3, 0.52,	0
	AddSlingsPt 4, 0.55,	7
	AddSlingsPt 5, 1.00,	4

End Sub


Sub AddSlingsPt(idx, aX, aY)        'debugger wrapper for adjusting flipper script in-game
	dim a : a = Array(LS, RS)
	dim x : for each x in a
		x.addpoint idx, aX, aY
	Next
End Sub

Class SlingshotCorrection
	Public DebugOn, Enabled
	private Slingshot, SlingX1, SlingX2, SlingY1, SlingY2

	Public ModIn, ModOut
	Private Sub Class_Initialize : redim ModIn(0) : redim Modout(0): Enabled = True : End Sub 

	Public Property let Object(aInput) : Set Slingshot = aInput : End Property
	Public Property Let EndPoint1(aInput) : SlingX1 = aInput.x: SlingY1 = aInput.y: End Property
	Public Property Let EndPoint2(aInput) : SlingX2 = aInput.x: SlingY2 = aInput.y: End Property

	Public Sub AddPoint(aIdx, aX, aY) 
		ShuffleArrays ModIn, ModOut, 1 : ModIn(aIDX) = aX : ModOut(aIDX) = aY : ShuffleArrays ModIn, ModOut, 0
		If gametime > 100 then Report
	End Sub

	Public Sub Report()         'debug, reports all coords in tbPL.text
		If not debugOn then exit sub
		dim a1, a2 : a1 = ModIn : a2 = ModOut
		dim str, x : for x = 0 to uBound(a1) : str = str & x & ": " & round(a1(x),4) & ", " & round(a2(x),4) & vbnewline : next
		TBPout.text = str
	End Sub


	Public Sub VelocityCorrect(aBall)
		dim BallPos, XL, XR, YL, YR
		
		'Assign right and left end points
		If SlingX1 < SlingX2 Then 
			XL = SlingX1 : YL = SlingY1 : XR = SlingX2 : YR = SlingY2
		Else
			XL = SlingX2 : YL = SlingY2 : XR = SlingX1 : YR = SlingY1
		End If

		'Find BallPos = % on Slingshot
		If Not IsEmpty(aBall.id) Then 
			If ABS(XR-XL) > ABS(YR-YL) Then 
				BallPos = PSlope(aBall.x, XL, 0, XR, 1)
			Else
				BallPos = PSlope(aBall.y, YL, 0, YR, 1)
			End If
			If BallPos < 0 Then BallPos = 0
			If BallPos > 1 Then BallPos = 1
		End If

		'Velocity angle correction
		If not IsEmpty(ModIn(0) ) then
			Dim Angle, RotVxVy
			Angle = LinearEnvelope(BallPos, ModIn, ModOut)
			'debug.print " BallPos=" & BallPos &" Angle=" & Angle 
			'debug.print " BEFORE: aBall.Velx=" & aBall.Velx &" aBall.Vely" & aBall.Vely 
			RotVxVy = RotPoint(aBall.Velx,aBall.Vely,Angle)
			If Enabled then aBall.Velx = RotVxVy(0)
			If Enabled then aBall.Vely = RotVxVy(1)
			'debug.print " AFTER: aBall.Velx=" & aBall.Velx &" aBall.Vely" & aBall.Vely 
			'debug.print " " 
		End If
	End Sub

End Class


'******************************************************
' 	ZRDT:  DROP TARGETS by Rothbauerw
'******************************************************
' This solution improves the physics for drop targets to create more realistic behavior. It allows the ball
' to move through the target enabling the ability to score more than one target with a well placed shot.
' It also handles full drop target animation, including deflection on hit and a slight lift when the drop
' targets raise, switch handling, bricking, and popping the ball up if it's over the drop target when it raises.
'
'Add a Timer named DTAnim to editor to handle drop & standup target animations, or run them off an always-on 10ms timer (GameTimer)
'DTAnim.interval = 10
'DTAnim.enabled = True

'Sub DTAnim_Timer
'	DoDTAnim
'	DoSTAnim
'End Sub

' For each drop target, we'll use two wall objects for physics calculations and one primitive for visuals and
' animation. We will not use target objects.  Place your drop target primitive the same as you would a VP drop target.
' The primitive should have it's pivot point centered on the x and y axis and at or just below the playfield
' level on the z axis. Orientation needs to be set using Rotz and bending deflection using Rotx. You'll find a hooded
' target mesh in this table's example. It uses the same texture map as the VP drop targets.

'******************************************************
'  DROP TARGETS INITIALIZATION
'******************************************************

Class DropTarget
  Private m_primary, m_secondary, m_prim, m_sw, m_animate, m_isDropped

  Public Property Get Primary(): Set Primary = m_primary: End Property
  Public Property Let Primary(input): Set m_primary = input: End Property

  Public Property Get Secondary(): Set Secondary = m_secondary: End Property
  Public Property Let Secondary(input): Set m_secondary = input: End Property

  Public Property Get Prim(): Set Prim = m_prim: End Property
  Public Property Let Prim(input): Set m_prim = input: End Property

  Public Property Get Sw(): Sw = m_sw: End Property
  Public Property Let Sw(input): m_sw = input: End Property

  Public Property Get Animate(): Animate = m_animate: End Property
  Public Property Let Animate(input): m_animate = input: End Property

  Public Property Get IsDropped(): IsDropped = m_isDropped: End Property
  Public Property Let IsDropped(input): m_isDropped = input: End Property

  Public default Function init(primary, secondary, prim, sw, animate, isDropped)
    Set m_primary = primary
    Set m_secondary = secondary
    Set m_prim = prim
    m_sw = sw
    m_animate = animate
    m_isDropped = isDropped

    Set Init = Me
  End Function
End Class

'Define a variable for each drop target
Dim DT25, DT26, DT27, DT28, DT29, DT37, DT38, DT39

'Set array with drop target objects
'
'DropTargetvar = Array(primary, secondary, prim, swtich, animate)
'   primary:	primary target wall to determine drop
'   secondary:  wall used to simulate the ball striking a bent or offset target after the initial Hit
'   prim:	   primitive target used for visuals and animation
'				   IMPORTANT!!!
'				   rotz must be used for orientation
'				   rotx to bend the target back
'				   transz to move it up and down
'				   the pivot point should be in the center of the target on the x, y and at or below the playfield (0) on z
'   switch:	 ROM switch number
'   animate:	Array slot for handling the animation instrucitons, set to 0
'				   Values for animate: 1 - bend target (hit to primary), 2 - drop target (hit to secondary), 3 - brick target (high velocity hit to secondary), -1 - raise target
'   isDropped:  Boolean which determines whether a drop target is dropped. Set to false if they are initially raised, true if initially dropped.
'					Use the function DTDropped(switchid) to check a target's drop status.

Set DT25 = (new DropTarget)(sw25, sw25a, BM_SW25, 25, 0, False)
Set DT26 = (new DropTarget)(sw26, sw26a, BM_SW26, 26, 0, False)
Set DT27 = (new DropTarget)(sw27, sw27a, BM_SW27, 27, 0, False)
Set DT28 = (new DropTarget)(sw28, sw28a, BM_SW28, 28, 0, False)
Set DT29 = (new DropTarget)(sw29, sw29a, BM_SW29, 29, 0, False)

Set DT37 = (new DropTarget)(sw37, sw37a, BM_SW37, 37, 0, False)
Set DT38 = (new DropTarget)(sw38, sw38a, BM_SW38, 38, 0, False)
Set DT39 = (new DropTarget)(sw39, sw39a, BM_SW39, 39, 0, False)


Dim DTArray
DTArray = Array(DT25, DT26, DT27, DT28, DT29, DT37, DT38, DT39)

'Configure the behavior of Drop Targets.
Const DTDropSpeed = 80 'in milliseconds
Const DTDropUpSpeed = 40 'in milliseconds
Const DTDropUnits = 48 'VP units primitive drops so top of at or below the playfield
Const DTDropUpUnits = 10 'VP units primitive raises above the up position on drops up
Const DTMaxBend = 8 'max degrees primitive rotates when hit
Const DTDropDelay = 20 'time in milliseconds before target drops (due to friction/impact of the ball)
Const DTRaiseDelay = 40 'time in milliseconds before target drops back to normal up position after the solenoid fires to raise the target
Const DTBrickVel = 30 'velocity at which the target will brick, set to '0' to disable brick
Const DTEnableBrick = 0 'Set to 0 to disable bricking, 1 to enable bricking
Const DTMass = 0.2 'Mass of the Drop Target (between 0 and 1), higher values provide more resistance

'******************************************************
'  DROP TARGETS FUNCTIONS
'******************************************************

Sub DTHit(switch)
	Dim i
	i = DTArrayID(switch)
	
	PlayTargetSound
	DTArray(i).animate = DTCheckBrick(ActiveBall,DTArray(i).prim)
	If DTArray(i).animate = 1 Or DTArray(i).animate = 3 Or DTArray(i).animate = 4 Then
		DTBallPhysics ActiveBall, DTArray(i).prim.rotz, DTMass
	End If
	DoDTAnim
End Sub

Sub DTRaise(switch)
	Dim i
	i = DTArrayID(switch)
	
	DTArray(i).animate =  - 1
	DoDTAnim
End Sub

Sub DTDrop(switch)
	Dim i
	i = DTArrayID(switch)
	
	DTArray(i).animate = 1
	DoDTAnim
	SoundDropTargetDrop switch
End Sub

Function DTArrayID(switch)
	Dim i
	For i = 0 To UBound(DTArray)
		If DTArray(i).sw = switch Then
			DTArrayID = i
			Exit Function
		End If
	Next
End Function

Sub DTBallPhysics(aBall, angle, mass)
	Dim rangle,bangle,calc1, calc2, calc3
	rangle = (angle - 90) * 3.1416 / 180
	bangle = atn2(cor.ballvely(aball.id),cor.ballvelx(aball.id))
	
	calc1 = cor.BallVel(aball.id) * Cos(bangle - rangle) * (aball.mass - mass) / (aball.mass + mass)
	calc2 = cor.BallVel(aball.id) * Sin(bangle - rangle) * Cos(rangle + 4 * Atn(1) / 2)
	calc3 = cor.BallVel(aball.id) * Sin(bangle - rangle) * Sin(rangle + 4 * Atn(1) / 2)
	
	aBall.velx = calc1 * Cos(rangle) + calc2
	aBall.vely = calc1 * Sin(rangle) + calc3
End Sub

'Check if target is hit on it's face or sides and whether a 'brick' occurred
Function DTCheckBrick(aBall, dtprim)
	Dim bangle, bangleafter, rangle, rangle2, Xintersect, Yintersect, cdist, perpvel, perpvelafter, paravel, paravelafter
	rangle = (dtprim.rotz - 90) * 3.1416 / 180
	rangle2 = dtprim.rotz * 3.1416 / 180
	bangle = atn2(cor.ballvely(aball.id),cor.ballvelx(aball.id))
	bangleafter = Atn2(aBall.vely,aball.velx)
	
	Xintersect = (aBall.y - dtprim.y - Tan(bangle) * aball.x + Tan(rangle2) * dtprim.x) / (Tan(rangle2) - Tan(bangle))
	Yintersect = Tan(rangle2) * Xintersect + (dtprim.y - Tan(rangle2) * dtprim.x)
	
	cdist = Distance(dtprim.x, dtprim.y, Xintersect, Yintersect)
	
	perpvel = cor.BallVel(aball.id) * Cos(bangle - rangle)
	paravel = cor.BallVel(aball.id) * Sin(bangle - rangle)
	
	perpvelafter = BallSpeed(aBall) * Cos(bangleafter - rangle)
	paravelafter = BallSpeed(aBall) * Sin(bangleafter - rangle)
	
	If perpvel > 0 And  perpvelafter <= 0 Then
		If DTEnableBrick = 1 And  perpvel > DTBrickVel And DTBrickVel <> 0 And cdist < 8 Then
			DTCheckBrick = 3
		Else
			DTCheckBrick = 1
		End If
	ElseIf perpvel > 0 And ((paravel > 0 And paravelafter > 0) Or (paravel < 0 And paravelafter < 0)) Then
		DTCheckBrick = 4
	Else
		DTCheckBrick = 0
	End If
End Function

Sub DoDTAnim()
	Dim i
	For i = 0 To UBound(DTArray)
		DTArray(i).animate = DTAnimate(DTArray(i).primary,DTArray(i).secondary,DTArray(i).prim,DTArray(i).sw,DTArray(i).animate)
	Next
End Sub

Function DTAnimate(primary, secondary, prim, switch, animate)
	Dim transz, switchid
	Dim animtime, rangle
	
	switchid = switch
	
	Dim ind
	ind = DTArrayID(switchid)
	
	rangle = prim.rotz * PI / 180
	
	DTAnimate = animate
	
	If animate = 0 Then
		primary.uservalue = 0
		DTAnimate = 0
		Exit Function
	ElseIf primary.uservalue = 0 Then
		primary.uservalue = GameTime
	End If
	
	animtime = GameTime - primary.uservalue
	
	If (animate = 1 Or animate = 4) And animtime < DTDropDelay Then
		primary.collidable = 0
		If animate = 1 Then secondary.collidable = 1 Else secondary.collidable = 0
		prim.rotx = DTMaxBend * Cos(rangle)
		prim.roty = DTMaxBend * Sin(rangle)
		DTAnimate = animate
		Exit Function
	ElseIf (animate = 1 Or animate = 4) And animtime > DTDropDelay Then
		primary.collidable = 0
		If animate = 1 Then secondary.collidable = 1 Else secondary.collidable = 0
		prim.rotx = DTMaxBend * Cos(rangle)
		prim.roty = DTMaxBend * Sin(rangle)
		animate = 2
	End If
	
	If animate = 2 Then
		transz = (animtime - DTDropDelay) / DTDropSpeed * DTDropUnits *  - 1
		If prim.transz >  - DTDropUnits  Then
			prim.transz = transz
		End If
		
		prim.rotx = DTMaxBend * Cos(rangle) / 2
		prim.roty = DTMaxBend * Sin(rangle) / 2
		
		If prim.transz <= - DTDropUnits Then
			prim.transz =  - DTDropUnits
			secondary.collidable = 0
			DTArray(ind).isDropped = True 'Mark target as dropped
			controller.Switch(Switchid) = 1
			primary.uservalue = 0
			DTAnimate = 0
			Exit Function
		Else
			DTAnimate = 2
			Exit Function
		End If
	End If
	
	If animate = 3 And animtime < DTDropDelay Then
		primary.collidable = 0
		secondary.collidable = 1
		prim.rotx = DTMaxBend * Cos(rangle)
		prim.roty = DTMaxBend * Sin(rangle)
	ElseIf animate = 3 And animtime > DTDropDelay Then
		primary.collidable = 1
		secondary.collidable = 0
		prim.rotx = 0
		prim.roty = 0
		primary.uservalue = 0
		DTAnimate = 0
		Exit Function
	End If
	
	If animate =  - 1 Then
		transz = (1 - (animtime) / DTDropUpSpeed) * DTDropUnits *  - 1
		
		If prim.transz =  - DTDropUnits Then
			Dim b
			Dim gBOT
			gBOT = GetBalls
			
			For b = 0 To UBound(gBOT)
				If InRotRect(gBOT(b).x,gBOT(b).y,prim.x, prim.y, prim.rotz, - 25, - 10,25, - 10,25,25, - 25,25) And gBOT(b).z < prim.z + DTDropUnits + 25 Then
					gBOT(b).velz = 20
				End If
			Next
		End If
		
		If prim.transz < 0 Then
			prim.transz = transz
		ElseIf transz > 0 Then
			prim.transz = transz
		End If
		
		If prim.transz > DTDropUpUnits Then
			DTAnimate =  - 2
			prim.transz = DTDropUpUnits
			prim.rotx = 0
			prim.roty = 0
			primary.uservalue = GameTime
		End If
		primary.collidable = 0
		secondary.collidable = 1
		DTArray(ind).isDropped = False 'Mark target as not dropped
		controller.Switch(Switchid) = 0
	End If
	
	If animate =  - 2 And animtime > DTRaiseDelay Then
		prim.transz = (animtime - DTRaiseDelay) / DTDropSpeed * DTDropUnits *  - 1 + DTDropUpUnits
		If prim.transz < 0 Then
			prim.transz = 0
			primary.uservalue = 0
			DTAnimate = 0
			
			primary.collidable = 1
			secondary.collidable = 0
		End If
	End If
End Function

Function DTDropped(switchid)
	Dim ind
	ind = DTArrayID(switchid)
	
	DTDropped = DTArray(ind).isDropped
End Function

Sub UpdateDropTargets
	dim LM, tz, rx, ry

    tz = BM_SW25.transz
	rx = BM_SW25.rotx
	ry = BM_SW25.roty
	For each LM in BP_SW25 : LM.transz = tz: LM.rotx = rx: LM.roty = ry: Next

    tz = BM_SW26.transz
	rx = BM_SW26.rotx
	ry = BM_SW26.roty
	For each LM in BP_SW26 : LM.transz = tz: LM.rotx = rx: LM.roty = ry: Next

    tz = BM_SW27.transz
	rx = BM_SW27.rotx
	ry = BM_SW27.roty
	For each LM in BP_SW27 : LM.transz = tz: LM.rotx = rx: LM.roty = ry: Next

    tz = BM_SW28.transz
	rx = BM_SW28.rotx
	ry = BM_SW28.roty
	For each LM in BP_SW28 : LM.transz = tz: LM.rotx = rx: LM.roty = ry: Next

    tz = BM_SW29.transz
	rx = BM_SW29.rotx
	ry = BM_SW29.roty
	For each LM in BP_SW29 : LM.transz = tz: LM.rotx = rx: LM.roty = ry: Next

    tz = BM_SW37.transz
	rx = BM_SW37.rotx
	ry = BM_SW37.roty
	For each LM in BP_SW37 : LM.transz = tz: LM.rotx = rx: LM.roty = ry: Next

    tz = BM_SW38.transz
	rx = BM_SW38.rotx
	ry = BM_SW38.roty
	For each LM in BP_SW38 : LM.transz = tz: LM.rotx = rx: LM.roty = ry: Next

    tz = BM_SW39.transz
	rx = BM_SW39.rotx
	ry = BM_SW39.roty
	For each LM in BP_SW39 : LM.transz = tz: LM.rotx = rx: LM.roty = ry: Next
End Sub


'******************************************************
'  DROP TARGET
'  SUPPORTING FUNCTIONS
'******************************************************

' Used for drop targets
Function InRect(px,py,ax,ay,bx,by,cx,cy,dx,dy) 'Determines if a Points (px,py) is inside a 4 point polygon A-D in Clockwise/CCW order
	Dim AB, BC, CD, DA
	AB = (bx * py) - (by * px) - (ax * py) + (ay * px) + (ax * by) - (ay * bx)
	BC = (cx * py) - (cy * px) - (bx * py) + (by * px) + (bx * cy) - (by * cx)
	CD = (dx * py) - (dy * px) - (cx * py) + (cy * px) + (cx * dy) - (cy * dx)
	DA = (ax * py) - (ay * px) - (dx * py) + (dy * px) + (dx * ay) - (dy * ax)
	
	If (AB <= 0 And BC <= 0 And CD <= 0 And DA <= 0) Or (AB >= 0 And BC >= 0 And CD >= 0 And DA >= 0) Then
		InRect = True
	Else
		InRect = False
	End If
End Function

Function InRotRect(ballx,bally,px,py,angle,ax,ay,bx,by,cx,cy,dx,dy)
	Dim rax,ray,rbx,rby,rcx,rcy,rdx,rdy
	Dim rotxy
	rotxy = RotPoint(ax,ay,angle)
	rax = rotxy(0) + px
	ray = rotxy(1) + py
	rotxy = RotPoint(bx,by,angle)
	rbx = rotxy(0) + px
	rby = rotxy(1) + py
	rotxy = RotPoint(cx,cy,angle)
	rcx = rotxy(0) + px
	rcy = rotxy(1) + py
	rotxy = RotPoint(dx,dy,angle)
	rdx = rotxy(0) + px
	rdy = rotxy(1) + py
	
	InRotRect = InRect(ballx,bally,rax,ray,rbx,rby,rcx,rcy,rdx,rdy)
End Function

Function RotPoint(x,y,angle)
	Dim rx, ry
	rx = x * dCos(angle) - y * dSin(angle)
	ry = x * dSin(angle) + y * dCos(angle)
	RotPoint = Array(rx,ry)
End Function

'******************************************************
'****  END DROP TARGETS
'******************************************************




'*****************************************************************************************************
'*******************************************************************************************************
'END nFOZZY Physics'


'SeaFoodWheel Based on jp's script based on cyclone script
'Dim SFWSpin
'SFWSpin = 0
'Sub UpdateWheel(aNewPos, aSpeed, aLastPos)
     '360/200= 1.8
 '   If aNewPos <> aLastPos then
 '       SFWheel.ObjRotZ = aNewPos * 1.8
 '   End If
'End Sub

Dim SFWSpin
SFWSpin = 0
dim wheelUpdatetime
dim aWheelUpdate
aWheelUpdate = -1
Sub UpdateWheel(aNewPos, aSpeed, aLastPos)
	
'	debug.print gametime - wheelUpdatetime & "ms aNewPos : " & aNewPos & " aSpeed : " & aSpeed & " aLastPos : " & aLastPos
    dim BP
'     360/200= 1.8
    If aNewPos <> aLastPos then
'        for each BP in BP_Wheel: BP.ObjRotZ= aNewPos * 1.8 : next
		aWheelUpdate = aNewPos		'moved this to frametimer. Just to make it smoother
	Else
		aWheelUpdate = -1
    End If
'	wheelUpdatetime = gametime
End Sub

dim FlippersEnabled


' ***************************************************************************
'       BASIC FSS(SS TYPE0) 2x16 solid state character display SETUP CODE
' ****************************************************************************
Sub center_digits()
	Dim xoff, yoff, zoff, xcen, ycen, ii, xx, yy, xfact, yfact, obj, xrot, zscale
	xoff = 528 ' xoffset of destination (screen coords)
	yoff = -5.5 ' yoffset of destination (screen coords) 
	zoff = 822 ' zoffset of destination (screen coords)
	xrot = -86
	zscale = 0.19 

	xcen =(1133 /2) - (53 / 2)
	ycen = (1183 /2 ) + (133 /2)
	yfact =80 'y fudge factor (ycen was wrong so fix)
	xfact =80


	for ii =0 to 31
		For Each obj In DigitsVR(ii)
		xx =obj.x 
			
		obj.x = (xoff -xcen) + (xx * 0.82) +xfact
		yy = obj.y ' get the yoffset before it is changed
		obj.y =yoff 

			If(yy < 0.) then
			yy = yy * -1
			end if

		obj.height =( zoff - ycen) + yy - (yy * zscale) + yfact
		
		obj.rotx = xrot
		Next
	Next
end sub


'**************   VR Backbox Display Driver   *************
Dim DigitsVR(32)
 DigitsVR(0)=Array(ax00, ax05, ax0c, ax0d, ax08, ax01, ax06, ax0e, ax02, ax03, ax04, ax07, ax0b, ax0a, ax09, ax0f)
 DigitsVR(1)=Array(ax10, ax15, ax1c, ax1d, ax18, ax11, ax16, ax1e, ax12, ax13, ax14, ax17, ax1b, ax1a, ax19, ax1f)
 DigitsVR(2)=Array(ax20, ax25, ax2c, ax2d, ax28, ax21, ax26, ax2e, ax22, ax23, ax24, ax27, ax2b, ax2a, ax29, ax2f)
 DigitsVR(3)=Array(ax30, ax35, ax3c, ax3d, ax38, ax31, ax36, ax3e, ax32, ax33, ax34, ax37, ax3b, ax3a, ax39, ax3f)
 DigitsVR(4)=Array(ax40, ax45, ax4c, ax4d, ax48, ax41, ax46, ax4e, ax42, ax43, ax44, ax47, ax4b, ax4a, ax49, ax4f)
 DigitsVR(5)=Array(ax50, ax55, ax5c, ax5d, ax58, ax51, ax56, ax5e, ax52, ax53, ax54, ax57, ax5b, ax5a, ax59, ax5f)
 DigitsVR(6)=Array(ax60, ax65, ax6c, ax6d, ax68, ax61, ax66, ax6e, ax62, ax63, ax64, ax67, ax6b, ax6a, ax69, ax6f)
 DigitsVR(7)=Array(ax70, ax75, ax7c, ax7d, ax78, ax71, ax76, ax7e, ax72, ax73, ax74, ax77, ax7b, ax7a, ax79, ax7f)
 DigitsVR(8)=Array(ax80, ax85, ax8c, ax8d, ax88, ax81, ax86, ax8e, ax82, ax83, ax84, ax87, ax8b, ax8a, ax89, ax8f)
 DigitsVR(9)=Array(ax90, ax95, ax9c, ax9d, ax98, ax91, ax96, ax9e, ax92, ax93, ax94, ax97, ax9b, ax9a, ax99, ax9f)
 DigitsVR(10)=Array(axa0, axa5, axac, axad, axa8, axa1, axa6, axae, axa2, axa3, axa4, axa7, axab, axaa, axa9, axaf)
 DigitsVR(11)=Array(axb0, axb5, axbc, axbd, axb8, axb1, axb6, axbe, axb2, axb3, axb4, axb7, axbb, axba, axb9, axbf)
 DigitsVR(12)=Array(axc0, axc5, axcc, axcd, axc8, axc1, axc6, axce, axc2, axc3, axc4, axc7, axcb, axca, axc9, axcf)
 DigitsVR(13)=Array(axd0, axd5, axdc, axdd, axd8, axd1, axd6, axde, axd2, axd3, axd4, axd7, axdb, axda, axd9, axdf)
 DigitsVR(14)=Array(axe0, axe5, axec, axed, axe8, axe1, axe6, axee, axe2, axe3, axe4, axe7, axeb, axea, axe9, axef)
 DigitsVR(15)=Array(axf0, axf5, axfc, axfd, axf8, axf1, axf6, axfe, axf2, axf3, axf4, axf7, axfb, axfa, axf9, axff)
 
 DigitsVR(16)=Array(bx00, bx05, bx0c, bx0d, bx08, bx01, bx06, bx0e, bx02, bx03, bx04, bx07, bx0b, bx0a, bx09, bx0f)
 DigitsVR(17)=Array(bx10, bx15, bx1c, bx1d, bx18, bx11, bx16, bx1e, bx12, bx13, bx14, bx17, bx1b, bx1a, bx19, bx1f)
 DigitsVR(18)=Array(bx20, bx25, bx2c, bx2d, bx28, bx21, bx26, bx2e, bx22, bx23, bx24, bx27, bx2b, bx2a, bx29, bx2f)
 DigitsVR(19)=Array(bx30, bx35, bx3c, bx3d, bx38, bx31, bx36, bx3e, bx32, bx33, bx34, bx37, bx3b, bx3a, bx39, bx3f)
 DigitsVR(20)=Array(bx40, bx45, bx4c, bx4d, bx48, bx41, bx46, bx4e, bx42, bx43, bx44, bx47, bx4b, bx4a, bx49, bx4f)
 DigitsVR(21)=Array(bx50, bx55, bx5c, bx5d, bx58, bx51, bx56, bx5e, bx52, bx53, bx54, bx57, bx5b, bx5a, bx59, bx5f)
 DigitsVR(22)=Array(bx60, bx65, bx6c, bx6d, bx68, bx61, bx66, bx6e, bx62, bx63, bx64, bx67, bx6b, bx6a, bx69, bx6f)
 DigitsVR(23)=Array(bx70, bx75, bx7c, bx7d, bx78, bx71, bx76, bx7e, bx72, bx73, bx74, bx77, bx7b, bx7a, bx79, bx7f)
 DigitsVR(24)=Array(bx80, bx85, bx8c, bx8d, bx88, bx81, bx86, bx8e, bx82, bx83, bx84, bx87, bx8b, bx8a, bx89, bx8f)
 DigitsVR(25)=Array(bx90, bx95, bx9c, bx9d, bx98, bx91, bx96, bx9e, bx92, bx93, bx94, bx97, bx9b, bx9a, bx99, bx9f)
 DigitsVR(26)=Array(bxa0, bxa5, bxac, bxad, bxa8, bxa1, bxa6, bxae, bxa2, bxa3, bxa4, bxa7, bxab, bxaa, bxa9, bxaf)
 DigitsVR(27)=Array(bxb0, bxb5, bxbc, bxbd, bxb8, bxb1, bxb6, bxbe, bxb2, bxb3, bxb4, bxb7, bxbb, bxba, bxb9, bxbf)
 DigitsVR(28)=Array(bxc0, bxc5, bxcc, bxcd, bxc8, bxc1, bxc6, bxce, bxc2, bxc3, bxc4, bxc7, bxcb, bxca, bxc9, bxcf)
 DigitsVR(29)=Array(bxd0, bxd5, bxdc, bxdd, bxd8, bxd1, bxd6, bxde, bxd2, bxd3, bxd4, bxd7, bxdb, bxda, bxd9, bxdf)
 DigitsVR(30)=Array(bxe0, bxe5, bxec, bxed, bxe8, bxe1, bxe6, bxee, bxe2, bxe3, bxe4, bxe7, bxeb, bxea, bxe9, bxef)
 DigitsVR(31)=Array(bxf0, bxf5, bxfc, bxfd, bxf8, bxf1, bxf6, bxfe, bxf2, bxf3, bxf4, bxf7, bxfb, bxfa, bxf9, bxff)
 


'**************   Desktop Display Driver   ************

Dim Digits(32)
Digits(0) = Array(a00, a05, a0c, a0d, a08, a01, a06, a0f, a02, a03, a04, a07, a0b, a0a, a09, a0e)
Digits(1) = Array(a10, a15, a1c, a1d, a18, a11, a16, a1f, a12, a13, a14, a17, a1b, a1a, a19, a1e)
Digits(2) = Array(a20, a25, a2c, a2d, a28, a21, a26, a2f, a22, a23, a24, a27, a2b, a2a, a29, a2e)
Digits(3) = Array(a30, a35, a3c, a3d, a38, a31, a36, a3f, a32, a33, a34, a37, a3b, a3a, a39, a3e)
Digits(4) = Array(a40, a45, a4c, a4d, a48, a41, a46, a4f, a42, a43, a44, a47, a4b, a4a, a49, a4e)
Digits(5) = Array(a50, a55, a5c, a5d, a58, a51, a56, a5f, a52, a53, a54, a57, a5b, a5a, a59, a5e)
Digits(6) = Array(a60, a65, a6c, a6d, a68, a61, a66, a6f, a62, a63, a64, a67, a6b, a6a, a69, a6e)
Digits(7) = Array(a70, a75, a7c, a7d, a78, a71, a76, a7f, a72, a73, a74, a77, a7b, a7a, a79, a7e)
Digits(8) = Array(a80, a85, a8c, a8d, a88, a81, a86, a8f, a82, a83, a84, a87, a8b, a8a, a89, a8e)
Digits(9) = Array(a90, a95, a9c, a9d, a98, a91, a96, a9f, a92, a93, a94, a97, a9b, a9a, a99, a9e)
Digits(10) = Array(aa0, aa5, aac, aad, aa8, aa1, aa6, aaf, aa2, aa3, aa4, aa7, aab, aaa, aa9, aae)
Digits(11) = Array(ab0, ab5, abc, abd, ab8, ab1, ab6, abf, ab2, ab3, ab4, ab7, abb, aba, ab9, abe)
Digits(12) = Array(ac0, ac5, acc, acd, ac8, ac1, ac6, acf, ac2, ac3, ac4, ac7, acb, aca, ac9, ace)
Digits(13) = Array(ad0, ad5, adc, add, ad8, ad1, ad6, adf, ad2, ad3, ad4, ad7, adb, ada, ad9, ade)
Digits(14) = Array(ae0, ae5, aec, aed, ae8, ae1, ae6, aef, ae2, ae3, ae4, ae7, aeb, aea, ae9, aee)
Digits(15) = Array(af0, af5, afc, afd, af8, af1, af6, aff, af2, af3, af4, af7, afb, afa, af9, afe)

Digits(16) = Array(b00, b05, b0c, b0d, b08, b01, b06, b0f, b02, b03, b04, b07, b0b, b0a, b09, b0e)
Digits(17) = Array(b10, b15, b1c, b1d, b18, b11, b16, b1f, b12, b13, b14, b17, b1b, b1a, b19, b1e)
Digits(18) = Array(b20, b25, b2c, b2d, b28, b21, b26, b2f, b22, b23, b24, b27, b2b, b2a, b29, b2e)
Digits(19) = Array(b30, b35, b3c, b3d, b38, b31, b36, b3f, b32, b33, b34, b37, b3b, b3a, b39, b3e)
Digits(20) = Array(b40, b45, b4c, b4d, b48, b41, b46, b4f, b42, b43, b44, b47, b4b, b4a, b49, b4e)
Digits(21) = Array(b50, b55, b5c, b5d, b58, b51, b56, b5f, b52, b53, b54, b57, b5b, b5a, b59, b5e)
Digits(22) = Array(b60, b65, b6c, b6d, b68, b61, b66, b6f, b62, b63, b64, b67, b6b, b6a, b69, b6e)
Digits(23) = Array(b70, b75, b7c, b7d, b78, b71, b76, b7f, b72, b73, b74, b77, b7b, b7a, b79, b7e)
Digits(24) = Array(b80, b85, b8c, b8d, b88, b81, b86, b8f, b82, b83, b84, b87, b8b, b8a, b89, b8e)
Digits(25) = Array(b90, b95, b9c, b9d, b98, b91, b96, b9f, b92, b93, b94, b97, b9b, b9a, b99, b9e)
Digits(26) = Array(ba0, ba5, bac, bad, ba8, ba1, ba6, baf, ba2, ba3, ba4, ba7, bab, baa, ba9, bae)
Digits(27) = Array(bb0, bb5, bbc, bbd, bb8, bb1, bb6, bbf, bb2, bb3, bb4, bb7, bbb, bba, bb9, bbe)
Digits(28) = Array(bc0, bc5, bcc, bcd, bc8, bc1, bc6, bcf, bc2, bc3, bc4, bc7, bcb, bca, bc9, bce)
Digits(29) = Array(bd0, bd5, bdc, bdd, bd8, bd1, bd6, bdf, bd2, bd3, bd4, bd7, bdb, bda, bd9, bde)
Digits(30) = Array(be0, be5, bec, bed, be8, be1, be6, bef, be2, be3, be4, be7, beb, bea, be9, bee)
Digits(31) = Array(bf0, bf5, bfc, bfd, bf8, bf1, bf6, bff, bf2, bf3, bf4, bf7, bfb, bfa, bf9, bfe)


Sub DisplayTimer
	Dim ChgLED, ii, jj, num, chg, stat, obj, b, x
	ChgLED=Controller.ChangedLEDs(&Hffffffff, &Hffffffff)
	If Not IsEmpty(ChgLED)Then
		For ii=0 To UBound(chgLED)
			num=chgLED(ii, 0) : chg=chgLED(ii, 1) : stat=chgLED(ii, 2)
			if (num < 32) then
				if VRRoom > 0 Then
					For Each obj In DigitsVR(num)
						If chg And 1 Then obj.visible=stat And 1
						chg=chg\2 : stat=stat\2
					Next
				elseif DesktopMode = True and VRRoom < 1 Then
					For Each obj In Digits(num)
						If chg And 1 Then obj.State=stat And 1
						chg=chg\2 : stat=stat\2
					Next
				end If
			end if
		Next
    End If
End Sub


'************GI Subs

 Dim GIActive,GIState
 GIActive=0:GIState=0

Dim GIActivebb,GIStatebb
 GIActivebb=0:GIStatebb=0

 Sub SolGION(enabled)
    FlippersEnabled = Enabled
    If enabled then
        GIActive=1:SolGI 1
    else
        GIActive=0:SolGI 0
        if leftflipper.startangle > leftflipper.endangle Then
            if leftflipper.currentangle < leftflipper.startangle then leftflipper.rotatetostart : end if
        elseif leftflipper.startangle < leftflipper.endangle Then
            if leftflipper.currentangle > leftflipper.startangle then leftflipper.rotatetostart : end If
        end If
        if rightflipper.startangle > rightflipper.endangle Then
            if rightflipper.currentangle < rightflipper.startangle then rightflipper.rotatetostart : end if
        elseif rightflipper.startangle < rightflipper.endangle Then
            if rightflipper.currentangle > rightflipper.startangle then rightflipper.rotatetostart : end If
        end If
    end if
 End Sub

 Sub SolbbGION(enabled)
 	If enabled then
 		GIActivebb=1:SolbbGI 1
 	else
 		GIActivebb=0:SolbbGI 0
 	end if
 End Sub

 Sub SolGIBlink(enabled)
    If GIActive=1 then:SolGI Not enabled:end if
 	If GIActivebb=1 then:SolbbGI Not enabled:end if
 End Sub

 'GI Lights

  Sub SolGI(Enabled)
    If enabled then
		Sound_UpperGI_Relay SoundOn
'		Table1.ColorGradeImage = "ColorGrade_8"             'ninuzzu - added LUT color grade---->this will light the whole table when GI is on
		For each xx in aGiLights:xx.State = 1:next
		'If Sw28.IsDropped = 1 then: sw28l.State = 1: End if
		'If Sw27.IsDropped = 1 then: sw27l.State = 1: End if
		'If Sw26.IsDropped = 1 then: sw26l.State = 1: End if
		'If Sw25.IsDropped = 1 then: sw25l.State = 1: End if
		'If Sw39.IsDropped = 1 then: sw39l.State = 1: End if
		'If Sw38.IsDropped = 1 then: sw38l.State = 1: End if
		'If Sw37.IsDropped = 1 then: sw37l.State = 1: End if
		GIState=1
		TAFBackglass.image = "Cab_Backglass1"
		vrl54.visible = true
		VrCat.image = "cat1":VrWoman.image = "woman1"
'		SetLamp 190, 0
    else
		Sound_UpperGI_Relay SoundOff 
'		Table1.ColorGradeImage = "ColorGrade_1"         'ninuzzu - added LUT color grade---->this will darken the whole table when GI is off
		For each xx in aGiLights:xx.State = 0:next
		For each xx in TargetDropGi:xx.State = 0:next
		TAFBackglass.image = "Cab_Backglass0"
		vrl54.visible = false
		VrCat.image = "cat0":VrWoman.image = "woman0"
		GIState=0
    end if
 End Sub

  Sub SolbbGI(Enabled)
 	If enabled then
		Sound_UpperGI_Relay SoundOn
		GIStatebb=1

 	else
		Sound_UpperGI_Relay SoundOff
		GIStatebb=0

 	end if
 End Sub


'******************************************************
'****  BALL ROLLING AND DROP SOUNDS
'******************************************************
'
' Be sure to call RollingUpdate in a timer with a 10ms interval see the GameTimer_Timer() sub

ReDim rolling(tnob)
InitRolling

Dim DropCount
ReDim DropCount(tnob)

Sub InitRolling
	Dim i
	For i = 0 to tnob
		rolling(i) = False
	Next
End Sub

Sub RollingUpdate()
	Dim b

	' stop the sound of deleted balls
	For b = UBound(gBOT) + 1 to tnob - 1
		rolling(b) = False
		StopSound("BallRoll_" & b)
	Next

	' exit the sub if no balls on the table
	If UBound(gBOT) = -1 Then Exit Sub

	' play the rolling sound for each ball

	For b = 0 to UBound(gBOT)
		If BallVel(gBOT(b)) > 1 AND gBOT(b).z < 30 Then
			rolling(b) = True
			PlaySound ("BallRoll_" & b), -1, VolPlayfieldRoll(gBOT(b)) * BallRollVolume * MechVolume, AudioPan(gBOT(b)), 0, PitchPlayfieldRoll(gBOT(b)), 1, 0, AudioFade(gBOT(b))

		Else
			If rolling(b) = True Then
				StopSound("BallRoll_" & b)
				rolling(b) = False
			End If
		End If

		' Ball Drop Sounds
		If gBOT(b).VelZ < -1 and gBOT(b).z < 55 and gBOT(b).z > 27 Then 'height adjust for ball drop sounds
			If DropCount(b) >= 5 Then
				DropCount(b) = 0
				If gBOT(b).velz > -7 Then
					RandomSoundBallBouncePlayfieldSoft gBOT(b)
				Else
					RandomSoundBallBouncePlayfieldHard gBOT(b)
				End If				
			End If
		End If
		If DropCount(b) < 5 Then
			DropCount(b) = DropCount(b) + 1
		End If
	Next
End Sub




' '******************************************************
' '****  END BALL ROLLING AND DROP SOUNDS
' '******************************************************



'***************************************************************
'  Ambient ball shadows
'***************************************************************

'Ambient (Room light source)
Const AmbientBSFactor = 0.9    '0 To 1, higher is darker
Const AmbientMovement = 1	   '1+ higher means more movement as the ball moves left and right
Const offsetX = 0			   'Offset x position under ball (These are if you want to change where the "room" light is for calculating the shadow position,)
Const offsetY = 0			   'Offset y position under ball (^^for example 5,5 if the light is in the back left corner)

' *** Trim or extend these to match the number of balls/primitives/flashers on the table!  (will throw errors if there aren't enough objects)
Dim objBallShadow(2)

'Initialization
BSInit

Sub BSInit()
	Dim iii
	'Prepare the shadow objects before play begins
	For iii = 0 To tnob - 1
		Set objBallShadow(iii) = Eval("BallShadow" & iii)
		objBallShadow(iii).material = "BallShadow" & iii
		UpdateMaterial objBallShadow(iii).material,1,0,0,0,0,0,AmbientBSFactor,RGB(0,0,0),0,0,False,True,0,0,0,0
		objBallShadow(iii).Z = 1 + iii / 1000 + 1.04
		objBallShadow(iii).visible = 0
	Next
End Sub


Sub BSUpdate
	Dim s

'	'Hide shadow of deleted balls
'	For s = UBound(gBOT) + 1 To tnob - 1
'		objBallShadow(s).visible = 0
'	Next
'	
'	If UBound(gBOT) < lob Then Exit Sub 'No balls in play, exit
	
	'The Magic happens now
	For s = lob To UBound(gBOT)
		' *** Normal "ambient light" ball shadow
		
		'Primitive shadow on playfield, flasher shadow in ramps
		'** If on main pf
		If gBOT(s).Z  < 30 Then 
			objBallShadow(s).visible = 1
			objBallShadow(s).X = gBOT(s).X + (gBOT(s).X - (tablewidth / 2)) / (Ballsize / AmbientMovement) + offsetX
			objBallShadow(s).Y = gBOT(s).Y + offsetY
			'objBallShadow(s).Z = gBOT(s).Z + s/1000 + 1.04 - 25	

		'** Under pf, no shadow
		Else
			objBallShadow(s).visible = 0
		End If
	Next
End Sub



'******************************************************
'**** RAMP ROLLING SFX
'******************************************************

'Ball tracking ramp SFX 1.0
'   Reqirements:
'          * Import A Sound File for each ball on the table for plastic ramps.  Call It RampLoop<Ball_Number> ex: RampLoop1, RampLoop2, ...
'          * Import a Sound File for each ball on the table for wire ramps. Call it WireLoop<Ball_Number> ex: WireLoop1, WireLoop2, ...
'          * Create a Timer called RampRoll, that is enabled, with a interval of 100
'          * Set RampBAlls and RampType variable to Total Number of Balls
'	Usage:
'          * Setup hit events and call WireRampOn True or WireRampOn False (True = Plastic ramp, False = Wire Ramp)
'          * To stop tracking ball
'                 * call WireRampOff
'                 * Otherwise, the ball will auto remove if it's below 30 vp units
'

dim RampMinLoops : RampMinLoops = 4

' RampBalls
'      Setup:        Set the array length of x in RampBalls(x,2) Total Number of Balls on table + 1:  if tnob = 5, then RammBalls(6,2)
'      Description:  
dim RampBalls(6,2)
'x,0 = ball x,1 = ID,	2 = Protection against ending early (minimum amount of updates)
'0,0 is boolean on/off, 0,1 unused for now
RampBalls(0,0) = False

' RampType
'     Setup: Set this array to the number Total number of balls that can be tracked at one time + 1.  5 ball multiball then set value to 6
'     Description: Array type indexed on BallId and a values used to deterimine what type of ramp the ball is on: False = Wire Ramp, True = Plastic Ramp
dim RampType(6)	

Sub WireRampOn(input)  : Waddball ActiveBall, input : RampRollUpdate: End Sub
Sub WireRampOff() : WRemoveBall ActiveBall.ID	: End Sub


' WaddBall (Active Ball, Boolean)
'     Description: This subroutine is called from WireRampOn to Add Balls to the RampBalls Array
Sub Waddball(input, RampInput)	'Add ball
	' This will loop through the RampBalls array checking each element of the array x, position 1
	' To see if the the ball was already added to the array.
	' If the ball is found then exit the subroutine
	dim x : for x = 1 to uBound(RampBalls)	'Check, don't add balls twice
		if RampBalls(x, 1) = input.id then 
			if Not IsEmpty(RampBalls(x,1) ) then Exit Sub	'Frustating issue with BallId 0. Empty variable = 0
		End If
	Next

	' This will itterate through the RampBalls Array.
	' The first time it comes to a element in the array where the Ball Id (Slot 1) is empty.  It will add the current ball to the array
	' The RampBalls assigns the ActiveBall to element x,0 and ball id of ActiveBall to 0,1
	' The RampType(BallId) is set to RampInput
	' RampBalls in 0,0 is set to True, this will enable the timer and the timer is also turned on
	For x = 1 to uBound(RampBalls)
		if IsEmpty(RampBalls(x, 1)) then 
			Set RampBalls(x, 0) = input
			RampBalls(x, 1)	= input.ID
			RampType(x) = RampInput
			RampBalls(x, 2)	= 0
			'exit For
			RampBalls(0,0) = True
			RampRoll.Enabled = 1	 'Turn on timer
			'RampRoll.Interval = RampRoll.Interval 'reset timer
			exit Sub
		End If
		if x = uBound(RampBalls) then 	'debug
			Debug.print "WireRampOn error, ball queue is full: " & vbnewline & _
			RampBalls(0, 0) & vbnewline & _
			Typename(RampBalls(1, 0)) & " ID:" & RampBalls(1, 1) & "type:" & RampType(1) & vbnewline & _
			Typename(RampBalls(2, 0)) & " ID:" & RampBalls(2, 1) & "type:" & RampType(2) & vbnewline & _
			Typename(RampBalls(3, 0)) & " ID:" & RampBalls(3, 1) & "type:" & RampType(3) & vbnewline & _
			Typename(RampBalls(4, 0)) & " ID:" & RampBalls(4, 1) & "type:" & RampType(4) & vbnewline & _
			Typename(RampBalls(5, 0)) & " ID:" & RampBalls(5, 1) & "type:" & RampType(5) & vbnewline & _
			" "
		End If
	next
End Sub

' WRemoveBall (BallId)
'    Description: This subroutine is called from the RampRollUpdate subroutine 
'                 and is used to remove and stop the ball rolling sounds
Sub WRemoveBall(ID)		'Remove ball
	'Debug.Print "In WRemoveBall() + Remove ball from loop array"
	dim ballcount : ballcount = 0
	dim x : for x = 1 to Ubound(RampBalls)
		if ID = RampBalls(x, 1) then 'remove ball
			Set RampBalls(x, 0) = Nothing
			RampBalls(x, 1) = Empty
			RampType(x) = Empty
			StopSound("RampLoop" & x)
			StopSound("wireloop" & x)
		end If
		'if RampBalls(x,1) = Not IsEmpty(Rampballs(x,1) then ballcount = ballcount + 1
		if not IsEmpty(Rampballs(x,1)) then ballcount = ballcount + 1
	next
	if BallCount = 0 then RampBalls(0,0) = False	'if no balls in queue, disable timer update
End Sub

Sub RampRoll_Timer():RampRollUpdate:End Sub

Sub RampRollUpdate()		'Timer update
	dim x : for x = 1 to uBound(RampBalls)
		if Not IsEmpty(RampBalls(x,1) ) then 
			if BallVel(RampBalls(x,0) ) > 1 then ' if ball is moving, play rolling sound
				If RampType(x) then 
					PlaySound("RampLoop" & x), -1, VolPlayfieldRoll(RampBalls(x,0)) * RampRollVolume * MechVolume, AudioPan(RampBalls(x,0)), 0, BallPitchV(RampBalls(x,0)), 1, 0, AudioFade(RampBalls(x,0))				
					StopSound("wireloop" & x)
				Else
					StopSound("RampLoop" & x)
					PlaySound("wireloop" & x), -1, VolPlayfieldRoll(RampBalls(x,0)) * RampRollVolume * MechVolume, AudioPan(RampBalls(x,0)), 0, BallPitch(RampBalls(x,0)), 1, 0, AudioFade(RampBalls(x,0))
				End If
				RampBalls(x, 2)	= RampBalls(x, 2) + 1
			Else
				StopSound("RampLoop" & x)
				StopSound("wireloop" & x)
			end if
			if RampBalls(x,0).Z < 30 and RampBalls(x, 2) > RampMinLoops then	'if ball is on the PF, remove  it
				StopSound("RampLoop" & x)
				StopSound("wireloop" & x)
				Wremoveball RampBalls(x,1)
			End If
		Else
			StopSound("RampLoop" & x)
			StopSound("wireloop" & x)
		end if
	next
	if not RampBalls(0,0) then RampRoll.enabled = 0

End Sub

' This can be used to debug the Ramp Roll time.  You need to enable the tbWR timer on the TextBox
Sub tbWR_Timer()	'debug textbox
	me.text =	"on? " & RampBalls(0, 0) & " timer: " & RampRoll.Enabled & vbnewline & _
	"1 " & Typename(RampBalls(1, 0)) & " ID:" & RampBalls(1, 1) & " type:" & RampType(1) & " Loops:" & RampBalls(1, 2) & vbnewline & _
	"2 " & Typename(RampBalls(2, 0)) & " ID:" & RampBalls(2, 1) & " type:" & RampType(2) & " Loops:" & RampBalls(2, 2) & vbnewline & _
	"3 " & Typename(RampBalls(3, 0)) & " ID:" & RampBalls(3, 1) & " type:" & RampType(3) & " Loops:" & RampBalls(3, 2) & vbnewline & _
	"4 " & Typename(RampBalls(4, 0)) & " ID:" & RampBalls(4, 1) & " type:" & RampType(4) & " Loops:" & RampBalls(4, 2) & vbnewline & _
	"5 " & Typename(RampBalls(5, 0)) & " ID:" & RampBalls(5, 1) & " type:" & RampType(5) & " Loops:" & RampBalls(5, 2) & vbnewline & _
	"6 " & Typename(RampBalls(6, 0)) & " ID:" & RampBalls(6, 1) & " type:" & RampType(6) & " Loops:" & RampBalls(6, 2) & vbnewline & _
	" "
End Sub


Function BallPitch(ball) ' Calculates the pitch of the sound based on the ball speed
    BallPitch = pSlope(BallVel(ball), 1, -1000, 60, 10000)
End Function

Function BallPitchV(ball) ' Calculates the pitch of the sound based on the ball speed Variation
	BallPitchV = pSlope(BallVel(ball), 1, -4000, 60, 7000)
End Function


' Ramp Triggers

Sub TriigerRamp1_hit
'	debug.print "TriggerSexyRamp001: " & ActiveBall.VelY
	If (ActiveBall.VelY > 0) Then 
		'ball is traveling down the playfield
		RandomSoundRampFlapDown()
	ElseIf (ActiveBall.VelY < 0) Then
		RandomSoundRampFlapUp()

	End If

	If activeball.vely < 0 Then
		WireRampOn True
	Else
		WireRampOff
	End If
End Sub

Sub TriigerRamp2_hit
	WireRampOff
	WireRampOn False
End Sub

Sub TriigerRamp3_hit
	WireRampOff
	RandomSoundRampStop TriigerRamp3
	RandomSoundDelayedBallDropOnPlayfield ActiveBall
End Sub

Sub TriigerRamp4_hit
'	debug.print "TriggerRightRamp001: " & ActiveBall.VelX
	If (ActiveBall.VelY > 0) Then 
		'ball is traveling down the playfield
		RandomSoundRampFlapDown()
		
	ElseIf (ActiveBall.VelY < 0) Then
		'ball is traveling up the playfield
		RandomSoundRampFlapUp()
		
	End If

	If activeball.vely < 0 Then
		WireRampOn True
	Else
		WireRampOff
	End If
End Sub

Sub TriigerRamp5_hit
	WireRampOff
End Sub

'/////////////////////////////  PLASTIC RAMPS FLAPS - SOUNDS  ////////////////////////////
Sub RandomSoundRampFlapUp()
'	debug.print "flap up"
	Select Case Int(Rnd*3)+1
		Case 1 : PlaySoundAtLevelActiveBall ("TOM_Ramp_Flap_Up_1"), FlapSoundLevel
		Case 2 : PlaySoundAtLevelActiveBall ("TOM_Ramp_Flap_Up_2"), FlapSoundLevel
		Case 3 : PlaySoundAtLevelActiveBall ("TOM_Ramp_Flap_Up_3"), FlapSoundLevel
	End Select
End Sub

Sub RandomSoundRampFlapDown()
'	debug.print "flap down"	
	Select Case Int(Rnd*3)+1
		Case 1 : PlaySoundAtLevelActiveBall ("TOM_Ramp_Flap_Down_1"), FlapSoundLevel
		Case 2 : PlaySoundAtLevelActiveBall ("TOM_Ramp_Flap_Down_2"), FlapSoundLevel
		Case 3 : PlaySoundAtLevelActiveBall ("TOM_Ramp_Flap_Down_3"), FlapSoundLevel
	End Select
End Sub


'/////////////////////////////  RAMP COLLISIONS  ////////////////////////////

dim LRHit1_volume, LRHit2_volume, LRHit3_volume
dim RRHit1_volume, RRHit2_volume, RRHit3_volume

Dim LeftRampSoundLevel
Dim RightRampSoundLevel
Dim RampFallbackSoundLevel

Dim FlapSoundLevel

'///////////////////////-----Ramps-----///////////////////////
'///////////////////////-----Plastic Ramps-----///////////////////////
LeftRampSoundLevel = 0.1												'volume level; range [0, 1]
RightRampSoundLevel = 0.1												'volume level; range [0, 1]
RampFallbackSoundLevel = 0.2											'volume level; range [0, 1]

'///////////////////////-----Ramp Flaps-----///////////////////////
FlapSoundLevel = 0.8													'volume level; range [0, 1]



'/////////////////////////////  PLASTIC LEFT RAMP SOUNDS  ////////////////////////////

sub LRHit1_Hit()
'	debug.print "one"
	LRHit1_volume = LeftRampSoundLevel
	PlaySoundAtLevelStatic ("TOM_C_Ramp_1_Improved2"), LRHit1_volume, LRHit1
end Sub

Sub LRHit2_Hit()
'	debug.print "two"
	LRHit2_volume = LeftRampSoundLevel
	LRHit1.TimerInterval = 5
	LRHit1.TimerEnabled = 1
	PlaySoundAtLevelStatic ("TOM_C_Ramp_2_Improved2"), LRHit2_volume, LRHit2
End Sub

Sub LRHit3_Hit()
'	debug.print "three"
	LRHit3_volume = LeftRampSoundLevel
	LRHit2.TimerInterval = 5
	LRHit2.TimerEnabled = 1
	PlaySoundAtLevelStatic ("TOM_C_Ramp_3_Improved2"), LRHit3_volume, LRHit3
End Sub



'sub Diverter2_hit()
''	debug.print "diverter2"
'	PlaySoundAtLevelStatic ("TOM_R_Ramp_3"), LeftRampSoundLevel * 2, activeball
'end sub


'/////////////////////////////  PLASTIC LEFT RAMP SOUND TIMERS ////////////////////////////
Sub LRHit1_Timer()
'	debug.print "1: " & LRHit1_volume
	If LRHit1_volume > 0 Then
		LRHit1_volume = LRHit1_volume - 0.05
		PlaySoundAtLevelExistingStatic ("TOM_C_Ramp_1_Improved2"), LRHit1_volume, LRHit1
	Else
		Me.TimerEnabled = 0
	End If
End Sub

Sub LRHit2_Timer()
'	debug.print "2: " & LRHit2_volume
	If LRHit2_volume > 0 Then
		LRHit2_volume = LRHit2_volume - 0.05
		PlaySoundAtLevelExistingStatic ("TOM_C_Ramp_2_Improved2"), LRHit2_volume, LRHit2
	Else
		Me.TimerEnabled = 0
	End If
End Sub


'/////////////////////////////  PLASTIC RIGHT RAMP SOUNDS  ////////////////////////////
sub RRHit1_Hit()
'	debug.print "one"
	RRHit1_volume = RightRampSoundLevel
	PlaySoundAtLevelStatic ("TOM_C_Ramp_4_Improved2"), RRHit1_volume, RRHit1
end Sub

Sub RRHit2_Hit()
'	debug.print "two"
	RRHit2_volume = RightRampSoundLevel
	RRHit1.TimerInterval = 5
	RRHit1.TimerEnabled = 1
	PlaySoundAtLevelStatic ("TOM_C_Ramp_5_Improved2"), RRHit2_volume, RRHit2
End Sub

Sub RRHit3_Hit()
'	debug.print "three"
	RRHit3_volume = RightRampSoundLevel
	RRHit2.TimerInterval = 5
	RRHit2.TimerEnabled = 1
	PlaySoundAtLevelStatic ("TOM_C_Ramp_6_Improved2"), RRHit3_volume, RRHit3
End Sub


'/////////////////////////////  PLASTIC RIGHT RAMP SOUND TIMERS  ////////////////////////////
Sub RRHit1_Timer()
'	debug.print "1: " & RRHit1_volume
	If RRHit1_volume > 0 Then
		RRHit1_volume = RRHit1_volume - 0.05
		PlaySoundAtLevelExistingStatic ("TOM_C_Ramp_4_Improved2"), RRHit1_volume, RRHit1
	Else
		Me.TimerEnabled = 0
	End If
End Sub

Sub RRHit2_Timer()
'	debug.print "2: " & RRHit2_volume
	If RRHit2_volume > 0 Then
		RRHit2_volume = RRHit2_volume - 0.05
		PlaySoundAtLevelExistingStatic ("TOM_C_Ramp_5_Improved2"), RRHit2_volume, RRHit2
	Else
		Me.TimerEnabled = 0
	End If
End Sub



'******************************************************
'**** END RAMP ROLLING SFX
'******************************************************


'////////////////////////////////////////////////////////////////////////////////
'////          Mechanical Sounds, by Fleep                                   ////
'////                     Last Updated: January, 2022                        ////
'////////////////////////////////////////////////////////////////////////////////
'
'/////////////////////////////////  CARTRIDGES  /////////////////////////////////
'
'//  Specify which mechanical sound cartridge to use for each group of elements.
'//  Mechanical sounds naming convention: <CARTRIDGE>_<Soundset_Name>
'//
'//  Cartridge name is composed using the following convention:
'//  <TABLE MANUFACTURER ABBREVIATION>_<TABLE NAME ABBREVIATION>_<SOUNDSET REVISION NUMBER>
'//  
'//  General Mechanical Sounds Cartridges:
Const Cartridge_Bumpers					= "WS_PBT_REV01" 'Williams Pinbot Cartridge REV01
Const Cartridge_Slingshots				= "WS_PBT_REV01" 'Williams Pinbot Cartridge REV01
Const Cartridge_Flippers				= "WS_PBT_REV01" 'Williams Pinbot Cartridge REV01
Const Cartridge_Kickers					= "WS_WHD_REV01"
Const Cartridge_Diverters				= "WS_DNR_REV01" 'Williams Diner Cartridge REV01
Const Cartridge_Knocker					= "WS_WHD_REV02" 'Williams Whirlwind Cartridge REV02
Const Cartridge_Relays					= "WS_WHD_REV01"
Const Cartridge_Trough					= "WS_WHD_REV01"
Const Cartridge_Rollovers				= "WS_WHD_REV01"
Const Cartridge_Targets					= "WS_WHD_REV01"
Const Cartridge_Gates					= "WS_WHD_REV01"
Const Cartridge_Spinner					= "SY_TNA_REV01" 'Spooky Total Nuclear Annihilation Cartridge REV01
Const Cartridge_Rubber_Hits				= "WS_WHD_REV01"
Const Cartridge_Metal_Hits				= "WS_WHD_REV01"
Const Cartridge_Plastic_Hits			= "WS_WHD_REV01"
Const Cartridge_Wood_Hits				= "WS_WHD_REV01"
Const Cartridge_Cabinet_Sounds			= "WS_WHD_REV01"
Const Cartridge_Drain					= "WS_WHD_REV01"
Const Cartridge_Apron					= "WS_WHD_REV01"
Const Cartridge_Ball_Roll				= "BY_TOM_REV01" 'Bally Theatre of Magic Cartridge REV01
Const Cartridge_BallBallCollision		= "BY_WDT_REV01" 'Bally WHO Dunnit Cartridge REV01
Const Cartridge_Ball_Drop_Bump			= "WS_WHD_REV01"
Const Cartridge_Plastic_Ramps			= "WS_WHD_REV01"
Const Cartridge_Metal_Ramps				= "WS_WHD_REV01"
Const Cartridge_Ball_Guides				= "WS_WHD_REV01"
Const Cartridge_Table_Specifics			= "WS_WHD_REV01"


'////////////////////////////  SOUND SOURCE CREDITS  ////////////////////////////
'//  Special thanks go to the following contributors who have provided audio 
'//  footage recordings:
'//  
'//  Williams Whirlwind - Blackmoor, wrd1972
'//  Williams Diner - Nick Rusis
'//  Spooky Total Nuclear Annihilation - WildDogArcade, Ed and Gary
'//  Bally Theatre of Magic - CalleV, nickbuol
'//  Bally WHO Dunnit - Amazaley1
'//  Williams Pinbot - major_drain_pinball


'///////////////////////////////  USER PARAMETERS  //////////////////////////////
'
'//  Sounds Parameter with suffix "SoundLevel" can have any value in range [0..1]
'//  Sounds Parameter with suffix "SoundMultiplier" can have any value


'///////////////////////////  SOLENOIDS (COILS) CONFIG  /////////////////////////

'//  FLIPPER COILS:
'//  Flippers in this table: Lower Left Flipper, Lower Right Flipper, Upper Right Fliiper
Dim FlipperUpSoundLevel, FlipperDownSoundLevel, FlipperUpAttackMinimumSoundLevel, FlipperUpAttackMaximumSoundLevel
Dim FlipperLeftLowerHitParm, FlipperRightUpperHitParm, FlipperRightLowerHitParm

'//  Flipper Up Attacks initialize during playsound subs
Dim FlipperUpAttackLeftSoundLevel, FlipperUpAttackRightSoundLevel


FlipperUpSoundLevel = 1
FlipperDownSoundLevel = 0.65
FlipperUpAttackMinimumSoundLevel = 0.010
FlipperUpAttackMaximumSoundLevel = 0.435


'//  Flipper Hit Param initialize with FlipperUpSoundLevel
'//  and dynamically modified calculated by ball flipper collision
FlipperLeftLowerHitParm = FlipperUpSoundLevel
FlipperRightLowerHitParm = FlipperUpSoundLevel
FlipperRightUpperHitParm = FlipperUpSoundLevel


'//  CONTROLLED / SWITCHED COILS:
'//  Solenoid 01A = Outhole Kicker
'//  Solenoid 02A = Shooter Feeder
'//  Solenoid 03A = Right Ramp Lifter
'//  Solenoid 04A = Left Locking Kickback
'//  Solenoid 05A = Top Eject
'//  Solenoid 06A = Knocker
'//  Solenoid 07A,08A = 3-Bank Drop Target Reset, 1-Bank Drop Target Reset
'//  Solenoid 13 = Diverter
'//  Solenoid 14 = Under Playfield Kickbig
'//  Solenoid 09,10,15,17,19,21 = 3 Lower Bumpers, 3 Upper Bumpers
'//  Solenoid 18,20 = Left Kicker (Slingshot), Right Kicker (Slingshot)
'//  Solenoid 22 = Right Ramp Down

Dim Solenoid_OutholeKicker_SoundLevel, Solenoid_ShooterFeeder_SoundLevel
Dim Solenoid_RightRampLifter_SoundLevel, Solenoid_LeftLockingKickback_SoundLevel
Dim Solenoid_TopEject_SoundLevel, Solenoid_Knocker_SoundLevel, Solenoid_DropTargetReset_SoundLevel
Dim Solenoid_Diverter_Enabled_SoundLevel, Solenoid_Diverter_Hold_SoundLevel, Solenoid_Diverter_Disabled_SoundLevel
Dim Solenoid_UnderPlayfieldKickbig_SoundLevel, Solenoid_Bumper_SoundMultiplier
Dim Solenoid_Slingshot_SoundLevel, Solenoid_RightRampDown_SoundLevel, AutoPlungerSoundLevel

AutoPlungerSoundLevel = 1												'volume level; range [0, 1]
Solenoid_OutholeKicker_SoundLevel = 1
Solenoid_ShooterFeeder_SoundLevel = 1
Solenoid_RightRampLifter_SoundLevel = 0.3
Solenoid_RightRampDown_SoundLevel = 0.3
Solenoid_LeftLockingKickback_SoundLevel = 1
Solenoid_TopEject_SoundLevel = 1
Solenoid_Knocker_SoundLevel = 1
Solenoid_DropTargetReset_SoundLevel = 1
Solenoid_Diverter_Enabled_SoundLevel = 1
Solenoid_Diverter_Hold_SoundLevel = 0.7
Solenoid_Diverter_Disabled_SoundLevel = 0.4
Solenoid_UnderPlayfieldKickbig_SoundLevel = 1
Solenoid_Bumper_SoundMultiplier = 0.004 '8
Solenoid_Slingshot_SoundLevel = 1


'//  RELAYS:
'//  Solenoid 16 = Lower Playfield Relay GI Relay (P/N 5580-12145-00) / Backbox GI Relay (P/N 5580-09555-01)
'//  Solenoid 11 = Upper Playfield Relay GI Relay (P/N 5580-12145-00)
'//  Solenoid 12 = Solenoid A/C Select Relay (5580-09555-01)
'//  Fake Solenoid = Flahser Relay

Dim RelayLowerGISoundLevel, RelayUpperGISoundLevel, RelaySolenoidACSelectSoundLevel, RelayFlasherSoundLevel
RelayLowerGISoundLevel = 0.45
RelayUpperGISoundLevel = 0.45
RelaySolenoidACSelectSoundLevel = 0.3
RelayFlasherSoundLevel = 0.015


'//  EXTRA SOLENOIDS:
'//  Solenoid 24 = Blower Motor (Ontop Backbox)
'//  Solenoid 27 = Spin Wheels Motor
Dim Solenoid_BlowerMotor_SoundLevel, Solenoid_SpinWheelsMotor_SoundLevel
Solenoid_BlowerMotor_SoundLevel = 0.2
Solenoid_SpinWheelsMotor_SoundLevel = 0.2


'////////////////////////////  SWITCHES SOUND CONFIG  ///////////////////////////
Dim Switch_Gate_SoundLevel, SpinnerSoundLevel, RolloverSoundLevel, OutLaneRolloverSoundLevel, TargetSoundFactor

Switch_Gate_SoundLevel = 1	
SpinnerSoundLevel = 0.1
RolloverSoundLevel = 0.55
OutLaneRolloverSoundLevel = 0.8
TargetSoundFactor = 0.8


'////////////////////  BALL HITS, BUMPS, DROPS SOUND CONFIG  ////////////////////
Dim BallWithBallCollisionSoundFactor, BallBouncePlayfieldSoftFactor, BallBouncePlayfieldHardFactor
Dim WallImpactSoundFactor, MetalImpactSoundFactor, WireformAntiRebountRailSoundFactor
Dim RubberStrongSoundFactor, RubberWeakSoundFactor, RubberFlipperSoundFactor
Dim BottomArchBallGuideSoundFactor, FlipperBallGuideSoundFactor, OutlaneWallsSoundFactor
Dim EjectBallBumpSoundLevel, HeadSaucerSoundLevel, EjectHoleEnterSoundLevel
Dim RightRampMetalWireDropToPlayfieldSoundLevel, LeftPlasticRampDropToLockSoundLevel, LeftPlasticRampDropToPlayfieldSoundLevel
Dim CellarLeftEnterSoundLevel, CellarRightEnterSoundLevel, CellerKickouBallDroptSoundLevel


BallWithBallCollisionSoundFactor = 3.2
BallBouncePlayfieldSoftFactor = 0.0015
BallBouncePlayfieldHardFactor = 0.0075
WallImpactSoundFactor = 0.075
MetalImpactSoundFactor = 0.075
RubberStrongSoundFactor = 0.045
RubberWeakSoundFactor = 0.055
RubberFlipperSoundFactor = 0.65
BottomArchBallGuideSoundFactor = 0.2
FlipperBallGuideSoundFactor = 0.015
WireformAntiRebountRailSoundFactor = 0.04
OutlaneWallsSoundFactor = 1
EjectBallBumpSoundLevel = 1
RightRampMetalWireDropToPlayfieldSoundLevel = 1
LeftPlasticRampDropToLockSoundLevel = 1
LeftPlasticRampDropToPlayfieldSoundLevel = 1
EjectHoleEnterSoundLevel = 0.75
HeadSaucerSoundLevel = 0.15
CellerKickouBallDroptSoundLevel = 1
CellarLeftEnterSoundLevel = 0.85
CellarRightEnterSoundLevel = 0.85


'///////////////////////  OTHER PLAYFIELD ELEMENTS CONFIG  //////////////////////
Dim RollingSoundFactor, RollingOnDiscSoundFactor, BallReleaseShooterLaneSoundLevel
Dim LeftPlasticRampEnteranceSoundLevel, RightPlasticRampEnteranceSoundLevel
Dim LeftPlasticRampRollSoundFactor, RightPlasticRampRollSoundFactor
Dim LeftMetalWireRampRollSoundFactor, RightPlasticRampHitsSoundLevel, LeftPlasticRampHitsSoundLevel
Dim SpinningDiscRolloverSoundFactor, SpinningDiscRolloverBumpSoundLevel
Dim LaneSoundFactor, LaneEnterSoundFactor, InnerLaneSoundFactor
Dim LaneLoudImpactMinimumSoundLevel, LaneLoudImpactMaximumSoundLevel

RollingSoundFactor = 50
RollingOnDiscSoundFactor = 1.5
BallReleaseShooterLaneSoundLevel = 1
LeftPlasticRampEnteranceSoundLevel = 0.1
RightPlasticRampEnteranceSoundLevel = 0.1
LeftPlasticRampRollSoundFactor = 0.2
RightPlasticRampRollSoundFactor = 0.2
LeftMetalWireRampRollSoundFactor = 1
RightPlasticRampHitsSoundLevel = 1
LeftPlasticRampHitsSoundLevel = 1
SpinningDiscRolloverSoundFactor = 0.05
SpinningDiscRolloverBumpSoundLevel = 0.3
LaneEnterSoundFactor = 0.9
InnerLaneSoundFactor = 0.0005
LaneSoundFactor = 0.0004
LaneLoudImpactMinimumSoundLevel = 0
LaneLoudImpactMaximumSoundLevel = 0.4


'///////////////////////////  CABINET SOUND PARAMETERS  /////////////////////////
Dim NudgeLeftSoundLevel, NudgeRightSoundLevel, NudgeCenterSoundLevel, StartButtonSoundLevel
Dim PlungerReleaseSoundLevel, PlungerPullSoundLevel, CoinSoundLevel

NudgeLeftSoundLevel = 1
NudgeRightSoundLevel = 1
NudgeCenterSoundLevel = 1
StartButtonSoundLevel = 0.1
PlungerReleaseSoundLevel = 1
PlungerPullSoundLevel = 1
CoinSoundLevel = 1


'///////////////////////////  MISC SOUND PARAMETERS  ////////////////////////////
Dim LutToggleSoundLevel : 
LutToggleSoundLevel = 0.5


'////////////////////////////////  SOUND HELPERS  ///////////////////////////////
Dim SoundOn : SoundOn = 1
Dim SoundOff : SoundOff = 0
Dim Up : Up = 0
Dim Down : Down = 1
Dim RampUp : RampUp = 1
Dim RampDown : RampDown = 0
Dim RampDownSlow : RampDownSlow = 1
Dim RampDownFast : RampDownFast = 2
Dim CircuitA : CircuitA = 0
Dim CircuitC : CircuitC = 1

'//  Helper for Main (Lower) flippers dampened stroke
Dim BallNearLF : BallNearLF = 0
Dim BallNearRF : BallNearRF = 0

Sub TriggerBallNearLF_Hit()
	'Debug.Print "BallNearLF = 1"
	BallNearLF = 1
End Sub

Sub TriggerBallNearLF_UnHit()
	'Debug.Print "BallNearLF = 0"
	BallNearLF = 0
End Sub

Sub TriggerBallNearRF_Hit()
	'Debug.Print "BallNearRF = 1"
	BallNearRF = 1
End Sub

Sub TriggerBallNearRF_UnHit()
	'Debug.Print "BallNearLF = 0"
	BallNearRF = 0
End Sub


'///////////////////////  SOUND PLAYBACK SUBS / FUNCTIONS  //////////////////////
'//////////////////////  POSITIONAL SOUND PLAYBACK METHODS  /////////////////////
'//  Positional sound playback methods will play a sound, depending on the X,Y position of the table element or depending on ActiveBall object position
'//  These are similar subroutines that are less complicated to use (e.g. simply use standard parameters for the PlaySound call)
'//  For surround setup - positional sound playback functions will fade between front and rear surround channels and pan between left and right channels
'//  For stereo setup - positional sound playback functions will only pan between left and right channels
'//  For mono setup - positional sound playback functions will not pan between left and right channels and will not fade between front and rear channels
'//  
'//  PlaySound full syntax - PlaySound(string, int loopcount, float volume, float pan, float randompitch, int pitch, bool useexisting, bool restart, float front_rear_fade)
'//  Note - These functions will not work (currently) for walls/slingshots as these do not feature a simple, single X,Y position

Sub PlaySoundAtLevelStatic(playsoundparams, aVol, tableobj)
    PlaySound playsoundparams, 0, min(1,aVol) * MechVolume, AudioPan(tableobj), 0, 0, 0, 0, AudioFade(tableobj)
End Sub

Sub PlaySoundAtLevelExistingStatic(playsoundparams, aVol, tableobj)
    PlaySound playsoundparams, 0, min(1,aVol) * MechVolume, AudioPan(tableobj), 0, 0, 1, 0, AudioFade(tableobj)
End Sub

Sub PlaySoundAtLevelStaticLoop(playsoundparams, aVol, tableobj)
    PlaySound playsoundparams, -1, min(1,aVol) * MechVolume, AudioPan(tableobj), 0, 0, 0, 0, AudioFade(tableobj)
End Sub

Sub PlaySoundAtLevelExistingStaticLoop(playsoundparams, aVol, tableobj)
    PlaySound playsoundparams, -1, min(1,aVol) * MechVolume, AudioPan(tableobj), 0, 0, 1, 0, AudioFade(tableobj)
End Sub

Sub PlaySoundAtLevelStaticRandomPitch(playsoundparams, aVol, randomPitch, tableobj)
    PlaySound playsoundparams, 0, min(1,aVol) * MechVolume, AudioPan(tableobj), randomPitch, 0, 0, 0, AudioFade(tableobj)
End Sub

Sub PlaySoundAtLevelActiveBall(playsoundparams, aVol)
	PlaySound playsoundparams, 0, min(1,aVol) * MechVolume, AudioPan(ActiveBall), 0, 0, 0, 0, AudioFade(ActiveBall)
End Sub

Sub PlaySoundAtLevelExistingActiveBall(playsoundparams, aVol)
	PlaySound playsoundparams, 0, min(1,aVol) * MechVolume, AudioPan(ActiveBall), 0, 0, 1, 0, AudioFade(ActiveBall)
End Sub

Sub PlaySoundAtLeveTimerActiveBall(playsoundparams, aVol, ballvariable)
	PlaySound playsoundparams, 0, min(1,aVol) * MechVolume, AudioPan(ballvariable), 0, 0, 0, 0, AudioFade(ballvariable)
End Sub

Sub PlaySoundAtLevelTimerExistingActiveBall(playsoundparams, aVol, ballvariable)
	PlaySound playsoundparams, 0, min(1,aVol) * MechVolume, AudioPan(ballvariable), 0, 0, 1, 0, AudioFade(ballvariable)
End Sub

Sub PlaySoundAtLevelRoll(playsoundparams, aVol, pitch)
    PlaySound playsoundparams, -1, min(1,aVol) * MechVolume, AudioPan(tableobj), randomPitch, 0, 0, 0, AudioFade(tableobj)
End Sub


'//////////////////////  SUPPORTING BALL & SOUND FUNCTIONS  /////////////////////
'//  Fades between front and back of the table 
'//  (for surround systems or 2x2 speakers, etc), depending on the Y position 
'//  on the table.
Function AudioFade(tableobj)
	Dim tmp
	Select Case PositionalSoundPlaybackConfiguration
		Case 1
			AudioFade = 0
		Case 2
			AudioFade = 0
		Case 3
			tmp = tableobj.y * 2 / tableheight-1
			If tmp > 0 Then
				AudioFade = Csng(tmp ^10)
			Else
				AudioFade = Csng(-((- tmp) ^10) )
			End If
	End Select
End Function

'//  Calculates the pan for a tableobj based on the X position on the table.
Function AudioPan(tableobj)
	Dim tmp
	Select Case PositionalSoundPlaybackConfiguration
		Case 1
			AudioPan = 0
		Case 2
			tmp = tableobj.x * 2 / tablewidth-1
			If tmp > 0 Then
				AudioPan = Csng(tmp ^10)
			Else
				AudioPan = Csng(-((- tmp) ^10) )
			End If
		Case 3
			tmp = tableobj.x * 2 / tablewidth-1

			If tmp > 0 Then
				AudioPan = Csng(tmp ^10)
			Else
				AudioPan = Csng(-((- tmp) ^10) )
			End If
	End Select
End Function

'//  Calculates the volume of the sound based on the ball speed
Function Vol(ball)
	Vol = Csng(BallVel(ball) ^2)
End Function

'//  Calculates the pitch of the sound based on the ball speed
Function Pitch(ball)
    Pitch = BallVel(ball) * 20
End Function

'//  Calculates the ball speed
Function BallVel(ball)
    BallVel = INT(SQR((ball.VelX ^2) + (ball.VelY ^2) ) )
End Function

'//  Calculates the roll volume of the sound based on the ball speed
Dim TempBallVel
Function VolPlayfieldRoll(ball) ' Calculates the roll volume of the sound based on the ball speed
	TempBallVel = Csng((INT(SQR((ball.VelX^2)+(ball.VelY^2))))/RollingSoundFactor)
	If TempBallVel = 1 Then TempBallVel = 0.999
	If TempBallVel = 0 Then TempBallVel = 0.001
	'debug.print TempBallVel
	TempBallVel = Csng(1/(1+(0.275*(((0.75*TempBallVel)/(1-TempBallVel))^(-2)))))
	VolPlayfieldRoll = TempBallVel
End Function

'//  Calculates the roll volume of the sound based on the ball speed
Function VolSpinningDiscRoll(ball)
	VolSpinningDiscRoll = RollingOnDiscSoundFactor * 0.1 * Csng(BallVel(ball) ^3)
End Function

'//  Calculates the roll volume of the sound based on the ball speed
Dim TempBallVelPlastic
Function VolPlasticMetalRampRoll(ball)
	'VolPlasticMetalRampRoll = RollingOnDiscSoundFactor * 0.0005 * Csng(BallVel(ball) ^3)
	TempBallVelPlastic = Csng((INT(SQR((ball.VelX^2)+(ball.VelY^2))))/RollingSoundFactor)
	If TempBallVelPlastic = 1 Then TempBallVelPlastic = 0.999
	If TempBallVelPlastic = 0 Then TempBallVelPlastic = 0.001
	'debug.print TempBallVel
	TempBallVelPlastic = Csng(1/(1+(0.275*(((0.75*TempBallVelPlastic)/(1-TempBallVelPlastic))^(-2)))))
	VolPlasticMetalRampRoll = TempBallVelPlastic



End Function

'//  Calculates the roll pitch of the sound based on the ball speed
Dim TempPitchBallVel
Function PitchPlayfieldRoll(ball) ' Calculates the roll pitch of the sound based on the ball speed
	'PitchPlayfieldRoll = BallVel(ball) ^2 * 15
	'PitchPlayfieldRoll = Csng(BallVel(ball))/50 * 10000
	'PitchPlayfieldRoll = (1-((Csng(BallVel(ball))/50)^0.2)) * 20000

	'PitchPlayfieldRoll = (2*((Csng(BallVel(ball)))^0.7))/(2+(Csng(BallVel(ball)))) * 16000
	TempPitchBallVel = Csng((INT(SQR((ball.VelX^2)+(ball.VelY^2))))/50)
	If TempPitchBallVel = 1 Then TempPitchBallVel = 0.999
	If TempPitchBallVel = 0 Then TempPitchBallVel = 0.001
	TempPitchBallVel = Csng(1/(1+(0.275*(((0.75*TempPitchBallVel)/(1-TempPitchBallVel))^(-2))))) * 10000
	PitchPlayfieldRoll = TempPitchBallVel
End Function

'//  Calculates the pitch of the sound based on the ball speed.
'//  Used for plastic ramps roll sound
Function PitchPlasticRamp(ball)
    PitchPlasticRamp = BallVel(ball) * 20
End Function

'//  Determines if a Points (px,py) is inside a 4 point polygon A-D
'//  in Clockwise/CCW order
'Function InRect(px,py,ax,ay,bx,by,cx,cy,dx,dy)
'	Dim AB, BC, CD, DA
'	AB = (bx*py) - (by*px) - (ax*py) + (ay*px) + (ax*by) - (ay*bx)
'	BC = (cx*py) - (cy*px) - (bx*py) + (by*px) + (bx*cy) - (by*cx)
'	CD = (dx*py) - (dy*px) - (cx*py) + (cy*px) + (cx*dy) - (cy*dx)
'	DA = (ax*py) - (ay*px) - (dx*py) + (dy*px) + (dx*ay) - (dy*ax)
' 
'	If (AB <= 0 AND BC <=0 AND CD <= 0 AND DA <= 0) Or (AB >= 0 AND BC >=0 AND CD >= 0 AND DA >= 0) Then
'		InRect = True
'	Else
'		InRect = False       
'	End If
'End Function

'//  Determines if a point (px,py) in inside a circle with a center of 
'//  (cx,cy) coordinates and circleradius
Function InCircle(px,py,cx,cy,circleradius)
	Dim distance
	distance = SQR(((px-cx)^2) + ((py-cy)^2))
	
	If (distance < circleradius) Then
		InCircle = True
	Else
		InCircle = False
	End If
End Function

'///////////////////////////  PLAY SOUNDS SUBROUTINES  //////////////////////////
'//  
'//  These Subroutines implement all mechanical playsounds including timers
'//  
'//////////////////////////  GENERAL SOUND SUBROUTINES  /////////////////////////
Sub SoundStartButton()
	PlaySoundAtLevelStatic (Cartridge_Cabinet_Sounds & "_Start_Button"), StartButtonSoundLevel, StartButtonPosition
End Sub

Sub SoundPlungerPull()
	PlaySoundAtLevelStatic (Cartridge_Cabinet_Sounds & "_Plunger_Pull_Slow"), PlungerPullSoundLevel, Plunger
End Sub

Sub SoundPlungerPullStop()
	StopSound Cartridge_Cabinet_Sounds & "_Plunger_Pull_Slow"
End Sub

Sub SoundPlungerReleaseBall()
	PlaySoundAtLevelStatic (Cartridge_Cabinet_Sounds & "_Plunger_Release_Ball_" & Int(Rnd*3)+1), PlungerReleaseSoundLevel, Plunger
End Sub

Sub SoundPlungerReleaseNoBall()
	PlaySoundAtLevelStatic (Cartridge_Cabinet_Sounds & "_Plunger_Release_Empty"), PlungerReleaseSoundLevel, Plunger
End Sub

Sub SoundNudgeLeft()
	PlaySound ("Nudge_" & Int(Rnd*3)+1), 0, NudgeLeftSoundLevel * MechVolume, -0.1, 0.25
End Sub

Sub SoundNudgeRight()
	PlaySound ("Nudge_" & Int(Rnd*3)+1), 0, NudgeRightSoundLevel * MechVolume, 0.1, 0.25
End Sub

Sub SoundNudgeCenter()
	PlaySoundAtLevelStatic ("Nudge_" & Int(Rnd*3)+1), NudgeCenterSoundLevel * MechVolume, sw10
End Sub




'///////////////////////  JP'S VP10 BALL COLLISION SOUND  ///////////////////////
Sub OnBallBallCollision(ball1, ball2, velocity)
	if abs(ball1.vely) < 1 And abs(ball2.vely) < 1 And InRect(ball1.x, ball1.y, 360,730,420,730,420,875,360,875) then
		exit sub	'don't rattle the locked balls
	end if
	PlaySound (Cartridge_BallBallCollision & "_BallBall_Collide_" & Int(Rnd*7)+1), 0, Csng(velocity) ^2 / 200 * BallWithBallCollisionSoundFactor * MechVolume, AudioPan(ball1), 0, Pitch(ball1), 0, 0, AudioFade(ball1)
	FlipperCradleCollision ball1, ball2, velocity
End Sub



'///////////////////////////////  CELLAR SOUNDS  ///////////////////////////////
Sub SoundCellarLeftEnter()
 	dim finalspeed
  	finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
	PlaySoundAtLevelStatic (Cartridge_Kickers & "_Scoop_Left_Cellar_Enter_" & Int(Rnd*4)+1), CellarLeftEnterSoundLevel * finalspeed/40, CellarLeftTrigger
End Sub

Sub SoundCellarRightEnter()
 	dim finalspeed
  	finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
	PlaySoundAtLevelStatic (Cartridge_Kickers & "_Scoop_Right_Cellar_Enter_" & Int(Rnd*5)+1), CellarRightEnterSoundLevel * finalspeed/40, CellarRightTrigger
End Sub


Sub SoundCellerKickout()
	PlaySoundAtLevelStatic SoundFX(Cartridge_Kickers & "_Scoop_Kickout_Cellar_" & Int(Rnd*3)+1,DOFContactors), Solenoid_UnderPlayfieldKickbig_SoundLevel, ScoopKickerOverflow
End Sub

Sub SoundCellarKickoutBallDrop()
	PlaySoundAtLevelStatic (Cartridge_Kickers & "_Scoop_BallDrop_After_Kickout_" & Int(Rnd*2)+1), CellerKickouBallDroptSoundLevel, ScoopKickerOverflow
End Sub



'///////////////////////////  GENERAL ROLLOVER SOUNDS  //////////////////////////
'Sub RandomSoundRollover()
'	PlaySoundAtLevelActiveBall (Cartridge_Rollovers & "_Rollover_All_" & Int(Rnd*4)+1), RolloverSoundLevel
'End Sub



'///////////////////////////  OUTLANE ROLLOVER SOUNDS  //////////////////////////
Sub RandomSoundOutlaneRollover()
	PlaySoundAtLevelActiveBall (Cartridge_Rollovers & "_Rollover_Outlane_" & Int(Rnd*4)+1), OutLaneRolloverSoundLevel
End Sub



'////////////////////  BALL GATES AND BRACKET GATES SOUNDS  /////////////////////



Sub SoundBallGate0()
	PlaySoundAtLevelStatic (Cartridge_Gates & "_Bracket_Gate_1"), Switch_Gate_SoundLevel * 0.005, Gate0
End Sub

Sub SoundBallGate1()
	PlaySoundAtLevelStatic (Cartridge_Gates & "_Bracket_Gate_2"), Switch_Gate_SoundLevel * 0.005, Gate1
End Sub

Sub SoundBallGate2()
	PlaySoundAtLevelStatic (Cartridge_Gates & "_Bracket_Gate_2"), Switch_Gate_SoundLevel * 0.005, Gate2
End Sub

Sub SoundBallGate3()	'sound of blocked gate
	PlaySoundAtLevelStatic (Cartridge_Gates & "_Oneway_Ball_Gate_" & Int(Rnd*3)+1), Switch_Gate_SoundLevel, Gate3
End Sub

Sub SoundBallGate4()
	PlaySoundAtLevelStatic (Cartridge_Gates & "_Bracket_Gate_1"), Switch_Gate_SoundLevel * 0.005, Gate4
End Sub

Sub SoundBallGate5(toggle)
	If toggle = SoundOn Then
		PlaySoundAtLevelStatic (Cartridge_Gates & "_Bracket_Gate_2"), Switch_Gate_SoundLevel * 0.005, Gate5
	End If
	If toggle = SoundOff Then
		Stopsound Cartridge_Gates & "_Bracket_Gate_2"
		PlaySoundAtLevelStatic (Cartridge_Gates & "_Oneway_Ball_Gate_" & Int(Rnd*3)+1), Switch_Gate_SoundLevel * 0.005, Gate5
	End If
End Sub

Sub SoundBallGate6()
	PlaySoundAtLevelStatic (Cartridge_Gates & "_Bracket_Gate_1"), Switch_Gate_SoundLevel * 0.005, Gate6
End Sub

Sub SoundBallGate8(toggle)
	If toggle = SoundOn Then
		PlaySoundAtLevelStatic ("TOM_Small_Gate_2"), Switch_Gate_SoundLevel * 0.02, Gate8
	End If
	If toggle = SoundOff Then
		Stopsound "TOM_Small_Gate_2"
		PlaySoundAtLevelStatic ("WS_WHD_REV01_Oneway_Ball_Gate_3"), Switch_Gate_SoundLevel * 0.002, Gate8
	End If
End Sub



Sub SoundBallReleaseGate()
	PlaySoundAtLevelStatic (Cartridge_Gates & "_Oneway_Ball_Gate_" & Int(Rnd*3)+1), Switch_Gate_SoundLevel * 0.5, BallReleaseGate
End Sub



'///////////////////////////  DROP TARGET HIT SOUNDS  ///////////////////////////
Sub SoundDropTargetDrop(sw)
	PlaySoundAtLevelStatic (Cartridge_Targets & "_Drop_Target_1Bank_Release_Down_" & Int(Rnd*2)+1), Vol(ActiveBall) * TargetSoundFactor, sw
End Sub

Sub SoundDropTargetsw27()
	PlaySoundAtLevelStatic (Cartridge_Targets & "_Drop_Target_3Bank_Release_Down_" & Int(Rnd*6)+1), Vol(ActiveBall) * TargetSoundFactor, sw27
End Sub

Sub SoundDropTargetsw28()
	PlaySoundAtLevelStatic (Cartridge_Targets & "_Drop_Target_3Bank_Release_Down_" & Int(Rnd*6)+1), Vol(ActiveBall) * TargetSoundFactor, sw28
End Sub

Sub SoundDropTargetsw29()
	PlaySoundAtLevelStatic (Cartridge_Targets & "_Drop_Target_3Bank_Release_Down_" & Int(Rnd*6)+1), Vol(ActiveBall) * TargetSoundFactor, sw29
End Sub



'/////////////////////  DROP TARGET RESET SOLENOID SOUNDS  //////////////////////
Sub RandomSoundDropTargetReset(obj)
	PlaySoundAtLevelStatic SoundFX("Drop_Target_Reset_" & Int(Rnd*6)+1,DOFContactors), 1, obj
End Sub

'///////////////////////////////////  SPINNER  //////////////////////////////////
Sub SoundSpinner()
	PlaySoundAtLevelStatic (Cartridge_Spinner & "_Spinner_Spin_Loop"), SpinnerSoundLevel, sw41
End Sub


'//////////////////////////  STADNING TARGET HIT SOUNDS  ////////////////////////
Sub RandomSoundTargetHitStrong()
	Select Case Int(Rnd*4)+1
		Case 1 : PlaySoundAtLevelActiveBall SoundFX(Cartridge_Targets & "_Target_Hit_5",DOFTargets), Vol(ActiveBall) * TargetSoundFactor
		Case 2 : PlaySoundAtLevelActiveBall SoundFX(Cartridge_Targets & "_Target_Hit_6",DOFTargets), Vol(ActiveBall) * TargetSoundFactor
		Case 3 : PlaySoundAtLevelActiveBall SoundFX(Cartridge_Targets & "_Target_Hit_7",DOFTargets), Vol(ActiveBall) * TargetSoundFactor
		Case 4 : PlaySoundAtLevelActiveBall SoundFX(Cartridge_Targets & "_Target_Hit_8",DOFTargets), Vol(ActiveBall) * TargetSoundFactor		
	End Select
End Sub

Sub RandomSoundTargetHitWeak()
	Select Case Int(Rnd*4)+1		
		Case 1 : PlaySoundAtLevelActiveBall SoundFX(Cartridge_Targets & "_Target_Hit_1",DOFTargets), Vol(ActiveBall) * TargetSoundFactor
		Case 2 : PlaySoundAtLevelActiveBall SoundFX(Cartridge_Targets & "_Target_Hit_2",DOFTargets), Vol(ActiveBall) * TargetSoundFactor
		Case 3 : PlaySoundAtLevelActiveBall SoundFX(Cartridge_Targets & "_Target_Hit_3",DOFTargets), Vol(ActiveBall) * TargetSoundFactor
		Case 4 : PlaySoundAtLevelActiveBall SoundFX(Cartridge_Targets & "_Target_Hit_4",DOFTargets), Vol(ActiveBall) * TargetSoundFactor
	End Select
End Sub



'/////////////////////////////  BALL BOUNCE SOUNDS  /////////////////////////////
Sub RandomSoundBallBouncePlayfieldSoft(aBall)
	Select Case Int(Rnd*7)+1
		Case 1 : PlaySoundAtLevelStatic (Cartridge_Ball_Drop_Bump & "_Ball_Rebound_2"), Vol(aBall) * BallBouncePlayfieldSoftFactor, aBall
		Case 2 : PlaySoundAtLevelStatic (Cartridge_Ball_Drop_Bump & "_Ball_Rebound_12"), Vol(aBall) * BallBouncePlayfieldSoftFactor, aBall
		Case 3 : PlaySoundAtLevelStatic (Cartridge_Ball_Drop_Bump & "_Ball_Rebound_14"), Vol(aBall) * BallBouncePlayfieldSoftFactor, aBall
		Case 4 : PlaySoundAtLevelStatic (Cartridge_Ball_Drop_Bump & "_Ball_Rebound_18"), Vol(aBall) * BallBouncePlayfieldSoftFactor, aBall
		Case 5 : PlaySoundAtLevelStatic (Cartridge_Ball_Drop_Bump & "_Ball_Rebound_19"), Vol(aBall) * BallBouncePlayfieldSoftFactor, aBall
		Case 6 : PlaySoundAtLevelStatic (Cartridge_Ball_Drop_Bump & "_Ball_Rebound_20"), Vol(aBall) * BallBouncePlayfieldSoftFactor, aBall
		Case 7 : PlaySoundAtLevelStatic (Cartridge_Ball_Drop_Bump & "_Ball_Rebound_21"), Vol(aBall) * BallBouncePlayfieldSoftFactor, aBall
	End Select
End Sub

Sub RandomSoundBallBouncePlayfieldHard(aBall)
	Select Case Int(Rnd*12)+1
		Case 1 : PlaySoundAtLevelStatic (Cartridge_Ball_Drop_Bump & "_Ball_Rebound_1"), Vol(aBall) * BallBouncePlayfieldHardFactor, aBall
		Case 2 : PlaySoundAtLevelStatic (Cartridge_Ball_Drop_Bump & "_Ball_Rebound_3"), Vol(aBall) * BallBouncePlayfieldHardFactor, aBall
		Case 3 : PlaySoundAtLevelStatic (Cartridge_Ball_Drop_Bump & "_Ball_Rebound_7"), Vol(aBall) * BallBouncePlayfieldHardFactor, aBall
		Case 4 : PlaySoundAtLevelStatic (Cartridge_Ball_Drop_Bump & "_Ball_Rebound_8"), Vol(aBall) * BallBouncePlayfieldHardFactor, aBall
		Case 5 : PlaySoundAtLevelStatic (Cartridge_Ball_Drop_Bump & "_Ball_Rebound_9"), Vol(aBall) * BallBouncePlayfieldHardFactor, aBall
		Case 6 : PlaySoundAtLevelStatic (Cartridge_Ball_Drop_Bump & "_Ball_Rebound_11"), Vol(aBall) * BallBouncePlayfieldHardFactor, aBall
		Case 7 : PlaySoundAtLevelStatic (Cartridge_Ball_Drop_Bump & "_Ball_Rebound_13"), Vol(aBall) * BallBouncePlayfieldHardFactor, aBall
		Case 8 : PlaySoundAtLevelStatic (Cartridge_Ball_Drop_Bump & "_Ball_Rebound_15"), Vol(aBall) * BallBouncePlayfieldHardFactor, aBall
		Case 9 : PlaySoundAtLevelStatic (Cartridge_Ball_Drop_Bump & "_Ball_Rebound_16"), Vol(aBall) * BallBouncePlayfieldHardFactor, aBall
		Case 10 : PlaySoundAtLevelStatic (Cartridge_Ball_Drop_Bump & "_Ball_Rebound_17"), Vol(aBall) * BallBouncePlayfieldHardFactor, aBall
		Case 11 : PlaySoundAtLevelStatic (Cartridge_Ball_Drop_Bump & "_Ball_Rebound_22"), Vol(aBall) * BallBouncePlayfieldHardFactor, aBall
		Case 12 : PlaySoundAtLevelStatic (Cartridge_Ball_Drop_Bump & "_Ball_Rebound_23"), Vol(aBall) * BallBouncePlayfieldHardFactor, aBall
	End Select
End Sub

'/////////////////////  RAMPS BALL DROP TO PLAYFIELD SOUNDS  ////////////////////
'/////////  METAL WIRE - RIGHT RAMP - EXIT HOLE TO PLAYFIELD - SOUNDS  //////////
Sub RandomSoundLeftRampDropToPlayfield()
	PlaySoundAtLevelStatic (Cartridge_Metal_Ramps & "_Ramp_Right_Metal_Wire_Drop_to_Playfield_" & Int(Rnd*2)+1), RightRampMetalWireDropToPlayfieldSoundLevel, RHelper3
End Sub


''//////////////  PLASTIC - LEFT RAMP - EXIT HOLE TO LOCK - SOUND  ///////////////
'Sub RandomSoundRightRampLeftExitDropToLock()
'	PlaySoundAtLevelStatic (Cartridge_Plastic_Ramps & "_Ramp_Right_Plastic_Drop_to_Lock_" & Int(Rnd*4)+1), LeftPlasticRampDropToLockSoundLevel, RHelper2
'End Sub


'////////////  PLASTIC - LEFT RAMP - EXIT HOLE TO PLAYFIELD - SOUND  ////////////
Sub RandomSoundRightRampRightExitDropToPlayfield(prim)
	PlaySoundAtLevelStatic (Cartridge_Plastic_Ramps & "_Ramp_Right_Plastic_Drop_to_Playfield_" & Int(Rnd*2)+1), LeftPlasticRampDropToPlayfieldSoundLevel, prim
End Sub



'////////////////////////////  RAMP ENTRANCE EVENTS  ////////////////////////////
'/////////////////////////  RIGHT RAMP ENTRANCE SOUNDS  /////////////////////////

Sub LRAMPEnter_Hit()
	' Play the right plastic ramp entrance lifter/down sound for each ball
	If BallVel(ActiveBall) > 1 and ActiveBall.VelY > 0 Then
'		debug.print "Ball rolls downwards"
		PlaySoundAtLevelTimerExistingActiveBall (Cartridge_Plastic_Ramps & "_Ramp_Right_Plastic_Ramp_RollBack_" & Int(Rnd*2)+1), RightPlasticRampEnteranceSoundLevel, ActiveBall
	End If
	If BallVel(ActiveBall) > 1 and ActiveBall.VelY < 0 Then
'		debug.print "Ball rolls upwards"
		PlaySoundAtLevelTimerExistingActiveBall (Cartridge_Plastic_Ramps & "_Ramp_Right_Plastic_Ramp_Enter_" & Int(Rnd*4)+1), RightPlasticRampEnteranceSoundLevel, ActiveBall
	End If
End Sub


'//////////////////////////  LEFT RAMP ENTRANCE SOUNDS  /////////////////////////

Sub RRAMPEnter_Hit()
	' Play the left ramp plastic ramp entrance for each ball
	If BallVel(ActiveBall) > 1 and ActiveBall.VelY > 0 Then
'		debug.print "Ball rolls downwards"
		PlaySoundAtLevelTimerExistingActiveBall (Cartridge_Plastic_Ramps & "_Ramp_Left_Plastic_RollBack_" & Int(Rnd*2)+1), LeftPlasticRampEnteranceSoundLevel, ActiveBall	
	End If
	If BallVel(ActiveBall) > 1 and ActiveBall.VelY < 0 Then
'		debug.print "Ball rolls upwards"
		PlaySoundAtLevelTimerExistingActiveBall (Cartridge_Plastic_Ramps & "_Ramp_Left_Plastic_Enter_" & Int(Rnd*4)+1), LeftPlasticRampEnteranceSoundLevel, ActiveBall	
	End If
End Sub


'////////////////////////////  RAMP EXIT EVENTS  ////////////////////////////
Sub RandomSoundRampStop(obj)
	Select Case Int(rnd*3)
		Case 0: PlaySoundAtVol "wireramp_stop", obj, 0.2*MechVolume:PlaySoundAtLevelActiveBall ("Rubber_Strong_1"), Vol(ActiveBall) * RubberStrongSoundFactor * 0.6
		Case 1: PlaySoundAtVol "wireramp_stop2", obj, 0.2*MechVolume:PlaySoundAtLevelActiveBall ("Rubber_Strong_2"), Vol(ActiveBall) * RubberStrongSoundFactor * 0.6
		Case 2: PlaySoundAtVol "wireramp_stop3", obj, 0.2*MechVolume:PlaySoundAtLevelActiveBall ("Rubber_1_Hard"), Vol(ActiveBall) * RubberStrongSoundFactor * 0.6
	End Select
End Sub

'////////////////////////////////////  DRAIN  ///////////////////////////////////
'///////////////////////////////  OUTHOLE SOUNDS  ///////////////////////////////
Sub RandomSoundOutholeHit(sw)
	PlaySoundAtLevelStatic (Cartridge_Trough & "_Outhole_Drain_Hit_" & Int(Rnd*4)+1), Solenoid_OutholeKicker_SoundLevel, sw
End Sub

Sub RandomSoundOutholeKicker()
	PlaySoundAtLevelStatic SoundFX(Cartridge_Trough & "_Outhole_Kicker_" & Int(Rnd*4)+1,DOFContactors), Solenoid_OutholeKicker_SoundLevel, sw10
End Sub

'/////////////////////  BALL SHOOTER FEEDER SOLENOID SOUNDS  ////////////////////
Sub RandomSoundShooterFeeder()
	PlaySoundAtLevelStatic SoundFX(Cartridge_Trough & "_Shooter_Feeder_" & Int(Rnd*6)+1,DOFContactors), Solenoid_ShooterFeeder_SoundLevel, ballrelease
End Sub


'///////  SHOOTER LANE - BALL RELEASE ROLL IN SHOOTER LANE SOUND - SOUND  ///////
Sub SoundBallReleaseShooterLane(toggle)
	Select Case toggle
		Case SoundOn
			PlaySoundAtLevelActiveBall (Cartridge_Table_Specifics & "_Ball_Launch_from_Shooter_Lane"), BallReleaseShooterLaneSoundLevel
		Case SoundOff
			StopSound Cartridge_Table_Specifics & "_Ball_Launch_from_Shooter_Lane"
	End Select
End Sub

'////////////////////////////  AUTO-PLUNGER SOUNDS  /////////////////////////////
Sub RandomSoundAutoPlunger()
		PlaySoundAtLevelStatic SoundFX("SY_TNA_REV01_Auto_Launch_Coil_" & Int(Rnd*5)+1, DOFContactors), AutoPlungerSoundLevel, TriggerAutoPlunger
End Sub

'//////////////////////////////  KNOCKER SOLENOID  //////////////////////////////
Sub KnockerSolenoid(enabled)
	'PlaySoundAtLevelStatic SoundFX(Cartridge_Knocker & "_Knocker_Coil",DOFKnocker), Solenoid_Knocker_SoundLevel, KnockerPosition
	if Enabled then
		PlaySound SoundFX(Cartridge_Knocker & "_Knocker_Coil",DOFKnocker), 0, Solenoid_Knocker_SoundLevel
	end if
End Sub


'/////////////////////////////  EJECT HOLD SOLENOID  ////////////////////////////
Sub RandomSoundEjectHoleSolenoid(sw)
	PlaySoundAtLevelStatic (Cartridge_Kickers & "_Eject_Kickout_" & Int(Rnd*8)+1), Solenoid_TopEject_SoundLevel, sw
End Sub


'///////////////////////////////  EJECT BALL BUMP  //////////////////////////////
Sub RandomSoundEjectBallBump()
	PlaySoundAtLevelStatic (Cartridge_Ball_Drop_Bump & "_Ball_Rebound_After_Eject_" & Int(Rnd*3)+1), EjectBallBumpSoundLevel, EjectBallPosition
End Sub


'///////////////////////////  EJECT HOLD BALL ENTER  ////////////////////////////
Sub RandomSoundEjectHoleEnter(sw)
	PlaySoundAtLevelStatic (Cartridge_Kickers & "_Eject_Enter_" & Int(Rnd*2)+1), EjectHoleEnterSoundLevel, sw
End Sub


'///////////////////////////  LOCKING KICKER SOLENOID  //////////////////////////
Sub RandomSoundLockingKickerSolenoid()
	PlaySoundAtLevelStatic (Cartridge_Kickers & "_Locking_Kickback_" & Int(Rnd*4)+1), Solenoid_LeftLockingKickback_SoundLevel, LockingPosition
End Sub


'//////////////////////////  SLINGSHOT SOLENOID SOUNDS  /////////////////////////
Sub RandomSoundSlingshotLeft()
	PlaySoundAtLevelStatic SoundFX(Cartridge_Slingshots & "_Slingshot_Left_" & Int(Rnd*26)+1,DOFContactors), Solenoid_Slingshot_SoundLevel, LeftSlingshotPosition
End Sub

Sub RandomSoundSlingshotRight()
	PlaySoundAtLevelStatic SoundFX(Cartridge_Slingshots & "_Slingshot_Right_" & Int(Rnd*25)+1,DOFContactors), Solenoid_Slingshot_SoundLevel, RightSlingshotPosition
End Sub

Sub RandomSoundSlingshotTopRight() 'todo
	PlaySoundAtLevelStatic SoundFX(Cartridge_Slingshots & "_Slingshot_Right_" & Int(Rnd*25)+1,DOFContactors), Solenoid_Slingshot_SoundLevel, SLINGU
End Sub

'///////////////////////////  BUMPER SOLENOID SOUNDS  ///////////////////////////
'////////////////////////////////  BUMPERS - TOP  ///////////////////////////////
Sub RandomSoundBumperLeft(Bump)
'	Debug.Print Vol(ActiveBall) * Solenoid_Bumper_SoundMultiplier
	PlaySoundAtLevelStatic SoundFX(Cartridge_Bumpers & "_Jet_Bumper_Left_" & Int(Rnd*22)+1,DOFContactors), Vol(ActiveBall) * Solenoid_Bumper_SoundMultiplier, Bump
End Sub

Sub RandomSoundBumperUp(Bump)
	'Debug.Print Vol(ActiveBall) * Solenoid_Bumper_SoundMultiplier
	PlaySoundAtLevelStatic SoundFX(Cartridge_Bumpers & "_Jet_Bumper_Up_" & Int(Rnd*25)+1,DOFContactors), Vol(ActiveBall) * Solenoid_Bumper_SoundMultiplier, Bump
End Sub

Sub RandomSoundBumperLow(Bump)
	'Debug.Print Vol(ActiveBall) * Solenoid_Bumper_SoundMultiplier
	PlaySoundAtLevelStatic SoundFX(Cartridge_Bumpers & "_Jet_Bumper_Low_" & Int(Rnd*28)+1,DOFContactors), Vol(ActiveBall) * Solenoid_Bumper_SoundMultiplier, Bump
End Sub



'///////////////////////  FLIPPER BATS SOUND SUBROUTINES  ///////////////////////
'//////////////////////  FLIPPER BATS SOLENOID CORE SOUND  //////////////////////
Sub RandomSoundFlipperLowerLeftUpFullStroke(flipper)
	PlaySoundAtLevelStatic SoundFX(Cartridge_Flippers & "_Flipper_Lower_Left_Up_Full_Stroke_" & RndInt(1,10),DOFFlippers), FlipperLeftLowerHitParm, Flipper
End Sub
'
'Sub RandomSoundFlipperUpperLeftUpFullStroke(flipper)
'	PlaySoundAtLevelStatic SoundFX(Cartridge_Flippers & "_Flipper_Upper_Left_Up_Full_Stroke_" & Int(Rnd*5)+1,DOFFlippers), FlipperLeftUpperHitParm, Flipper
'End Sub

Sub RandomSoundFlipperLowerLeftUpDampenedStroke(flipper)
	PlaySoundAtLevelStatic SoundFX(Cartridge_Flippers & "_Flipper_Lower_Left_Up_Dampened_Stroke_" & RndInt(1,23),DOFFlippers), FlipperLeftLowerHitParm * 1.2, Flipper
End Sub

Sub RandomSoundFlipperLowerRightUpFullStroke(flipper)
	PlaySoundAtLevelStatic SoundFX(Cartridge_Flippers & "_Flipper_Lower_Right_Up_Full_Stroke_" & RndInt(1,11),DOFFlippers), FlipperRightLowerHitParm, Flipper
End Sub

Sub RandomSoundFlipperLowerRightUpDampenedStroke(flipper)
	PlaySoundAtLevelStatic SoundFX(Cartridge_Flippers & "_Flipper_Lower_Right_Up_Dampened_Stroke_" & RndInt(1,23),DOFFlippers), FlipperLeftLowerHitParm * 1.2, Flipper
End Sub

Sub RandomSoundFlipperLowerLeftReflip(flipper)
	PlaySoundAtLevelStatic SoundFX(Cartridge_Flippers & "_Flipper_Lower_Left_Reflip_" & RndInt(1,3),DOFFlippers), (RndNum(0.8, 1))*FlipperUpSoundLevel, Flipper
End Sub

'Sub RandomSoundFlipperUpperLeftReflip(flipper)
'	PlaySoundAtLevelStatic SoundFX(Cartridge_Flippers & "_Flipper_Upper_Left_Reflip",DOFFlippers), (RndNum(0.8, 1))*FlipperUpSoundLevel, Flipper
'End Sub

Sub RandomSoundFlipperLowerRightReflip(flipper)
	PlaySoundAtLevelStatic SoundFX(Cartridge_Flippers & "_Flipper_Lower_Right_Reflip_" & RndInt(1,3),DOFFlippers), (RndNum(0.8, 1))*FlipperUpSoundLevel, Flipper
End Sub

Sub RandomSoundFlipperLowerLeftDown(flipper)
	PlaySoundAtLevelStatic SoundFX(Cartridge_Flippers & "_Flipper_Lower_Left_Down_" & RndInt(1,10),DOFFlippers), FlipperDownSoundLevel, Flipper
End Sub
'
'Sub RandomSoundFlipperUpperLeftDown(flipper)
'	PlaySoundAtLevelStatic SoundFX(Cartridge_Flippers & "_Flipper_Upper_Left_Down_" & Int(Rnd*6)+1,DOFFlippers), FlipperDownSoundLevel, Flipper
'End Sub

Sub RandomSoundFlipperLowerRightDown(flipper)
	PlaySoundAtLevelStatic SoundFX(Cartridge_Flippers & "_Flipper_Lower_Right_Down_" & RndInt(1,11),DOFFlippers), FlipperDownSoundLevel, Flipper
End Sub

Sub RandomSoundLowerLeftQuickFlipUp()
	PlaySoundAtLevelStatic SoundFX(Cartridge_Flippers & "_Flipper_Lower_Left_QuickFlip_Up_" & RndInt(1,3),DOFFlippers), (RndNum(0.8, 1))*FlipperUpSoundLevel, LeftFlipper
End Sub

Sub RandomSoundLowerRightQuickFlipUp()
	PlaySoundAtLevelStatic SoundFX(Cartridge_Flippers & "_Flipper_Lower_Right_QuickFlip_Up_" & RndInt(1,3),DOFFlippers), (RndNum(0.8, 1))*FlipperUpSoundLevel, RightFlipper
End Sub

Sub StopAnyFlipperLowerLeftUp()
	Dim anyFullStrokeSound
	Dim anyDampenedStrokeSound
	For anyFullStrokeSound = 1 to 10
		StopSound(Cartridge_Flippers & "_Flipper_Lower_Left_Up_Full_Stroke_" & anyFullStrokeSound)
	Next
	For anyDampenedStrokeSound = 1 to 23
		StopSound(Cartridge_Flippers & "_Flipper_Lower_Left_Up_Dampened_Stroke_" & anyDampenedStrokeSound)
	Next
End Sub

Sub StopAnyFlipperLowerRightUp()
	Dim anyFullStrokeSound
	Dim anyDampenedStrokeSound
	For anyFullStrokeSound = 1 to 11
		StopSound(Cartridge_Flippers & "_Flipper_Lower_Right_Up_Full_Stroke_" & anyFullStrokeSound)
	Next
	For anyDampenedStrokeSound = 1 to 23
		StopSound(Cartridge_Flippers & "_Flipper_Lower_Right_Up_Dampened_Stroke_" & anyDampenedStrokeSound)
	Next
End Sub

Sub StopAnyFlipperLowerLeftDown()
	Dim anyFullDownSound
	For anyFullDownSound = 1 to 10
		StopSound(Cartridge_Flippers & "_Flipper_Lower_Left_Down_" & anyFullDownSound)
	Next
End Sub

Sub StopAnyFlipperLowerRightDown()
	Dim anyFullDownSound
	For anyFullDownSound = 1 to 10
		StopSound(Cartridge_Flippers & "_Flipper_Lower_Right_Down_" & anyFullDownSound)
	Next
End Sub


Sub FlipperHoldCoilLeft(toggle, flipper)
	Select Case toggle
		Case SoundOn
			PlaySoundAtLevelExistingStaticLoop (Cartridge_Flippers & "_Flipper_Hold_Coil_Low_Frequencies_Loop_Lower_Left"), FlipperHoldSoundLevel, flipper
			PlaySoundAtLevelExistingStaticLoop (Cartridge_Flippers & "_Flipper_Hold_Coil_Med_Frequencies_Loop_Lower_Left"), FlipperHoldSoundLevel, flipper
		Case SoundOff
			StopSound Cartridge_Flippers & "_Flipper_Hold_Coil_Low_Frequencies_Loop_Lower_Left"
			StopSound Cartridge_Flippers & "_Flipper_Hold_Coil_Med_Frequencies_Loop_Lower_Left"
	End Select
End Sub

Sub FlipperHoldCoilRight(toggle, flipper)
	Select Case toggle
		Case SoundOn
			PlaySoundAtLevelExistingStaticLoop (Cartridge_Flippers & "_Flipper_Hold_Coil_Low_Frequencies_Loop_Lower_Right"), FlipperHoldSoundLevel, flipper
			PlaySoundAtLevelExistingStaticLoop (Cartridge_Flippers & "_Flipper_Hold_Coil_Med_Frequencies_Loop_Lower_Right"), FlipperHoldSoundLevel, flipper
		Case SoundOff
			StopSound Cartridge_Flippers & "_Flipper_Hold_Coil_Low_Frequencies_Loop_Lower_Right"
			StopSound Cartridge_Flippers & "_Flipper_Hold_Coil_Med_Frequencies_Loop_Lower_Right"
	End Select
End Sub



'///////////////////////  FLIPPER BATS BALL COLLIDE SOUND  //////////////////////
dim angdamp, veldamp
angdamp = 0.2
veldamp = 0.8

Sub LeftFlipper_Collide(parm)
	CheckLiveCatch Activeball, LeftFlipper, LFCount, parm

	If parm => 22 Then
		' Strong hit safe values boundary
		' Flipper stroke dampened
		FlipperLeftLowerHitParm = FlipperUpSoundLevel * 0.1
	Else
		If parm =< 1 Then 
			' Weak hit safe values boundary
			' Flipper stroke full
			FlipperLeftLowerHitParm = FlipperUpSoundLevel
		Else
			' Fully modulated hit
			FlipperLeftLowerHitParm = FlipperUpSoundLevel * (1-(parm/25))
		End If
	End If

	RandomSoundRubberFlipper(parm)
End Sub

Sub RightFlipper_Collide(parm)
	CheckLiveCatch Activeball, RightFlipper, RFCount, parm

	If parm => 22 Then
		' Strong hit safe values boundary
		' Flipper stroke dampened
		FlipperRightLowerHitParm = FlipperUpSoundLevel * 0.1
	Else
		If parm =< 1 Then 
			' Weak hit safe values boundary
			' Flipper stroke full
			FlipperRightLowerHitParm = FlipperUpSoundLevel
		Else
			' Fully modulated hit
			FlipperRightLowerHitParm = FlipperUpSoundLevel * (1-(parm/25))
		End If
	End If

 	RandomSoundRubberFlipper(parm)
End Sub


Sub RandomSoundRubberFlipper(parm)
	PlaySoundAtLevelActiveBall (Cartridge_Rubber_Hits & "_Rubber_Flipper_Hit_" & Int(Rnd*7)+1), parm / 25 * RubberFlipperSoundFactor
End Sub



'///////////////////////  RAMP DIVERTER SOLENOID - DIVERT  //////////////////////
Sub RandomSoundRampDiverterDivert()
	PlaySoundAtLevelStatic (Cartridge_Diverters & "_Diverter_Divert_" & Int(Rnd*4)+1), Solenoid_Diverter_Enabled_SoundLevel, DiverterPosition
End Sub

'////////////////////////  RAMP DIVERTER SOLENOID - BACK  ///////////////////////
Sub RandomSoundRampDiverterBack()
	PlaySoundAtLevelStatic (Cartridge_Diverters & "_Diverter_Back_" & Int(Rnd*4)+1), Solenoid_Diverter_Disabled_SoundLevel, DiverterPosition
End Sub

'///////////////////////  RAMP DIVERTER SOLENOID - DIVERT  //////////////////////
Sub RandomSoundGateDivert()
	PlaySoundAtLevelStatic (Cartridge_Diverters & "_Diverter_Divert_" & Int(Rnd*4)+1), Solenoid_Diverter_Enabled_SoundLevel * 0.05, Gate5
End Sub

'////////////////////////  RAMP DIVERTER SOLENOID - BACK  ///////////////////////
Sub RandomSoundGateBack()
	PlaySoundAtLevelStatic (Cartridge_Diverters & "_Diverter_Back_" & Int(Rnd*4)+1), Solenoid_Diverter_Disabled_SoundLevel * 0.05, Gate5
End Sub

'////////////////////  RAMP DIVERTER SOLENOID - MAGNET SOUND  ///////////////////
Sub RandomSoundRampDiverterHold(toggle)
	Select Case toggle	
		Case SoundOn
			PlaySoundAtLevelStaticLoop SoundFX(Cartridge_Diverters & "_Diverter_Hold_Loop",DOFShaker), Solenoid_Diverter_Hold_SoundLevel, DiverterPosition
		Case SoundOff
			StopSound Cartridge_Diverters & "_Diverter_Hold_Loop"
	End Select
End Sub



'//////////////////////////  SOLENOID A/C SELECT RELAY  /////////////////////////
Sub Sound_Solenoid_AC(toggle)
	Select Case toggle
		Case CircuitA
			If RelaysPosition = 1 Then PlaySoundAtLevelStatic (Cartridge_Relays & "_Relays_AC_Select_Relay_Side_A"), RelaySolenoidACSelectSoundLevel, GIUpperPosition
			If RelaysPosition = 2 Then PlaySoundAtLevelStatic (Cartridge_Relays & "_Relays_AC_Select_Relay_Side_A"), RelaySolenoidACSelectSoundLevel, ACSelectPosition
		Case CircuitC
			If RelaysPosition = 1 Then PlaySoundAtLevelStatic (Cartridge_Relays & "_Relays_AC_Select_Relay_Side_C"), RelaySolenoidACSelectSoundLevel, GIUpperPosition
			If RelaysPosition = 2 Then PlaySoundAtLevelStatic (Cartridge_Relays & "_Relays_AC_Select_Relay_Side_C"), RelaySolenoidACSelectSoundLevel, ACSelectPosition
	End Select
End Sub


'//////////////////////////  GENERAL ILLUMINATION RELAYS  ///////////////////////
Sub Sound_LowerGI_Relay(toggle)
	Select Case toggle
		Case SoundOn
			If RelaysPosition = 1 Then PlaySoundAtLevelStatic (Cartridge_Relays & "_Relays_Lower_Playfield_and_Backbox_GI_Relay_On"), RelayLowerGISoundLevel, GIUpperPosition
			If RelaysPosition = 2 Then PlaySoundAtLevelStatic (Cartridge_Relays & "_Relays_Lower_Playfield_and_Backbox_GI_Relay_On"), RelayLowerGISoundLevel, GIUpperPosition
		Case SoundOff
			If RelaysPosition = 1 Then PlaySoundAtLevelStatic (Cartridge_Relays & "_Relays_Lower_Playfield_and_Backbox_GI_Relay_Off"), RelayLowerGISoundLevel, GIUpperPosition
			If RelaysPosition = 2 Then PlaySoundAtLevelStatic (Cartridge_Relays & "_Relays_Lower_Playfield_and_Backbox_GI_Relay_Off"), RelayLowerGISoundLevel, GIUpperPosition
	End Select
End Sub

Sub Sound_UpperGI_Relay(toggle)
	Select Case toggle
		Case SoundOn
			If RelaysPosition = 1 Then PlaySoundAtLevelStatic (Cartridge_Relays & "_Relays_Upper_Playfield_GI_Relay_On"), RelayUpperGISoundLevel, GIUpperPosition
			If RelaysPosition = 2 Then PlaySoundAtLevelStatic (Cartridge_Relays & "_Relays_Upper_Playfield_GI_Relay_On"), RelayUpperGISoundLevel, GILowerPosition
		Case SoundOff
			If RelaysPosition = 1 Then PlaySoundAtLevelStatic (Cartridge_Relays & "_Relays_Upper_Playfield_GI_Relay_Off"), RelayUpperGISoundLevel, GIUpperPosition
			If RelaysPosition = 2 Then PlaySoundAtLevelStatic (Cartridge_Relays & "_Relays_Upper_Playfield_GI_Relay_Off"), RelayUpperGISoundLevel, GILowerPosition
	End Select
End Sub


'///////////////////////////////  FLASHERS RELAY  ///////////////////////////////
Sub Sound_Flasher_Relay(toggle, tableobj)
	Select Case toggle
		Case SoundOn
			If RelaysPosition = 1 Then PlaySoundAtLevelStatic (Cartridge_Relays & "_Relays_Flashers_Relay_On"), RelayFlasherSoundLevel, GIUpperPosition
			If RelaysPosition = 2 Then PlaySoundAtLevelStatic (Cartridge_Relays & "_Relays_Flashers_Relay_On"), RelayFlasherSoundLevel, tableobj
		Case SoundOff
			If RelaysPosition = 1 Then PlaySoundAtLevelStatic (Cartridge_Relays & "_Relays_Flashers_Relay_Off"), RelayFlasherSoundLevel, GIUpperPosition
			If RelaysPosition = 2 Then PlaySoundAtLevelStatic (Cartridge_Relays & "_Relays_Flashers_Relay_Off"), RelayFlasherSoundLevel, tableobj
	End Select
End Sub



'////////////////////  VARIOUS PLAYFIELD SOUND SUBROUTINES  /////////////////////
'/////////////////////////////  RUBBERS AND POSTS  //////////////////////////////
'/////////////////////////////  RUBBERS - EVENTS  ///////////////////////////////
Sub Rubbers_Hit(idx)
 	dim finalspeed
  	finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
 	If finalspeed > 10 then
 		RandomSoundRubberStrong() 
	End if
	If finalspeed <= 10 then
 		RandomSoundRubberWeak()
 	End If	
End Sub


'/////////////////////  RUBBERS AND POSTS - STRONG IMPACTS  /////////////////////
Sub RandomSoundRubberStrong()
	Select Case Int(Rnd*10)+1
		Case 1 : PlaySoundAtLevelActiveBall (Cartridge_Rubber_Hits & "_Rubber_Hit_Strong_1"), Vol(ActiveBall) * RubberStrongSoundFactor
		Case 2 : PlaySoundAtLevelActiveBall (Cartridge_Rubber_Hits & "_Rubber_Hit_Strong_2"), Vol(ActiveBall) * RubberStrongSoundFactor
		Case 3 : PlaySoundAtLevelActiveBall (Cartridge_Rubber_Hits & "_Rubber_Hit_Strong_3"), Vol(ActiveBall) * RubberStrongSoundFactor
		Case 4 : PlaySoundAtLevelActiveBall (Cartridge_Rubber_Hits & "_Rubber_Hit_Strong_4"), Vol(ActiveBall) * RubberStrongSoundFactor
		Case 5 : PlaySoundAtLevelActiveBall (Cartridge_Rubber_Hits & "_Rubber_Hit_Strong_5"), Vol(ActiveBall) * RubberStrongSoundFactor
		Case 6 : PlaySoundAtLevelActiveBall (Cartridge_Rubber_Hits & "_Rubber_Hit_Strong_6"), Vol(ActiveBall) * RubberStrongSoundFactor
		Case 7 : PlaySoundAtLevelActiveBall (Cartridge_Rubber_Hits & "_Rubber_Hit_Strong_7"), Vol(ActiveBall) * RubberStrongSoundFactor
		Case 8 : PlaySoundAtLevelActiveBall (Cartridge_Rubber_Hits & "_Rubber_Hit_Strong_8"), Vol(ActiveBall) * RubberStrongSoundFactor
		Case 9 : PlaySoundAtLevelActiveBall (Cartridge_Rubber_Hits & "_Rubber_Hit_Strong_9"), Vol(ActiveBall) * RubberStrongSoundFactor
		Case 10 : PlaySoundAtLevelActiveBall (Cartridge_Rubber_Hits & "_Rubber_Hit_Strong_10"), Vol(ActiveBall) * RubberStrongSoundFactor * 0.6
	End Select
End Sub


'///////////////////////  RUBBERS AND POSTS - WEAK IMPACTS  /////////////////////
Sub RandomSoundRubberWeak()
	PlaySoundAtLevelActiveBall (Cartridge_Rubber_Hits & "_Rubber_Hit_" & Int(Rnd*8)+1), Vol(ActiveBall) * RubberWeakSoundFactor
End Sub


'///////////////////////////////  WALL IMPACTS  /////////////////////////////////
Sub RandomSoundWall()
 	dim finalspeed
  	finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
 	If finalspeed > 16 then 
		Select Case Int(Rnd*5)+1
			Case 1 : PlaySoundAtLevelExistingActiveBall (Cartridge_Metal_Hits & "_Metal_Alternative_Hit_1"), Vol(ActiveBall) * WallImpactSoundFactor
			Case 2 : PlaySoundAtLevelExistingActiveBall (Cartridge_Metal_Hits & "_Metal_Alternative_Hit_2"), Vol(ActiveBall) * WallImpactSoundFactor
			Case 3 : PlaySoundAtLevelExistingActiveBall (Cartridge_Metal_Hits & "_Metal_Alternative_Hit_5"), Vol(ActiveBall) * WallImpactSoundFactor * 0.05
			Case 4 : PlaySoundAtLevelExistingActiveBall (Cartridge_Metal_Hits & "_Metal_Alternative_Hit_7"), Vol(ActiveBall) * WallImpactSoundFactor
			Case 5 : PlaySoundAtLevelExistingActiveBall (Cartridge_Metal_Hits & "_Metal_Alternative_Hit_9"), Vol(ActiveBall) * WallImpactSoundFactor
		End Select
	End if
	If finalspeed >= 6 AND finalspeed <= 16 then
		Select Case Int(Rnd*4)+1
			Case 1 : PlaySoundAtLevelExistingActiveBall (Cartridge_Metal_Hits & "_Metal_Alternative_Hit_3"), Vol(ActiveBall) * WallImpactSoundFactor
			Case 2 : PlaySoundAtLevelExistingActiveBall (Cartridge_Metal_Hits & "_Metal_Alternative_Hit_4"), Vol(ActiveBall) * WallImpactSoundFactor
			Case 3 : PlaySoundAtLevelExistingActiveBall (Cartridge_Metal_Hits & "_Metal_Alternative_Hit_6"), Vol(ActiveBall) * WallImpactSoundFactor
			Case 4 : PlaySoundAtLevelExistingActiveBall (Cartridge_Metal_Hits & "_Metal_Alternative_Hit_8"), Vol(ActiveBall) * WallImpactSoundFactor
		End Select
 	End If
	If finalspeed < 6 Then
		Select Case Int(Rnd*3)+1
			Case 1 : PlaySoundAtLevelExistingActiveBall (Cartridge_Metal_Hits & "_Metal_Alternative_Hit_4"), Vol(ActiveBall) * WallImpactSoundFactor
			Case 2 : PlaySoundAtLevelExistingActiveBall (Cartridge_Metal_Hits & "_Metal_Alternative_Hit_6"), Vol(ActiveBall) * WallImpactSoundFactor
			Case 3 : PlaySoundAtLevelExistingActiveBall (Cartridge_Metal_Hits & "_Metal_Alternative_Hit_8"), Vol(ActiveBall) * WallImpactSoundFactor
		End Select
	End if
End Sub


'/////////////////////////////  WALL IMPACTS EVENTS  ////////////////////////////


Sub Wall46_Hit()
	RandomSoundMetal()
End Sub

sub HitsMetal_Hit(IDX)
'	debug.print "metal hit"
	RandomSoundMetal()
end sub


'RandomSoundBottomArchBallGuideSoftHit - Soft Bounces
Sub Wall78_Hit() : RandomSoundBottomArchBallGuideSoftHit() : End Sub
Sub Wall26_Hit() : RandomSoundBottomArchBallGuideSoftHit() : End Sub

'RandomSoundBottomArchBallGuideHardHit - Hard Hit
Sub Wall062_Hit() : RandomSoundBottomArchBallGuideHardHit() : End Sub
Sub Wall063_Hit() : RandomSoundBottomArchBallGuideHardHit() : End Sub

'RandomSoundFlipperBallGuide
Sub Wall49_Hit() : RandomSoundFlipperBallGuide() : End Sub
Sub Wall48_Hit() : RandomSoundFlipperBallGuide() : End Sub

'Outlane - Walls & Primitives
Sub Wall70_Hit() : RandomSoundOutlaneWalls() : End Sub
Sub Wall5_Hit() : RandomSoundOutlaneWalls() : End Sub
Sub Wall73_Hit() : RandomSoundOutlaneWalls() : End Sub
Sub Wall24_Hit() : RandomSoundOutlaneWalls() : End Sub


'////////////////////////////  INNER LEFT LANE WALLS  ///////////////////////////
Sub Wall226_Hit()
	PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_InnerLane_Left_Wall_" & Int(Rnd*3)+1), Vol(ActiveBall) * MetalImpactSoundFactor
End Sub

Sub Wall225_Hit()
	PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_InnerLane_Left_Wall_" & Int(Rnd*3)+1), Vol(ActiveBall) * MetalImpactSoundFactor
End Sub


'right arch
Sub Wall141_Hit()
	PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_InnerLane_Left_Wall_" & Int(Rnd*3)+1), Vol(ActiveBall) * MetalImpactSoundFactor
End Sub

Sub Wall132_Hit()
	PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_InnerLane_Left_Wall_" & Int(Rnd*3)+1), Vol(ActiveBall) * MetalImpactSoundFactor
End Sub

'right arch wire
'Sub Wall254_Hit()
'	PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_InnerLane_Left_Wall_" & Int(Rnd*3)+1), Vol(ActiveBall) * MetalImpactSoundFactor
'End Sub

Sub Wall224_Hit()
	PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_InnerLane_Left_Wall_" & Int(Rnd*3)+1), Vol(ActiveBall) * MetalImpactSoundFactor
End Sub


'/////////////////////////////  METAL TOUCH SOUNDS  /////////////////////////////
Sub RandomSoundMetal()
	Select Case Int(Rnd*20)+1
		Case 1 : PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_Metal_Hit_1"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 2 : PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_Metal_Hit_2"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 3 : PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_Metal_Hit_3"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 4 : PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_Metal_Hit_4"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 5 : PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_Metal_Hit_5"), Vol(ActiveBall) * 0.02 * MetalImpactSoundFactor
		Case 6 : PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_Metal_Hit_6"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 7 : PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_Metal_Hit_7"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 8 : PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_Metal_Hit_8"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 9 : PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_Metal_Hit_9"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 10 : PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_Metal_Hit_10"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 11 : PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_Metal_Hit_11"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 12 : PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_Metal_Hit_12"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 13 : PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_Metal_Hit_13"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 14 : PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_Metal_Hit_14"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 15 : PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_Metal_Hit_15"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 16 : PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_Metal_Hit_16"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 17 : PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_Metal_Hit_17"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 18 : PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_Metal_Hit_18"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 19 : PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_Metal_Hit_19"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 20 : PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_Metal_Hit_20"), Vol(ActiveBall) * MetalImpactSoundFactor
	End Select
End Sub


'/////////////////////////////  WALL IMPACTS  ////////////////////////////
Sub HitsWoods_Hit(idx)

'	debug.print "wood hit"
	RandomSoundWood()      
End Sub

Sub RandomSoundWood()
	dim finalspeed
	finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
	If finalspeed > 16 then 
		Select Case Int(Rnd*5)+1
			Case 1 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_1"), Vol(ActiveBall) * WallImpactSoundFactor
			Case 2 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_2"), Vol(ActiveBall) * WallImpactSoundFactor
			Case 3 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_5"), Vol(ActiveBall) * WallImpactSoundFactor
			Case 4 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_7"), Vol(ActiveBall) * WallImpactSoundFactor
			Case 5 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_9"), Vol(ActiveBall) * WallImpactSoundFactor
		End Select
	End if
	If finalspeed >= 6 AND finalspeed <= 16 then
		Select Case Int(Rnd*4)+1
			Case 1 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_3"), Vol(ActiveBall) * WallImpactSoundFactor
			Case 2 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_4"), Vol(ActiveBall) * WallImpactSoundFactor
			Case 3 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_6"), Vol(ActiveBall) * WallImpactSoundFactor
			Case 4 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_8"), Vol(ActiveBall) * WallImpactSoundFactor
		End Select
	End If
	If finalspeed < 6 Then
		Select Case Int(Rnd*3)+1
			Case 1 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_4"), Vol(ActiveBall) * WallImpactSoundFactor
			Case 2 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_6"), Vol(ActiveBall) * WallImpactSoundFactor
			Case 3 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_8"), Vol(ActiveBall) * WallImpactSoundFactor
		End Select
	End if
End Sub

'///////////////////////////////  OUTLANES WALLS  ///////////////////////////////
Sub RandomSoundOutlaneWalls()
	PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_Outlane_Wall_" & Int(Rnd*9)+1), OutlaneWallsSoundFactor
End Sub


'///////////////////////////  BOTTOM ARCH BALL GUIDE  ///////////////////////////
'///////////////////  BOTTOM ARCH BALL GUIDE - SOFT BOUNCES  ////////////////////
Sub RandomSoundBottomArchBallGuideSoftHit()
	PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_Arch_Ball_Guide_Hit_Soft_" & Int(Rnd*4)+1), BottomArchBallGuideSoundFactor
End Sub


'//////////////////////  BOTTOM ARCH BALL GUIDE - HARD HITS  ////////////////////
Sub RandomSoundBottomArchBallGuideHardHit()
	PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_Arch_Ball_Guide_Hit_Hard_" & Int(Rnd*3)+1), BottomArchBallGuideSoundFactor * 3
End Sub


'//////////////////////////////  FLIPPER BALL GUIDE  ////////////////////////////
Sub RandomSoundFlipperBallGuide()
 	dim finalspeed
  	finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
 	If finalspeed > 16 then
 		Select Case Int(Rnd*2)+1
			Case 1 : PlaySoundAtLevelActiveBall (Cartridge_Apron & "_Apron_Hit_Hard_1"),  Vol(ActiveBall) * FlipperBallGuideSoundFactor
			Case 2 : PlaySoundAtLevelActiveBall (Cartridge_Apron & "_Apron_Hit_Hard_2"),  Vol(ActiveBall) * 0.8 * FlipperBallGuideSoundFactor
		End Select
	End if
	If finalspeed >= 6 AND finalspeed <= 16 then
		PlaySoundAtLevelActiveBall (Cartridge_Apron & "_Apron_Hit_Medium_" & Int(Rnd*3)+1),  Vol(ActiveBall) * FlipperBallGuideSoundFactor
 	End If
	If finalspeed < 6 Then
		PlaySoundAtLevelActiveBall (Cartridge_Apron & "_Apron_Hit_Soft_" & Int(Rnd*7)+1),  Vol(ActiveBall) * FlipperBallGuideSoundFactor
	End if
End Sub



'/////////////////////////  WIREFORM ANTI-REBOUNT RAILS  ////////////////////////
Sub RandomSoundWireformAntiRebountRail()
 	dim finalspeed
  	finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
 	If finalspeed >= 10 then 
 		Select Case Int(Rnd*5)+1
			Case 1 : PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_Wireform_Anti_Rebound_Rail_3"),  Vol(ActiveBall) * WireformAntiRebountRailSoundFactor
			Case 2 : PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_Wireform_Anti_Rebound_Rail_4"),  Vol(ActiveBall) * WireformAntiRebountRailSoundFactor
			Case 3 : PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_Wireform_Anti_Rebound_Rail_5"),  Vol(ActiveBall) * WireformAntiRebountRailSoundFactor
			Case 4 : PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_Wireform_Anti_Rebound_Rail_6"),  Vol(ActiveBall) * WireformAntiRebountRailSoundFactor
			Case 5 : PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_Wireform_Anti_Rebound_Rail_7"),  Vol(ActiveBall) * WireformAntiRebountRailSoundFactor
		End Select
	End if
	If finalspeed < 10 Then
 		Select Case Int(Rnd*3)+1
			Case 1 : PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_Wireform_Anti_Rebound_Rail_1"),  Vol(ActiveBall) * WireformAntiRebountRailSoundFactor
			Case 2 : PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_Wireform_Anti_Rebound_Rail_2"),  Vol(ActiveBall) * WireformAntiRebountRailSoundFactor
			Case 3 : PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_Wireform_Anti_Rebound_Rail_8"),  Vol(ActiveBall) * WireformAntiRebountRailSoundFactor
		End Select
	End if
End Sub


'////////////////////////////  LANES AND INNER LOOPS  ///////////////////////////
'////////////////////  INNER LOOPS - LEFT ENTRANCE - EVENTS  ////////////////////
Sub LeftInnerLaneTriggerUp_Hit()
 	dim finalspeed
  	finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
 	If finalspeed > 10 then
		If ActiveBall.VelY < 0 Then RandomSoundInnerLaneEnter()
	End If
End Sub

Sub LeftInnerLaneTriggerDown_Hit()
 	dim finalspeed
  	finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
 	If finalspeed > 7 then
		If ActiveBall.VelY > 0 Then RandomSoundInnerLaneEnter()
	End If
End Sub


'/////////////////////  INNER LOOPS - LEFT ENTRANCE - SOUNDS  ///////////////////
Sub RandomSoundInnerLaneEnter()
	PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_InnerLane_Ball_Guide_Hit_" & Int(Rnd*20)+1), Vol(ActiveBall) * InnerLaneSoundFactor
End Sub


'//////////////////////////////  LEFT LANE ENTRANCE  ////////////////////////////
'/////////////////////////  LEFT LANE ENTRANCE - EVENTS  ////////////////////////
Sub LeftLaneTrigger_Hit()
 	dim finalspeed
  	finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
 	If finalspeed > 10 then
		If ActiveBall.VelY < 0 Then PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_Lane_Left_Ball_Enter_Hit"), Vol(ActiveBall) * LaneEnterSoundFactor : RandomSoundLaneLeftEnter()
	End If
End Sub


'/////////////////////////  LEFT LANE ENTRANCE - SOUNDS  ////////////////////////
Sub RandomSoundLaneLeftEnter()
	PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_Lane_Left_Ball_Roll_" & Int(Rnd*2)+1), Vol(ActiveBall) * LaneSoundFactor
End Sub


'/////////////////////////////  RIGHT LANE ENTRANCE  ////////////////////////////
'////////////////////////  RIGHT LANE ENTRANCE - EVENTS  ////////////////////////
Sub RightLaneTrigger_Hit()
 	dim finalspeed
  	finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
 	If finalspeed > 10 then
		If ActiveBall.VelY < 0 Then PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_Lane_Right_Ball_Enter_Hit"), Vol(ActiveBall) * LaneEnterSoundFactor : RandomSoundLaneRightEnter()
	End If
End Sub


'/////////////////  RIGHT LANE ENTRANCE (RIGHT ORBIT) - SOUNDS  /////////////////
Sub RandomSoundLaneRightEnter()
	PlaySoundAtLevelActiveBall (Cartridge_Metal_Hits & "_Lane_Right_Ball_Roll_" & Int(Rnd*3)+1), Vol(ActiveBall) * LaneSoundFactor
End Sub


'/////////////////////////  RAMP HELPERS BALL VARIABLES  ////////////////////////
'Dim ballvariablePlasticRampTimer1


'/////////  PLASTIC LEFT RAMP - RIGHT EXIT HOLE - TO PLAYFIELD - EVENT  /////////

'sub BallDrop1_hit	'sometimes drop sound cannot be heard here.
''	debug.print activeball.velz
'	RandomSoundRightRampRightExitDropToPlayfield(BallDrop1)
'end sub


Sub BallDrop2_Hit()
	if abs(activeball.AngMomZ) > 70 then activeball.AngMomZ = 70
	activeball.AngMomZ = abs(activeball.AngMomZ) * 3
	RandomSoundRightRampRightExitDropToPlayfield(BallDrop2)
'	Call SoundRightPlasticRampPart2(SoundOff, ballvariablePlasticRampTimer1)
End Sub

'ss ramp
sub BallDrop3_hit
'	debug.print "SS drop"
	RandomSoundRightRampRightExitDropToPlayfield(activeball)
end sub


'/////////  METAL WIRE RIGHT RAMP - EXIT HOLE - TO PLAYFIELD - EVENT  //////////
Sub RHelper3_Hit()
	if abs(activeball.AngMomZ) > 70 then activeball.AngMomZ = 70
	activeball.AngMomZ = -abs(activeball.AngMomZ) * 3
	RandomSoundLeftRampDropToPlayfield()
End Sub



'
''***************************************************************
''Table MISC VP sounds
''***************************************************************


Sub Trigger1_Hit():PlaySoundAtLevelStatic (Cartridge_Plastic_Ramps & "_Ramp_Right_Plastic_Hit_3"), RightPlasticRampHitsSoundLevel, Trigger1 : End Sub
Sub Trigger2_Hit():PlaySoundAtLevelStatic (Cartridge_Plastic_Ramps & "_Ramp_Right_Plastic_Hit_4"), RightPlasticRampHitsSoundLevel, Trigger2 : End Sub
Sub Trigger3_Hit():PlaySoundAtLevelStatic (Cartridge_Plastic_Ramps & "_Ramp_Right_Plastic_Hit_5"), RightPlasticRampHitsSoundLevel, Trigger3 : End Sub
Sub Trigger4_Hit():PlaySoundAtLevelStatic (Cartridge_Plastic_Ramps & "_Ramp_Right_Plastic_Hit_3"), RightPlasticRampHitsSoundLevel, Trigger4 : End Sub
Sub Trigger5_Hit():PlaySoundAtLevelStatic (Cartridge_Plastic_Ramps & "_Ramp_Right_Plastic_Hit_4"), RightPlasticRampHitsSoundLevel, Trigger5 : End Sub
Sub Trigger6_Hit():PlaySoundAtLevelStatic (Cartridge_Plastic_Ramps & "_Ramp_Right_Plastic_Hit_5"), RightPlasticRampHitsSoundLevel, Trigger6 : End Sub
Sub Trigger7_Hit():PlaySoundAtLevelStatic (Cartridge_Plastic_Ramps & "_Ramp_Right_Plastic_Hit_3"), RightPlasticRampHitsSoundLevel, Trigger7 : End Sub
Sub Trigger8_Hit():PlaySoundAtLevelStatic (Cartridge_Plastic_Ramps & "_Ramp_Right_Plastic_Hit_4"), RightPlasticRampHitsSoundLevel, Trigger8 : End Sub
Sub Trigger9_Hit():PlaySoundAtLevelStatic (Cartridge_Plastic_Ramps & "_Ramp_Right_Plastic_Hit_5"), RightPlasticRampHitsSoundLevel, Trigger9 : End Sub
Sub Trigger10_Hit():PlaySoundAtLevelStatic (Cartridge_Plastic_Ramps & "_Ramp_Right_Plastic_Hit_3"), RightPlasticRampHitsSoundLevel, Trigger10 : End Sub
Sub Trigger11_Hit():PlaySoundAtLevelStatic (Cartridge_Plastic_Ramps & "_Ramp_Right_Plastic_Hit_4"), RightPlasticRampHitsSoundLevel, Trigger11 : End Sub
Sub Trigger13_Hit():PlaySoundAtLevelStatic (Cartridge_Plastic_Ramps & "_Ramp_Right_Plastic_Hit_5"), RightPlasticRampHitsSoundLevel, Trigger13 : End Sub
Sub Trigger14_Hit():PlaySoundAtLevelStatic (Cartridge_Plastic_Ramps & "_Ramp_Right_Plastic_Hit_3"), RightPlasticRampHitsSoundLevel, Trigger14 : End Sub
Sub Trigger15_Hit():PlaySoundAtLevelStatic (Cartridge_Plastic_Ramps & "_Ramp_Right_Plastic_Hit_4"), RightPlasticRampHitsSoundLevel, Trigger15 : End Sub

dim FaceGuideHitsSoundLevel : FaceGuideHitsSoundLevel = 0.002 * RightPlasticRampHitsSoundLevel
Sub ColFaceGuideL1_Hit(): PlaySoundAtLevelStatic (Cartridge_Plastic_Ramps & "_Ramp_Right_Plastic_Hit_2"), FaceGuideHitsSoundLevel, activeball : End Sub
Sub F1Guide_Hit(): PlaySoundAtLevelStatic (Cartridge_Plastic_Ramps & "_Ramp_Right_Plastic_Hit_1"), FaceGuideHitsSoundLevel, activeball : End Sub
Sub F1Guide2_Hit(): PlaySoundAtLevelStatic (Cartridge_Plastic_Ramps & "_Ramp_Right_Plastic_Hit_1"), FaceGuideHitsSoundLevel, activeball : End Sub
Sub ColFaceGuideL2_Hit(): PlaySoundAtLevelStatic (Cartridge_Plastic_Ramps & "_Ramp_Right_Plastic_Hit_2"), FaceGuideHitsSoundLevel, activeball : End Sub
Sub ColFaceGuideL3_Hit(): PlaySoundAtLevelStatic (Cartridge_Plastic_Ramps & "_Ramp_Right_Plastic_Hit_3"), FaceGuideHitsSoundLevel, activeball : End Sub


sub pBlockBackhand_hit(): PlaySoundAtLevelStatic (Cartridge_Plastic_Ramps & "_Ramp_Right_Plastic_Hit_4"), FaceGuideHitsSoundLevel, activeball : End Sub
sub pBlockBackhand001_hit(): PlaySoundAtLevelStatic (Cartridge_Plastic_Ramps & "_Ramp_Right_Plastic_Hit_5"), FaceGuideHitsSoundLevel, activeball : End Sub



													'volume level; range [0, 1]

' '///////////////////////-----Ball Drops, Bumps and Collisions-----///////////////////////
' Dim RubberStrongSoundFactor, RubberWeakSoundFactor, RubberFlipperSoundFactor,BallWithBallCollisionSoundFactor
Dim DelayedBallDropOnPlayfieldSoundLevel
' Dim WallImpactSoundFactor, MetalImpactSoundFactor, SubwaySoundLevel, SubwayEntrySoundLevel, ScoopEntrySoundLevel
' Dim SaucerLockSoundLevel, SaucerKickSoundLevel

' BallWithBallCollisionSoundFactor = 3.2									'volume multiplier; must not be zero
' RubberStrongSoundFactor = 0.055/5											'volume multiplier; must not be zero
' RubberWeakSoundFactor = 0.075/5											'volume multiplier; must not be zero
' RubberFlipperSoundFactor = 0.275/5										'volume multiplier; must not be zero
' BallBouncePlayfieldSoftFactor = 0.025									'volume multiplier; must not be zero
' BallBouncePlayfieldHardFactor = 0.025									'volume multiplier; must not be zero
DelayedBallDropOnPlayfieldSoundLevel = 0.8									'volume level; range [0, 1]
' WallImpactSoundFactor = 0.075											'volume multiplier; must not be zero
' MetalImpactSoundFactor = 0.075/3
' SaucerLockSoundLevel = 0.8
' SaucerKickSoundLevel = 0.8

											'volume multiplier; must not be zero


' '/////////////////////////////  SOUND PLAYBACK FUNCTIONS  ////////////////////////////
' '/////////////////////////////  POSITIONAL SOUND PLAYBACK METHODS  ////////////////////////////
' ' Positional sound playback methods will play a sound, depending on the X,Y position of the table element or depending on ActiveBall object position
' ' These are similar subroutines that are less complicated to use (e.g. simply use standard parameters for the PlaySound call)
' ' For surround setup - positional sound playback functions will fade between front and rear surround channels and pan between left and right channels
' ' For stereo setup - positional sound playback functions will only pan between left and right channels
' ' For mono setup - positional sound playback functions will not pan between left and right channels and will not fade between front and rear channels



' ' Previous Positional Sound Subs

Sub PlaySoundAt(soundname, tableobj)
	PlaySound soundname, 1, 1 * MechVolume, AudioPan(tableobj), 0,0,0, 1, AudioFade(tableobj)
End Sub

Sub PlaySoundAtVol(soundname, tableobj, aVol)
	PlaySound soundname, 1, aVol * MechVolume, AudioPan(tableobj), 0,0,0, 1, AudioFade(tableobj)
End Sub



'/////////////////////////////  ROLLOVER SOUNDS  ////////////////////////////
Sub RandomSoundRollover()
	PlaySoundAtLevelActiveBall ("Rollover_" & Int(Rnd*4)+1), RolloverSoundLevel
End Sub

Sub Rollovers_Hit(idx)
	RandomSoundRollover
End Sub



' '/////////////////////////////  WALL IMPACTS  ////////////////////////////
Sub Walls_Hit(idx)
	RandomSoundWood()      
End Sub


' '/////////////////////////////  METAL - EVENTS  ////////////////////////////

Sub Metals_Hit (idx)
	RandomSoundMetal
End Sub

Sub ShooterDiverter_collide(idx)
	RandomSoundMetal
End Sub



' '/////////////////////////////  TARGET HIT SOUNDS  ////////////////////////////


Sub PlayTargetSound()
	dim finalspeed
	finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
	If finalspeed > 10 then
		RandomSoundTargetHitStrong()
		RandomSoundBallBouncePlayfieldSoft Activeball
	Else 
		RandomSoundTargetHitWeak()
	End If	
End Sub



' '/////////////////////////////  DELAYED DROP - TO PLAYFIELD - SOUND  ////////////////////////////
Sub RandomSoundDelayedBallDropOnPlayfield(aBall)
	Select Case Int(Rnd*5)+1
		Case 1 : PlaySoundAtLevelStatic ("Ball_Drop_Playfield_1_Delayed"), DelayedBallDropOnPlayfieldSoundLevel, aBall
		Case 2 : PlaySoundAtLevelStatic ("Ball_Drop_Playfield_2_Delayed"), DelayedBallDropOnPlayfieldSoundLevel, aBall
		Case 3 : PlaySoundAtLevelStatic ("Ball_Drop_Playfield_3_Delayed"), DelayedBallDropOnPlayfieldSoundLevel, aBall
		Case 4 : PlaySoundAtLevelStatic ("Ball_Drop_Playfield_4_Delayed"), DelayedBallDropOnPlayfieldSoundLevel, aBall
		Case 5 : PlaySoundAtLevelStatic ("Ball_Drop_Playfield_5_Delayed"), DelayedBallDropOnPlayfieldSoundLevel, aBall
	End Select
End Sub



' '/////////////////////////////////////////////////////////////////
' '					End Mechanical Sounds
' '/////////////////////////////////////////////////////////////////

' '******************************************************
' '****  FLEEP MECHANICAL SOUNDS
' '******************************************************



'**************************
'		Option Setup
'**************************

Sub TableOptions()
	if CabinetMode = 1 then
		Korpus.Size_y=2
	'	Siderails.visible=0
	'	Lockdownbar.visible=0
	Else
		Korpus.Size_y=1
'		BM_SideRails.visible=1
	'	Lockdownbar.visible=1
	end If
End Sub

' Called when options are tweaked by the player. 
' - 0: game has started, good time to load options and adjust accordingly
' - 1: an option has changed
' - 2: options have been reseted
' - 3: player closed the tweak UI, good time to update staticly prerendered parts
Sub Table1_OptionEvent(ByVal eventId)
    Dim v, BP
    If eventId = 3 Then DisableStaticPreRendering = True

    ' Room Brightness
    SetRoomBrightness NightDay / 100.0

    ' Mirrored Sideblades
    v = Table1.Option("Mirror Blades", 0, 1, 1, 0, 0, Array("Off", "On"))
    MirrorL.visible = v
    MirrorR.visible = v

	' Pincab Rails
    v = Table1.Option("Cab Side Rails", 0, 1, 1, 1, 0, Array("Off", "On"))
	For Each BP in BP_SideRails : BP.visible = v: Next

    ' Grease glass
    greaseGlassLevel = Table1.Option("Grease Glass", 0, 1, 0.01, 1, 1)

    ' Sound volumes
    MechVolume = Table1.Option("Mech Volume", 0, 1, 0.01, 0.8, 1)
    RampRollVolume = Table1.Option("Ramp Volume", 0, 1, 0.01, 0.5, 1)
    BallRollVolume = Table1.Option("Ball Roll Volume", 0, 1, 0.01, 0.5, 1)
    
    If eventId = 3 Then DisableStaticPreRendering = False
End Sub

' Culture neutral string to double conversion (handles situation where you don't know how the string was written)
Function CNCDbl(str)
    Dim strt, Sep, i
    If IsNumeric(str) Then
        CNCDbl = CDbl(str)
    Else
        Sep = Mid(CStr(0.5), 2, 1)
        Select Case Sep
        Case "."
            i = InStr(1, str, ",")
        Case ","
            i = InStr(1, str, ".")
        End Select
        If i = 0 Then     
            CNCDbl = Empty
        Else
            strt = Mid(str, 1, i - 1) & Sep & Mid(str, i + 1)
            If IsNumeric(strt) Then
                CNCDbl = CDbl(strt)
            Else
                CNCDbl = Empty
            End If
        End If
    End If
End Function

DIM VRThings
If VRRoom > 0 Then
	'glass.visible=0
	'Siderails.visible=1
	'Lockdownbar.visible=1
	If VRRoom = 1 Then
		for each VRThings in VRCab:VRThings.visible=1:Next
		for each VRThings in VRBG:VRThings.visible=1:Next
		for each VRThings in VRMin:VRThings.visible=0:Next
		for each VRThings in VRStuff:VRThings.visible=1:Next
		for each VRThings in VRLights:VRThings.State=1:Next
		FlasherforLights.visible=1
	End If

	If VRRoom = 2 Then
		for each VRThings in VRCab:VRThings.visible=1:Next
		for each VRThings in VRBG:VRThings.visible=1:Next
		for each VRThings in VRMin:VRThings.visible=1:Next
		for each VRThings in VRStuff:VRThings.visible=0:Next
		for each VRThings in VRLights:VRThings.State=0:Next
	End If

	If VRRoom = 3 Then
		for each VRThings in VRCab:VRThings.visible=0:Next
		for each VRThings in VRBG:VRThings.visible=1:Next
		for each VRThings in VRMin:VRThings.visible=0:Next
		for each VRThings in VRStuff:VRThings.visible=0:Next
		for each VRThings in VRLights:VRThings.State=0:Next
		for each VRThings in VRCab:VRThings.visible = 0:Next
	End If

	Else
		for each VRThings in VRCab:VRThings.visible=0:Next
		for each VRThings in VRBG:VRThings.visible=0:Next
		for each VRThings in VRMin:VRThings.visible=0:Next
		for each VRThings in VRStuff:VRThings.visible=0:Next
		for each VRThings in VRLights:VRThings.State=0:Next
		FlasherforLights.visible=0
		if DesktopMode then
		'	BM_SideRails.visible=1
		'	Lockdownbar.visible=1
		else
'			Siderails.visible=0
'			Lockdownbar.visible=0
		End If
End if


