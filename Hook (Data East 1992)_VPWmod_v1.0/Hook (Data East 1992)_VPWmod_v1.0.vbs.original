'Hook (Data East) 1992 by Javier - VPin Workshop MOD
' 
'*****************************************
'			VPin Workshop Revisions
'*****************************************
'011 - Benji - Added nfPX 1.6 (iaakki variable live catch stuff)
'014 - iaakki - Insert done.. New PF with cutouts not having AO baked in. AO flasher needed?
'015 - sixtoe - VR stuff put in, changed and aligned loads of primitives and lights, cut holes in playfield and dropped woodsides, added missing top right rubber, changed skull prim and ramp to come out it's mouth, unified timers, hooked up town to GI system and deleted some lights, lowered and reshaped some GI, changed VUK holes (cosmetic), modifided top right ramp texture to remove hole.
'016 - Sixtoe - Added new plastics for slingshots from Sheltemke, colour corrected some plastics and realigned screws and slingshot plastics in general, few other minor tweaks.
'017 - Added shadows to updatd playfield with cutouts
'018 - iaakki - PF alpha mask value changed, NF flips code update started
'019 - iaakki - nf code continued and did some testing. flip physics values changed to new nf values
'020 - iaakki - some fleep sounds done
'024 - iaakki - "fixed" left ramp. Flips at 3400 now.
'025 - iaakki - Skillshot plunger lane reworked with new decals. Some brackets needed.
'026 - iaakki - flip angles changed, diverter animated, realigning lights
'027 - iaakki - new laneguides and realigned flips and guides. Physics fixed --> plunger is too strong now
'028 - iaakki - gi lights fading code added, GI LUT change removed --> gi needs some work
'029 - iaakki - laneguides rework, Wall63 rework, Rubber1 realigned, Wall002 metal added on right, Wall17 reworked, inlane ramp objects removed, pf metals tied to gi
'030 - iaakki - skull flasher finally found and experimental dual primitive fading DL lighting implemented
'032 - iaakki - missing rubberbands, posts etc. Adjustments, Flupper dome added and adjusted, some bloom to skull added
'034 - iaakki - messing with lights and including primitives to fading GI and other lights. Top laneguides tuned, bumper top plastics tied to lights. Transmit values reduced a lot.
'035 - iaakki - ballinsub check added and sounds are now correct for sw48, ball drop sounds fixed, plungerlane sounds created, arch sounds connected, droptarget sounds, upper vuk saucer
'036 - iaakki - ledrope adjusted to be more VR friendly, pirate town reworked a bit, 3b and 4b flasher adjusted
'037 - iaakki - gi rework, normal inserts adjusted and fading speeds reduced a lot, minor tweaks to flashes
'038 - skitso - New LUT, fixed skull and lower PF GI, HDR ball, better scratches, fixed skull eyes...
'039 - iaakki - 3 missing plastics added, flupper inserts dimmed
'040 - iaakki - outlane and sling plastics redone
'041 - iaakki - adjusted lots of lights and plastics, changed some primitives and materials, fixed textures for VR
'042 - iaakki - Added right plastic neas plunger lane, fixed some insert fading speeds
'043 - iaakki - More plastics on the left side
'045 - skitso - Some inserts reworked
'045 - skitso - GI and material adjust for targets. PF hole red glow adjusted
'047 - iaakki - some wall sounds, plungerlane fix for lost ball, wind coaster plastic done and its bulb adjusted, 4B and 3B flashers redone
'048 - tomate - new 4k texture for apron and instruction cards, some tweaks on plunger cover texture
'049 - iaakki - baseball jackpot plastic added, Flip start angles changed, slope to 5.8, laneguide physics change, right scoop reworked, laserkicker adjusted along with the wall, some screws added. gi fading function change  
'050 - sixtoe - redid all the above playfield bulbs and lighting, added flipper shadows, adjusted top right flasher
'051 - iaakki - gate added at the top, Flip parameters reverted and left ramp hacks removed, shot to right orb made slightly easier by moving rubber bands to right
'052 - sixtoe - fixed vr issues, fixed top right ramp issues, more lighting adjustments, stopped skull flasher clipping through targets,
'053 - iaakki - few screws and some plastics
'054 - iaakki - and more..
'056 - iaakki - left ramp entrance changed, skull repositioned and adjusted, skull texture fixed
'057 - tomate - new plastics prims added, new right wireRamp prim added, skull and ropeLight repositioned, lowPoly ramps added at Layer10
'058 - iaakki - realigned various lights and bulbs in plungerlane and led tube.Fixed skillshot 2.
'059 - iaakki - left ramp recreated with vpx ramps.Collidable plungerlane is now disabled. One needs to make full plunge to be able to get ball into game.
'060 - iaakki - led tube led heights adjusted. Plunger lane and right ramp LP's replaced.
'061 - iaakki - diverter primitive redone, Wall004 added for ball stuck, few ramps adjusted, pf friction 0.2 -> 0.23
'062 - tomate - new textures for plastic ramps added, toys over plunger lane scaled and repositioned, missing decals added, repositioned decals prims, some textures adjusments in PS, metal plates in plunger lane added, some tweaks to plastics DL in script, new playfield_mesh added, cleaning some unused textures.
'063 - iaakki - One ball stuck fixed, added 2 new plastics, ramp DL effect adjusted a bit
'064 - tomate - plastic bevels added to slings and outlanes prims. Script DL at 'plastics bevels
'065 - tomate - new prims and textures for plunguer lane bulbs and wiring.
'066 - tomate - diverter realigned and reduced, modified plunger ramp primitive, multiball decals perforated to allow cables to pass through, wiring realigned, shield decal realigned and reduced, lowPoly plunger prim modified
'067 - iaakki - merge, ramp rolling sounds created, swithes adjusted, sling and laneguide images fixed.
'068 - sixtoe - piratetown prim lights added, diverter fixed, wall78 adjusted, apron wall added, diverter rubber changed & metal guide added, shooter lane lights adjusted, depth bias adjusted on new flashers,tweaked shooter rod position, added sw49 inc. dead sling, added some metal brackets inside rubbers and adjusted several rubber positions, tweaked and added argument to change ramp DL for VR, modded vr backbox artwork
'069 - iaakki - Hook501 ROM in use, rolling sounds fixed, relay vol reduced, bump stop added to the end of skillshot ramp, subway sound improved, bumper3b adjusted, "metal" material set to non-active, "metals_wires" set to static and non-reflective
'069.1 - Skitso - fixed skull eye lights, fixed top left inserts (lock and 5 mil), fixed return to clock insert and tweaked other inserts,  tweaked GI lighting, added few missing GI's and added correct trasmit to plunger lane GI, fixed tons of disable lighting and disalbe light from below values to add correct three dimensionality. Tweaked Apron texture to not have "self illuminating feel" to it.
'070 - iaakki - merge
'071 - Skitso - fixed sligshot plastics to show GI through, refined upper playfield GI and lane guides, removed unneeded pirate town lights, new plungerlane bulb textures and light/flasher values, tweaked other small details
'072 - Sixtoe - Added 7 missing flasher lights (8b, 9, 12 & 14)
'073 - iaakki - skillshot ramp exit improvement, flip angles, flipper triggers reworked, metal guide near the right sling, ramp sound rework, wire rolling is now played if ball drops from main ramp
'074 - iaakki - top right flashers scripted, ramp sounds tuned one more time, collision sounds tested and adjusted, F5B adjusted, wire gates damping and gravity adjusted, skull inner prim flashing adjusted
'075 - iaakki - shittonne of LUTs, magnas to change, moved cor.update to own 1ms timer
'076 - iaakki - PF and Inserttext image updated, PF AO added and tied to GI. Insert #14 improved.
'077 - iaakki - AO baked to PF, ramp primitive DL values tuned
'078 - Sixtoe - GI tweaks, ramps, walls and ball traps adjusted, depth bias tweaks, dl tweaks for VR
'RC1 - iaakki - slope to 5.9, insert reflection flashers realigned to outlanes, "metal" material set to active, sling rubber duplicates removed
'RC1.2 - Skitso - reshaped GI lights under the skull (didn't take the scoop in account earlier), added more illumination on top of the top lane guides and tweaked lane lighting to not be so hot and clip the ball, further tweaked plunger lane bulbs, tweaked main ramp planks decal to not be submerged in the ramp, reduced mid PF lighting, added lower PF lighting.
'RC1.3 - iaakki - Info text, timer fix, old plastics image clean, gieffect timer fix
'RC1.4 - Sixtoe - VR asset tweaks, redid pirate town flashers as it looked rubbish, cleaned up and adjusted some flasher timers, other minor tweaks.
'RC1.5 - Sixtoe - Train wreck, abandoned.
'RC1.6 - Sixtoe - Redid skull and eyes, fixed subway (probably), fixed shoot again light, fixed insert text, fixed light bumpers insert not working in newest vpvr, 
'RC1.7 - Sixtoe - Changed top lane entrance to stop ball getting stuck, changed scoop base to feed better from subway, updated timer for diverter, fixed outlane flasher reflection
'RC1.71 - Skitso - Removed skull eye flashers (clipped through the skull), increased skull eye's disable lighting value and tweaked ligths to compensate flasher removal, also tweaked fade speeds to match. Tweaked lower PF insert light wall reflections 
'v1.0 - iaakki - final script cleanup and release version. Pincab DL adjusted


'ROM volume adjustment
'- Clicking on the PinMAME window (DMD) with the mouse
'- Pressing the tilde key (~) on your keyboard to open a white box - this would be the key to the left of the 1 key on the keyboard
'- Using the up and down arrow keys, scroll through channels until you find a channel to adjust
'- Using the left and right arrow keys, adjust the channel - left arrow lowers the volume, right arrow raises the volume
'- Repeat previous 2 steps to adjust other channels
'- When done, press the tilde key to close the white box
'- Click anywhere on the table to return focus to the table

Option Explicit
Randomize

On Error Resume Next
ExecuteGlobal GetTextFile("controller.vbs")
If Err Then MsgBox "You need the controller.vbs in order to run this table, available in the vp10 package"
On Error Goto 0

' Options

'///////////////////////-----VR Room-----///////////////////////
Const VRRoom = 0 ' 0 - VR Room off, 1 - Minimal Room, 2 - Ultra Minimal

'Cabinet mode - Will hide the rails and scale the side panels higher
'	Cabinet Mode Off = 0
'	Cabinet Mode On = 1
Const CabinetMode = 0

'***********	Set the default LUT set	*********************************
'LUTset Types:
'0 = Fleep Natural Dark 1
'1 = Fleep Natural Dark 2
'2 = Fleep Warm Dark
'3 = Fleep Warm Bright
'4 = Fleep Warm Vivid Soft
'5 = Fleep Warm Vivid Hard
'6 = Skitso Natural and Balanced
'7 = Skitso Natural High Contrast
'8 = 3rdaxis Referenced THX Standard
'9 = CalleV Punchy Brightness and Contrast
'10 = TT & Ninuzzu Original

'You can change LUT option within game with left and right CTRL keys
Dim LUTset, DisableLUTSelector, LutToggleSound
LUTset = 8
DisableLUTSelector = 0  ' Disables the ability to change LUT option with magna saves in game when set to 1


'******************************************************
' 						OPTIONS
'******************************************************

'///////////////////////-----General Sound Options-----///////////////////////
'//  VolumeDial:
'//  VolumeDial is the actual global volume multiplier for the mechanical sounds.
'//  Values smaller than 1 will decrease mechanical sounds volume.
'//  Recommended values should be no greater than 1.
Const VolumeDial = 0.8


Const Ballsize = 52
Const BallMass = 1
Const MirrorsOn = 0    ' ***LEAVE OFF FOR VR*** Turn off/on mirrors 0 or 1 

Dim DesktopMode:DesktopMode = Table1.ShowDT
Dim UseVPMDMD
If VRRoom <> 0 Then UseVPMDMD = True Else UseVPMDMD = DesktopMode

LoadVPM "01000200", "DE.VBS", 3.38
     
'********************
'Standard definitions
'********************

Const UseSolenoids = 2
Const UseLamps = 0
Const UseSync = 1
Const HandleMech = 0

' Standard Sounds
Const SSolenoidOn = "fx_Solenoidon"
Const SSolenoidOff = "fx_solenoidoff"
'Const SCoin = "fx_Coin"

' using table width and height in script slows down the performance
dim tablewidth: tablewidth = Table1.width
dim tableheight: tableheight = Table1.height

'Solenoid
SolCallback(sLRFlipper) = "SolRFlipper"
SolCallback(sLLFlipper) = "SolLFlipper"
SolCallback(1)  = "bsTrough.SolIn"
SolCallback(2)  = "bsTrough.SolOut"
SolCallback(3)  = "SolVUKKick"
SolCallback(4)  = "SolKickback" 
SolCallback(5)  = "dtLDrop.SolDropUp"
SolCallback(6)  = "SolKickout"
'SolCallback(7)		'Ticket Dispenser (Unused)
SolCallback(8)  = "Solknocker" 
SolCallback(9)  = "SolFlash9" '"SetLamp 109," 'Topright Ramp Flasher 9
'SolCallback(10)		'L/R Coil Select Relay
SolCallback(11) = "SolGI"
SolCallback(12) = "SolFlash12" '"SetLamp 112," 'Topright Ramp Flasher 12
SolCallback(13) = "SolFlashSkull"
SolCallback(14) = "SetLamp 114," 'RightVUK Flasher
SolCallBack(15)	= "SolAutoPlunge"
'SolCallback(16)	'Unused
'SolCallback(17)  = "Bumper TL"
'SolCallback(18)  = "Bumper Centre"
'SolCallback(19)  = "Bumper TR"
'SolCallback(20)  = "Left Sling"
'SolCallback(21)  = "Right Sling"
SolCallback(22)  = "SolRdiv" 'Diverter

'SolCallback(23)		'Unknown
'SolCallback(24)		'Unknown

'Flashers
SolCallback(25) = "SolFlash1B"	'Flash 1B
SolCallback(26) = "SetLamp 92,"	'Flash 2B
SolCallback(27) = "SolFlash3B"	'Flash 3B
SolCallback(28) = "SolFlash4B"	'Flash 4B
SolCallback(29) = "SetLamp 95,"	'Flash 5B
SolCallback(30) = "SolFlash6B"	'Flash 6B
SolCallback(31) = "SolFlash7B"	'Flash 7B
SolCallback(32) = "SolFlash8" '"SetLamp 98,"	'Flash 8B - Topright Ramp Flasher 8

Const cGameName = "Hook_501"

Dim bsTrough,bsUpperEject,bsCala,bsLVuk,SkillShotR,PlungerIM
DIM dtLDrop, x
Sub Table1_Init
    vpmInit Me
    With Controller
        .GameName = cGameName
        If Err Then MsgBox "Can't start Game " & cGameName & vbNewLine & Err.Description:Exit Sub
        .SplashInfoLine = "Hook Data East 1992" & vbNewLine & "BANGARAAANG!!"
		.HandleKeyboard = 0
		.ShowTitle = 0
		.ShowDMDOnly = 1
		.ShowFrame = 0
		.HandleMechanics = 0
		.Hidden = 0
		.Games(cGameName).Settings.Value("sound") = 1
		On Error Resume Next
		.Run GetPlayerHWnd
		If Err Then MsgBox Err.Description
	End With
    On Error Goto 0


'Mirror
Dim MBall1, MBall2
if MirrorsOn = 1 then
if table1.showDT=true then
Set MBall1 = kicker1.Createsizedball(1800):MBall1.Image = "Mirror":
Set MBall2 = kicker2.Createsizedball(200):MBall2.Image = "Mirror":
Mball1.BulbIntensityScale = 1
Mball2.BulbIntensityScale = 80
Else
Set MBall1 = kicker3.Createsizedball(1000):MBall1.Image = "Mirror":
Set MBall2 = kicker4.Createsizedball(200):MBall2.Image = "Mirror":
Mball1.BulbIntensityScale = 3
Mball2.BulbIntensityScale = 40
end if
end if

    ' Nudging
    vpmNudge.TiltSwitch = 1
	vpmNudge.Sensitivity = 2 
    vpmNudge.tiltobj = Array(LeftSlingShot,RightSlingShot,Bumper1B,Bumper2B,Bumper3B)

	PinMAMETimer.Interval = PinMAMEInterval
	PinMAMETimer.Enabled = 1

	' Trough
     Set bsTrough = new cvpmTrough 
     With bsTrough
		.Size = 3
		.InitSwitches Array (13,12,11)
		.EntrySw = 10
		.InitExit BallRelease, 90, 6
		.Balls = 3
		.CreateEvents "bsTrough", Drain
     End With
     
'      Drop Targets
  	Set dtLDrop=New cvpmDropTarget
    With dtLDrop
	    .InitDrop Array(Sw25,Sw26,Sw27,Sw28), Array(25,26,27,28)
	    .InitSnd SoundFX("DTDrop",DOFDropTargets),SoundFX("TOM_Diverter_UP_2",DOFContactors) 'sound was was dtreset
    End With

	Set SkillShotR = New cvpmBallStack
	With SkillShotR
		.InitSaucer Sw32,32, 0, 45
		.KickForceVar = 2
	End With

    'Diverter
    DivOpen.Isdropped = 1 
    DivClose.Isdropped = 0

'    SubWall.isdropped = 1

End Sub


Dim BallsOnPlayfield: BallsOnPlayfield = 0 
Sub Trigger1_Hit()
    BallsOnPlayfield = BallsOnPlayfield - 1
	RandomSoundDrain Drain
    vpmtimer.addtimer 2000, "LEDStopTimer '"
End Sub

Sub LEDStopTimer
	If BallsOnPlayfield <= 0 Then LEDStop
End Sub

Sub BallRelease_Unhit
    BallsOnPlayfield = BallsOnPlayfield + 1
	RandomSoundBallRelease BallRelease
	LEDStart
End Sub


'******************************************************
'					KNOCKER
'******************************************************
Sub SolKnocker(enabled)
	If enabled Then
		KnockerSolenoid 'Add knocker position object
	End If
End Sub


' Kickback
   Sub SolKickback(enabled)
 	If Enabled then	
		SkillShotR.ExitSol_On
	end if
   End Sub


' LaserKick
Sub SolAutoPlunge(Enabled)
	If Enabled Then 
        'Playsound SoundFX("bumper_retro",DOFContactors)
		PlaySoundAtLevelStatic ("Plunger_Release_Ball"), PlungerReleaseSoundLevel, LaserKickP1
		LaserKick.Enabled=True
        LaserKickP1.TransY = 90
	Else
		LaserKick.Enabled=False
        vpmtimer.addtimer 500, "LaserKickRes '"
	End If
End Sub
Sub LaserKick_Hit: Me.Kick 0,55 End Sub

Sub LaserKickRes()
    LaserKickP1.TransY = 0
End Sub




' Ramp Diverter
Sub SolRdiv(Enabled)
    If Enabled Then
		DivOpen.TimerEnabled = True
		vpmtimer.addtimer 1500, "DiverterTimer.enabled = 1' "
    End If
End Sub       

Sub DiverterTimer_Timer
	DiverterTimer.enabled = 0
	DivClose.TimerEnabled = True
End Sub
Sub DivOpen_Timer
	DivP.RotY = DivP.RotY - 9
	if DivP.RotY < -38 Then
		DivP.RotY = -38
		me.TimerEnabled = False
		DivOpen.Isdropped = 0 
		DivClose.Isdropped = 1
		PlaySoundAt "TOM_Diverter_UP_2",DivP
	end if
end sub
Sub DivClose_Timer
	DivP.RotY = DivP.RotY + 9
	if DivP.RotY > 0 Then
		DivP.RotY = 0
		me.TimerEnabled = False
		DivClose.Isdropped = 0
		DivOpen.Isdropped = 1
		PlaySoundAt "TOM_Diverter_DOWN_2",DivP
	end if
end sub
'Flashers

dim FlashLevelSkull, FlashLevel1B, FlashLevel3B, FlashLevel4B, FlashLevel12, FlashLevel9, FlashLevel8

FlasherSkull.opacity = 0
FlasherSkulla.opacity = 0
FlasherSkullb.opacity = 0

Flasher25.IntensityScale = 0
Flasher25a.IntensityScale = 0
Flasher25b.IntensityScale = 0
Flasher25c1.IntensityScale = 0
Flasher25c2.IntensityScale = 0
Flasher25c3.IntensityScale = 0

Flasher25.state = 1
Flasher25a.state = 1
Flasher25b.state = 1
Flasher25c1.state = 1
Flasher25c2.state = 1
Flasher25c3.state = 1
PirateTownP.blenddisablelighting = 0.2

Flasherf3a.opacity = 0
Flasherf3b.opacity = 0
f3a.IntensityScale = 0
f3b.IntensityScale = 0

Flasherf4a.opacity = 0
Flasherf4b.opacity = 0
f4a.IntensityScale = 0
f4b.IntensityScale = 0

Flasherf12.opacity = 0
f12a1.IntensityScale = 0
f12a2.IntensityScale = 0

Flasherf9.opacity = 0
f9a1.IntensityScale = 0
f9a2.IntensityScale = 0

Flasherf8.opacity = 0
f8a1.IntensityScale = 0
f8a2.IntensityScale = 0

Sub SolFlashSkull(enabled)
	if Enabled then 
		FlashLevelSkull = 1
		FlasherSkull_Timer
	end if
End Sub

sub FlasherSkull_Timer()
	dim flashx3
	If not FlasherSkull.TimerEnabled Then 
		FlasherSkull.TimerEnabled = True
	End If
	flashx3 = FlashLevelSkull*FlashLevelSkull*FlashLevelSkull
	'L31C.IntensityScale = flashx3
	FlasherSkull.opacity = 100 * flashx3
	FlasherSkulla.opacity = 100 * flashx3
	FlasherSkullb.opacity = 10 * flashx3

	skullP001.blenddisablelighting = 90 * flashx3
	skullP.blenddisablelighting = 10 * flashx3 + (0.2 * gilevel) + 0.3
	skullPb.blenddisablelighting = 3 * flashx3 + (0.2 * gilevel) + 0.3

	FlashLevelSkull = FlashLevelSkull * 0.95 - 0.01
	If FlashLevelSkull < 0 Then
		FlasherSkull.TimerEnabled = False
	End If
end sub

Sub SolFlash1B(enabled)
	if Enabled then 
		FlashLevel1B = 1
		F25_Timer
	end if
End Sub

sub F25_Timer()
	dim flashx3
	If not F25.TimerEnabled Then 
		F25.TimerEnabled = True
	End If
	flashx3 = FlashLevel1B*FlashLevel1B*FlashLevel1B
	'L31C.IntensityScale = flashx3
	F25.opacity = 40 * flashx3
    Flasher25.IntensityScale = flashx3 * 0.5
    Flasher25a.IntensityScale = flashx3 * 5
    Flasher25b.IntensityScale = flashx3 * 5
	Flasher25c1.IntensityScale = flashx3 * 0.5
	Flasher25c2.IntensityScale = flashx3 * 0.5
	Flasher25c3.IntensityScale = flashx3 * 0.5
	PirateTownP.blenddisablelighting = 0.2 + 0.8 * flashx3 * 3
	FlashLevel1B = FlashLevel1B * 0.9 - 0.01
	If FlashLevel1B < 0 Then
	F25.TimerEnabled = False
	End If
end sub

Sub SolFlash8(enabled)
	if Enabled then 
		FlashLevel8 = 1
		Flasherf8_timer
	end if
End Sub

sub Flasherf8_timer
	dim flashx3
	If not Flasherf8.TimerEnabled Then 
		Flasherf8.TimerEnabled = True
	End If
	flashx3 = FlashLevel8*FlashLevel8*FlashLevel8
	
	Flasherf8.opacity = 80 * flashx3	
    f8a1.IntensityScale = 3 * flashx3
	f8a2.IntensityScale = 3 * flashx3

	FlashLevel8 = FlashLevel8 * 0.93 - 0.01
	If FlashLevel8 < 0 Then
		Flasherf8.TimerEnabled = False
	End If
end sub

Sub SolFlash9(enabled)
	if Enabled then 
		FlashLevel9 = 1
		Flasherf9_timer
	end if
End Sub

sub Flasherf9_timer
	dim flashx3
	If not Flasherf9.TimerEnabled Then 
		Flasherf9.TimerEnabled = True
	End If
	flashx3 = FlashLevel9*FlashLevel9*FlashLevel9
	
	Flasherf9.opacity = 110 * flashx3	
    f9a1.IntensityScale = 3 * flashx3
	f9a2.IntensityScale = 3 * flashx3

	FlashLevel9 = FlashLevel9 * 0.93 - 0.01
	If FlashLevel9 < 0 Then
		Flasherf9.TimerEnabled = False
	End If
end sub

Sub SolFlash12(enabled)
	if Enabled then 
		FlashLevel12 = 1
		Flasherf12_timer
	end if
End Sub

sub Flasherf12_timer
	dim flashx3
	If not Flasherf12.TimerEnabled Then 
		Flasherf12.TimerEnabled = True
	End If
	flashx3 = FlashLevel12*FlashLevel12*FlashLevel12
	
	Flasherf12.opacity = 110 * flashx3	
    f12a1.IntensityScale = 3 * flashx3
	f12a2.IntensityScale = 3 * flashx3

	FlashLevel12 = FlashLevel12 * 0.93 - 0.01
	If FlashLevel12 < 0 Then
		Flasherf12.TimerEnabled = False
	End If
end sub

Sub SolFlash3B(enabled)
	if Enabled then 
		FlashLevel3B = 1
		Flasherf3b_timer
	end if
End Sub


sub Flasherf3b_timer
	dim flashx3
	If not Flasherf3b.TimerEnabled Then 
		Flasherf3b.TimerEnabled = True
	End If
	flashx3 = FlashLevel3B*FlashLevel3B*FlashLevel3B
	
	Flasherf3a.opacity = 60 * flashx3	
	Flasherf3b.opacity = 40 * flashx3
    f3a.IntensityScale = flashx3
	f3b.IntensityScale = flashx3

	FlashLevel3B = FlashLevel3B * 0.93 - 0.01
	If FlashLevel3B < 0 Then
		Flasherf3b.TimerEnabled = False
	End If
end sub

Sub SolFlash4B(enabled)
	if Enabled then 
		FlashLevel4B = 1
		Flasherf4b_timer
	end if
End Sub


sub Flasherf4b_timer
	dim flashx3
	If not Flasherf4b.TimerEnabled Then 
		Flasherf4b.TimerEnabled = True
	End If
	flashx3 = FlashLevel4B*FlashLevel4B*FlashLevel4B

	Flasherf4a.opacity = 50 * flashx3	
	Flasherf4b.opacity = 30 * flashx3
    f4a.IntensityScale = flashx3
	f4b.IntensityScale = flashx3

	FlashLevel4B = FlashLevel4B * 0.92 - 0.01
	If FlashLevel4B < 0 Then
		Flasherf4b.TimerEnabled = False
	End If
end sub

'Sub SolFlash4B(enabled)
' If enabled Then
'    f4a.state = 1
'    f4b.state = 1
'  Else
'    f4a.state = 0
'    f4b.state = 0
' End If
'End Sub


Sub SolFlash6B(enabled)
 If enabled Then
    F6b2.opacity = 50
    f6b.state = 1
    f6c.state = 1
  Else
    F6b2.opacity = 0
    f6b.state = 0
    f6c.state = 0
 End If
End Sub




' #####################################
' ###### Flupper Flasher Domes    #####
' #####################################

Dim TestFlashers, TableRef, FlasherLightIntensity, FlasherFlareIntensity, FlasherBloomIntensity, FlasherOffBrightness

								' *********************************************************************
TestFlashers = 0				' *** set this to 1 to check position of flasher object 			***
Set TableRef = Table1   		' *** change this, if your table has another name       			***
FlasherLightIntensity = 0.4		' *** lower this, if the VPX lights are too bright (i.e. 0.1)		***
FlasherFlareIntensity = 0.2		' *** lower this, if the flares are too bright (i.e. 0.1)			***
FlasherBloomIntensity = 0.7
FlasherOffBrightness = 0.6		' *** brightness of the flasher dome when switched off (range 0-2)	***
								' *********************************************************************

Dim ObjLevel(20), objbase(20), objlit(20), objflasher(20), objbloom(20), objlight(20)
'Dim tablewidth, tableheight : tablewidth = TableRef.width : tableheight = TableRef.height
''initialise the flasher color, you can only choose from "green", "red", "purple", "blue", "white" and "yellow"
InitFlasher 1, "yellow" ' : InitFlasher 2, "blue" : InitFlasher 3, "red" : InitFlasher 4, "blue" : InitFlasher 5, "white"
'' rotate the flasher with the command below (first argument = flasher nr, second argument = angle in degrees)
RotateFlasher 1,-45

'Flasherlight3.BulbHaloHeight = 88

Sub InitFlasher(nr, col)
	' store all objects in an array for use in FlashFlasher subroutine
	Set objbase(nr) = Eval("Flasherbase" & nr) : Set objlit(nr) = Eval("Flasherlit" & nr)
	Set objflasher(nr) = Eval("Flasherflash" & nr) : Set objlight(nr) = Eval("Flasherlight" & nr)
	Set objbloom(nr) = Eval("Flasherbloom" & nr)
	' If the flasher is parallel to the playfield, rotate the VPX flasher object for POV and place it at the correct height
	If objbase(nr).RotY = 0 Then
		objbase(nr).ObjRotZ =  atn( (tablewidth/2 - objbase(nr).x) / (objbase(nr).y - tableheight*1.1)) * 180 / 3.14159
		objflasher(nr).RotZ = objbase(nr).ObjRotZ : objflasher(nr).height = objbase(nr).z + 40
	End If
	' set all effects to invisible and move the lit primitive at the same position and rotation as the base primitive
	objlight(nr).IntensityScale = 0 : objlit(nr).visible = 0 : objlit(nr).material = "Flashermaterial" & nr
	objlit(nr).RotX = objbase(nr).RotX : objlit(nr).RotY = objbase(nr).RotY : objlit(nr).RotZ = objbase(nr).RotZ
	objlit(nr).ObjRotX = objbase(nr).ObjRotX : objlit(nr).ObjRotY = objbase(nr).ObjRotY : objlit(nr).ObjRotZ = objbase(nr).ObjRotZ
	objlit(nr).x = objbase(nr).x : objlit(nr).y = objbase(nr).y : objlit(nr).z = objbase(nr).z
	objbase(nr).BlendDisableLighting = FlasherOffBrightness
	' set the texture and color of all objects
	select case objbase(nr).image
		Case "dome2basewhite" : objbase(nr).image = "dome2base" & col : objlit(nr).image = "dome2lit" & col : 
		Case "ronddomebasewhite" : objbase(nr).image = "ronddomebase" & col : objlit(nr).image = "ronddomelit" & col
		Case "domeearbasewhite" : objbase(nr).image = "domeearbase" & col : objlit(nr).image = "domeearlit" & col
	end select
	If TestFlashers = 0 Then objflasher(nr).imageA = "domeflashwhite" : objflasher(nr).visible = 0 : End If
	select case col
		Case "blue" :   objlight(nr).color = RGB(4,120,255) : objflasher(nr).color = RGB(20,155,255) ': objlight(nr).intensity = 5000
		Case "green" :  objlight(nr).color = RGB(12,255,4) : objflasher(nr).color = RGB(12,255,4)
		Case "red" :    objlight(nr).color = RGB(255,32,4) : objflasher(nr).color = RGB(255,32,4)
		Case "purple" : objlight(nr).color = RGB(230,49,255) : objflasher(nr).color = RGB(255,64,255) 
		Case "yellow" : objlight(nr).color = RGB(200,173,25) : objflasher(nr).color = RGB(255,200,50)
		Case "white" :  objlight(nr).color = RGB(255,240,150) : objflasher(nr).color = RGB(100,86,59)
	end select
	objlight(nr).colorfull = objlight(nr).color
	If TableRef.ShowDT and ObjFlasher(nr).RotX = -45 Then 
		objflasher(nr).height = objflasher(nr).height - 20 * ObjFlasher(nr).y / tableheight
		ObjFlasher(nr).y = ObjFlasher(nr).y + 10
	End If
	'FlasherFlash4.height = 226
	'FlasherFlash3.height = 200
End Sub

Sub RotateFlasher(nr, angle) : angle = ((angle + 360 - objbase(nr).ObjRotZ) mod 180)/30 : objbase(nr).showframe(angle) : objlit(nr).showframe(angle) : End Sub

Sub FlashFlasher(nr)
	If not objflasher(nr).TimerEnabled Then objflasher(nr).TimerEnabled = True : objflasher(nr).visible = 1 : objlit(nr).visible = 1 : objbloom(nr).visible = 1
	objflasher(nr).opacity = 1000 *  FlasherFlareIntensity * ObjLevel(nr)^2.5
	objbloom(nr).opacity = 50 *  FlasherBloomIntensity * ObjLevel(nr)^2.5
	objlight(nr).IntensityScale = 0.5 * FlasherLightIntensity * ObjLevel(nr)^3' else objlight(nr).IntensityScale = 1 * FlasherLightIntensity * ObjLevel(nr)^3
	objbase(nr).BlendDisableLighting =  FlasherOffBrightness + 10 * ObjLevel(nr)^3	
	objlit(nr).BlendDisableLighting = 10 * ObjLevel(nr)^2
	UpdateMaterial "Flashermaterial" & nr,0,0,0,0,0,0,ObjLevel(nr),RGB(255,255,255),0,0,False,True,0,0,0,0 
	ObjLevel(nr) = ObjLevel(nr) * 0.9 - 0.01
	If ObjLevel(nr) < 0 Then objflasher(nr).TimerEnabled = False : objflasher(nr).visible = 0 : objbloom(nr).visible = 0 : objlit(nr).visible = 0 : End If
End Sub

Sub FlasherFlash1_Timer() : FlashFlasher(1) : End Sub 

'
'Sub FlashSol31(flstate)
'	If Flstate Then
'		Objlevel(1) = 1 : FlasherFlash1_Timer
'	End If
'End Sub

Sub SolFlash7B(enabled)
 If enabled Then
'    f7c.state = 1
'    f7d.state = 1
'    F7e.visible = 1
	Objlevel(1) = 1 : FlasherFlash1_Timer
	f7b.state = 1
    F2g.visible = 1
    F1g.opacity = 1000
    F1g1.opacity = 800
  Else
'    f7c.state = 0
'    f7d.state = 0
'    F7e.visible = 0
	f7b.state = 0
    F2g.visible = 0
    F1g.opacity = 700
    F1g1.opacity = 500
 End If
End Sub


'******************
'Keys Up and Down
'*****************

Sub Table1_KeyDown(ByVal Keycode)
    If keycode = PlungerKey Then Plunger.Pullback:SoundPlungerPull()
    If keycode = LeftTiltKey Then Nudge 90, 5:SoundNudgeLeft()
    If keycode = RightTiltKey Then Nudge 270, 5:SoundNudgeRight()
    If keycode = CenterTiltKey Then Nudge 0, 6:SoundNudgeCenter()

	If keycode = keyInsertCoin1 or keycode = keyInsertCoin2 or keycode = keyInsertCoin3 or keycode = keyInsertCoin4 Then
		Select Case Int(rnd*3)
			Case 0: PlaySound ("Coin_In_1"), 0, CoinSoundLevel, 0, 0.25
			Case 1: PlaySound ("Coin_In_2"), 0, CoinSoundLevel, 0, 0.25
			Case 2: PlaySound ("Coin_In_3"), 0, CoinSoundLevel, 0, 0.25

		End Select
	End If

	if keycode=StartGameKey then soundStartButton()

	'nFozzy Begin'
	If keycode = LeftFlipperKey Then LFPress = 1
	If keycode = RightFlipperKey Then rfpress = 1
	'nFozzy End'

	If keycode = RightMagnaSave Then 'AXS 'Fleep
		if DisableLUTSelector = 0 then
			If LutToggleSound Then
				Playsound "LUT_Toggle_Up_Front", 0, LutToggleSoundLevel * VolumeDial, 0, 0.2, 0, 0, 0, 1
				Playsound "LUT_Toggle_Up_Rear", 0, LutToggleSoundLevel * VolumeDial, 0, 0.2, 0, 0, 0, -1
			End If
            LUTSet = LUTSet  + 1
			if LutSet > 10 then LUTSet = 0
			SetLUT
			ShowLUT
		end if
	end if
	If keycode = LeftMagnaSave Then
		if DisableLUTSelector = 0 then
			If LutToggleSound Then
				Playsound "LUT_Toggle_Down_Front", 0, LutToggleSoundLevel * VolumeDial, 0, 0.2, 0, 0, 0, 1
				Playsound "LUT_Toggle_Down_Rear", 0, LutToggleSoundLevel * VolumeDial, 0, 0.2, 0, 0, 0, -1
			End If
			LUTSet = LUTSet - 1
			if LutSet < 0 then LUTSet = 10
			SetLUT
			ShowLUT
		end if
	end if

    If vpmKeyDown(keycode) Then Exit Sub
End Sub

Sub Table1_KeyUp(ByVal Keycode)
    If KeyCode = PlungerKey Then
		Plunger.Fire
		If BIPL = 1 Then
			SoundPlungerReleaseBall()			'Plunger release sound when there is a ball in shooter lane
		Else
			SoundPlungerReleaseNoBall()			'Plunger release sound when there is no ball in shooter lane
		End If
	End If

	'nFozzy Begin'
	If keycode = LeftFlipperKey Then 
		lfpress = 0
		leftflipper.eostorqueangle = EOSA
		leftflipper.eostorque = EOST
	End If
	If keycode = RightFlipperKey Then 
		rfpress = 0
		rightflipper.eostorqueangle = EOSA
		rightflipper.eostorque = EOST
	End If
	'nFozzy End'

    If vpmKeyUp(keycode) Then Exit Sub
End Sub

Sub Table1_Paused : Controller.Pause = True : End Sub
Sub Table1_unPaused : Controller.Pause = False : End Sub
Sub Table1_Exit() : Controller.Pause = False : Controller.Stop() : End Sub

'******************************************************
' 					LUT
'******************************************************


Sub SetLUT  'AXS
	Table1.ColorGradeImage = "LUT" & LUTset & "_" & 8 - 1
end sub 

Sub LUTBox_Timer
	LUTBox.TimerEnabled = 0 
	LUTBox.Visible = 0
End Sub

Sub ShowLUT
	LUTBox.visible = 1
	Select Case LUTSet
		Case 0: LUTBox.text = "Fleep Natural Dark 1"
		Case 1: LUTBox.text = "Fleep Natural Dark 2"
		Case 2: LUTBox.text = "Fleep Warm Dark"
		Case 3: LUTBox.text = "Fleep Warm Bright"
		Case 4: LUTBox.text = "Fleep Warm Vivid Soft"
		Case 5: LUTBox.text = "Fleep Warm Vivid Hard"
		Case 6: LUTBox.text = "Skitso Natural and Balanced"
		Case 7: LUTBox.text = "Skitso Natural High Contrast"
		Case 8: LUTBox.text = "3rdaxis Referenced THX Standard"
		Case 9: LUTBox.text = "CalleV Punchy Brightness and Contrast"
		Case 10: LUTBox.text = "TT & Ninuzzu Original"
	End Select
	LUTBox.TimerEnabled = 1
End Sub

'******************************************************
'					FLIPPERS
'******************************************************

Const ReflipAngle = 20

Sub SolLFlipper(Enabled)
	If Enabled Then
		LF.Fire  'leftflipper.rotatetoend
	
		If leftflipper.currentangle < leftflipper.endangle + ReflipAngle Then 
			RandomSoundReflipUpLeft LeftFlipper
		Else 
			SoundFlipperUpAttackLeft LeftFlipper
			RandomSoundFlipperUpLeft LeftFlipper
		End If		
	Else
		LeftFlipper.RotateToStart
		If LeftFlipper.currentangle < LeftFlipper.startAngle - 5 Then
			RandomSoundFlipperDownLeft LeftFlipper
		End If
		FlipperLeftHitParm = FlipperUpSoundLevel
    End If
End Sub

Sub SolRFlipper(Enabled)
	If Enabled Then
		RF.Fire 'rightflipper.rotatetoend

		If rightflipper.currentangle > rightflipper.endangle - ReflipAngle Then
			RandomSoundReflipUpRight RightFlipper
		Else 
			SoundFlipperUpAttackRight RightFlipper
			RandomSoundFlipperUpRight RightFlipper
		End If
	Else
		RightFlipper.RotateToStart
		If RightFlipper.currentangle > RightFlipper.startAngle + 5 Then
			RandomSoundFlipperDownRight RightFlipper
		End If	
		FlipperRightHitParm = FlipperUpSoundLevel
	End If
End Sub

Sub LeftFlipper_Collide(parm)
	LeftFlipperCollide parm
End Sub

Sub RightFlipper_Collide(parm)
	RightFlipperCollide parm
End Sub



'******************************************************
'		FLIPPER CORRECTION INITIALIZATION
'******************************************************

dim LF : Set LF = New FlipperPolarity
dim RF : Set RF = New FlipperPolarity

InitPolarity

Sub InitPolarity()
	dim x, a : a = Array(LF, RF)
	for each x in a
		x.AddPoint "Ycoef", 0, RightFlipper.Y-65, 1	'disabled
		x.AddPoint "Ycoef", 1, RightFlipper.Y-11, 1
		x.enabled = True
		x.TimeDelay = 60
	Next

	AddPt "Polarity", 0, 0, 0
	AddPt "Polarity", 1, 0.05, -5.5
	AddPt "Polarity", 2, 0.4, -5.5
	AddPt "Polarity", 3, 0.6, -5.0
	AddPt "Polarity", 4, 0.65, -4.5
	AddPt "Polarity", 5, 0.7, -4.0
	AddPt "Polarity", 6, 0.75, -3.5
	AddPt "Polarity", 7, 0.8, -3.0
	AddPt "Polarity", 8, 0.85, -2.5
	AddPt "Polarity", 9, 0.9,-2.0
	AddPt "Polarity", 10, 0.95, -1.5
	AddPt "Polarity", 11, 1, -1.0
	AddPt "Polarity", 12, 1.05, -0.5
	AddPt "Polarity", 13, 1.1, 0
	AddPt "Polarity", 14, 1.3, 0

	addpt "Velocity", 0, 0, 	1
	addpt "Velocity", 1, 0.16, 1.06
	addpt "Velocity", 2, 0.41, 	1.05
	addpt "Velocity", 3, 0.53, 	1'0.982
	addpt "Velocity", 4, 0.702, 0.968
	addpt "Velocity", 5, 0.95,  0.968
	addpt "Velocity", 6, 1.03, 	0.945

	LF.Object = LeftFlipper	
	LF.EndPoint = EndPointLp
	RF.Object = RightFlipper
	RF.EndPoint = EndPointRp
End Sub

Sub TriggerLF_Hit() : LF.Addball activeball : End Sub
Sub TriggerLF_UnHit() : LF.PolarityCorrect activeball : End Sub
Sub TriggerRF_Hit() : RF.Addball activeball : End Sub
Sub TriggerRF_UnHit() : RF.PolarityCorrect activeball : End Sub

'******************************************************
'			FLIPPER CORRECTION FUNCTIONS
'******************************************************

Sub AddPt(aStr, idx, aX, aY)	'debugger wrapper for adjusting flipper script in-game
	dim a : a = Array(LF, RF)
	dim x : for each x in a
		x.addpoint aStr, idx, aX, aY
	Next
End Sub

Class FlipperPolarity
	Public DebugOn, Enabled
	Private FlipAt	'Timer variable (IE 'flip at 723,530ms...)
	Public TimeDelay	'delay before trigger turns off and polarity is disabled TODO set time!
	private Flipper, FlipperStart,FlipperEnd, FlipperEndY, LR, PartialFlipCoef
	Private Balls(20), balldata(20)
	
	dim PolarityIn, PolarityOut
	dim VelocityIn, VelocityOut
	dim YcoefIn, YcoefOut
	Public Sub Class_Initialize 
		redim PolarityIn(0) : redim PolarityOut(0) : redim VelocityIn(0) : redim VelocityOut(0) : redim YcoefIn(0) : redim YcoefOut(0)
		Enabled = True : TimeDelay = 50 : LR = 1:  dim x : for x = 0 to uBound(balls) : balls(x) = Empty : set Balldata(x) = new SpoofBall : next 
	End Sub
	
	Public Property let Object(aInput) : Set Flipper = aInput : StartPoint = Flipper.x : End Property
	Public Property Let StartPoint(aInput) : if IsObject(aInput) then FlipperStart = aInput.x else FlipperStart = aInput : end if : End Property
	Public Property Get StartPoint : StartPoint = FlipperStart : End Property
	Public Property Let EndPoint(aInput) : FlipperEnd = aInput.x: FlipperEndY = aInput.y: End Property
	Public Property Get EndPoint : EndPoint = FlipperEnd : End Property	
	Public Property Get EndPointY: EndPointY = FlipperEndY : End Property
	
	Public Sub AddPoint(aChooseArray, aIDX, aX, aY) 'Index #, X position, (in) y Position (out) 
		Select Case aChooseArray
			case "Polarity" : ShuffleArrays PolarityIn, PolarityOut, 1 : PolarityIn(aIDX) = aX : PolarityOut(aIDX) = aY : ShuffleArrays PolarityIn, PolarityOut, 0
			Case "Velocity" : ShuffleArrays VelocityIn, VelocityOut, 1 :VelocityIn(aIDX) = aX : VelocityOut(aIDX) = aY : ShuffleArrays VelocityIn, VelocityOut, 0
			Case "Ycoef" : ShuffleArrays YcoefIn, YcoefOut, 1 :YcoefIn(aIDX) = aX : YcoefOut(aIDX) = aY : ShuffleArrays YcoefIn, YcoefOut, 0
		End Select
		if gametime > 100 then Report aChooseArray
	End Sub 

	Public Sub Report(aChooseArray) 	'debug, reports all coords in tbPL.text
		if not DebugOn then exit sub
		dim a1, a2 : Select Case aChooseArray
			case "Polarity" : a1 = PolarityIn : a2 = PolarityOut
			Case "Velocity" : a1 = VelocityIn : a2 = VelocityOut
			Case "Ycoef" : a1 = YcoefIn : a2 = YcoefOut 
			case else :tbpl.text = "wrong string" : exit sub
		End Select
		dim str, x : for x = 0 to uBound(a1) : str = str & aChooseArray & " x: " & round(a1(x),4) & ", " & round(a2(x),4) & vbnewline : next
		tbpl.text = str
	End Sub
	
	Public Sub AddBall(aBall) : dim x : for x = 0 to uBound(balls) : if IsEmpty(balls(x)) then set balls(x) = aBall : exit sub :end if : Next  : End Sub

	Private Sub RemoveBall(aBall)
		dim x : for x = 0 to uBound(balls)
			if TypeName(balls(x) ) = "IBall" then 
				if aBall.ID = Balls(x).ID Then
					balls(x) = Empty
					Balldata(x).Reset
				End If
			End If
		Next
	End Sub
	
	Public Sub Fire() 
		Flipper.RotateToEnd
		processballs
	End Sub

	Public Property Get Pos 'returns % position a ball. For debug stuff.
		dim x : for x = 0 to uBound(balls)
			if not IsEmpty(balls(x) ) then
				pos = pSlope(Balls(x).x, FlipperStart, 0, FlipperEnd, 1)
			End If
		Next		
	End Property

	Public Sub ProcessBalls() 'save data of balls in flipper range
		FlipAt = GameTime
		dim x : for x = 0 to uBound(balls)
			if not IsEmpty(balls(x) ) then
				balldata(x).Data = balls(x)
			End If
		Next
		PartialFlipCoef = ((Flipper.StartAngle - Flipper.CurrentAngle) / (Flipper.StartAngle - Flipper.EndAngle))
		PartialFlipCoef = abs(PartialFlipCoef-1)
	End Sub
	Private Function FlipperOn() : if gameTime < FlipAt+TimeDelay then FlipperOn = True : End If : End Function	'Timer shutoff for polaritycorrect
	
	Public Sub PolarityCorrect(aBall)
		if FlipperOn() then 
			dim tmp, BallPos, x, IDX, Ycoef : Ycoef = 1

			'y safety Exit
			if aBall.VelY > -8 then 'ball going down
				RemoveBall aBall
				exit Sub
			end if

			'Find balldata. BallPos = % on Flipper
			for x = 0 to uBound(Balls)
				if aBall.id = BallData(x).id AND not isempty(BallData(x).id) then 
					idx = x
					BallPos = PSlope(BallData(x).x, FlipperStart, 0, FlipperEnd, 1)
					if ballpos > 0.65 then  Ycoef = LinearEnvelope(BallData(x).Y, YcoefIn, YcoefOut)				'find safety coefficient 'ycoef' data
				end if
			Next

			If BallPos = 0 Then 'no ball data meaning the ball is entering and exiting pretty close to the same position, use current values.
				BallPos = PSlope(aBall.x, FlipperStart, 0, FlipperEnd, 1)
				if ballpos > 0.65 then  Ycoef = LinearEnvelope(aBall.Y, YcoefIn, YcoefOut)						'find safety coefficient 'ycoef' data
			End If

			'Velocity correction
			if not IsEmpty(VelocityIn(0) ) then
				Dim VelCoef
	 : 			VelCoef = LinearEnvelope(BallPos, VelocityIn, VelocityOut)

				if partialflipcoef < 1 then VelCoef = PSlope(partialflipcoef, 0, 1, 1, VelCoef)

				if Enabled then aBall.Velx = aBall.Velx*VelCoef
				if Enabled then aBall.Vely = aBall.Vely*VelCoef
			End If

			'Polarity Correction (optional now)
			if not IsEmpty(PolarityIn(0) ) then
				If StartPoint > EndPoint then LR = -1	'Reverse polarity if left flipper
				dim AddX : AddX = LinearEnvelope(BallPos, PolarityIn, PolarityOut) * LR
	
				if Enabled then aBall.VelX = aBall.VelX + 1 * (AddX*ycoef*PartialFlipcoef)
				'playsound "fx_knocker"
			End If
		End If
		RemoveBall aBall
	End Sub
End Class

'******************************************************
'		FLIPPER POLARITY AND RUBBER DAMPENER
'			SUPPORTING FUNCTIONS 
'******************************************************

' Used for flipper correction and rubber dampeners
Sub ShuffleArray(ByRef aArray, byVal offset) 'shuffle 1d array
	dim x, aCount : aCount = 0
	redim a(uBound(aArray) )
	for x = 0 to uBound(aArray)	'Shuffle objects in a temp array
		if not IsEmpty(aArray(x) ) Then
			if IsObject(aArray(x)) then 
				Set a(aCount) = aArray(x)
			Else
				a(aCount) = aArray(x)
			End If
			aCount = aCount + 1
		End If
	Next
	if offset < 0 then offset = 0
	redim aArray(aCount-1+offset)	'Resize original array
	for x = 0 to aCount-1		'set objects back into original array
		if IsObject(a(x)) then 
			Set aArray(x) = a(x)
		Else
			aArray(x) = a(x)
		End If
	Next
End Sub

' Used for flipper correction and rubber dampeners
Sub ShuffleArrays(aArray1, aArray2, offset)
	ShuffleArray aArray1, offset
	ShuffleArray aArray2, offset
End Sub

' Used for flipper correction, rubber dampeners, and drop targets
Function BallSpeed(ball) 'Calculates the ball speed
    BallSpeed = SQR(ball.VelX^2 + ball.VelY^2 + ball.VelZ^2)
End Function

' Used for flipper correction and rubber dampeners
Function PSlope(Input, X1, Y1, X2, Y2)	'Set up line via two points, no clamping. Input X, output Y
	dim x, y, b, m : x = input : m = (Y2 - Y1) / (X2 - X1) : b = Y2 - m*X2
	Y = M*x+b
	PSlope = Y
End Function

' Used for flipper correction
Class spoofball 
	Public X, Y, Z, VelX, VelY, VelZ, ID, Mass, Radius 
	Public Property Let Data(aBall)
		With aBall
			x = .x : y = .y : z = .z : velx = .velx : vely = .vely : velz = .velz
			id = .ID : mass = .mass : radius = .radius
		end with
	End Property
	Public Sub Reset()
		x = Empty : y = Empty : z = Empty  : velx = Empty : vely = Empty : velz = Empty 
		id = Empty : mass = Empty : radius = Empty
	End Sub
End Class

' Used for flipper correction and rubber dampeners
Function LinearEnvelope(xInput, xKeyFrame, yLvl)
	dim y 'Y output
	dim L 'Line
	dim ii : for ii = 1 to uBound(xKeyFrame)	'find active line
		if xInput <= xKeyFrame(ii) then L = ii : exit for : end if
	Next
	if xInput > xKeyFrame(uBound(xKeyFrame) ) then L = uBound(xKeyFrame)	'catch line overrun
	Y = pSlope(xInput, xKeyFrame(L-1), yLvl(L-1), xKeyFrame(L), yLvl(L) )

	if xInput <= xKeyFrame(lBound(xKeyFrame) ) then Y = yLvl(lBound(xKeyFrame) ) 	'Clamp lower
	if xInput >= xKeyFrame(uBound(xKeyFrame) ) then Y = yLvl(uBound(xKeyFrame) )	'Clamp upper

	LinearEnvelope = Y
End Function

' Used for drop targets and flipper tricks
Function Distance(ax,ay,bx,by)
	Distance = SQR((ax - bx)^2 + (ay - by)^2)
End Function

'******************************************************
'			FLIPPER TRICKS
'******************************************************

RightFlipper.timerinterval=1
Rightflipper.timerenabled=True

sub RightFlipper_timer()
	FlipperTricks LeftFlipper, LFPress, LFCount, LFEndAngle, LFState
	FlipperTricks RightFlipper, RFPress, RFCount, RFEndAngle, RFState
	FlipperNudge RightFlipper, RFEndAngle, RFEOSNudge, LeftFlipper, LFEndAngle
	FlipperNudge LeftFlipper, LFEndAngle, LFEOSNudge,  RightFlipper, RFEndAngle
end sub

Dim LFEOSNudge, RFEOSNudge

Sub FlipperNudge(Flipper1, Endangle1, EOSNudge1, Flipper2, EndAngle2)
	Dim BOT, b

	If abs(Flipper1.currentangle) < abs(Endangle1) + 3 and EOSNudge1 <> 1 Then
		EOSNudge1 = 1
		If Flipper2.currentangle = EndAngle2 Then 
			BOT = GetBalls
			For b = 0 to Ubound(BOT)
				If FlipperTrigger(BOT(b).x, BOT(b).y, Flipper1) Then
					'Debug.Print "ball in flip1. exit"
 					exit Sub
				end If
			Next
			For b = 0 to Ubound(BOT)
				If FlipperTrigger(BOT(b).x, BOT(b).y, Flipper2) Then
					'debug.print "flippernudge!!"
					BOT(b).velx = BOT(b).velx /1.5
					BOT(b).vely = BOT(b).vely - 1
				end If
			Next
		End If
	Else 
		If abs(Flipper1.currentangle) > abs(Endangle1) + 30 then EOSNudge1 = 0
	End If
End Sub

'*************************************************
' Check ball distance from Flipper for Rem
'*************************************************

Function Distance(ax,ay,bx,by)
	Distance = SQR((ax - bx)^2 + (ay - by)^2)
End Function

Function DistancePL(px,py,ax,ay,bx,by) ' Distance between a point and a line where point is px,py
	DistancePL = ABS((by - ay)*px - (bx - ax) * py + bx*ay - by*ax)/Distance(ax,ay,bx,by)
End Function

Function Radians(Degrees)
	Radians = Degrees * PI /180
End Function

Function AnglePP(ax,ay,bx,by)
	AnglePP = Atn2((by - ay),(bx - ax))*180/PI
End Function

Function DistanceFromFlipper(ballx, bally, Flipper)
	DistanceFromFlipper = DistancePL(ballx, bally, Flipper.x, Flipper.y, Cos(Radians(Flipper.currentangle+90))+Flipper.x, Sin(Radians(Flipper.currentangle+90))+Flipper.y)
End Function

Function FlipperTrigger(ballx, bally, Flipper)
	Dim DiffAngle
	DiffAngle  = ABS(Flipper.currentangle - AnglePP(Flipper.x, Flipper.y, ballx, bally) - 90)
	If DiffAngle > 180 Then DiffAngle = DiffAngle - 360

	If DistanceFromFlipper(ballx,bally,Flipper) < 48 and DiffAngle <= 90 and Distance(ballx,bally,Flipper.x,Flipper.y) < Flipper.Length Then
		FlipperTrigger = True
	Else
		FlipperTrigger = False
	End If	
End Function

'*************************************************
' End - Check ball distance from Flipper for Rem
'*************************************************


dim LFPress, RFPress, LFCount, RFCount
dim LFState, RFState
dim EOST, EOSA,Frampup, FElasticity,FReturn
dim RFEndAngle, LFEndAngle

EOST = leftflipper.eostorque
EOSA = leftflipper.eostorqueangle
Frampup = LeftFlipper.rampup
FElasticity = LeftFlipper.elasticity
FReturn = LeftFlipper.return
Const EOSTnew = 0.8 
Const EOSAnew = 1
Const EOSRampup = 0
Dim SOSRampup
SOSRampup = 2.5
Const LiveCatch = 24
Const LiveElasticity = 0.45
Const SOSEM = 0.815
Const EOSReturn = 0.025

LFEndAngle = Leftflipper.endangle
RFEndAngle = RightFlipper.endangle

Sub FlipperActivate(Flipper, FlipperPress)
	FlipperPress = 1
	Flipper.Elasticity = FElasticity

	Flipper.eostorque = EOST 	
	Flipper.eostorqueangle = EOSA 	
End Sub

Sub FlipperDeactivate(Flipper, FlipperPress)
	FlipperPress = 0
	Flipper.eostorqueangle = EOSA
	Flipper.eostorque = EOST*EOSReturn/FReturn

	
	If Abs(Flipper.currentangle) <= Abs(Flipper.endangle) + 0.1 Then
		Dim BOT, b
		BOT = GetBalls
			
		For b = 0 to UBound(BOT)
			If Distance(BOT(b).x, BOT(b).y, Flipper.x, Flipper.y) < 55 Then 'check for cradle
				If BOT(b).vely >= -0.4 Then BOT(b).vely = -0.4
			End If
		Next
	End If
End Sub

Sub FlipperTricks (Flipper, FlipperPress, FCount, FEndAngle, FState) 
	Dim Dir
	Dir = Flipper.startangle/Abs(Flipper.startangle)	'-1 for Right Flipper

	If Abs(Flipper.currentangle) > Abs(Flipper.startangle) - 0.05 Then
		If FState <> 1 Then
			Flipper.rampup = SOSRampup 
			Flipper.endangle = FEndAngle - 3*Dir
			Flipper.Elasticity = FElasticity * SOSEM
			FCount = 0 
			FState = 1
		End If
	ElseIf Abs(Flipper.currentangle) <= Abs(Flipper.endangle) and FlipperPress = 1 then
		if FCount = 0 Then FCount = GameTime

		If FState <> 2 Then
			Flipper.eostorqueangle = EOSAnew
			Flipper.eostorque = EOSTnew
			Flipper.rampup = EOSRampup			
			Flipper.endangle = FEndAngle
			FState = 2
		End If
	Elseif Abs(Flipper.currentangle) > Abs(Flipper.endangle) + 0.01 and FlipperPress = 1 Then 
		If FState <> 3 Then
			Flipper.eostorque = EOST	
			Flipper.eostorqueangle = EOSA
			Flipper.rampup = Frampup
			Flipper.Elasticity = FElasticity
			FState = 3
		End If

	End If
End Sub

Const LiveDistanceMin = 30  'minimum distance in vp units from flipper base live catch dampening will occur
Const LiveDistanceMax = 114  'maximum distance in vp units from flipper base live catch dampening will occur (tip protection)

Sub CheckLiveCatch(ball, Flipper, FCount, parm) 'Experimental new live catch
	Dim Dir
	Dir = Flipper.startangle/Abs(Flipper.startangle)    '-1 for Right Flipper
	Dim LiveCatchBounce															'If live catch is not perfect, it won't freeze ball totally
	Dim CatchTime : CatchTime = GameTime - FCount

	if CatchTime <= LiveCatch and parm > 6 and ABS(Flipper.x - ball.x) > LiveDistanceMin and ABS(Flipper.x - ball.x) < LiveDistanceMax Then
		if CatchTime <= LiveCatch*0.8 Then						'Perfect catch only when catch time happens in the beginning of the window
			LiveCatchBounce = 0
		else
			LiveCatchBounce = Abs((LiveCatch/2) - CatchTime)	'Partial catch when catch happens a bit late
		end If
		debug.print "Live catch! Bounce: " & LiveCatchBounce

		If LiveCatchBounce = 0 and ball.velx * Dir > 0 Then ball.velx = 0
		ball.vely = LiveCatchBounce * (16 / LiveCatch) ' Multiplier for inaccuracy bounce
		ball.angmomx= 0
		ball.angmomy= 0
		ball.angmomz= 0
	End If
End Sub

'*****************************************************************************************************
'*******************************************************************************************************
'END nFOZZY FLIPPERS'

'************************
'	General Illumination
'************************

Sub SolGi(enabled)
  If enabled Then
     GiOFF
	PlaySoundAtLevelStatic ("fx_relay_off"), 0.001, PegPlasticT7
	PinCab_Backglass.blenddisablelighting=1
   Else
     GiON
	PlaySoundAtLevelStatic ("fx_relay_on"), 0.001, PegPlasticT7
	PinCab_Backglass.blenddisablelighting=5
 End If
End Sub

dim gistate, gilevel
gilevel = 0
const GiSpeedUp = 0.2
const GiSpeedDown = 0.08

Sub GiON
	gistate = 1
	GiEffectTimer.enabled = 1
    For each x in aGiLights:x.State = 1:Next
End Sub

Sub GiOFF
	gistate = 0
	GiEffectTimer.enabled = 1
    For each x in aGiLights:x.State = 0:Next
End Sub

sub GiEffectTimer_timer()
	'debug.print "level: " & gilevel & " state: " & gistate
	if gistate = 1 Then
		'gilevel = gilevel + GiSpeedUp
		gilevel = gilevel * 1.4 + 0.2
		if gilevel > 1 then
			gilevel = 1
			GiEffectTimer.enabled = 0
		end if
	elseif gistate = 0 Then
		'gilevel = gilevel - GiSpeedDown
		gilevel = gilevel * 0.95 - 0.02
		if gilevel < 0 then
			gilevel = 0
			GiEffectTimer.enabled = 0
		end if
	end if

	gi29.IntensityScale=gilevel
	gi30.IntensityScale=gilevel
	pfGi_On.opacity = gilevel * 100
	GISpot1.IntensityScale=gilevel
	GISpot2.IntensityScale=gilevel
	F1g.opacity = gilevel*450 + 250
	F1g1.opacity = gilevel*350 + 150

	'flips
	RFlogo.blenddisablelighting = gilevel * 0.2
	LFlogo.blenddisablelighting = gilevel * 0.2

	'plastics bevels
	bevels.blenddisablelighting = gilevel * 0.3

	'ramps
	If VRRoom <> 0 Then 
	Primitive_MainRamp.blenddisablelighting = gilevel * 0.1
	Primitive_RightRamp.blenddisablelighting = gilevel * 0.1
	Primitive_Skillshotramp.blenddisablelighting = gilevel * 0.05
	Else
	Primitive_MainRamp.blenddisablelighting = gilevel * 0.5
	Primitive_RightRamp.blenddisablelighting = gilevel * 0.1
	Primitive_Skillshotramp.blenddisablelighting = gilevel * 0.05
	End If

	'PlungerDecals
	Primitive_SwordDecal.blenddisablelighting = gilevel * 0.2 + 0.05
	Primitive_ShieldDecal.blenddisablelighting = gilevel * 0.15  + 0.05

	
	'lane plastics
	Primitive016.blenddisablelighting = gilevel*0.3 + 0.03
	Primitive015.blenddisablelighting = gilevel*0.3 + 0.03

	LeftTopLane.blenddisablelighting = gilevel*0.5 + 0.1
	LeftLowLane.blenddisablelighting = gilevel*0.5 + 0.1
	RightTopLane.blenddisablelighting = gilevel*0.5 + 0.1
	RightLowLane.blenddisablelighting = gilevel*0.5 + 0.1
	WallInlaneCorner1.blenddisablelighting = gilevel*0.5 + 0.1
	WallInlaneCorner2.blenddisablelighting = gilevel*0.5 + 0.1
	WallInlaneCorner3.blenddisablelighting = gilevel*0.5 + 0.1

	'top lane guides 1-15 dl
	Primitive100.blenddisablelighting = gilevel * 4 + 1
	Primitive40.blenddisablelighting = gilevel * 1.5 + 1
	Primitive45.blenddisablelighting = gilevel * 1.5 + 1
	Primitive53.blenddisablelighting = gilevel * 5 + 1

	'left high plastic
	Primitive020.blenddisablelighting = gilevel*0.05
	'left lower plastic
	Primitive023.blenddisablelighting = gilevel*0.1 + 0.01
	'right top 1
	Primitive77.blenddisablelighting = gilevel*0.2 + 0.1
	'right top 2
	Primitive75.blenddisablelighting = gilevel*0.2 + 0.1
	'right
	Primitive019.blenddisablelighting = gilevel*0.05 + 0.1
	'center
	'Primitive012.blenddisablelighting = gilevel*0.05 + 0.05

	'under piratetown
	Primitive011.blenddisablelighting = gilevel*0.1 + 0.01

	'top right
	Primitive013.blenddisablelighting = gilevel*0.1 + 0.05

	'top left
	Primitive014.blenddisablelighting = gilevel*0.1 + 0.05

	'slings
	'Primitive11.blenddisablelighting = gilevel*0.4 + 0.1
	'Primitive12.blenddisablelighting = gilevel*0.4 + 0.1
	Primitive017.blenddisablelighting = gilevel*0.5 + 0.1
	Primitive018.blenddisablelighting = gilevel*0.5 + 0.1

	'target on Right
	Sw20b.blenddisablelighting = gilevel*4 + 1
	Sw33b.blenddisablelighting = gilevel*1 + 0.5
	Sw34b.blenddisablelighting = gilevel*1 + 0.5
	Sw35b.blenddisablelighting = gilevel*1 + 0.5
	Sw41b.blenddisablelighting = gilevel*1 + 0.5
	Sw42b.blenddisablelighting = gilevel*0.7 + 0.5
	Sw43b.blenddisablelighting = gilevel*0.4 + 0.5
	Sw44b.blenddisablelighting = gilevel*1 + 0.5
	Sw45b.blenddisablelighting = gilevel*0.7 + 0.5
	Sw46b.blenddisablelighting = gilevel*0.4 + 0.5

	'skullP
	skullP.blenddisablelighting = gilevel*0.5+0.3
	skullPb.blenddisablelighting = gilevel*0.5+0.3



	'blades
	PinCab_Blades.blenddisablelighting = gilevel*0.3 + 0.4

	'metals near PF
	For each yy in aMetals: yy.blenddisablelighting = gilevel*0.3 + 0.07: next
	
	if gilevel = 1 or gilevel = 0 then
		me.enabled = 0
	end if
end sub

' *********************************************************************
'                      Supporting Ball & Sound Functions
' *********************************************************************

Function Vol(ball) ' Calculates the Volume of the sound based on the ball speed
    Vol = Csng(BallVel(ball) ^2 / 500)
End Function

Function Pan(ball) ' Calculates the pan for a ball based on the X position on the table. "table1" is the name of the table
    Dim tmp
    tmp = ball.x * 2 / Table1.width-1
    If tmp > 0 Then
        Pan = Csng(tmp ^10)
    Else
        Pan = Csng(-((- tmp) ^10))
    End If
End Function

Function Pitch(ball) ' Calculates the pitch of the sound based on the ball speed
    Pitch = BallVel(ball) * 20
End Function

Function BallVel(ball) 'Calculates the ball speed
    BallVel = INT(SQR((ball.VelX ^2) + (ball.VelY ^2)))
End Function

'*****************
' Maths
'*****************
Const Pi = 3.1415927

Function dSin(degrees)
	dsin = sin(degrees * Pi/180)
End Function

Function dCos(degrees)
	dcos = cos(degrees * Pi/180)
End Function

'****************************************
' Real Time updates
'****************************************

Sub FrameTimer_Timer()
	Cor.Update
    RollingUpdate
	BallShadowUpdate
	LFLogo.RotY = LeftFlipper.CurrentAngle
	RFlogo.RotY = RightFlipper.CurrentAngle
	FlipperRSh.RotZ = RightFlipper.CurrentAngle
	FlipperLSh.RotZ = LeftFlipper.CurrentAngle
	VR_Primary_plunger.Y = 15.34 + (5* Plunger.Position) -20
	LampTimer
End Sub

'*********** BALL SHADOW *********************************
Dim BallShadow
BallShadow = Array (BallShadow1, BallShadow2, BallShadow3,BallShadow4,BallShadow5,BallShadow6)

Sub BallShadowUpdate()
    Dim BOT, b
    BOT = GetBalls
	' hide shadow of deleted balls
	If UBound(BOT)<(tnob-1) Then
		For b = (UBound(BOT) + 1) to (tnob-1)
			BallShadow(b).visible = 0
		Next
	End If
	' exit the Sub if no balls on the table
    If UBound(BOT) = -1 Then Exit Sub
	' render the shadow for each ball
    For b = 0 to UBound(BOT)
		If BOT(b).X < Table1.Width/2 Then
			BallShadow(b).X = ((BOT(b).X) - (Ballsize/6) + ((BOT(b).X - (Table1.Width/2))/7)) + 10
		Else
			BallShadow(b).X = ((BOT(b).X) + (Ballsize/6) + ((BOT(b).X - (Table1.Width/2))/7)) - 10
		End If
	    ballShadow(b).Y = BOT(b).Y + 20

		If BOT(b).Z > 20 Then
			BallShadow(b).visible = 1
		Else
			BallShadow(b).visible = 0
		End If
	Next
End Sub




'******************************
'		 Sound FX
'******************************


Function RndNum(min,max)
 RndNum = Int(Rnd()*(max-min+1))+min     ' Sets a random number between min and max
End Function

sub Wall005_Hit()
 	dim finalspeed
  	finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
	'debug.print "Rubber wall hit: " & finalspeed
 	If finalspeed > 5 then		
 		RandomSoundRubberStrong 1
	End if
	If finalspeed <= 5 then
 		RandomSoundRubberWeak()
 	End If	
end sub

Sub RubberBands_Hit(idx)
 	dim finalspeed
  	finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
	'debug.print "Rubber band hit: " & finalspeed
 	If finalspeed > 5 then		
 		RandomSoundRubberStrong 1
	End if
	If finalspeed <= 5 then
 		RandomSoundRubberWeak()
 	End If	
End Sub
Sub RubberPost_Hit(idx)
 	dim finalspeed
  	finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
	'debug.print "Rubber post hit: " & finalspeed
 	If finalspeed > 5 then		
 		RandomSoundRubberStrong 1
	End if
	If finalspeed <= 5 then
 		RandomSoundRubberWeak()
 	End If	
End Sub
Sub RubberPostPrimitive_Hit(idx)
 	dim finalspeed
  	finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
	'debug.print "Rubber post prim hit: " & finalspeed
 	If finalspeed > 5 then		
 		RandomSoundRubberStrong 1
	End if
	If finalspeed <= 5 then
 		RandomSoundRubberWeak()
 	End If	
End Sub

 Sub LRHelp1_Hit()
	ActiveBall.VelY = ActiveBall.VelY/5
	ActiveBall.VelX = ActiveBall.VelX/5
End Sub

'
Sub RampFX1_hit:RandomSoundDelayedBallDropOnPlayfield activeball: End Sub
Sub RampFX2_hit:RandomSoundDelayedBallDropOnPlayfield activeball: End Sub
Sub RampFX3_hit:RandomSoundDelayedBallDropOnPlayfield activeball: End Sub

' Ball Collision Sound
'Sub OnBallBallCollision(ball1, ball2, velocity)
'    PlaySound("fx_collide"), 0, Csng(velocity) ^2 / 2000, Pan(ball1), 0, Pitch(ball1), 0, 0
'End Sub

'
'Sub Oyos123_Hit(idx): vpmtimer.addtimer 800, "BallDropFX' " End Sub
'
'Sub BallDropFX()
'    playSound "BallDrop"
'End Sub    


'*****************
' Switches
'*****************

' Slingshots
Dim LStep, RStep

Sub LeftSlingShot_Slingshot
    RandomSoundSlingshotLeft Lemk
    LeftSling4.Visible = 1
    LeftSling1.Visible = 0
    Lemk.RotX = 26
    LStep = 0
    vpmTimer.PulseSw 52
    LeftSlingShot.TimerEnabled = 1
End Sub

Sub LeftSlingShot_Timer
    Select Case LStep
        Case 1:LeftSLing4.Visible = 0:LeftSLing3.Visible = 1:Lemk.RotX = 14
        Case 2:LeftSLing3.Visible = 0:LeftSLing2.Visible = 1:Lemk.RotX = 2
        Case 3:LeftSLing2.Visible = 0:LeftSling1.Visible = 1:Lemk.RotX = -10:LeftSlingShot.TimerEnabled = 0
    End Select
    LStep = LStep + 1
End Sub

Sub RightSlingShot_Slingshot
    RandomSoundSlingshotRight Remk
    RightSling4.Visible = 1
    RightSling1.Visible = 0
    Remk.RotX = 26
    RStep = 0
    vpmTimer.PulseSw 53
    RightSlingShot.TimerEnabled = 1
End Sub

Sub RightSlingShot_Timer
    Select Case RStep
        Case 1:RightSLing4.Visible = 0:RightSLing3.Visible = 1:Remk.RotX = 14
        Case 2:RightSLing3.Visible = 0:RightSLing2.Visible = 1:Remk.RotX = 2
        Case 3:RightSLing2.Visible = 0:RightSling1.Visible = 1:Remk.RotX = -10:RightSlingShot.TimerEnabled = 0
    End Select
    RStep = RStep + 1
End Sub

' Bumpers
Sub Bumper1B_Hit:vpmTimer.PulseSw 33:RandomSoundBumperTop Bumper1B:End Sub
Sub Bumper2B_Hit:vpmTimer.PulseSw 35:RandomSoundBumperBottom Bumper2B:End Sub
Sub Bumper3B_Hit:vpmTimer.PulseSw 34:RandomSoundBumperMiddle  Bumper3B:End Sub



dim BIPL

Sub Sw14_Hit(): Controller.Switch(14)=1: BIPL=1: End Sub
Sub Sw14_UnHit():Controller.Switch(14)=0: BIPL=0: End Sub

Sub Sw17_Hit(): Controller.Switch(17)=1: End Sub
Sub Sw17_UnHit():Controller.Switch(17)=0: End Sub

Sub Sw18_Hit(): Controller.Switch(18)=1: End Sub
Sub Sw18_UnHit():Controller.Switch(18)=0: End Sub

Sub Sw19_Hit(): Controller.Switch(19)=1: End Sub
Sub Sw19_UnHit():Controller.Switch(19)=0: End Sub



Sub Sw20_Hit:vpmTimer.PulseSw 20 :MoveTarget20 :RandomSoundBumperBottom ActiveBall:End Sub
Sub MoveTarget20
	Sw20a.TransZ = 5
	Sw20b.TransZ = 5
	Sw20.Timerenabled = False
	Sw20.Timerenabled = True
End Sub
Sub	Sw20_Timer
	Sw20.Timerenabled = False
	Sw20a.TransZ = 0
	Sw20b.TransZ = 0
End Sub


Sub Sw21_Hit(): Controller.Switch(21)=1: End Sub
Sub Sw21_UnHit():Controller.Switch(21)=0: End Sub

Sub Sw22_Hit(): Controller.Switch(22)=1: End Sub
Sub Sw22_UnHit():Controller.Switch(22)=0: End Sub

Sub Sw23_Hit(): Controller.Switch(23)=1: End Sub
Sub Sw23_UnHit():Controller.Switch(23)=0: End Sub

Sub Sw24_Hit(): Controller.Switch(24)=1: End Sub
Sub Sw24_UnHit():Controller.Switch(24)=0: End Sub



'Drops Targets 
Sub sw25_dropped():dtLDrop.Hit 1:End Sub
Sub sw26_dropped():dtLDrop.Hit 2:End Sub
Sub sw27_dropped():dtLDrop.Hit 3:End Sub
Sub sw28_dropped():dtLDrop.Hit 4:End Sub



Sub Sw29_Hit(): Controller.Switch(29)=1: End Sub
Sub Sw29_UnHit():Controller.Switch(29)=0: End Sub

Sub Sw30_Hit(): Controller.Switch(30)=1: End Sub
Sub Sw30_UnHit():Controller.Switch(30)=0: End Sub

Sub Sw31_Hit(): Controller.Switch(31)=1: End Sub
Sub Sw31_UnHit():Controller.Switch(31)=0: End Sub

Sub Sw32_Hit(): SkillShotR.AddBall 0: End Sub

Sub Sw32_UnHit
    LaserKickP.TransY = 90
	'msgbox "sw32 unhit"
	RandomSoundBallRelease Sw32   
    vpmtimer.addtimer 500, "PlungerRes '"
End Sub

Sub PlungerRes()
    LaserKickP.TransY = 0
End Sub



 
Sub Sw33_Hit:vpmTimer.PulseSw 33 :MoveTarget33 :End Sub
Sub Sw34_Hit:vpmTimer.PulseSw 34 :MoveTarget34 :End Sub
Sub Sw35_Hit:vpmTimer.PulseSw 35 :MoveTarget35 :End Sub
Sub Sw41_Hit:vpmTimer.PulseSw 41 :MoveTarget41 :End Sub
Sub Sw42_Hit:vpmTimer.PulseSw 42 :MoveTarget42 :End Sub
Sub Sw43_Hit:vpmTimer.PulseSw 43 :MoveTarget43 :End Sub
Sub Sw44_Hit:vpmTimer.PulseSw 44 :MoveTarget44 :End Sub
Sub Sw45_Hit:vpmTimer.PulseSw 45 :MoveTarget45 :End Sub
Sub Sw46_Hit:vpmTimer.PulseSw 46 :MoveTarget46 :End Sub

Sub MoveTarget33
	Sw33a.TransZ = 5
	Sw33b.TransZ = 5
	Sw33.Timerenabled = False
	Sw33.Timerenabled = True
End Sub
Sub	Sw33_Timer
	Sw33.Timerenabled = False
	Sw33a.TransZ = 0
	Sw33b.TransZ = 0
End Sub

Sub MoveTarget34
	Sw34a.TransZ = 5
	Sw34b.TransZ = 5
	Sw34.Timerenabled = False
	Sw34.Timerenabled = True
End Sub
Sub	Sw34_Timer
	Sw34.Timerenabled = False
	Sw34a.TransZ = 0
	Sw34b.TransZ = 0
End Sub

Sub MoveTarget35
	Sw35a.TransZ = 5
	Sw35b.TransZ = 5
	Sw35.Timerenabled = False
	Sw35.Timerenabled = True
End Sub
Sub	Sw35_Timer
	Sw35.Timerenabled = False
	Sw35a.TransZ = 0
	Sw35b.TransZ = 0
End Sub

Sub MoveTarget41
	Sw41a.TransZ = 5
	Sw41b.TransZ = 5
	Sw41.Timerenabled = False
	Sw41.Timerenabled = True
End Sub
Sub	Sw41_Timer
	Sw41.Timerenabled = False
	Sw41a.TransZ = 0
	Sw41b.TransZ = 0
End Sub


Sub MoveTarget42
	Sw42a.TransZ = 5
	Sw42b.TransZ = 5
	Sw42.Timerenabled = False
	Sw42.Timerenabled = True
End Sub
Sub	Sw42_Timer
	Sw42.Timerenabled = False
	Sw42a.TransZ = 0
	Sw42b.TransZ = 0
End Sub

Sub MoveTarget43
	Sw43a.TransZ = 5
	Sw43b.TransZ = 5
	Sw43.Timerenabled = False
	Sw43.Timerenabled = True
End Sub
Sub	Sw43_Timer
	Sw43.Timerenabled = False
	Sw43a.TransZ = 0
	Sw43b.TransZ = 0
End Sub


Sub MoveTarget44
	Sw44a.TransZ = 5
	Sw44b.TransZ = 5
	Sw44.Timerenabled = False
	Sw44.Timerenabled = True
End Sub
Sub	Sw44_Timer
	Sw44.Timerenabled = False
	Sw44a.TransZ = 0
	Sw44b.TransZ = 0
End Sub


Sub MoveTarget45
	Sw45a.TransZ = 5
	Sw45b.TransZ = 5
	Sw45.Timerenabled = False
	Sw45.Timerenabled = True
End Sub
Sub	Sw45_Timer
	Sw45.Timerenabled = False
	Sw45a.TransZ = 0
	Sw45b.TransZ = 0
End Sub

Sub MoveTarget46
	Sw46a.TransZ = 5
	Sw46b.TransZ = 5
	Sw46.Timerenabled = False
	Sw46.Timerenabled = True
End Sub
Sub	Sw46_Timer
	Sw46.Timerenabled = False
	Sw46a.TransZ = 0
	Sw46b.TransZ = 0
End Sub


' Left Ramp
Sub Sw36_Hit():Controller.Switch(36) = 1:End Sub 
Sub Sw36_UnHit()
	dim speed:speed = ActiveBall.VelY
	Controller.Switch(36) = 0
	If speed < 0 Then
		'PlaySoundAtBall "comet_ramp"
	Else
		'StopSound "comet_ramp"
	End If
	'debug.print ActiveBall.VelY
	If speed < -24 and speed > -33 Then
		speed = speed * 1.07
		If speed < -35 Then
			speed = -35
		end If
		ActiveBall.VelY = speed
		debug.print ">> to: " & ActiveBall.VelY
	end if
End Sub

Sub Sw37_Hit(): Controller.Switch(37)=1:LEDFlash: End Sub
Sub Sw37_UnHit(): Controller.Switch(37)=0: End Sub

dim rampball:rampball = 0
Sub LRHelp_Hit()
	rampball = 1
	ActiveBall.VelY=ActiveBall.VelY/2
	ActiveBall.VelX=ActiveBall.VelX/2
	PlaySoundAtBall "wire_enter"
End Sub

Sub LRHelp_UnHit()
	PlaySoundAtLevelActiveBall ("wirerolling"), 1 * VolumeDial
end sub

Sub LRHelp001_Hit()
	'made so that we get rolling sound when ball drops from main ramp
	'debug.print "lrhelp001 hit"
	if rampball = 0 then
		PlaySoundAtBall "wire_enter"
		PlaySoundAtLevelActiveBall ("wirerolling"), 1 * VolumeDial
	Else
		rampball = 0
		'debug.print "rampball zeroed"
	end if
End Sub

Sub WRHelp_Hit():StopSound "wirerolling": rampball = 0 : End Sub

sub plungerlane_helper_hit
	If ActiveBall.VelY < 0 Then
		'PlaySoundAtBall "BallRoll_10"
	Else
		'StopSound "BallRoll_10"
	End If
end sub

sub plungerlane_helper2_hit
	'StopSound "BallRoll_10"
end sub


sub LowerArchHelper_hit
	'debug.print "lower arch"
	If ActiveBall.VelY < 0 Then
		RandomSoundRightArch
	End If
end sub


sub TopArchHelper_hit
	'debug.print "top arch"
	If ActiveBall.VelY < 0 Then
		'StopSound "BallRoll_10"
		RandomSoundLeftArch
	End If
end sub

' Right Ramp
Sub Sw40_Hit()
	Controller.Switch(40)=1: ActiveBall.VelY=ActiveBall.VelY/1.1: ActiveBall.VelX=ActiveBall.VelX/1.1
	PlaySoundAtBall "wire_enter"
	rampball = 1
End Sub
Sub Sw40_unHit()
	Controller.Switch(40)=0: 
	'PlaySoundAtLevelActiveBall ("wirerolling"), RollingSoundFactor * 0.0003 * Csng(BallVel(ActiveBall) ^4) * VolumeDial
	PlaySoundAtLevelActiveBall ("wirerolling"), 1 * VolumeDial
End Sub



dim ballInSub
Sub Sw47_Hit()
	'PlaySoundAtBall "BallRoll_11"
	'PlaySound ("BallRoll_11"), -1, 41 * VolumeDial, AudioPan(Activeball), 0, -100, 1, 0, AudioFade(Activeball)
	PlaySoundAtBall "subway2"
	vpmTimer.PulseSw 47
	Sw48.enabled = 1
End Sub
Sub sw47b_Hit(): RandomSoundDrain Sw47: ballInSub = 1: End Sub


Sub KickerHelp_Hit: KickerHelp.kick 35, 20: End Sub




Sub Sw49_Hit:vpmTimer.PulseSw 49:PlaySound "bump": End Sub

Sub Sw50_Hit(): Controller.Switch(50)=1: End Sub
Sub Sw50_UnHit():Controller.Switch(50)=0: End Sub





' ***************
' Test Code: Uses KickerTest and TriggerTest
'TriggerTest.enabled = False
Sub TriggerTest_hit()
	vpmtimer.addtimer 400, "Test123 '"
End Sub
Sub Test123()
	Sw47a.CreateSizedball BallSize / 2
	Sw47a.Kick 150,1
End sub 
' ***************



''''''''''''''''''''
'	  PowerScoop
'		sw48
''''''''''''''''''''

Sub SolKickout(enabled)
	If Enabled then
		sw48.kick 35,65, 1.56 	'65 = strength
		SoundSaucerKick 1, Sw48
		ballInSub = 0
	End If
End Sub



Sub Sw48_hit
	Stopsound "subway2"
	Controller.Switch(48)=1
	if ballInSub = 1 then 
		SoundSaucerLock 
	else 
		RandomSoundDrain Sw48
	end if
	Sw48.enabled = 1
	'Sw51Timer.enabled = 1
End Sub

Sub Sw48_UnHit()
	Controller.Switch(48) = 0
End Sub 




''''''''''''''''''''
'     Left vuk
'		sw51
'''''''''''''''''''''


Sub Sw51_Hit(): Controller.Switch(51)=1:SoundSaucerLock: End Sub				'cp-I don't know if this is right
Sub Sw51_UnHit():Controller.Switch(51)=0: End Sub




Sub Sw51T_Hit():SoundSaucerLock: End Sub
sub sw51b_Hit()
	'PlaySoundAtLevelActiveBall ("wirerolling"), RollingSoundFactor * 0.0003 * Csng(BallVel(ActiveBall) ^4) * VolumeDial
	PlaySoundAtLevelActiveBall ("wirerolling"), 1 * VolumeDial
End Sub

Sub Sw51Ta_Hit():Stopsound "wirerolling":End Sub

'Sub Sw51Timer_Timer
'    'Sw51Timer.enabled = 0
'    'Sw51Timer.enabled = 1    
'End Sub


'SoundSaucerKick(scenario, saucer)

Sub SolVUKKick(enabled)
	If Enabled then
		sw51.kick 60,100, 1.45 	'100 was 65 = strength
		SoundSaucerKick 1, Sw51  			'SoundSaucerKick(scenario, saucer)
		PlaySoundAt "vuk_to_wire", Sw51
	End If
End Sub




'***************************************************
'       JP's VP10 Fading Lamps & Flashers
'       Based on PD's Fading Light System
' SetLamp 0 is Off
' SetLamp 1 is On
' fading for non opacity objects is 4 steps
'***************************************************
 
Dim bulb
Dim LampState(200), FadingLevel(200)
Dim FlashSpeedUp(200), FlashSpeedDown(200), FlashMin(200), FlashMax(200), FlashLevel(200)
 
InitLamps()             ' turn off the lights and flashers and reset them to the default parameters
'LampTimer.Interval = 7 'lamp fading speed
'LampTimer.Enabled = 1
 
' Lamp & Flasher Timers
 
Sub LampTimer()
    Dim chgLamp, num, chg, ii
    chgLamp = Controller.ChangedLamps
    If Not IsEmpty(chgLamp) Then
        For ii = 0 To UBound(chgLamp)
            LampState(chgLamp(ii, 0) ) = chgLamp(ii, 1)       'keep the real state in an array
            FadingLevel(chgLamp(ii, 0) ) = chgLamp(ii, 1) + 4 'actual fading step
        Next
    End If
    UpdateLamps
End Sub
 
Sub InitLamps()
    Dim x
    For x = 0 to 200
        LampState(x) = 0         ' current light state, independent of the fading level. 0 is off and 1 is on
        FadingLevel(x) = 4       ' used to track the fading state
        FlashSpeedUp(x) = 0.5    ' faster speed when turning on the flasher
        FlashSpeedDown(x) = 0.35 ' slower speed when turning off the flasher
        FlashMax(x) = 1          ' the maximum value when on, usually 1
        FlashMin(x) = 0          ' the minimum value when off, usually 0
        FlashLevel(x) = 0        ' the intensity of the flashers, usually from 0 to 1
    Next
End Sub
 
Sub UpdateLamps
	if table1.showDT=true then
		'light49.intensity=100:light49a.intensity=0
		'light50.intensity=100:light50a.intensity=0
		'light51.intensity=100:light51a.intensity=0
		light36a.intensity=30:light37a.intensity=30:light64a.intensity=30
		F1g.visible=1:F1g1.visible=0
'		primitive79.visible=1:primitive79a.visible=0
'		primitive84.visible=1:primitive84a.visible=0
	Else  ' This one to VR????
		'light49.intensity=0:light49a.intensity=100
		'light50.intensity=0:light50a.intensity=100
		'light51.intensity=0:light51a.intensity=100
		light36a.intensity=3:light37a.intensity=3:light64a.intensity=3
		F1g.visible=0:F1g1.visible=1
'		primitive79.visible=0:primitive79a.visible=1
'		primitive84.visible=0:primitive84a.visible=1
	End if

	NFadeL 1, Light1
	NFadeL 2, Light2
	NFadeL 3, Light3
	NFadeL 4, Light4
	NFadeL 5, Light5
	NFadeL 6, Light6
	NFadeL 7, Light7
	NFadeL 8, Light8

	NFadeLm 9, Light9
	FadeDisableLighting2 9, p9, 6
	NFadeLm 10, Light10
	FadeDisableLighting2 10, p10, 6
	NFadeLm 11, Light11
	FadeDisableLighting2 11, p11, 6
	NFadeLm 12, Light12
	FadeDisableLighting2 12, p12, 6
	NFadeLm 13, Light13
	FadeDisableLighting2 13, p13, 6
	NFadeLm 14, Light14
	FadeDisableLighting2 14, p14, 12
 
    NFadeLm 15, L19
	NFadeL 15, Light15
	NFadeLm 16, Light16
	NFadeL 16, Light16a
	
	NFadeLM 20, Light20
	FlashM2 20, Light20a
	FadeDisableLighting2 20, p20, 6
	NFadeLm 21, Light21
	FadeDisableLighting2 21, p21, 6
	NFadeL 22, Light22
	NFadeLM 23, Light23
	FlashM2 23, Light23a
	FadeDisableLighting2 23, p23, 6
	
	
	NFadeLm 24, Light24
	Flash 24, Light24a

	NFadeLm 25, Light25a
	Flashm 25, Light25
	FadeDisableLightingD 25, L81P3, 15, 0.1

	NFadeLm 26, Light26a
	Flashm 26, Light26
	FadeDisableLightingD 26, L81P2, 10, 0.1

	NFadeLm 27, Light27a
	Flashm 27, Light27
	FadeDisableLightingD 27, L81P4, 15, 0.1

	NFadeLm 28, Light28a
	Flashm 28, Light28
	FadeDisableLightingD 28, L81P5, 5, 0.01

	NFadeLm 29, Light29a
	Flashm 29, Light29
	FadeDisableLightingD 29, L81P6, 15, 0.1

	NFadeLm 30, Light30a
	Flashm 30, Light30
	FadeDisableLightingD 30, L81P7, 2, 0.01

	NFadeLm 32, Light32
	NFadeL 32, Light32a
	NFadeL 33, Light33
	NFadeL 34, Light34
	NFadeL 35, Light35
	NFadeLm 36, Light36a
    NFadeL 36, Light36
	NFadeLm 37, Light37a
    NFadeL 37, Light37

    'Skull Eyes
	NFadeLm 38, eyer1
	'Flashm 38, EyeR
	FadeDisableLightingD 38, EyeRP, 0.8, 0.01
	NFadeLm 39, eyel1
	'Flashm 39, EyeL
	FadeDisableLightingD 39, EyeLP, 0.8, 0.01

	NFadeLm 40, Light40a
	Flashm 40, Light40
	FadeDisableLightingDM 40, Primitive024, 0.06, 0.06
	FadeDisableLightingD 40, L81P, 20, 0.5


	NFadeL 41, Light41
	NFadeL 42, Light42
	NFadeL 43, Light43
	NFadeL 44, Light44
	NFadeL 45, Light45
	NFadeL 46, Light46
	NFadeL 47, Light47
	NFadeL 48, Light48

	'NFadeLm 49, Light49
	'NFadeLm 49, Light49a
	FadeDisableLighting2 49, PirateTownL49, 5
	'NFadeLm 50, Light50
	'NFadeLm 50, Light50a
	FadeDisableLighting2 50, PirateTownL50, 5
	'NFadeLm 51, Light51
	'NFadeLm 51, Light51a
	FadeDisableLighting2 51, PirateTownL51, 5

	NFadeL 52, Light52

	NFadeLm 53, Light53a
	Flashm 53, Light53
	FadeDisableLightingDM 53, Primitive025, 0.06, 0.06
	FadeDisableLightingD 53, L81P1, 120, 1


	NFadeLm 54, Light54
	FadeDisableLightingM 54, Primitive033, 0.08
	FadeDisableLighting2 54, Primitive032, 0.1
	NFadeLm 55, Light55
	FadeDisableLightingM 55, Primitive040, 0.1
	FadeDisableLighting2 55, Primitive039, 0.1
	NFadeLm 56, Light56
	FadeDisableLightingM 56, Primitive74, 0.5
	FadeDisableLighting2 56, Primitive73, 0.5


	NFadeL 57, Light57
	NFadeLm 58, Light58
	FadeDisableLighting2 58, p58, 10
	NFadeLm 59, Light59
	FadeDisableLighting2 59, p59, 10
	NFadeLm 60, Light60
	FadeDisableLighting2 60, p60, 10
	NFadeLm 61, Light61
	FadeDisableLighting2 61, p61, 10
	NFadeLm 62, Light62
	FadeDisableLighting2 62, p62, 10
	NFadeLm 63, Light63
	FadeDisableLighting2 63, p63, 6
	NFadeLm 64, Light64a
    NFadeL 64, Light64

    'Flashers	
	NFadeLm 92, f2b1
	NFadeL 92, f2b2
    
 	NFadeL 95, f5b

'	NFadeLm 98, f8a1
'	NFadeLm 98, f8a2
'	Flash 98, Flasherf8
'
'	NFadeLm 109, f9a1
'	NFadeLm 109, f9a2
'	Flash 109, Flasherf9
'
'	NFadeLm 112, f12a1
'	NFadeLm 112, f12a2
'	Flash 112, Flasherf12

    NFadeLm 114, s114
    NFadeLm 114, s114a
	FadeDisableLightingD 114, Sw20b, 40, 5
	'Sw20b.blenddisablelighting = gilevel*4 + 2

	

End Sub



Sub SetLamp(nr, value)
    If value <> LampState(nr) Then
        LampState(nr) = abs(value)
        FadingLevel(nr) = abs(value) + 4
    End If
End Sub
 
' Lights: used for VP10 standard lights, the fading is handled by VP itself
Sub FadeDisableLightingD(nr, a, alvl, defaultlvl)
	Select Case FadingLevel(nr)
		Case 4
			'debug.print a.UserValue
			a.UserValue = a.UserValue - 0.07
			If a.UserValue < 0 Then 
				a.UserValue = 0
				FadingLevel(nr) = 0
			end If
			a.BlendDisableLighting = alvl * a.UserValue + defaultlvl 'brightness
		Case 5
			'debug.print a.UserValue
			a.UserValue = a.UserValue + 0.50
			If a.UserValue > 1 Then 
				a.UserValue = 1
				FadingLevel(nr) = 1
			end If
			a.BlendDisableLighting = alvl * a.UserValue + defaultlvl 'brightness
	End Select
End Sub

Sub FadeDisableLightingDM(nr, a, alvl, defaultlvl)
	Select Case FadingLevel(nr)
		Case 4
			'debug.print a.UserValue
			a.UserValue = a.UserValue - 0.07
			If a.UserValue < 0 Then 
				a.UserValue = 0
				'FadingLevel(nr) = 0
			end If
			a.BlendDisableLighting = alvl * a.UserValue + defaultlvl 'brightness
		Case 5
			'debug.print a.UserValue
			a.UserValue = a.UserValue + 0.50
			If a.UserValue > 1 Then 
				a.UserValue = 1
				'FadingLevel(nr) = 1
			end If
			a.BlendDisableLighting = alvl * a.UserValue + defaultlvl 'brightness
	End Select
End Sub

Sub FadeDisableLightingM(nr, a, alvl)
	Select Case FadingLevel(nr)
		Case 4
			'debug.print a.UserValue
			a.UserValue = a.UserValue - 0.07
			If a.UserValue < 0 Then 
				a.UserValue = 0
				'FadingLevel(nr) = 0
			end If
			a.BlendDisableLighting = alvl * a.UserValue 'brightness
		Case 5
			'debug.print a.UserValue
			a.UserValue = a.UserValue + 0.50
			If a.UserValue > 1 Then 
				a.UserValue = 1
				'FadingLevel(nr) = 1
			end If
			a.BlendDisableLighting = alvl * a.UserValue 'brightness
	End Select
End Sub

Sub FadeDisableLighting2(nr, a, alvl)
	Select Case FadingLevel(nr)
		Case 4
			'if nr = 58 then debug.print "down: " & a.UserValue
			a.UserValue = a.UserValue - 0.07
			If a.UserValue < 0 Then 
				a.UserValue = 0
				FadingLevel(nr) = 0
			end If
			a.BlendDisableLighting = alvl * a.UserValue 'brightness
		Case 5
			'if nr = 58 then debug.print "up: " & a.UserValue
			a.UserValue = a.UserValue + 0.50
			If a.UserValue > 1 Then 
				a.UserValue = 1
				FadingLevel(nr) = 1
			end If
			a.BlendDisableLighting = alvl * a.UserValue 'brightness
	End Select
End Sub
 
Sub NFadeL(nr, object)
    Select Case FadingLevel(nr)
        Case 4:object.state = 0:FadingLevel(nr) = 0
        Case 5:object.state = 1:FadingLevel(nr) = 1
    End Select
End Sub
 
Sub NFadeLm(nr, object) ' used for multiple lights
    Select Case FadingLevel(nr)
        Case 4:object.state = 0
        Case 5:object.state = 1
    End Select
End Sub
 
'Lights, Ramps & Primitives used as 4 step fading lights
'a,b,c,d are the images used from on to off
 
Sub FadeObj(nr, object, a, b, c, d)
    Select Case FadingLevel(nr)
        Case 4:object.image = b:FadingLevel(nr) = 6                   'fading to off...
        Case 5:object.image = a:FadingLevel(nr) = 1                   'ON
        Case 6, 7, 8:FadingLevel(nr) = FadingLevel(nr) + 1            'wait
        Case 9:object.image = c:FadingLevel(nr) = FadingLevel(nr) + 1 'fading...
        Case 10, 11, 12:FadingLevel(nr) = FadingLevel(nr) + 1         'wait
        Case 13:object.image = d:FadingLevel(nr) = 0                  'Off
    End Select
End Sub
 
Sub FadeObjm(nr, object, a, b, c, d)
    Select Case FadingLevel(nr)
        Case 4:object.image = b
        Case 5:object.image = a
        Case 9:object.image = c
        Case 13:object.image = d
    End Select
End Sub
 
Sub NFadeObj(nr, object, a, b)
    Select Case FadingLevel(nr)
        Case 4:object.image = b:FadingLevel(nr) = 0
        Case 5:object.image = a:FadingLevel(nr) = 1
    End Select
End Sub
 
Sub NFadeObjm(nr, object, a, b)
    Select Case FadingLevel(nr)
        Case 4:object.image = b
        Case 5:object.image = a
    End Select
End Sub
 
' Flasher objects
 
Sub Flash(nr, object)
    Select Case FadingLevel(nr)
        Case 4 'off
            FlashLevel(nr) = FlashLevel(nr) - FlashSpeedDown(nr)
            If FlashLevel(nr) < FlashMin(nr) Then
                FlashLevel(nr) = FlashMin(nr)
                FadingLevel(nr) = 0 'completely off
            End if
            Object.IntensityScale = FlashLevel(nr)
        Case 5 ' on
            FlashLevel(nr) = FlashLevel(nr) + FlashSpeedUp(nr)
            If FlashLevel(nr) > FlashMax(nr) Then
                FlashLevel(nr) = FlashMax(nr)
                FadingLevel(nr) = 1 'completely on
            End if
            Object.IntensityScale = FlashLevel(nr)
    End Select
End Sub

Sub Flashm(nr, object)
    Select Case FadingLevel(nr)
        Case 4 'off
            FlashLevel(nr) = FlashLevel(nr) - FlashSpeedDown(nr)
            If FlashLevel(nr) < FlashMin(nr) Then
                FlashLevel(nr) = FlashMin(nr)
'                FadingLevel(nr) = 0 'completely off
            End if
            Object.IntensityScale = FlashLevel(nr)
        Case 5 ' on
            FlashLevel(nr) = FlashLevel(nr) + FlashSpeedUp(nr)
            If FlashLevel(nr) > FlashMax(nr) Then
                FlashLevel(nr) = FlashMax(nr)
'               FadingLevel(nr) = 1 'completely on
            End if
            Object.IntensityScale = FlashLevel(nr)
    End Select
End Sub

'Sub Flashm(nr, object) 'multiple flashers, it just sets the flashlevel
'    Object.IntensityScale = FlashLevel(nr)
'End Sub

Sub FlashM2(nr, object)
    Select Case FadingLevel(nr)
        Case 4 'off
            FlashLevel(nr) = FlashLevel(nr) - FlashSpeedDown(nr)
            If FlashLevel(nr) < FlashMin(nr) Then
                FlashLevel(nr) = FlashMin(nr)
                'FadingLevel(nr) = 0 'completely off
            End if
            Object.IntensityScale = FlashLevel(nr)
        Case 5 ' on
            FlashLevel(nr) = FlashLevel(nr) + FlashSpeedUp(nr)
            If FlashLevel(nr) > FlashMax(nr) Then
                FlashLevel(nr) = FlashMax(nr)
                'FadingLevel(nr) = 1 'completely on
            End if
            Object.IntensityScale = FlashLevel(nr)
    End Select
End Sub
 
' RGB Leds
 
Sub RGBLED (object,red,green,blue)
    If TypeName(object) = "Light" Then
        object.color = RGB(0,0,0)
        object.colorfull = RGB(2.5*red,2.5*green,2.5*blue)
        object.state=1
    ElseIf TypeName(object) = "Flasher" Then
        object.color = RGB(2.5*red,2.5*green,2.5*blue)
        object.IntensityScale = 1
    End If
End Sub
 
' Modulated Flasher and Lights objects
 
Sub SetLampMod(nr, value)
    If value > 0 Then
        LampState(nr) = 1
    Else
        LampState(nr) = 0
    End If
    FadingLevel(nr) = value
End Sub
 
Sub LampMod(nr, object)
    Object.IntensityScale = FadingLevel(nr)/128
    If TypeName(object) = "Light" Then
        Object.State = LampState(nr)
    End If
    If TypeName(object) = "Flasher" Then
        Object.visible = LampState(nr)
    End If
End Sub
 

'**********
'LED Rope
'**********


Dim WindLamp1
Sub CheckWindCoasterLamps (Lamp, State)
	Select Case Lamp
		Case 1:
			If State = 1 then 'Blinking
				Light1.TimerEnabled=0: Light1.TimerInterval = 500: Light1.TimerEnabled=1: 
				WindLamp1=1
			Else
				Light1.TimerEnabled=0: Light1.TimerInterval = 500: Light1.TimerEnabled=1
			End If
	End Select
End Sub


Sub Light1_Timer
	Light1.TimerEnabled = 0: 
	WindLamp1 = 0 'Not blinking
End Sub 




Sub LEDOFF
	For each yy in aLedsLightsA: yy.state = 0: next
	For each yy in aLedsLightsB: yy.state = 0: next
	For each yy in aLedsLightsC: yy.state = 0: next
    SetLamp 195, 0
    SetLamp 196, 0
    SetLamp 197, 0
End Sub

Sub LEDON
	For each yy in aLedsLightsA: yy.state = 1: next
	For each yy in aLedsLightsB: yy.state = 1: next
	For each yy in aLedsLightsC: yy.state = 1: next
    SetLamp 195, 1
    SetLamp 196, 1
    SetLamp 197, 1
End Sub

Dim LEDcount,yy
Sub LEDCW
	LEDcount = (LEDcount + 1) mod 3
	Select Case LEDcount
		Case 0:
	        For each yy in aLedsLightsA: yy.state = 1: next
	        For each yy in aLedsLightsB: yy.state = 0: next
	        For each yy in aLedsLightsC: yy.state = 0: next
            SetLamp 195, 1
            SetLamp 196, 0
		Case 1:
	        For each yy in aLedsLightsA: yy.state = 0: next
	        For each yy in aLedsLightsB: yy.state = 1: next
	        For each yy in aLedsLightsC: yy.state = 0: next
            SetLamp 195, 0
            SetLamp 196, 1

		Case 2:
	        For each yy in aLedsLightsA: yy.state = 0: next
	        For each yy in aLedsLightsB: yy.state = 0: next
	        For each yy in aLedsLightsC: yy.state = 1: next
            SetLamp 195, 0
            SetLamp 196, 0

	End Select
End Sub
Sub LEDCCW
	LEDcount = (LEDcount - 1)
	If LEDcount < 0 then 
		LEDcount = (LEDcount+3) mod 3
	Else
		LEDcount = LEDcount mod 3
	End If

	Select Case LEDcount
		Case 0:
	        For each yy in aLedsLightsA: yy.state = 1: next
	        For each yy in aLedsLightsB: yy.state = 0: next
	        For each yy in aLedsLightsC: yy.state = 0: next
            SetLamp 195, 1
            SetLamp 196, 0

		Case 1:
	        For each yy in aLedsLightsA: yy.state = 0: next
	        For each yy in aLedsLightsB: yy.state = 1: next
	        For each yy in aLedsLightsC: yy.state = 0: next
            SetLamp 195, 0
            SetLamp 196, 1

		Case 2:
	        For each yy in aLedsLightsA: yy.state = 0: next
	        For each yy in aLedsLightsB: yy.state = 0: next
	        For each yy in aLedsLightsC: yy.state = 1: next
            SetLamp 195, 1
            SetLamp 196, 0
	End Select
End Sub

Sub LEDFlash
	LEDTimer.Enabled = 0
	LEDOFF
	LEDFlashTimer.Enabled = 1
End Sub

Sub LEDStop
	LEDTimer.Enabled = 0
	LEDOFF
End Sub

Sub LEDStart
	LEDTimer.Enabled = 1
End Sub

LEDTimer.Interval = 300
LEDTimer.Enabled = 0
Dim LEDTimerCount
Sub LEDTimer_Timer
	LEDTimerCount = LEDTimerCount + 1
	If LEDTimerCount < 20 or Light1BlinkingAndBallInPlay Then
		LEDCW
	Else
		LEDCCW
	End If
End Sub

LEDFlashTimer.Interval = 50
LEDFlashTimer.Enabled = 0
Dim LEDTimerFlashCount
Sub LEDFlashTimer_Timer
	LEDTimerFlashCount = LEDTimerFlashCount + 1
	If LEDTimerFlashCount < 31 Then
		If LEDTimerFlashCount Mod 2 = 0 Then
			LEDOFF
             SetLamp 197, 0
		Else
			LEDON
             SetLamp 197, 1
		End If
	Else
		LEDTimer.Enabled = 1
		LEDFlashTimer.Enabled = 0
		LEDTimerFlashCount = 0
		LEDTimerCount = 0
	End If
End Sub

Function Light1BlinkingAndBallInPlay
	If WindLamp1 = 1 and Controller.Switch(11) = 0 Then
		Light1BlinkingAndBallInPlay = 1
	End If
End Function

Sub Faster
    If Light32.State = 1 Then
    LEDTimer.Interval = 200 
    Else
    LEDTimer.Interval = 300
End If
End Sub




'////////////////////////////  MECHANICAL SOUNDS  ///////////////////////////
'//  This part in the script is an entire block that is dedicated to the physics sound system.
'//  Various scripts and sounds that may be pretty generic and could suit other WPC systems, but the most are tailored specifically for this table.

'///////////////////////////////  SOUNDS PARAMETERS  //////////////////////////////
Dim GlobalSoundLevel, CoinSoundLevel, PlungerReleaseSoundLevel, PlungerPullSoundLevel, NudgeLeftSoundLevel
Dim NudgeRightSoundLevel, NudgeCenterSoundLevel, StartButtonSoundLevel, RollingSoundFactor

CoinSoundLevel = 1														'volume level; range [0, 1]
NudgeLeftSoundLevel = 1													'volume level; range [0, 1]
NudgeRightSoundLevel = 1												'volume level; range [0, 1]
NudgeCenterSoundLevel = 1												'volume level; range [0, 1]
StartButtonSoundLevel = 0.1												'volume level; range [0, 1]
PlungerReleaseSoundLevel = 0.8 '1 wjr											'volume level; range [0, 1]
PlungerPullSoundLevel = 1												'volume level; range [0, 1]
RollingSoundFactor = 1.1/5		

'///////////////////////-----Solenoids, Kickers and Flash Relays-----///////////////////////
Dim FlipperUpAttackMinimumSoundLevel, FlipperUpAttackMaximumSoundLevel, FlipperUpAttackLeftSoundLevel, FlipperUpAttackRightSoundLevel
Dim FlipperUpSoundLevel, FlipperDownSoundLevel, FlipperLeftHitParm, FlipperRightHitParm
Dim SlingshotSoundLevel, BumperSoundFactor, KnockerSoundLevel

FlipperUpAttackMinimumSoundLevel = 0.010           						'volume level; range [0, 1]
FlipperUpAttackMaximumSoundLevel = 0.635								'volume level; range [0, 1]
FlipperUpSoundLevel = 1.0                        						'volume level; range [0, 1]
FlipperDownSoundLevel = 0.45                      						'volume level; range [0, 1]
FlipperLeftHitParm = FlipperUpSoundLevel								'sound helper; not configurable
FlipperRightHitParm = FlipperUpSoundLevel								'sound helper; not configurable
SlingshotSoundLevel = 0.95												'volume level; range [0, 1]
BumperSoundFactor = 4.25												'volume multiplier; must not be zero
KnockerSoundLevel = 1 													'volume level; range [0, 1]

'///////////////////////-----Ball Drops, Bumps and Collisions-----///////////////////////
Dim RubberStrongSoundFactor, RubberWeakSoundFactor, RubberFlipperSoundFactor,BallWithBallCollisionSoundFactor
Dim BallBouncePlayfieldSoftFactor, BallBouncePlayfieldHardFactor, PlasticRampDropToPlayfieldSoundLevel, WireRampDropToPlayfieldSoundLevel, DelayedBallDropOnPlayfieldSoundLevel
Dim WallImpactSoundFactor, MetalImpactSoundFactor, SubwaySoundLevel, SubwayEntrySoundLevel, ScoopEntrySoundLevel
Dim SaucerLockSoundLevel, SaucerKickSoundLevel

BallWithBallCollisionSoundFactor = 3.2									'volume multiplier; must not be zero
RubberStrongSoundFactor = 0.055/5											'volume multiplier; must not be zero
RubberWeakSoundFactor = 0.075/5											'volume multiplier; must not be zero
RubberFlipperSoundFactor = 0.075/5										'volume multiplier; must not be zero
BallBouncePlayfieldSoftFactor = 0.025									'volume multiplier; must not be zero
BallBouncePlayfieldHardFactor = 0.025									'volume multiplier; must not be zero
DelayedBallDropOnPlayfieldSoundLevel = 0.8									'volume level; range [0, 1]
WallImpactSoundFactor = 0.075											'volume multiplier; must not be zero
MetalImpactSoundFactor = 0.075/3
SaucerLockSoundLevel = 0.8
SaucerKickSoundLevel = 0.8

'///////////////////////-----Gates, Spinners, Rollovers and Targets-----///////////////////////

Dim GateSoundLevel, TargetSoundFactor, SpinnerSoundLevel, RolloverSoundLevel, DTSoundLevel

GateSoundLevel = 0.5/5													'volume level; range [0, 1]
TargetSoundFactor = 0.0025 * 10											'volume multiplier; must not be zero
DTSoundLevel = 0.25														'volume multiplier; must not be zero
RolloverSoundLevel = 0.25                              					'volume level; range [0, 1]

'///////////////////////-----Ball Release, Guides and Drain-----///////////////////////
Dim DrainSoundLevel, BallReleaseSoundLevel, BottomArchBallGuideSoundFactor, FlipperBallGuideSoundFactor 

DrainSoundLevel = 0.8														'volume level; range [0, 1]
BallReleaseSoundLevel = 1												'volume level; range [0, 1]
BottomArchBallGuideSoundFactor = 0.2									'volume multiplier; must not be zero
FlipperBallGuideSoundFactor = 0.015										'volume multiplier; must not be zero

'///////////////////////-----Loops and Lanes-----///////////////////////
Dim ArchSoundFactor
ArchSoundFactor = 0.025/5													'volume multiplier; must not be zero


'/////////////////////////////  SOUND PLAYBACK FUNCTIONS  ////////////////////////////
'/////////////////////////////  POSITIONAL SOUND PLAYBACK METHODS  ////////////////////////////
' Positional sound playback methods will play a sound, depending on the X,Y position of the table element or depending on ActiveBall object position
' These are similar subroutines that are less complicated to use (e.g. simply use standard parameters for the PlaySound call)
' For surround setup - positional sound playback functions will fade between front and rear surround channels and pan between left and right channels
' For stereo setup - positional sound playback functions will only pan between left and right channels
' For mono setup - positional sound playback functions will not pan between left and right channels and will not fade between front and rear channels

' PlaySound full syntax - PlaySound(string, int loopcount, float volume, float pan, float randompitch, int pitch, bool useexisting, bool restart, float front_rear_fade)
' Note - These functions will not work (currently) for walls/slingshots as these do not feature a simple, single X,Y position
Sub PlaySoundAtLevelStatic(playsoundparams, aVol, tableobj)
    PlaySound playsoundparams, 0, aVol * VolumeDial, AudioPan(tableobj), 0, 0, 0, 0, AudioFade(tableobj)
End Sub

Sub PlaySoundAtLevelExistingStatic(playsoundparams, aVol, tableobj)
    PlaySound playsoundparams, 0, aVol * VolumeDial, AudioPan(tableobj), 0, 0, 1, 0, AudioFade(tableobj)
End Sub

Sub PlaySoundAtLevelStaticLoop(playsoundparams, aVol, tableobj)
    PlaySound playsoundparams, -1, aVol * VolumeDial, AudioPan(tableobj), 0, 0, 0, 0, AudioFade(tableobj)
End Sub

Sub PlaySoundAtLevelStaticRandomPitch(playsoundparams, aVol, randomPitch, tableobj)
    PlaySound playsoundparams, 0, aVol * VolumeDial, AudioPan(tableobj), randomPitch, 0, 0, 0, AudioFade(tableobj)
End Sub

Sub PlaySoundAtLevelActiveBall(playsoundparams, aVol)
	PlaySound playsoundparams, 0, aVol * VolumeDial, AudioPan(ActiveBall), 0, 0, 0, 0, AudioFade(ActiveBall)
End Sub

Sub PlaySoundAtLevelExistingActiveBall(playsoundparams, aVol)
	PlaySound playsoundparams, 0, aVol * VolumeDial, AudioPan(ActiveBall), 0, 0, 1, 0, AudioFade(ActiveBall)
End Sub

Sub PlaySoundAtLeveTimerActiveBall(playsoundparams, aVol, ballvariable)
	PlaySound playsoundparams, 0, aVol * VolumeDial, AudioPan(ballvariable), 0, 0, 0, 0, AudioFade(ballvariable)
End Sub

Sub PlaySoundAtLevelTimerExistingActiveBall(playsoundparams, aVol, ballvariable)
	PlaySound playsoundparams, 0, aVol * VolumeDial, AudioPan(ballvariable), 0, 0, 1, 0, AudioFade(ballvariable)
End Sub

Sub PlaySoundAtLevelRoll(playsoundparams, aVol, pitch)
    PlaySound playsoundparams, -1, aVol * VolumeDial, AudioPan(tableobj), randomPitch, 0, 0, 0, AudioFade(tableobj)
End Sub

' Previous Positional Sound Subs

Sub PlaySoundAt(soundname, tableobj)
    PlaySound soundname, 1, 1 * VolumeDial, AudioPan(tableobj), 0,0,0, 1, AudioFade(tableobj)
End Sub

Sub PlaySoundAtVol(soundname, tableobj, aVol)
    PlaySound soundname, 1, aVol * VolumeDial, AudioPan(tableobj), 0,0,0, 1, AudioFade(tableobj)
End Sub

Sub PlaySoundAtBall(soundname)
    PlaySoundAt soundname, ActiveBall
End Sub

Sub PlaySoundAtBallVol (Soundname, aVol)
	Playsound soundname, 1,aVol * VolumeDial, AudioPan(ActiveBall), 0,0,0, 1, AudioFade(ActiveBall)
End Sub

Sub PlaySoundAtBallVolM (Soundname, aVol)
	Playsound soundname, 1,aVol * VolumeDial, AudioPan(ActiveBall), 0,0,0, 0, AudioFade(ActiveBall)
End Sub

Sub PlaySoundAtVolLoops(sound, tableobj, Vol, Loops)
	PlaySound sound, Loops, Vol * VolumeDial, AudioPan(tableobj), 0,0,0, 1, AudioFade(tableobj)
End Sub


' *********************************************************************
'                      Supporting Ball & Sound Functions
' *********************************************************************

Function AudioFade(tableobj) ' Fades between front and back of the table (for surround systems or 2x2 speakers, etc), depending on the Y position on the table. "table1" is the name of the table
	Dim tmp
    tmp = tableobj.y * 2 / tableheight-1
    If tmp > 0 Then
		AudioFade = Csng(tmp ^10)
    Else
        AudioFade = Csng(-((- tmp) ^10) )
    End If
End Function

Function AudioPan(tableobj) ' Calculates the pan for a tableobj based on the X position on the table. "table1" is the name of the table
    Dim tmp
    tmp = tableobj.x * 2 / tablewidth-1
    If tmp > 0 Then
        AudioPan = Csng(tmp ^10)
    Else
        AudioPan = Csng(-((- tmp) ^10) )
    End If
End Function

Function Vol(ball) ' Calculates the volume of the sound based on the ball speed
	Vol = Csng(BallVel(ball) ^2)
End Function

Function Volz(ball) ' Calculates the volume of the sound based on the ball speed
	Volz = Csng((ball.velz) ^2)
End Function

Function Pitch(ball) ' Calculates the pitch of the sound based on the ball speed
    Pitch = BallVel(ball) * 20
End Function

Function BallVel(ball) 'Calculates the ball speed
    BallVel = INT(SQR((ball.VelX ^2) + (ball.VelY ^2) ) )
End Function

Function VolPlayfieldRoll(ball) ' Calculates the roll volume of the sound based on the ball speed
	VolPlayfieldRoll = RollingSoundFactor * 0.0005 * Csng(BallVel(ball) ^3)
End Function

Function VolPlasticRampRoll(ball) ' Calculates the roll volume of the sound based on the ball speed
	VolPlasticRampRoll = RollingSoundFactor * 0.0005 * Csng(BallVel(ball) ^3)
End Function

Function PitchPlayfieldRoll(ball) ' Calculates the roll pitch of the sound based on the ball speed
    PitchPlayfieldRoll = BallVel(ball) ^2 * 15
End Function

Function PitchPlasticRamp(ball) ' Calculates the pitch of the sound based on the ball speed - used for plastic ramps roll sound
    PitchPlasticRamp = BallVel(ball) * 20
End Function

Function RndInt(min, max)
    RndInt = Int(Rnd() * (max-min + 1) + min)' Sets a random number integer between min and max
End Function

Function RndNum(min, max)
    RndNum = Rnd() * (max-min) + min' Sets a random number between min and max
End Function

'/////////////////////////////  GENERAL SOUND SUBROUTINES  ////////////////////////////
Sub SoundStartButton()
	PlaySound ("Start_Button"), 0, StartButtonSoundLevel, 0, 0.25
End Sub

Sub SoundNudgeLeft()
	Select Case Int(Rnd*3)+1
		Case 1 : PlaySound ("Nudge_1"), 0, NudgeLeftSoundLevel * VolumeDial, -0.1, 0.25
		Case 2 : PlaySound ("Nudge_2"), 0, NudgeLeftSoundLevel * VolumeDial, -0.1, 0.25
		Case 3 : PlaySound ("Nudge_3"), 0, NudgeLeftSoundLevel * VolumeDial, -0.1, 0.25
	End Select
End Sub

Sub SoundNudgeRight()
	Select Case Int(Rnd*3)+1
		Case 1 : PlaySound ("Nudge_1"), 0, NudgeRightSoundLevel * VolumeDial, 0.1, 0.25
		Case 2 : PlaySound ("Nudge_2"), 0, NudgeRightSoundLevel * VolumeDial, 0.1, 0.25
		Case 3 : PlaySound ("Nudge_3"), 0, NudgeRightSoundLevel * VolumeDial, 0.1, 0.25
	End Select
End Sub

Sub SoundNudgeCenter()
	Select Case Int(Rnd*3)+1
		Case 1 : PlaySound ("Nudge_1"), 0, NudgeCenterSoundLevel * VolumeDial, 0, 0.25
		Case 2 : PlaySound ("Nudge_2"), 0, NudgeCenterSoundLevel * VolumeDial, 0, 0.25
		Case 3 : PlaySound ("Nudge_3"), 0, NudgeCenterSoundLevel * VolumeDial, 0, 0.25
	End Select
End Sub


Sub SoundPlungerPull()
	PlaySoundAtLevelStatic ("Plunger_Pull_1"), PlungerPullSoundLevel, Plunger
End Sub

Sub SoundPlungerReleaseBall()
	PlaySoundAtLevelStatic ("Plunger_Release_Ball"), PlungerReleaseSoundLevel, Plunger	
End Sub

Sub SoundPlungerReleaseNoBall()
	PlaySoundAtLevelStatic ("Plunger_Release_No_Ball"), PlungerReleaseSoundLevel, Plunger
End Sub


'/////////////////////////////  KNOCKER SOLENOID  ////////////////////////////
Sub KnockerSolenoid()
	PlaySoundAtLevelStatic SoundFX("Knocker_1",DOFKnocker), KnockerSoundLevel, KnockerPosition
End Sub

'/////////////////////////////  DRAIN SOUNDS  ////////////////////////////
Sub RandomSoundDrain(drainswitch)
	Select Case Int(Rnd*11)+1
		Case 1 : PlaySoundAtLevelStatic ("Drain_1"), DrainSoundLevel, drainswitch
		Case 2 : PlaySoundAtLevelStatic ("Drain_2"), DrainSoundLevel, drainswitch
		Case 3 : PlaySoundAtLevelStatic ("Drain_3"), DrainSoundLevel, drainswitch
		Case 4 : PlaySoundAtLevelStatic ("Drain_4"), DrainSoundLevel, drainswitch
		Case 5 : PlaySoundAtLevelStatic ("Drain_5"), DrainSoundLevel, drainswitch
		Case 6 : PlaySoundAtLevelStatic ("Drain_6"), DrainSoundLevel, drainswitch
		Case 7 : PlaySoundAtLevelStatic ("Drain_7"), DrainSoundLevel, drainswitch
		Case 8 : PlaySoundAtLevelStatic ("Drain_8"), DrainSoundLevel, drainswitch
		Case 9 : PlaySoundAtLevelStatic ("Drain_9"), DrainSoundLevel, drainswitch
		Case 10 : PlaySoundAtLevelStatic ("Drain_10"), DrainSoundLevel, drainswitch
		Case 11 : PlaySoundAtLevelStatic ("Drain_11"), DrainSoundLevel, drainswitch
	End Select
End Sub

'/////////////////////////////  TROUGH BALL RELEASE SOLENOID SOUNDS  ////////////////////////////
Sub RandomSoundBallRelease(drainswitch)
	Select Case Int(Rnd*7)+1
		Case 1 : PlaySoundAtLevelStatic SoundFX("BallRelease1",DOFContactors), BallReleaseSoundLevel, drainswitch
		Case 2 : PlaySoundAtLevelStatic SoundFX("BallRelease2",DOFContactors), BallReleaseSoundLevel, drainswitch
		Case 3 : PlaySoundAtLevelStatic SoundFX("BallRelease3",DOFContactors), BallReleaseSoundLevel, drainswitch
		Case 4 : PlaySoundAtLevelStatic SoundFX("BallRelease4",DOFContactors), BallReleaseSoundLevel, drainswitch
		Case 5 : PlaySoundAtLevelStatic SoundFX("BallRelease5",DOFContactors), BallReleaseSoundLevel, drainswitch
		Case 6 : PlaySoundAtLevelStatic SoundFX("BallRelease6",DOFContactors), BallReleaseSoundLevel, drainswitch
		Case 7 : PlaySoundAtLevelStatic SoundFX("BallRelease7",DOFContactors), BallReleaseSoundLevel, drainswitch
	End Select
End Sub



'/////////////////////////////  SLINGSHOT SOLENOID SOUNDS  ////////////////////////////
Sub RandomSoundSlingshotLeft(sling)
	Select Case Int(Rnd*10)+1
		Case 1 : PlaySoundAtLevelStatic SoundFX("Sling_L1",DOFContactors), SlingshotSoundLevel, Sling
		Case 2 : PlaySoundAtLevelStatic SoundFX("Sling_L2",DOFContactors), SlingshotSoundLevel, Sling
		Case 3 : PlaySoundAtLevelStatic SoundFX("Sling_L3",DOFContactors), SlingshotSoundLevel, Sling
		Case 4 : PlaySoundAtLevelStatic SoundFX("Sling_L4",DOFContactors), SlingshotSoundLevel, Sling
		Case 5 : PlaySoundAtLevelStatic SoundFX("Sling_L5",DOFContactors), SlingshotSoundLevel, Sling
		Case 6 : PlaySoundAtLevelStatic SoundFX("Sling_L6",DOFContactors), SlingshotSoundLevel, Sling
		Case 7 : PlaySoundAtLevelStatic SoundFX("Sling_L7",DOFContactors), SlingshotSoundLevel, Sling
		Case 8 : PlaySoundAtLevelStatic SoundFX("Sling_L8",DOFContactors), SlingshotSoundLevel, Sling
		Case 9 : PlaySoundAtLevelStatic SoundFX("Sling_L9",DOFContactors), SlingshotSoundLevel, Sling
		Case 10 : PlaySoundAtLevelStatic SoundFX("Sling_L10",DOFContactors), SlingshotSoundLevel, Sling
	End Select
End Sub

Sub RandomSoundSlingshotRight(sling)
	Select Case Int(Rnd*8)+1
		Case 1 : PlaySoundAtLevelStatic SoundFX("Sling_R1",DOFContactors), SlingshotSoundLevel, Sling
		Case 2 : PlaySoundAtLevelStatic SoundFX("Sling_R2",DOFContactors), SlingshotSoundLevel, Sling
		Case 3 : PlaySoundAtLevelStatic SoundFX("Sling_R3",DOFContactors), SlingshotSoundLevel, Sling
		Case 4 : PlaySoundAtLevelStatic SoundFX("Sling_R4",DOFContactors), SlingshotSoundLevel, Sling
		Case 5 : PlaySoundAtLevelStatic SoundFX("Sling_R5",DOFContactors), SlingshotSoundLevel, Sling
		Case 6 : PlaySoundAtLevelStatic SoundFX("Sling_R6",DOFContactors), SlingshotSoundLevel, Sling
		Case 7 : PlaySoundAtLevelStatic SoundFX("Sling_R7",DOFContactors), SlingshotSoundLevel, Sling
		Case 8 : PlaySoundAtLevelStatic SoundFX("Sling_R8",DOFContactors), SlingshotSoundLevel, Sling
	End Select
End Sub

'/////////////////////////////  BUMPER SOLENOID SOUNDS  ////////////////////////////
Sub RandomSoundBumperTop(Bump)
	Select Case Int(Rnd*5)+1
		Case 1 : PlaySoundAtLevelStatic SoundFX("Bumpers_Top_1",DOFContactors), Vol(ActiveBall) * BumperSoundFactor, Bump
		Case 2 : PlaySoundAtLevelStatic SoundFX("Bumpers_Top_2",DOFContactors), Vol(ActiveBall) * BumperSoundFactor, Bump
		Case 3 : PlaySoundAtLevelStatic SoundFX("Bumpers_Top_3",DOFContactors), Vol(ActiveBall) * BumperSoundFactor, Bump
		Case 4 : PlaySoundAtLevelStatic SoundFX("Bumpers_Top_4",DOFContactors), Vol(ActiveBall) * BumperSoundFactor, Bump
		Case 5 : PlaySoundAtLevelStatic SoundFX("Bumpers_Top_5",DOFContactors), Vol(ActiveBall) * BumperSoundFactor, Bump
	End Select
End Sub

Sub RandomSoundBumperMiddle(Bump)
	Select Case Int(Rnd*5)+1
		Case 1 : PlaySoundAtLevelStatic SoundFX("Bumpers_Middle_1",DOFContactors), Vol(ActiveBall) * BumperSoundFactor, Bump
		Case 2 : PlaySoundAtLevelStatic SoundFX("Bumpers_Middle_2",DOFContactors), Vol(ActiveBall) * BumperSoundFactor, Bump
		Case 3 : PlaySoundAtLevelStatic SoundFX("Bumpers_Middle_3",DOFContactors), Vol(ActiveBall) * BumperSoundFactor, Bump
		Case 4 : PlaySoundAtLevelStatic SoundFX("Bumpers_Middle_4",DOFContactors), Vol(ActiveBall) * BumperSoundFactor, Bump
		Case 5 : PlaySoundAtLevelStatic SoundFX("Bumpers_Middle_5",DOFContactors), Vol(ActiveBall) * BumperSoundFactor, Bump
	End Select
End Sub

Sub RandomSoundBumperBottom(Bump)
	Select Case Int(Rnd*5)+1
		Case 1 : PlaySoundAtLevelStatic SoundFX("Bumpers_Bottom_1",DOFContactors), Vol(ActiveBall) * BumperSoundFactor, Bump
		Case 2 : PlaySoundAtLevelStatic SoundFX("Bumpers_Bottom_2",DOFContactors), Vol(ActiveBall) * BumperSoundFactor, Bump
		Case 3 : PlaySoundAtLevelStatic SoundFX("Bumpers_Bottom_3",DOFContactors), Vol(ActiveBall) * BumperSoundFactor, Bump
		Case 4 : PlaySoundAtLevelStatic SoundFX("Bumpers_Bottom_4",DOFContactors), Vol(ActiveBall) * BumperSoundFactor, Bump
		Case 5 : PlaySoundAtLevelStatic SoundFX("Bumpers_Bottom_5",DOFContactors), Vol(ActiveBall) * BumperSoundFactor, Bump
	End Select
End Sub

'/////////////////////////////  FLIPPER BATS SOUND SUBROUTINES  ////////////////////////////
'/////////////////////////////  FLIPPER BATS SOLENOID ATTACK SOUND  ////////////////////////////
Sub SoundFlipperUpAttackLeft(flipper)
	FlipperUpAttackLeftSoundLevel = RndNum(FlipperUpAttackMinimumSoundLevel, FlipperUpAttackMaximumSoundLevel)
	PlaySoundAtLevelStatic ("Flipper_Attack-L01"), FlipperUpAttackLeftSoundLevel, flipper
End Sub

Sub SoundFlipperUpAttackRight(flipper)
	FlipperUpAttackRightSoundLevel = RndNum(FlipperUpAttackMinimumSoundLevel, FlipperUpAttackMaximumSoundLevel)
		PlaySoundAtLevelStatic ("Flipper_Attack-R01"), FlipperUpAttackLeftSoundLevel, flipper
End Sub

'/////////////////////////////  FLIPPER BATS SOLENOID CORE SOUND  ////////////////////////////
Sub RandomSoundFlipperUpLeft(flipper)
	Select Case Int(Rnd*11)+1
		Case 1 : PlaySoundAtLevelStatic SoundFX("Flipper_L01",DOFFlippers), FlipperLeftHitParm, Flipper
		Case 2 : PlaySoundAtLevelStatic SoundFX("Flipper_L02",DOFFlippers), FlipperLeftHitParm, Flipper
		Case 3 : PlaySoundAtLevelStatic SoundFX("Flipper_L07",DOFFlippers), FlipperLeftHitParm, Flipper
		Case 4 : PlaySoundAtLevelStatic SoundFX("Flipper_L08",DOFFlippers), FlipperLeftHitParm, Flipper
		Case 5 : PlaySoundAtLevelStatic SoundFX("Flipper_L09",DOFFlippers), FlipperLeftHitParm, Flipper
		Case 6 : PlaySoundAtLevelStatic SoundFX("Flipper_L10",DOFFlippers), FlipperLeftHitParm, Flipper
		Case 7 : PlaySoundAtLevelStatic SoundFX("Flipper_L12",DOFFlippers), FlipperLeftHitParm, Flipper
		Case 8 : PlaySoundAtLevelStatic SoundFX("Flipper_L14",DOFFlippers), FlipperLeftHitParm, Flipper
		Case 9 : PlaySoundAtLevelStatic SoundFX("Flipper_L18",DOFFlippers), FlipperLeftHitParm, Flipper
		Case 10 : PlaySoundAtLevelStatic SoundFX("Flipper_L20",DOFFlippers), FlipperLeftHitParm, Flipper
		Case 11 : PlaySoundAtLevelStatic SoundFX("Flipper_L26",DOFFlippers), FlipperLeftHitParm, Flipper
	End Select
End Sub

Sub RandomSoundFlipperUpRight(flipper)
	Select Case Int(Rnd*11)+1
		Case 1 : PlaySoundAtLevelStatic SoundFX("Flipper_R01",DOFFlippers), FlipperRightHitParm, Flipper
		Case 2 : PlaySoundAtLevelStatic SoundFX("Flipper_R02",DOFFlippers), FlipperRightHitParm, Flipper
		Case 3 : PlaySoundAtLevelStatic SoundFX("Flipper_R03",DOFFlippers), FlipperRightHitParm, Flipper
		Case 4 : PlaySoundAtLevelStatic SoundFX("Flipper_R04",DOFFlippers), FlipperRightHitParm, Flipper
		Case 5 : PlaySoundAtLevelStatic SoundFX("Flipper_R05",DOFFlippers), FlipperRightHitParm, Flipper
		Case 6 : PlaySoundAtLevelStatic SoundFX("Flipper_R06",DOFFlippers), FlipperRightHitParm, Flipper
		Case 7 : PlaySoundAtLevelStatic SoundFX("Flipper_R07",DOFFlippers), FlipperRightHitParm, Flipper
		Case 8 : PlaySoundAtLevelStatic SoundFX("Flipper_R08",DOFFlippers), FlipperRightHitParm, Flipper
		Case 9 : PlaySoundAtLevelStatic SoundFX("Flipper_R09",DOFFlippers), FlipperRightHitParm, Flipper
		Case 10 : PlaySoundAtLevelStatic SoundFX("Flipper_R10",DOFFlippers), FlipperRightHitParm, Flipper
		Case 11 : PlaySoundAtLevelStatic SoundFX("Flipper_R11",DOFFlippers), FlipperRightHitParm, Flipper
	End Select
End Sub

Sub RandomSoundReflipUpLeft(flipper)
	Select Case Int(Rnd*3)+1
		Case 1 : PlaySoundAtLevelStatic SoundFX("Flipper_ReFlip_L01",DOFFlippers), (RndNum(0.8, 1))*FlipperUpSoundLevel, Flipper
		Case 2 : PlaySoundAtLevelStatic SoundFX("Flipper_ReFlip_L02",DOFFlippers), (RndNum(0.8, 1))*FlipperUpSoundLevel, Flipper
		Case 3 : PlaySoundAtLevelStatic SoundFX("Flipper_ReFlip_L03",DOFFlippers), (RndNum(0.8, 1))*FlipperUpSoundLevel, Flipper
	End Select
End Sub

Sub RandomSoundReflipUpRight(flipper)
	Select Case Int(Rnd*3)+1
		Case 1 : PlaySoundAtLevelStatic SoundFX("Flipper_ReFlip_R01",DOFFlippers), (RndNum(0.8, 1))*FlipperUpSoundLevel, Flipper
		Case 2 : PlaySoundAtLevelStatic SoundFX("Flipper_ReFlip_R02",DOFFlippers), (RndNum(0.8, 1))*FlipperUpSoundLevel, Flipper
		Case 3 : PlaySoundAtLevelStatic SoundFX("Flipper_ReFlip_R03",DOFFlippers), (RndNum(0.8, 1))*FlipperUpSoundLevel, Flipper
	End Select
End Sub

Sub RandomSoundFlipperDownLeft(flipper)
	Select Case Int(Rnd*7)+1
		Case 1 : PlaySoundAtLevelStatic SoundFX("Flipper_Left_Down_1",DOFFlippers), FlipperDownSoundLevel, Flipper
		Case 2 : PlaySoundAtLevelStatic SoundFX("Flipper_Left_Down_2",DOFFlippers), FlipperDownSoundLevel, Flipper
		Case 3 : PlaySoundAtLevelStatic SoundFX("Flipper_Left_Down_3",DOFFlippers), FlipperDownSoundLevel, Flipper
		Case 4 : PlaySoundAtLevelStatic SoundFX("Flipper_Left_Down_4",DOFFlippers), FlipperDownSoundLevel, Flipper
		Case 5 : PlaySoundAtLevelStatic SoundFX("Flipper_Left_Down_5",DOFFlippers), FlipperDownSoundLevel, Flipper
		Case 6 : PlaySoundAtLevelStatic SoundFX("Flipper_Left_Down_6",DOFFlippers), FlipperDownSoundLevel, Flipper
		Case 7 : PlaySoundAtLevelStatic SoundFX("Flipper_Left_Down_7",DOFFlippers), FlipperDownSoundLevel, Flipper
	End Select
End Sub

Sub RandomSoundFlipperDownRight(flipper)
	Select Case Int(Rnd*8)+1
		Case 1 : PlaySoundAtLevelStatic SoundFX("Flipper_Right_Down_1",DOFFlippers), FlipperDownSoundLevel, Flipper
		Case 2 : PlaySoundAtLevelStatic SoundFX("Flipper_Right_Down_2",DOFFlippers), FlipperDownSoundLevel, Flipper
		Case 3 : PlaySoundAtLevelStatic SoundFX("Flipper_Right_Down_3",DOFFlippers), FlipperDownSoundLevel, Flipper
		Case 4 : PlaySoundAtLevelStatic SoundFX("Flipper_Right_Down_4",DOFFlippers), FlipperDownSoundLevel, Flipper
		Case 5 : PlaySoundAtLevelStatic SoundFX("Flipper_Right_Down_5",DOFFlippers), FlipperDownSoundLevel, Flipper
		Case 6 : PlaySoundAtLevelStatic SoundFX("Flipper_Right_Down_6",DOFFlippers), FlipperDownSoundLevel, Flipper
		Case 7 : PlaySoundAtLevelStatic SoundFX("Flipper_Right_Down_7",DOFFlippers), FlipperDownSoundLevel, Flipper
		Case 8 : PlaySoundAtLevelStatic SoundFX("Flipper_Right_Down_8",DOFFlippers), FlipperDownSoundLevel, Flipper
	End Select
End Sub

'/////////////////////////////  FLIPPER BATS BALL COLLIDE SOUND  ////////////////////////////

Sub LeftFlipperCollide(parm)
	FlipperLeftHitParm = parm/10
	If FlipperLeftHitParm > 1 Then
		FlipperLeftHitParm = 1
	End If
	FlipperLeftHitParm = FlipperUpSoundLevel * FlipperLeftHitParm
	CheckLiveCatch Activeball, LeftFlipper, LFCount, parm
	RandomSoundRubberFlipper(parm)
End Sub

Sub RightFlipperCollide(parm)
	FlipperRightHitParm = parm/10
	If FlipperRightHitParm > 1 Then
		FlipperRightHitParm = 1
	End If
	FlipperRightHitParm = FlipperUpSoundLevel * FlipperRightHitParm
	CheckLiveCatch Activeball, RightFlipper, RFCount, parm
 	RandomSoundRubberFlipper(parm)
End Sub


Sub RandomSoundRubberFlipper(parm)
	Select Case Int(Rnd*7)+1
		Case 1 : PlaySoundAtLevelActiveBall ("Flipper_Rubber_1"), parm  * RubberFlipperSoundFactor
		Case 2 : PlaySoundAtLevelActiveBall ("Flipper_Rubber_2"), parm  * RubberFlipperSoundFactor
		Case 3 : PlaySoundAtLevelActiveBall ("Flipper_Rubber_3"), parm  * RubberFlipperSoundFactor
		Case 4 : PlaySoundAtLevelActiveBall ("Flipper_Rubber_4"), parm  * RubberFlipperSoundFactor
		Case 5 : PlaySoundAtLevelActiveBall ("Flipper_Rubber_5"), parm  * RubberFlipperSoundFactor
		Case 6 : PlaySoundAtLevelActiveBall ("Flipper_Rubber_6"), parm  * RubberFlipperSoundFactor
		Case 7 : PlaySoundAtLevelActiveBall ("Flipper_Rubber_7"), parm  * RubberFlipperSoundFactor
	End Select
End Sub

'/////////////////////////////  ROLLOVER SOUNDS  ////////////////////////////
Sub RandomSoundRollover()
	Select Case Int(Rnd*4)+1
		Case 1 : PlaySoundAtLevelActiveBall ("Rollover_1"), RolloverSoundLevel
		Case 2 : PlaySoundAtLevelActiveBall ("Rollover_2"), RolloverSoundLevel
		Case 3 : PlaySoundAtLevelActiveBall ("Rollover_3"), RolloverSoundLevel
		Case 4 : PlaySoundAtLevelActiveBall ("Rollover_4"), RolloverSoundLevel
	End Select
End Sub

Sub Rollovers_Hit(idx)
	RandomSoundRollover
End Sub

'/////////////////////////////  VARIOUS PLAYFIELD SOUND SUBROUTINES  ////////////////////////////
'/////////////////////////////  RUBBERS AND POSTS  ////////////////////////////
'/////////////////////////////  RUBBERS - EVENTS  ////////////////////////////


'/////////////////////////////  RUBBERS AND POSTS - STRONG IMPACTS  ////////////////////////////
Sub RandomSoundRubberStrong(voladj)
	Select Case Int(Rnd*10)+1
		Case 1 : PlaySoundAtLevelActiveBall ("Rubber_Strong_1"), Vol(ActiveBall) * RubberStrongSoundFactor*voladj
		Case 2 : PlaySoundAtLevelActiveBall ("Rubber_Strong_2"), Vol(ActiveBall) * RubberStrongSoundFactor*voladj
		Case 3 : PlaySoundAtLevelActiveBall ("Rubber_Strong_3"), Vol(ActiveBall) * RubberStrongSoundFactor*voladj
		Case 4 : PlaySoundAtLevelActiveBall ("Rubber_Strong_4"), Vol(ActiveBall) * RubberStrongSoundFactor*voladj
		Case 5 : PlaySoundAtLevelActiveBall ("Rubber_Strong_5"), Vol(ActiveBall) * RubberStrongSoundFactor*voladj
		Case 6 : PlaySoundAtLevelActiveBall ("Rubber_Strong_6"), Vol(ActiveBall) * RubberStrongSoundFactor*voladj
		Case 7 : PlaySoundAtLevelActiveBall ("Rubber_Strong_7"), Vol(ActiveBall) * RubberStrongSoundFactor*voladj
		Case 8 : PlaySoundAtLevelActiveBall ("Rubber_Strong_8"), Vol(ActiveBall) * RubberStrongSoundFactor*voladj
		Case 9 : PlaySoundAtLevelActiveBall ("Rubber_Strong_9"), Vol(ActiveBall) * RubberStrongSoundFactor*voladj
		Case 10 : PlaySoundAtLevelActiveBall ("Rubber_1_Hard"), Vol(ActiveBall) * RubberStrongSoundFactor * 0.6*voladj
	End Select
End Sub

'/////////////////////////////  RUBBERS AND POSTS - WEAK IMPACTS  ////////////////////////////
Sub RandomSoundRubberWeak()
	Select Case Int(Rnd*9)+1
		Case 1 : PlaySoundAtLevelActiveBall ("Rubber_1"), Vol(ActiveBall) * RubberWeakSoundFactor
		Case 2 : PlaySoundAtLevelActiveBall ("Rubber_2"), Vol(ActiveBall) * RubberWeakSoundFactor
		Case 3 : PlaySoundAtLevelActiveBall ("Rubber_3"), Vol(ActiveBall) * RubberWeakSoundFactor
		Case 4 : PlaySoundAtLevelActiveBall ("Rubber_3"), Vol(ActiveBall) * RubberWeakSoundFactor
		Case 5 : PlaySoundAtLevelActiveBall ("Rubber_5"), Vol(ActiveBall) * RubberWeakSoundFactor
		Case 6 : PlaySoundAtLevelActiveBall ("Rubber_6"), Vol(ActiveBall) * RubberWeakSoundFactor
		Case 7 : PlaySoundAtLevelActiveBall ("Rubber_7"), Vol(ActiveBall) * RubberWeakSoundFactor
		Case 8 : PlaySoundAtLevelActiveBall ("Rubber_8"), Vol(ActiveBall) * RubberWeakSoundFactor
		Case 9 : PlaySoundAtLevelActiveBall ("Rubber_9"), Vol(ActiveBall) * RubberWeakSoundFactor
	End Select
End Sub

'/////////////////////////////  WALL IMPACTS  ////////////////////////////
Sub aWoods_Hit(idx)
	RandomSoundWall
	'msgbox "wall"
End Sub


Sub RandomSoundWall()
 	dim finalspeed
  	finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
 	If finalspeed > 16 then 
		Select Case Int(Rnd*5)+1
			Case 1 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_1"), Vol(ActiveBall) * WallImpactSoundFactor
			Case 2 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_2"), Vol(ActiveBall) * WallImpactSoundFactor
			Case 3 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_5"), Vol(ActiveBall) * WallImpactSoundFactor
			Case 4 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_7"), Vol(ActiveBall) * WallImpactSoundFactor
			Case 5 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_9"), Vol(ActiveBall) * WallImpactSoundFactor
		End Select
	End if
	If finalspeed >= 6 AND finalspeed <= 16 then
		Select Case Int(Rnd*4)+1
			Case 1 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_3"), Vol(ActiveBall) * WallImpactSoundFactor
			Case 2 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_4"), Vol(ActiveBall) * WallImpactSoundFactor
			Case 3 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_6"), Vol(ActiveBall) * WallImpactSoundFactor
			Case 4 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_8"), Vol(ActiveBall) * WallImpactSoundFactor
		End Select
 	End If
	If finalspeed < 6 Then
		Select Case Int(Rnd*3)+1
			Case 1 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_4"), Vol(ActiveBall) * WallImpactSoundFactor
			Case 2 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_6"), Vol(ActiveBall) * WallImpactSoundFactor
			Case 3 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_8"), Vol(ActiveBall) * WallImpactSoundFactor
		End Select
	End if
End Sub

'/////////////////////////////  METAL TOUCH SOUNDS  ////////////////////////////
Sub RandomSoundMetal()
	Select Case Int(Rnd*13)+1
		Case 1 : PlaySoundAtLevelActiveBall ("Metal_Touch_1"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 2 : PlaySoundAtLevelActiveBall ("Metal_Touch_2"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 3 : PlaySoundAtLevelActiveBall ("Metal_Touch_3"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 4 : PlaySoundAtLevelActiveBall ("Metal_Touch_4"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 5 : PlaySoundAtLevelActiveBall ("Metal_Touch_5"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 6 : PlaySoundAtLevelActiveBall ("Metal_Touch_6"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 7 : PlaySoundAtLevelActiveBall ("Metal_Touch_7"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 8 : PlaySoundAtLevelActiveBall ("Metal_Touch_8"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 9 : PlaySoundAtLevelActiveBall ("Metal_Touch_9"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 10 : PlaySoundAtLevelActiveBall ("Metal_Touch_10"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 11 : PlaySoundAtLevelActiveBall ("Metal_Touch_11"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 12 : PlaySoundAtLevelActiveBall ("Metal_Touch_12"), Vol(ActiveBall) * MetalImpactSoundFactor
		Case 13 : PlaySoundAtLevelActiveBall ("Metal_Touch_13"), Vol(ActiveBall) * MetalImpactSoundFactor
	End Select
End Sub

'/////////////////////////////  METAL - EVENTS  ////////////////////////////

Sub aMetals_Hit(idx)
	'debug.print "metal"
	RandomSoundMetal
End Sub

Sub DivOpen_Hit()
	'debug.print "divopen"
	RandomSoundMetal
End Sub

Sub DivClose_Hit()
	'debug.print "divClose"
	RandomSoundMetal
End Sub

Sub ShooterDiverter_collide(idx)
	RandomSoundMetal
End Sub

'/////////////////////////////  BOTTOM ARCH BALL GUIDE  ////////////////////////////
'/////////////////////////////  BOTTOM ARCH BALL GUIDE - SOFT BOUNCES  ////////////////////////////
Sub RandomSoundBottomArchBallGuide()
 	dim finalspeed
  	finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
 	If finalspeed > 16 then 
 		Select Case Int(Rnd*2)+1
			Case 1 : PlaySoundAtLevelActiveBall ("Apron_Bounce_1"), Vol(ActiveBall) * BottomArchBallGuideSoundFactor
			Case 2 : PlaySoundAtLevelActiveBall ("Apron_Bounce_2"), Vol(ActiveBall) * BottomArchBallGuideSoundFactor
		End Select
	End if
	If finalspeed >= 6 AND finalspeed <= 16 then
 		Select Case Int(Rnd*2)+1
			Case 1 : PlaySoundAtLevelActiveBall ("Apron_Bounce_1"), Vol(ActiveBall) * BottomArchBallGuideSoundFactor
			Case 2 : PlaySoundAtLevelActiveBall ("Apron_Bounce_Soft_1"), Vol(ActiveBall) * BottomArchBallGuideSoundFactor
		End Select
 	End If
	If finalspeed < 6 Then
 		Select Case Int(Rnd*2)+1
			Case 1 : PlaySoundAtLevelActiveBall ("Apron_Bounce_Soft_1"), Vol(ActiveBall) * BottomArchBallGuideSoundFactor
			Case 2 : PlaySoundAtLevelActiveBall ("Apron_Medium_3"), Vol(ActiveBall) * BottomArchBallGuideSoundFactor
		End Select
	End if
End Sub

'/////////////////////////////  BOTTOM ARCH BALL GUIDE - HARD HITS  ////////////////////////////
Sub RandomSoundBottomArchBallGuideHardHit()
	Select Case Int(Rnd*3)+1
		Case 1 : PlaySoundAtLevelActiveBall ("Apron_Hard_Hit_1"), BottomArchBallGuideSoundFactor * 0.25
		Case 2 : PlaySoundAtLevelActiveBall ("Apron_Hard_Hit_2"), BottomArchBallGuideSoundFactor * 0.25
		Case 3 : PlaySoundAtLevelActiveBall ("Apron_Hard_Hit_3"), BottomArchBallGuideSoundFactor * 0.25
	End Select
End Sub


Sub Apron_Hit(idx)
	If Abs(cor.ballvelx(activeball.id) < 4) and cor.ballvely(activeball.id) > 7 then
		RandomSoundBottomArchBallGuideHardHit()
	Else
		RandomSoundBottomArchBallGuide
	End If
End Sub

'/////////////////////////////  FLIPPER BALL GUIDE  ////////////////////////////
Sub RandomSoundFlipperBallGuide()
 	dim finalspeed
  	finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
 	If finalspeed > 16 then 
 		Select Case Int(Rnd*2)+1
			Case 1 : PlaySoundAtLevelActiveBall ("Apron_Hard_1"),  Vol(ActiveBall) * FlipperBallGuideSoundFactor
			Case 2 : PlaySoundAtLevelActiveBall ("Apron_Hard_2"),  Vol(ActiveBall) * 0.8 * FlipperBallGuideSoundFactor
		End Select
	End if
	If finalspeed >= 6 AND finalspeed <= 16 then
 		Select Case Int(Rnd*3)+1
			Case 1 : PlaySoundAtLevelActiveBall ("Apron_Medium_1"),  Vol(ActiveBall) * FlipperBallGuideSoundFactor
			Case 2 : PlaySoundAtLevelActiveBall ("Apron_Medium_2"),  Vol(ActiveBall) * FlipperBallGuideSoundFactor
			Case 3 : PlaySoundAtLevelActiveBall ("Apron_Medium_3"),  Vol(ActiveBall) * FlipperBallGuideSoundFactor
		End Select
 	End If
	If finalspeed < 6 Then
 		Select Case Int(Rnd*7)+1
			Case 1 : PlaySoundAtLevelActiveBall ("Apron_Soft_1"),  Vol(ActiveBall) * FlipperBallGuideSoundFactor
			Case 2 : PlaySoundAtLevelActiveBall ("Apron_Soft_2"),  Vol(ActiveBall) * FlipperBallGuideSoundFactor
			Case 3 : PlaySoundAtLevelActiveBall ("Apron_Soft_3"),  Vol(ActiveBall) * FlipperBallGuideSoundFactor
			Case 4 : PlaySoundAtLevelActiveBall ("Apron_Soft_4"),  Vol(ActiveBall) * FlipperBallGuideSoundFactor
			Case 5 : PlaySoundAtLevelActiveBall ("Apron_Soft_5"),  Vol(ActiveBall) * FlipperBallGuideSoundFactor
			Case 6 : PlaySoundAtLevelActiveBall ("Apron_Soft_6"),  Vol(ActiveBall) * FlipperBallGuideSoundFactor
			Case 7 : PlaySoundAtLevelActiveBall ("Apron_Soft_7"),  Vol(ActiveBall) * FlipperBallGuideSoundFactor
		End Select
	End if
End Sub

sub aLaneguides_hit(idx)
	RandomSoundFlipperBallGuide
End Sub

'/////////////////////////////  TARGET HIT SOUNDS  ////////////////////////////
Sub RandomSoundTargetHitStrong()
	Select Case Int(Rnd*4)+1
		Case 1 : PlaySoundAtLevelActiveBall SoundFX("Target_Hit_5",DOFTargets), Vol(ActiveBall) * 0.45 * TargetSoundFactor
		Case 2 : PlaySoundAtLevelActiveBall SoundFX("Target_Hit_6",DOFTargets), Vol(ActiveBall) * 0.45 * TargetSoundFactor
		Case 3 : PlaySoundAtLevelActiveBall SoundFX("Target_Hit_7",DOFTargets), Vol(ActiveBall) * 0.45 * TargetSoundFactor
		Case 4 : PlaySoundAtLevelActiveBall SoundFX("Target_Hit_8",DOFTargets), Vol(ActiveBall) * 0.45 * TargetSoundFactor		
	End Select
End Sub

Sub RandomSoundTargetHitWeak()
	Select Case Int(Rnd*4)+1		
		Case 1 : PlaySoundAtLevelActiveBall SoundFX("Target_Hit_1",DOFTargets), Vol(ActiveBall) * TargetSoundFactor
		Case 2 : PlaySoundAtLevelActiveBall SoundFX("Target_Hit_2",DOFTargets), Vol(ActiveBall) * TargetSoundFactor
		Case 3 : PlaySoundAtLevelActiveBall SoundFX("Target_Hit_3",DOFTargets), Vol(ActiveBall) * TargetSoundFactor
		Case 4 : PlaySoundAtLevelActiveBall SoundFX("Target_Hit_4",DOFTargets), Vol(ActiveBall) * TargetSoundFactor
	End Select
End Sub

Sub PlayTargetSound()
 	dim finalspeed
  	finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
 	If finalspeed > 10 then
 		RandomSoundTargetHitStrong()
		RandomSoundBallBouncePlayfieldSoft Activeball
	Else 
 		RandomSoundTargetHitWeak()
 	End If	
End Sub

Sub Targets_Hit (idx)
	PlayTargetSound	
End Sub

'/////////////////////////////  BALL BOUNCE SOUNDS  ////////////////////////////
Sub RandomSoundBallBouncePlayfieldSoft(aBall)
	Select Case Int(Rnd*9)+1
		Case 1 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Soft_1"), volz(aBall) * BallBouncePlayfieldSoftFactor, aBall
		Case 2 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Soft_2"), volz(aBall) * BallBouncePlayfieldSoftFactor * 0.5, aBall
		Case 3 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Soft_3"), volz(aBall) * BallBouncePlayfieldSoftFactor * 0.8, aBall
		Case 4 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Soft_4"), volz(aBall) * BallBouncePlayfieldSoftFactor * 0.5, aBall
		Case 5 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Soft_5"), volz(aBall) * BallBouncePlayfieldSoftFactor, aBall
		Case 6 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Hard_1"), volz(aBall) * BallBouncePlayfieldSoftFactor * 0.2, aBall
		Case 7 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Hard_2"), volz(aBall) * BallBouncePlayfieldSoftFactor * 0.2, aBall
		Case 8 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Hard_5"), volz(aBall) * BallBouncePlayfieldSoftFactor * 0.2, aBall
		Case 9 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Hard_7"), volz(aBall) * BallBouncePlayfieldSoftFactor * 0.3, aBall
	End Select
End Sub

Sub RandomSoundBallBouncePlayfieldHard(aBall)
	Select Case Int(Rnd*7)+1
		Case 1 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Hard_1"), volz(aBall) * BallBouncePlayfieldHardFactor, aBall
		Case 2 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Hard_2"), volz(aBall) * BallBouncePlayfieldHardFactor, aBall
		Case 3 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Hard_3"), volz(aBall) * BallBouncePlayfieldHardFactor, aBall
		Case 4 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Hard_4"), volz(aBall) * BallBouncePlayfieldHardFactor, aBall
		Case 5 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Hard_5"), volz(aBall) * BallBouncePlayfieldHardFactor, aBall
		Case 6 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Hard_6"), volz(aBall) * BallBouncePlayfieldHardFactor, aBall
		Case 7 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Hard_7"), volz(aBall) * BallBouncePlayfieldHardFactor, aBall
	End Select
End Sub

'/////////////////////////////  DELAYED DROP - TO PLAYFIELD - SOUND  ////////////////////////////
Sub RandomSoundDelayedBallDropOnPlayfield(aBall)
	Select Case Int(Rnd*5)+1
		Case 1 : PlaySoundAtLevelStatic ("Ball_Drop_Playfield_1_Delayed"), DelayedBallDropOnPlayfieldSoundLevel, aBall
		Case 2 : PlaySoundAtLevelStatic ("Ball_Drop_Playfield_2_Delayed"), DelayedBallDropOnPlayfieldSoundLevel, aBall
		Case 3 : PlaySoundAtLevelStatic ("Ball_Drop_Playfield_3_Delayed"), DelayedBallDropOnPlayfieldSoundLevel, aBall
		Case 4 : PlaySoundAtLevelStatic ("Ball_Drop_Playfield_4_Delayed"), DelayedBallDropOnPlayfieldSoundLevel, aBall
		Case 5 : PlaySoundAtLevelStatic ("Ball_Drop_Playfield_5_Delayed"), DelayedBallDropOnPlayfieldSoundLevel, aBall
	End Select
End Sub

'/////////////////////////////  BALL GATES AND BRACKET GATES SOUNDS  ////////////////////////////

Sub SoundPlayfieldGate()
	Select Case Int(Rnd*2)+1				
		Case 1 : PlaySoundAtLevelStatic ("Gate_FastTrigger_1"), GateSoundLevel, Activeball
		Case 2 : PlaySoundAtLevelStatic ("Gate_FastTrigger_2"), GateSoundLevel, Activeball
	End Select
End Sub

Sub SoundHeavyGate()
	PlaySoundAtLevelStatic ("Gate_2"), GateSoundLevel, Activeball
End Sub

Sub Gates_hit(idx)
	SoundHeavyGate
End Sub

Sub GatesWire_hit(idx)	
	SoundPlayfieldGate	
End Sub	

'/////////////////////////////  LEFT LANE ENTRANCE - SOUNDS  ////////////////////////////

Sub RandomSoundLeftArch()
	Select Case Int(Rnd*4)+1
		Case 1 : PlaySoundAtLevelActiveBall ("Arch_L1"), Vol(ActiveBall) * ArchSoundFactor
		Case 2 : PlaySoundAtLevelActiveBall ("Arch_L2"), Vol(ActiveBall) * ArchSoundFactor
		Case 3 : PlaySoundAtLevelActiveBall ("Arch_L3"), Vol(ActiveBall) * ArchSoundFactor
		Case 4 : PlaySoundAtLevelActiveBall ("Arch_L4"), Vol(ActiveBall) * ArchSoundFactor
	End Select
End Sub

Sub RandomSoundRightArch()
	Select Case Int(Rnd*4)+1
		Case 1 : PlaySoundAtLevelActiveBall ("Arch_R1"), Vol(ActiveBall) * ArchSoundFactor
		Case 2 : PlaySoundAtLevelActiveBall ("Arch_R2"), Vol(ActiveBall) * ArchSoundFactor
		Case 3 : PlaySoundAtLevelActiveBall ("Arch_R3"), Vol(ActiveBall) * ArchSoundFactor
		Case 4 : PlaySoundAtLevelActiveBall ("Arch_R4"), Vol(ActiveBall) * ArchSoundFactor
	End Select
End Sub


Sub Arch1_hit()
	If Activeball.velx > 1 Then SoundPlayfieldGate
	StopSound "Arch_L1"
	StopSound "Arch_L2"
	StopSound "Arch_L3"
	StopSound "Arch_L4"
End Sub

Sub Arch1_unhit()
	If activeball.velx < -8 Then
		RandomSoundRightArch
	End If
End Sub

Sub Arch2_hit()
	If Activeball.velx < 1 Then SoundPlayfieldGate
	StopSound "Arch_R1"
	StopSound "Arch_R2"
	StopSound "Arch_R3"
	StopSound "Arch_R4"
End Sub

Sub Arch2_unhit()
	If activeball.velx > 10 Then
		RandomSoundLeftArch
	End If
End Sub

'/////////////////////////////  SAUCERS (KICKER HOLES)  ////////////////////////////

Sub SoundSaucerLock()
	Select Case Int(Rnd*2)+1	
		Case 1: PlaySoundAtLevelStatic ("Saucer_Enter_1"), SaucerLockSoundLevel, Activeball
		Case 2: PlaySoundAtLevelStatic ("Saucer_Enter_2"), SaucerLockSoundLevel, Activeball
	End Select
End Sub

Sub SoundSaucerKick(scenario, saucer)
	Select Case scenario
		Case 0: PlaySoundAtLevelStatic SoundFX("Saucer_Empty", DOFContactors), SaucerKickSoundLevel, saucer
		Case 1: PlaySoundAtLevelStatic SoundFX("Saucer_Kick", DOFContactors), SaucerKickSoundLevel, saucer
	End Select
End Sub

'/////////////////////////////  BALL COLLISION SOUND  ////////////////////////////
Sub OnBallBallCollision(ball1, ball2, velocity)
	Dim snd
	Select Case Int(Rnd*7)+1
		Case 1 : snd = "Ball_Collide_1"
		Case 2 : snd = "Ball_Collide_2"
		Case 3 : snd = "Ball_Collide_3"
		Case 4 : snd = "Ball_Collide_4"
		Case 5 : snd = "Ball_Collide_5"
		Case 6 : snd = "Ball_Collide_6"
		Case 7 : snd = "Ball_Collide_7"
	End Select

	PlaySound (snd), 0, Csng(velocity) ^2 / 200 * BallWithBallCollisionSoundFactor * VolumeDial, AudioPan(ball1), 0, Pitch(ball1), 0, 0, AudioFade(ball1)
End Sub



'******************************************************
'		BALL ROLLING AND DROP SOUNDS
'******************************************************

Const tnob = 6 ' total number of balls
ReDim rolling(tnob)
ReDim ramprolling(tnob)
ReDim ramprollinghigh(tnob)
InitRolling

Dim DropCount
ReDim DropCount(tnob)

Sub InitRolling
	Dim i
	For i = 0 to tnob
		rolling(i) = False
		ramprolling(i) = False
		ramprollinghigh(i) = False
	Next
End Sub

Sub RollingUpdate()
	Dim BOT, b
	BOT = GetBalls

	' stop the sound of deleted balls
	For b = UBound(BOT) + 1 to tnob
		rolling(b) = False
		ramprolling(b) = False
		ramprollinghigh(b) = False
		StopSound("BallRoll_" & b)
		StopSound ("TOM_BallRoll_PlasticRamp_" & b)
	Next

	' exit the sub if no balls on the table
	If UBound(BOT) = -1 Then Exit Sub

	' play the rolling sound for each ball

	For b = 0 to UBound(BOT)
		If BOT(b).z < 27 and BOT(b).z > 23 Then
			If BallVel(BOT(b) ) > 1 Then
				rolling(b) = True
				PlaySound ("BallRoll_" & b), -1, VolPlayfieldRoll(BOT(b)) * 1.1 * VolumeDial, AudioPan(BOT(b)), 0, PitchPlayfieldRoll(BOT(b)), 1, 0, AudioFade(BOT(b))
			end if
		ElseIf BOT(b).z > 46 AND BOT(b).z < 150 Then

			' play the plastic ramp rolling sound for each ball
			If BallVel(BOT(b) ) > 1 and InRect(BOT(b).x, BOT(b).y, 10,165,947,20,952,1673,2,870) and Not InRect(BOT(b).x, BOT(b).y, 530,340,700,180,780,1160,670,1160) and Not InRect(BOT(b).x, BOT(b).y, 410,375,600,335,565,940,400,910) Then
				ramprolling(b) = True
				PlaySound ("TOM_BallRoll_PlasticRamp_" & b), -1, (VolPlasticRampRoll(BOT(b))) * VolumeDial, AudioPan(BOT(b)), 0, PitchPlasticRamp(BOT(b)), 1, 0, AudioFade(BOT(b))
				'debug.print (VolPlasticRampRoll(BOT(b))) * VolumeDial
			Else
				If ramprolling(b) = True Then
					ramprolling(b) = False
					StopSound ("TOM_BallRoll_PlasticRamp_" & b)			
				End If
			End If

		ElseIf BOT(b).z > 150 Then

			' play the plastic ramp rolling sound for each ball
			If BallVel(BOT(b) ) > 1 and InRect(BOT(b).x, BOT(b).y, 10,165,947,20,952,1673,2,870) and Not InRect(BOT(b).x, BOT(b).y, 0,40,560,340,570,577,400,560) Then
				ramprollinghigh(b) = True
				PlaySound ("TOM_BallRoll_PlasticRamp_" & b), -1, (VolPlasticRampRoll(BOT(b))) * VolumeDial, AudioPan(BOT(b)), 0, PitchPlasticRamp(BOT(b)), 1, 0, AudioFade(BOT(b))
				'debug.print (VolPlasticRampRoll(BOT(b))) * VolumeDial
			Else
				If ramprollinghigh(b) = True Then
					ramprollinghigh(b) = False
					StopSound ("TOM_BallRoll_PlasticRamp_" & b)			
				End If
			End If
		end if
		
		If rolling(b) = True and (BallVel(BOT(b) ) <= 1 or BOT(B).z < 23 or BOT(b).z > 27) Then
			StopSound("BallRoll_" & b)
			rolling(b) = False
		End If
		If ramprolling(b) = True and BOT(b).z <= 46 Then
			ramprolling(b) = False
			ramprollinghigh(b) = False
			StopSound ("TOM_BallRoll_PlasticRamp_" & b)
		End If

		'***Ball Drop Sounds***
		If BOT(b).VelZ < -1 and BOT(b).z < 55 and BOT(b).z > 27 Then 'height adjust for ball drop sounds
			'debug.print "ball drop" & BOT(b).velz
			If DropCount(b) >= 2 Then
				DropCount(b) = 0
				If BOT(b).velz > -7 Then
					'debug.print "random sound soft"
					RandomSoundBallBouncePlayfieldSoft BOT(b)
				Else
					'debug.print "random sound hard"
					RandomSoundBallBouncePlayfieldHard BOT(b)
				End If				
			End If
'		Else
'			If BOT(b).VelZ < -1 then
'				debug.print "ball z: " & BOT(b).z & " ball velz: " & BOT(b).VelZ
'			end if
		End If
		If DropCount(b) < 2 Then
			DropCount(b) = DropCount(b) + 1
		End If
	Next
End Sub



'**********************************************************''
' end fleep sounds
'**********************************************************''



'******************************************************
'				FLIPPER AND RUBBER CORRECTION
'******************************************************

'****************************************************************************
'PHYSICS DAMPENERS

'These are data mined bounce curves, 
'dialed in with the in-game elasticity as much as possible to prevent angle / spin issues.
'Requires tracking ballspeed to calculate COR


Sub dPosts_Hit(idx) 
	RubbersD.dampen Activeball
End Sub

Sub dSleeves_Hit(idx) 
	SleevesD.Dampen Activeball
End Sub

Sub dPlastics_Hit(idx)
	PlasticsD.Dampen Activeball
End Sub

dim RubbersD : Set RubbersD = new Dampener	'frubber
RubbersD.name = "Rubbers"
RubbersD.debugOn = False	'shows info in textbox "TBPout"
RubbersD.Print = False	'debug, reports in debugger (in vel, out cor)
'cor bounce curve (linear)
'for best results, try to match in-game velocity as closely as possible to the desired curve
'RubbersD.addpoint 0, 0, 0.935	'point# (keep sequential), ballspeed, CoR (elasticity)
RubbersD.addpoint 0, 0, 0.96	'point# (keep sequential), ballspeed, CoR (elasticity)
RubbersD.addpoint 1, 3.77, 0.96
RubbersD.addpoint 2, 5.76, 0.967	'dont take this as gospel. if you can data mine rubber elasticitiy, please help!
RubbersD.addpoint 3, 15.84, 0.874
RubbersD.addpoint 4, 56, 0.64	'there's clamping so interpolate up to 56 at least

dim SleevesD : Set SleevesD = new Dampener	'this is just rubber but cut down to 85%...
SleevesD.name = "Sleeves"
SleevesD.debugOn = False	'shows info in textbox "TBPout"
SleevesD.Print = False	'debug, reports in debugger (in vel, out cor)
SleevesD.CopyCoef RubbersD, 0.85

dim PlasticsD : Set PlasticsD = new Dampener	'this is just rubber but cut down to 95%...
PlasticsD.name = "Plastics"
PlasticsD.debugOn = False	'shows info in textbox "TBPout"
PlasticsD.Print = False	'debug, reports in debugger (in vel, out cor)
PlasticsD.CopyCoef RubbersD, 0.95


Class Dampener
	Public Print, debugOn 'tbpOut.text
	public name, Threshold 	'Minimum threshold. Useful for Flippers, which don't have a hit threshold.
	Public ModIn, ModOut
	Private Sub Class_Initialize : redim ModIn(0) : redim Modout(0): End Sub 

	Public Sub AddPoint(aIdx, aX, aY) 
		ShuffleArrays ModIn, ModOut, 1 : ModIn(aIDX) = aX : ModOut(aIDX) = aY : ShuffleArrays ModIn, ModOut, 0
		if gametime > 100 then Report
	End Sub

	public sub Dampen(aBall)
		if threshold then if BallSpeed(aBall) < threshold then exit sub end if end if
		dim RealCOR, DesiredCOR, str, coef
		DesiredCor = LinearEnvelope(cor.ballvel(aBall.id), ModIn, ModOut )
		RealCOR = BallSpeed(aBall) / cor.ballvel(aBall.id)
		coef = desiredcor / realcor 
		if debugOn then str = name & " in vel:" & round(cor.ballvel(aBall.id),2 ) & vbnewline & "desired cor: " & round(desiredcor,4) & vbnewline & _
		"actual cor: " & round(realCOR,4) & vbnewline & "ballspeed coef: " & round(coef, 3) & vbnewline 
		if Print then debug.print Round(cor.ballvel(aBall.id),2) & ", " & round(desiredcor,3)
		
		aBall.velx = aBall.velx * coef : aBall.vely = aBall.vely * coef
		'playsound "fx_knocker"
		if debugOn then TBPout.text = str
	End Sub

	Public Sub CopyCoef(aObj, aCoef) 'alternative addpoints, copy with coef
		dim x : for x = 0 to uBound(aObj.ModIn)
			addpoint x, aObj.ModIn(x), aObj.ModOut(x)*aCoef
		Next
	End Sub


	Public Sub Report() 	'debug, reports all coords in tbPL.text
		if not debugOn then exit sub
		dim a1, a2 : a1 = ModIn : a2 = ModOut
		dim str, x : for x = 0 to uBound(a1) : str = str & x & ": " & round(a1(x),4) & ", " & round(a2(x),4) & vbnewline : next
		TBPout.text = str
	End Sub

End Class

'******************************************************
'		TRACK ALL BALL VELOCITIES
' 		FOR RUBBER DAMPENER AND DROP TARGETS
'******************************************************

dim cor : set cor = New CoRTracker

Class CoRTracker
	public ballvel, ballvelx, ballvely

	Private Sub Class_Initialize : redim ballvel(0) : redim ballvelx(0): redim ballvely(0) : End Sub 

	Public Sub Update()	'tracks in-ball-velocity
		dim str, b, AllBalls, highestID : allBalls = getballs

		for each b in allballs
			if b.id >= HighestID then highestID = b.id
		Next

		if uBound(ballvel) < highestID then redim ballvel(highestID)	'set bounds
		if uBound(ballvelx) < highestID then redim ballvelx(highestID)	'set bounds
		if uBound(ballvely) < highestID then redim ballvely(highestID)	'set bounds

		for each b in allballs
			ballvel(b.id) = BallSpeed(b)
			ballvelx(b.id) = b.velx
			ballvely(b.id) = b.vely
		Next
	End Sub
End Class

'*** Determines if a Points (px,py) is inside a 4 point polygon A-D in Clockwise/CCW order
Function InRect(px,py,ax,ay,bx,by,cx,cy,dx,dy)
	Dim AB, BC, CD, DA
	AB = (bx*py) - (by*px) - (ax*py) + (ay*px) + (ax*by) - (ay*bx)
	BC = (cx*py) - (cy*px) - (bx*py) + (by*px) + (bx*cy) - (by*cx)
	CD = (dx*py) - (dy*px) - (cx*py) + (cy*px) + (cx*dy) - (cy*dx)
	DA = (ax*py) - (ay*px) - (dx*py) + (dy*px) + (dx*ay) - (dy*ax)
 
	If (AB <= 0 AND BC <=0 AND CD <= 0 AND DA <= 0) Or (AB >= 0 AND BC >=0 AND CD >= 0 AND DA >= 0) Then
		InRect = True
	Else
		InRect = False       
	End If
End Function

'******************************************************
'		STAND-UP TARGET INITIALIZATION
'******************************************************

'Define a variable for each stand-up target
Dim ST12, ST15 , ST85, ST86, ST23

'Set array with stand-up target objects
'
'StandupTargetvar = Array(primary, prim, swtich)
' 	primary: 			vp target to determine target hit
'	prim:				primitive target used for visuals and animation
'							IMPORTANT!!! 
'							transy must be used to offset the target animation
'	switch:				ROM switch number
'	animate:			Arrary slot for handling the animation instrucitons, set to 0



'ST12 = Array(sw12, sw12p,12, 0)
'ST15 = Array(sw15, sw15p,15, 0)
'ST23 = Array(sw23, sw23p,23, 0)
'ST85 = Array(sw85, frankytargets,85, 0)
'ST86 = Array(sw86, frankytargets,86, 0)


'Add all the Stand-up Target Arrays to Stand-up Target Animation Array
' STAnimationArray = Array(ST1, ST2, ....)
Dim STArray
STArray = Array(ST12, ST15, ST85, ST86, ST23)

'Configure the behavior of Stand-up Targets
Const STAnimStep =  0.5				'vpunits per animation step (control return to Start)
Const STMaxOffset = 6				'max vp units target moves when hit
Const STHitSound = "fx_target"	'Stand-up Target Hit sound

Const STMass = 0.2				'Mass of the Stand-up Target (between 0 and 1), higher values provide more resistance

'******************************************************
'				STAND-UP TARGETS FUNCTIONS
'******************************************************

Sub STHit(switch)
	Dim i
	i = STArrayID(switch)

	'PlayTargetSound
	STArray(i)(3) =  STCheckHit(Activeball,STArray(i)(0))

	If STArray(i)(3) <> 0 Then
		DTBallPhysics Activeball, STArray(i)(0).orientation, STMass
	End If
	DoSTAnim
End Sub

Sub STHit2(target, switch)
	'PlayTargetSound
	If STCheckHit(Activeball,target) = 1 Then
		vpmTimer.PulseSw switch
	End If
End Sub

Function STArrayID(switch)
	Dim i
	For i = 0 to uBound(STArray) 
		If STArray(i)(2) = switch Then STArrayID = i:Exit Function 
	Next
End Function

'Check if target is hit on it's face
Function STCheckHit(aBall, target) 
	dim bangle, bangleafter, rangle, rangle2, perpvel, perpvelafter
	rangle = (target.orientation - 90) * 3.1416 / 180
	bangle = atn2(cor.ballvely(aball.id),cor.ballvelx(aball.id))
	bangleafter = Atn2(aBall.vely,aball.velx)

	perpvel = cor.BallVel(aball.id) * cos(bangle-rangle)
	perpvelafter = BallSpeed(aBall) * cos(bangleafter - rangle) 

	If perpvel <= 0 or perpvelafter >= 0 Then
		STCheckHit = 0 
	Else
		STCheckHit = 1
	End If
End Function


Sub DoSTAnim()
	Dim i
	For i=0 to Ubound(STArray)
		STArray(i)(3) = STAnimate(STArray(i)(0),STArray(i)(1),STArray(i)(2),STArray(i)(3))
	Next
End Sub

Function STAnimate(primary, prim, switch,  animate)
	Dim animtime

	STAnimate = animate

	if animate = 0  Then
		primary.uservalue = 0
		STAnimate = 0
		Exit Function
	Elseif primary.uservalue = 0 then 
		primary.uservalue = gametime
	end if

	animtime = gametime - primary.uservalue

	If animate = 1 Then
		primary.collidable = 0
		prim.transy = -STMaxOffset
		vpmTimer.PulseSw switch
		STAnimate = 2
		Exit Function
	elseif animate = 2 Then
		prim.transy = prim.transy + STAnimStep
		If prim.transy >= 0 Then
			prim.transy = 0
			primary.collidable = 1
			STAnimate = 0
			Exit Function
		Else 
			STAnimate = 2
		End If
	End If	
End Function

sub DTBallPhysics(aBall, angle, mass)
	dim rangle,bangle,calc1, calc2, calc3
	rangle = (angle - 90) * 3.1416 / 180
	bangle = atn2(cor.ballvely(aball.id),cor.ballvelx(aball.id))

	calc1 = cor.BallVel(aball.id) * cos(bangle - rangle) * (aball.mass - mass) / (aball.mass + mass)
	calc2 = cor.BallVel(aball.id) * sin(bangle - rangle) * cos(rangle + 4*Atn(1)/2)
	calc3 = cor.BallVel(aball.id) * sin(bangle - rangle) * sin(rangle + 4*Atn(1)/2)

	aBall.velx = calc1 * cos(rangle) + calc2
	aBall.vely = calc1 * sin(rangle) + calc3
End Sub

' Used for drop targets and stand up targets
Function Atn2(dy, dx)
	dim pi
	pi = 4*Atn(1)

	If dx > 0 Then
		Atn2 = Atn(dy / dx)
	ElseIf dx < 0 Then
		If dy = 0 Then 
			Atn2 = pi
		Else
			Atn2 = Sgn(dy) * (pi - Atn(Abs(dy / dx)))
		end if
	ElseIf dx = 0 Then
		if dy = 0 Then
			Atn2 = 0
		else
			Atn2 = Sgn(dy) * pi / 2
		end if
	End If
End Function

Function LinearEnvelope(xInput, xKeyFrame, yLvl)
	dim y 'Y output
	dim L 'Line
	dim ii : for ii = 1 to uBound(xKeyFrame)	'find active line
		if xInput <= xKeyFrame(ii) then L = ii : exit for : end if
	Next
	if xInput > xKeyFrame(uBound(xKeyFrame) ) then L = uBound(xKeyFrame)	'catch line overrun
	Y = pSlope(xInput, xKeyFrame(L-1), yLvl(L-1), xKeyFrame(L), yLvl(L) )

	'Clamp if on the boundry lines
	'if L=1 and Y < yLvl(LBound(yLvl) ) then Y = yLvl(lBound(yLvl) )
	'if L=uBound(xKeyFrame) and Y > yLvl(uBound(yLvl) ) then Y = yLvl(uBound(yLvl) )
	'clamp 2.0
	if xInput <= xKeyFrame(lBound(xKeyFrame) ) then Y = yLvl(lBound(xKeyFrame) ) 	'Clamp lower
	if xInput >= xKeyFrame(uBound(xKeyFrame) ) then Y = yLvl(uBound(xKeyFrame) )	'Clamp upper

	LinearEnvelope = Y
End Function

'*******************************************************
'	End nFozzy Dampening'
'******************************************************

'*********************
'Cabinet Mode
'*********************

If CabinetMode = 1 and VRRoom < 1 then
		PinCab_Blades.Size_y=2000
		PinCab_Rails.visible = 0
Else
		PinCab_Blades.Size_y=1000
		PinCab_Rails.visible = 1
end If

'*********************
'VR Mode
'*********************
DIM VRThings
If VRRoom > 0 Then
	If VRRoom = 1 Then
		for each VRThings in VR_Stuff:VRThings.visible = 1:Next
		for each VRThings in VR_Cab:VRThings.visible = 1:Next
	End If
	If VRRoom = 2 Then
		for each VRThings in VR_Stuff:VRThings.visible = 0:Next
		for each VRThings in VR_Cab:VRThings.visible = 0:Next
		PinCab_Backbox.visible = 1
		PinCab_Backglass.visible = 1
		DMD.visible = 1
		PinCab_Backbox.image = "PinCab_Backbox_Min"
	End If
Else
		for each VRThings in VR_Stuff:VRThings.visible = 0:Next
		for each VRThings in VR_Cab:VRThings.visible = 0:Next
End if


' Thalamus : Exit in a clean and proper way
Sub Table1_exit()
  Controller.Pause = False
  Controller.Stop
End Sub
