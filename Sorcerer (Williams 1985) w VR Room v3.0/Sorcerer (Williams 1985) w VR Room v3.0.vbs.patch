--- "Sorcerer (Williams 1985) w VR Room v3.0.vbs.original"	2023-12-29 12:06:15.207232914 +0100
+++ "Sorcerer (Williams 1985) w VR Room v3.0.vbs"	2023-12-29 12:04:57.129068581 +0100
@@ -2394,9 +2394,9 @@
 	Private Sub Class_Initialize : redim ballvel(0) : redim ballvelx(0): redim ballvely(0) : End Sub 
 
 	Public Sub Update()	'tracks in-ball-velocity
-		dim str, b, highestID
+		dim str, b, AllBalls, highestID : allBalls = getballs
 
-		for each b in gBOT
+		for each b in allBalls
 			if b.id >= HighestID then highestID = b.id
 		Next
 
@@ -2404,7 +2404,7 @@
 		if uBound(ballvelx) < highestID then redim ballvelx(highestID)	'set bounds
 		if uBound(ballvely) < highestID then redim ballvely(highestID)	'set bounds
 
-		for each b in gBOT
+		for each b in allBalls
 			ballvel(b.id) = BallSpeed(b)
 			ballvelx(b.id) = b.velx
 			ballvely(b.id) = b.vely
@@ -2435,6 +2435,39 @@
 '  DROP TARGETS INITIALIZATION
 '******************************************************
 
+Class DropTarget
+  Private m_primary, m_secondary, m_prim, m_sw, m_animate, m_isDropped
+
+  Public Property Get Primary(): Set Primary = m_primary: End Property
+  Public Property Let Primary(input): Set m_primary = input: End Property
+
+  Public Property Get Secondary(): Set Secondary = m_secondary: End Property
+  Public Property Let Secondary(input): Set m_secondary = input: End Property
+
+  Public Property Get Prim(): Set Prim = m_prim: End Property
+  Public Property Let Prim(input): Set m_prim = input: End Property
+
+  Public Property Get Sw(): Sw = m_sw: End Property
+  Public Property Let Sw(input): m_sw = input: End Property
+
+  Public Property Get Animate(): Animate = m_animate: End Property
+  Public Property Let Animate(input): m_animate = input: End Property
+
+  Public Property Get IsDropped(): IsDropped = m_isDropped: End Property
+  Public Property Let IsDropped(input): m_isDropped = input: End Property
+
+  Public default Function init(primary, secondary, prim, sw, animate, isDropped)
+    Set m_primary = primary
+    Set m_secondary = secondary
+    Set m_prim = prim
+    m_sw = sw
+    m_animate = animate
+    m_isDropped = isDropped
+
+    Set Init = Me
+  End Function
+End Class
+
 'Define a variable for each drop target
 
 
@@ -2463,9 +2496,9 @@
 
 
 
-DT34 = Array(sw34, sw34a, sw34p, 34, 0)
-DT35 = Array(sw35, sw35a, sw35p, 35, 0)
-DT36 = Array(sw36, sw36a, sw36p, 36, 0)
+Set DT34 = (new DropTarget)(sw34, sw34a, sw34p, 34, 0, false)
+Set DT35 = (new DropTarget)(sw35, sw35a, sw35p, 35, 0, false)
+Set DT36 = (new DropTarget)(sw36, sw36a, sw36p, 36, 0, false)
 
 
 Dim DTArray
@@ -2502,9 +2535,9 @@
 	i = DTArrayID(switch)
 
 	PlayTargetSound
-	DTArray(i)(4) =  DTCheckBrick(Activeball,DTArray(i)(2))
-	If DTArray(i)(4) = 1 or DTArray(i)(4) = 3 or DTArray(i)(4) = 4 Then
-		DTBallPhysics Activeball, DTArray(i)(2).rotz, DTMass
+	DTArray(i).animate =  DTCheckBrick(Activeball,DTArray(i).prim)
+	If DTArray(i).animate = 1 or DTArray(i).animate = 3 or DTArray(i).animate = 4 Then
+		DTBallPhysics Activeball, DTArray(i).prim.rotz, DTMass
 	End If
 	DoDTAnim
 End Sub
@@ -2513,7 +2546,7 @@
 	Dim i
 	i = DTArrayID(switch)
 
-	DTArray(i)(4) = -1
+	DTArray(i).animate = -1
 	DoDTAnim
 End Sub
 
@@ -2521,14 +2554,14 @@
 	Dim i
 	i = DTArrayID(switch)
 
-	DTArray(i)(4) = 1
+	DTArray(i).animate = 1
 	DoDTAnim
 End Sub
 
 Function DTArrayID(switch)
 	Dim i
 	For i = 0 to uBound(DTArray) 
-		If DTArray(i)(3) = switch Then DTArrayID = i:Exit Function 
+		If DTArray(i).sw = switch Then DTArrayID = i:Exit Function 
 	Next
 End Function
 
@@ -2583,7 +2616,7 @@
 Sub DoDTAnim()
 	Dim i
 	For i=0 to Ubound(DTArray)
-		DTArray(i)(4) = DTAnimate(DTArray(i)(0),DTArray(i)(1),DTArray(i)(2),DTArray(i)(3),DTArray(i)(4))
+		DTArray(i).animate = DTAnimate(DTArray(i).primary,DTArray(i).secondary,DTArray(i).prim,DTArray(i).sw,DTArray(i).animate)
 	Next
 End Sub
 
@@ -2777,12 +2810,37 @@
 
 Dim ST10, ST11, ST12, ST13, ST14, ST15
 
-ST10 = Array(sw10, psw10,10, 0)
-ST11 = Array(sw11, psw11,11, 0)
-ST12 = Array(sw12, psw12,12, 0)
-ST13 = Array(sw13, psw13,13, 0)
-ST14 = Array(sw14, psw14,14, 0)
-ST15 = Array(sw15, psw15,15, 0)
+Class StandupTarget
+  Private m_primary, m_prim, m_sw, m_animate
+
+  Public Property Get Primary(): Set Primary = m_primary: End Property
+  Public Property Let Primary(input): Set m_primary = input: End Property
+
+  Public Property Get Prim(): Set Prim = m_prim: End Property
+  Public Property Let Prim(input): Set m_prim = input: End Property
+
+  Public Property Get Sw(): Sw = m_sw: End Property
+  Public Property Let Sw(input): m_sw = input: End Property
+
+  Public Property Get Animate(): Animate = m_animate: End Property
+  Public Property Let Animate(input): m_animate = input: End Property
+
+  Public default Function init(primary, prim, sw, animate)
+    Set m_primary = primary
+    Set m_prim = prim
+    m_sw = sw
+    m_animate = animate
+
+    Set Init = Me
+  End Function
+End Class
+
+Set ST10 = (new StandupTarget)(sw10, psw10,10, 0)
+Set ST11 = (new StandupTarget)(sw11, psw11,11, 0)
+Set ST12 = (new StandupTarget)(sw12, psw12,12, 0)
+Set ST13 = (new StandupTarget)(sw13, psw13,13, 0)
+Set ST14 = (new StandupTarget)(sw14, psw14,14, 0)
+Set ST15 = (new StandupTarget)(sw15, psw15,15, 0)
 
 Dim STArray
 STArray = Array(ST10, ST11, ST12, ST13, ST14, ST15)
@@ -2801,10 +2859,10 @@
 	i = STArrayID(switch)
 
 	PlayTargetSound
-	STArray(i)(3) =  STCheckHit(Activeball,STArray(i)(0))
+	STArray(i).animate =  STCheckHit(Activeball,STArray(i).primary)
 
-	If STArray(i)(3) <> 0 Then
-		DTBallPhysics Activeball, STArray(i)(0).orientation, STMass
+	If STArray(i).animate <> 0 Then
+		DTBallPhysics Activeball, STArray(i).primary.orientation, STMass
 	End If
 	DoSTAnim
 End Sub
@@ -2812,7 +2870,7 @@
 Function STArrayID(switch)
 	Dim i
 	For i = 0 to uBound(STArray) 
-		If STArray(i)(2) = switch Then STArrayID = i:Exit Function 
+		If STArray(i).sw = switch Then STArrayID = i:Exit Function 
 	Next
 End Function
 
@@ -2841,7 +2899,7 @@
 Sub DoSTAnim()
 	Dim i
 	For i=0 to Ubound(STArray)
-		STArray(i)(3) = STAnimate(STArray(i)(0),STArray(i)(1),STArray(i)(2),STArray(i)(3))
+		STArray(i).animate = STAnimate(STArray(i).primary,STArray(i).prim,STArray(i).sw,STArray(i).animate)
 	Next
 End Sub
 
