--- ./Led Zeppelin Pinball 2.5/Led Zeppelin Pinball 2.5.vbs.original	2023-06-23 19:04:53
+++ ./Led Zeppelin Pinball 2.5/Led Zeppelin Pinball 2.5.vbs	2023-06-23 19:05:25
@@ -461,13 +461,12 @@
 end sub
 
 Sub Delay( seconds )
-	Dim wshShell, strCmd
-	Set wshShell = CreateObject( "WScript.Shell" )
-	strCmd = wshShell.ExpandEnvironmentStrings( "%COMSPEC% /C (PING.EXE -n " & ( seconds + 1 ) & " localhost >NUL 2>&1)" )
-	wshShell.Run strCmd, 0, 1
-	Set wshShell = Nothing
+	Dim startTime : startTime = timer
+	Debug.Print "Delay start=" & startTime & ", seconds=" & seconds
+	Do
+	Loop While timer - startTime < seconds
+	Debug.Print "Delay end " & timer
 End Sub
-
 
 Sub MusicOn
 	Dim x
@@ -4487,7 +4486,40 @@
 '******************************************************
 '  DROP TARGETS INITIALIZATION
 '******************************************************
+
+Class DropTarget
+	Private m_primary, m_secondary, m_prim, m_sw, m_animate, m_isDropped
+  
+	Public Property Get Primary(): Set Primary = m_primary: End Property
+	Public Property Let Primary(input): Set m_primary = input: End Property
+  
+	Public Property Get Secondary(): Set Secondary = m_secondary: End Property
+	Public Property Let Secondary(input): Set m_secondary = input: End Property
+  
+	Public Property Get Prim(): Set Prim = m_prim: End Property
+	Public Property Let Prim(input): Set m_prim = input: End Property
+  
+	Public Property Get Sw(): Sw = m_sw: End Property
+	Public Property Let Sw(input): m_sw = input: End Property
+  
+	Public Property Get Animate(): Animate = m_animate: End Property
+	Public Property Let Animate(input): m_animate = input: End Property
+  
+	Public Property Get IsDropped(): IsDropped = m_isDropped: End Property
+	Public Property Let IsDropped(input): m_isDropped = input: End Property
+  
+	Public default Function init(primary, secondary, prim, sw, animate, isDropped)
+	  Set m_primary = primary
+	  Set m_secondary = secondary
+	  Set m_prim = prim
+	  m_sw = sw
+	  m_animate = animate
+	  m_isDropped = isDropped
 
+	  Set Init = Me
+	End Function
+  End Class
+
 'Define a variable for each drop target
 Dim DT1, DT2, DT3, DT4, DT5
 
@@ -4507,11 +4539,11 @@
 '
 '	Values for annimate: 1 - bend target (hit to primary), 2 - drop target (hit to secondary), 3 - brick target (high velocity hit to secondary), -1 - raise target 
 
-DT1 = Array(Target1, Target1a, Target1p, 1, 0)
-DT2 = Array(Target2, Target2a, Target2p, 2, 0)
-DT3 = Array(Target3, Target3a, Target3p, 3, 0)
-DT4 = Array(Target4, Target4a, Target4p, 4, 0)
-DT5 = Array(Target5, Target5a, Target5p, 5, 0)
+Set DT1 = (new DropTarget)(Target1, Target1a, Target1p, 1, 0, false)
+Set DT2 = (new DropTarget)(Target2, Target2a, Target2p, 2, 0, false)
+Set DT3 = (new DropTarget)(Target3, Target3a, Target3p, 3, 0, false)
+Set DT4 = (new DropTarget)(Target4, Target4a, Target4p, 4, 0, false)
+Set DT5 = (new DropTarget)(Target5, Target5a, Target5p, 5, 0, false)
 
 Dim DTArray
 DTArray = Array(DT1, DT2, DT3, DT4, DT5)
@@ -4544,9 +4576,9 @@
 	i = DTArrayID(switch)
 
 	PlayTargetSound
-	DTArray(i)(4) =  DTCheckBrick(Activeball,DTArray(i)(2))
-	If DTArray(i)(4) = 1 or DTArray(i)(4) = 3 or DTArray(i)(4) = 4 Then
-		DTBallPhysics Activeball, DTArray(i)(2).rotz, DTMass
+	DTArray(i).animate =  DTCheckBrick(Activeball,DTArray(i).prim)
+	If DTArray(i).animate = 1 or DTArray(i).animate = 3 or DTArray(i).animate = 4 Then
+		DTBallPhysics Activeball, DTArray(i).prim.rotz, DTMass
 	End If
 	DoDTAnim
 End Sub
@@ -4556,7 +4588,7 @@
 	i = DTArrayID(switch)
 	DTIsDropped(switch) = 0
 
-	DTArray(i)(4) = -1
+	DTArray(i).animate = -1
 	DoDTAnim
 End Sub
 
@@ -4564,14 +4596,14 @@
 	Dim i
 	i = DTArrayID(switch)
 
-	DTArray(i)(4) = 1
+	DTArray(i).animate = 1
 	DoDTAnim
 End Sub
 
 Function DTArrayID(switch)
 	Dim i
 	For i = 0 to uBound(DTArray) 
-		If DTArray(i)(3) = switch Then DTArrayID = i:Exit Function 
+		If DTArray(i).sw = switch Then DTArrayID = i:Exit Function 
 	Next
 End Function
 
@@ -4626,7 +4658,7 @@
 Sub DoDTAnim()
 	Dim i
 	For i=0 to Ubound(DTArray)
-		DTArray(i)(4) = DTAnimate(DTArray(i)(0),DTArray(i)(1),DTArray(i)(2),DTArray(i)(3),DTArray(i)(4))
+		DTArray(i).animate = DTAnimate(DTArray(i).primary,DTArray(i).secondary,DTArray(i).prim,DTArray(i).sw,DTArray(i).animate)
 	Next
 End Sub
 
