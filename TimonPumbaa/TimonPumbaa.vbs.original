'd888888b d888888b .88b  d88.  .d88b.  d8b   db       .d8b.  d8b   db d8888b.      d8888b. db    db .88b  d88. d8888b.  .d8b.   .d8b.  
'`~~88~~'   `88'   88'YbdP`88 .8P  Y8. 888o  88      d8' `8b 888o  88 88  `8D      88  `8D 88    88 88'YbdP`88 88  `8D d8' `8b d8' `8b 
'   88       88    88  88  88 88    88 88V8o 88      88ooo88 88V8o 88 88   88      88oodD' 88    88 88  88  88 88oooY' 88ooo88 88ooo88 
'   88       88    88  88  88 88    88 88 V8o88      88~~~88 88 V8o88 88   88      88~~~   88    88 88  88  88 88~~~b. 88~~~88 88~~~88 
'   88      .88.   88  88  88 `8b  d8' 88  V888      88   88 88  V888 88  .8D      88      88b  d88 88  88  88 88   8D 88   88 88   88 
'   YP    Y888888P YP  YP  YP  `Y88P'  VP   V8P      YP   YP VP   V8P Y8888D'      88      ~Y8888P' YP  YP  YP Y8888P' YP   YP YP   YP 
'                                                                                                                                      
'                                                                                                                                      
'   d88b db    db d8b   db  d888b  db      d88888b      d8888b. d888888b d8b   db d8888b.  .d8b.  db      db                           
'   `8P' 88    88 888o  88 88' Y8b 88      88'          88  `8D   `88'   888o  88 88  `8D d8' `8b 88      88                           
'    88  88    88 88V8o 88 88      88      88ooooo      88oodD'    88    88V8o 88 88oooY' 88ooo88 88      88                           
'    88  88    88 88 V8o88 88  ooo 88      88~~~~~      88~~~      88    88 V8o88 88~~~b. 88~~~88 88      88                           
'db. 88  88b  d88 88  V888 88. ~8~ 88booo. 88.          88        .88.   88  V888 88   8D 88   88 88booo. 88booo.                      
'Y8888P  ~Y8888P' VP   V8P  Y888P  Y88888P Y88888P      88      Y888888P VP   V8P Y8888P' YP   YP Y88888P Y88888P                                      ¯                                                                                 ¯         ¯                                          
'
'Orbital Framework 0.1                              
'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  Credits
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
' Converted to Orbital Framework by Devious626
' Original table design based on JP Salas Jokerz!
' Table design modified by Devious626
' Orbital Framework Compiled and built by Scottywic
' Code snippets by JP Salas, Flupper, DJRobX, NailBuster, ninuzzu, HauntFreaks rothbauerw & many more.
' Huge thanks to the VPW community for all of your assistance, your guidance will no doubt help me get better at creating tables.
' For details using this framework check https://www.youtube.com/channel/UC_vroB2Uboi8GytbQSIepPQ

' 3D Elements
' Tree Trunk: Full Credit to Aartee https://sketchfab.com/3d-models/stylized-tree-stump-04d51f5c2fb643aab3b93b451d1b77c9#download
' Stylized Lamps: Full credit to Izzy: https://sketchfab.com/3d-models/stylized-lantern-a1d81e3e271d47ee8ab7c9a5625eea47#download
' Tree Trunk Right Ramp: Credit to Tiffany Chu for Original Design https://sketchfab.com/3d-models/happy-little-log-2dcb97d29b0a42689b1dc2a1e11385f3 / Modified by Devious626
' Bridge: Full Credit to Hentoony https://sketchfab.com/3d-models/lowpoly-stylized-bridge-b99ab20cefcd4e9aa32ed8595a62db2a
' Targets, Wheel, Deck Area and Gate Created by Devious626
' 3D models baked by Remdwaas1986

' Audio / Visual
' Special thanks to the creator of the Fleep Sound Package which is implemented into this table. Documentation for Fleep was obtained from the archived article by Rauthbauerw at vpinball.com
' Special thanks to the creator of FlexDMD https://github.com/vbousquet/flexdmd
' Special thanks to Remdwaas1986 for the B2S
' Special thanks to Remdwaas1986 for his Timon and Pumbaa Wheel for Frontend
' Special thanks to Phenom for his Timon and Pumbaa Wheel for Frontend
' Special thanks to PEandS1Ws for his Timon and Pumbaa Wheel for Frontend
' Special thanks to PEandS1Ws for his Timon and Pumbaa FullDMD for Frontend
' Special thanks to PEandS1Ws for his Timon and Pumbaa Audio for Frontend
' Full Credit to Disney Interactive Studios and 7th Level https://en.wikipedia.org/wiki/Timon_%26_Pumbaa%27s_Jungle_Games for Audio Call Outs and Video/Image Elements
' Timon and Pumbaa Jungle Pinball logo was created from the original game logo from Timon and Pumbaa Jungles Games
' Timon and Pumbaa Center Peice created by Ochre Fox Tattoo (Located in Spain) FB:https://www.facebook.com/OchreFoxTattoo/?ref=page_internal / Instagram:http://instagram.com/ochrefoxtattoo

' Gameplay
' Special thanks to nFozzy for Flipper and Physics corrections
' Special thanks to iaakki, apophis, Wylte and VPW members for Dynamic Ball Shadows
' Special thanks to iaakki for Rubberizer
' Special thanks to HauntFreaks for the use of Cockroaches code from CARToons Table
' Special thanks to Sixtoe, Flupper, 3rdaxis for VR Cabinet & Room
' Special thanks to Remdwaas1986 for FlexDMD images and Oqqsan for FlexDMD / Bug Fixes
' Special thanks to Remdwaas1986 for Coconuts and Larvae animations

' Testers
' Special thanks to all who jumped in to test the Timon and Pumbaa Jungle Pinball table, your time and feedback is much appreciated.


	Option Explicit
	Randomize



'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  Player Options
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  


	ballrolleron = 1 ' set to 0 to turn off the ball roller if you use the "c" key in your cabinet
	soundtrackvol = 100 ' Set the background audio volume to whatever you'd like out of 100
	bFreePlay = True ' Set to true for gameplay without credits

'///////////////////////-----DMD Options-----///////////////////////

	Const UseFlexDMD = 1 '1 to Enable FlexDMD, 0 to Disable FlexDMD

'///////////////////////-----Shadow Options-----///////////////////////
	Const DynamicBallShadowsOn = 1		'0 = no dynamic ball shadow, 1 = enable dynamic ball shadow

'///////////////////////-----Physics Mods-----///////////////////////
	Const RubberizerEnabled = 1			'0 = normal flip rubber, 1 = more lively rubber for flips

'///////////////////////-----General Sound Options-----///////////////////////
'// VolumeDial:
'// VolumeDial is the actual global volume multiplier for the mechanical sounds.
'// Values smaller than 1 will decrease mechanical sounds volume.
'// Recommended values should be no greater than 1.
	Const VolumeDial = 0.8
	Const SongVolume = 0.1 ' 1 is full volume. Value is from 0 to 1

'///////////////////////-----VR Room-----///////////////////////
'PLEASE NOTE VR ROOM IS UNTESTED,
	Const VRRoom = 0 ' 0 - VR Room off, 1 - Minimal Room, 2 - Ultra Minimal Room



'********************************************************************************************************************************************
'END PLAYER OPTIONS
'********************************************************************************************************************************************

'Inactive Player Options (DONT USE THESE, THESE ARE WORK IN PROGRESS)

	turnoffrules = 0 ' change useto 1 to take off the backglass helper rules text during a game
	toppervideo = 0 'set to 1 to turn on the topper

' COMING IN A LATER VERSION DO NOT CHANGE
	Const UsePupDMD = 0 '1 to Enable FlexDMD, 0 to Disable FlexDMD

'///////////////////////-----High Score Reset-----///////////////////////
' please be careful with this. It will kill your score and we can't get them back.
' games played will not be affected.

	Const resetScores				= False	' set to true to set the first flag
	Const areYouSure				= ""  	' change to "i am serious" to set the second flag
'once you set both of these, load the table. It will clear your scores on startup. 
'Then close the table and change these values back to false and ""

'/////////////////////---- Cabinet Mode ----/////////////////////
Const CabinetMode = 0 				'0 - Rails, 1 - Hidden Rails

'///////////////////////-----PuP Screen-----///////////////////////
' COMING IN A LATER VERSION DO NOT CHANGE
	Const PupScreen1 = 0		'playfield videos choose "1" No videos "0"
	Const FPS = 0			' Slow PC Recommended "0" Fast PC Recommended 1

'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  FRAMEWORK Options
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  

	Const typefont = "Raleway Medium"
	Const numberfont = "Bebas Neue"
	Const zoomfont = "Fundamental  Brigade"
	Const zoombgfont = "Fundamental 3D  Brigade" ' needs to be an outline of the zoomfont
	Const cGameName = "TimonPumbaa"
	Const TableName = "TimonPumbaa"
	Const myVersion = "1.0.0"



'********************************************************************************************************************************************
'********************************************************************************************************************************************
'********************************************************************************************************************************************
'********************************************************************************************************************************************
'********************************************************************************************************************************************
'FRAMEWORK BASE CODE STARTS HERE
'********************************************************************************************************************************************
'********************************************************************************************************************************************
'********************************************************************************************************************************************
'********************************************************************************************************************************************
'********************************************************************************************************************************************

'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  VARIABLES
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
' 	

	'Constructions
	Const KeepLogs = True 		'set True to save debug log file
	Const BallSize = 50
	Const BallMass = 1
	Const MaxPlayers = 4
	Const BallSaverTime = 15 
	Const MaxMultiplier = 6 
	Const MaxMultiballs = 5
	Const bpgcurrent = 3

	' Define Global Variables

	Dim toppervideo
	Dim ballrolleron
	'Dim turnonultradmd
	Dim DMDMode
	Dim turnoffrules
	Dim PlayersPlayingGame
	Dim CurrentPlayer
	Dim Credits
	Dim BonusPoints(4)
	Dim BonusHeldPoints(4)
	Dim BonusMultiplier(6)
	Dim bBonusHeld
	Dim BallsRemaining(4)
	Dim ExtraBallsAwards(4)
	Dim Score(4)
	Dim HighScore(4)
	Dim HighScoreName(4)
	Dim WaffleScore(4)
	Dim WaffleScoreName(4)
	Dim Jackpot
	Dim SuperJackpot
	Dim Tilt
	Dim TiltSensitivity
	Dim Tilted
	Dim TotalGamesPlayed
	Dim mBalls2Eject
	Dim SkillshotValue(4)
	Dim bAutoPlunger
	Dim bInstantInfo
	Dim bromconfig
	Dim bAttractMode
	Dim LastSwitchHit
	Dim BallsOnPlayfield
	Dim BallsInHole
	Dim bFreePlay
	Dim bGameInPlay
	Dim bOnTheFirstBall
	Dim bBallInPlungerLane
	Dim bBallSaverActive
	Dim bBallSaverReady
	Dim bMultiBallMode
	Dim bMusicOn
	Dim bSkillshotReady
	Dim bExtraBallWonThisBall
	Dim bJustStarted


	' Additional Variables
	Dim bsTrough, bsLock, dtTL, dtBL, dtBR, mWheel 'Targets
	Dim x, mRDir 'Ramp
	Dim RampPos, RampDir 'Ramp
	Dim ID 'Sound/Pup IDs
	Dim ArrowPos, ArrowNewPos, n, i, BallLocked 'SpinningWheel
	Dim BallGuardActive 'BallGuard
	Dim ebron(4)
	Dim eblon(4)
	Dim lane20on(4)
	Dim lane2lon(4)
	Dim lane22on(4)
	Dim lane23on(4)
	Dim bTripleScore
	Dim bExtraBall
	Dim bDoubleScore
	Dim ScoreID
	Dim TreeKickActivated
	Dim WheelKickActivated
	Dim sw45activate
	Dim Grubs(4)
	Dim bGrubMadness
	Dim StartState
	Dim havedof
	Dim HakunaMove
	Dim MatataMove
	Dim soundtrackvol
	Dim GrubLoop
	Dim GravePos
	Dim gateopen
	Dim bRotateLights
	Dim AwardPoints
	Dim TotalBonus
	Dim eg, goroaches
	Dim roachstep, roachxy1, roachxy2, roachxy3, roachxy4
	Dim RoachBall, MirrorBall, RealBall, roachran, RoachLoc
	Dim PlayerSelectActive
	Dim PlayMode
	Dim CoconutsOn
	Dim ChildBallGuardActive
	Dim CooldownActive




	LoadCoreFiles
	Sub LoadCoreFiles
		On Error Resume Next
		ExecuteGlobal GetTextFile("core.vbs")
		If Err Then MsgBox "Can't open core.vbs"
		On Error Goto 0
	End Sub

	Dim EnableBallControl
	EnableBallControl = false 'Change to true to enable manual ball control (or press C in-game) via the arrow keys and B (boost movement) keys


'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  Controller VBS stuff, but with b2s not started
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'***Controller.vbs version 1.2***'
'

Const directory = "HKEY_CURRENT_USER\SOFTWARE\Visual Pinball\Controller\"
Dim objShell
Dim PopupMessage
Dim B2SController
Dim Controller
Const DOFContactors = 1
Const DOFKnocker = 2
Const DOFChimes = 3
Const DOFBell = 4
Const DOFGear = 5
Const DOFShaker = 6
Const DOFFlippers = 7
Const DOFTargets = 8
Const DOFDropTargets = 9
Const DOFOff = 0
Const DOFOn = 1
Const DOFPulse = 2

Dim DOFeffects(9)
Dim B2SOn
Dim B2SOnALT

Sub LoadEM
	LoadController("EM")
End Sub

Sub LoadPROC(VPMver, VBSfile, VBSver)
	LoadVBSFiles VPMver, VBSfile, VBSver
	LoadController("PROC")
End Sub

Sub LoadVPM(VPMver, VBSfile, VBSver)
	LoadVBSFiles VPMver, VBSfile, VBSver
	LoadController("VPM")
End Sub

Sub LoadVPMALT(VPMver, VBSfile, VBSver)
	LoadVBSFiles VPMver, VBSfile, VBSver
	LoadController("VPMALT")
End Sub

Sub LoadVBSFiles(VPMver, VBSfile, VBSver)
	On Error Resume Next
	If ScriptEngineMajorVersion < 5 Then MsgBox "VB Script Engine 5.0 or higher required"
	ExecuteGlobal GetTextFile(VBSfile)
	If Err Then MsgBox "Unable to open " & VBSfile & ". Ensure that it is in the same folder as this table. " & vbNewLine & Err.Description	
	InitializeOptions
End Sub

Sub LoadVPinMAME
	Set Controller = CreateObject("VPinMAME.Controller")
	If Err Then MsgBox "Can't load VPinMAME." & vbNewLine & Err.Description
	If VPMver > "" Then If Controller.Version < VPMver Or Err Then MsgBox "VPinMAME ver " & VPMver & " required."
	If VPinMAMEDriverVer < VBSver Or Err Then MsgBox VBSFile & " ver " & VBSver & " or higher required."
	On Error Goto 0
End Sub

Sub LoadController(TableType)
	Dim FileObj
	Dim DOFConfig
	Dim TextStr2
	Dim tempC
	Dim count
	Dim ISDOF
	Dim Answer
	
	B2SOn = False
	B2SOnALT = False
	tempC = 0
	on error resume next
	Set objShell = CreateObject("WScript.Shell")
	objShell.RegRead(directory & "ForceDisableB2S")
	If Err.number <> 0 Then
		PopupMessage = "This latest version of Controller.vbs stores its settings in the registry. To adjust the values, you must use VP 10.2 (or newer) and setup your configuration in the DOF section of the -Keys, Nudge and DOF- dialog of Visual Pinball."
		objShell.RegWrite directory & "ForceDisableB2S",0, "REG_DWORD"
		objShell.RegWrite directory & "DOFContactors",2, "REG_DWORD"
		objShell.RegWrite directory & "DOFKnocker",2, "REG_DWORD"
		objShell.RegWrite directory & "DOFChimes",2, "REG_DWORD"
		objShell.RegWrite directory & "DOFBell",2, "REG_DWORD"
		objShell.RegWrite directory & "DOFGear",2, "REG_DWORD"
		objShell.RegWrite directory & "DOFShaker",2, "REG_DWORD"
		objShell.RegWrite directory & "DOFFlippers",2, "REG_DWORD"
		objShell.RegWrite directory & "DOFTargets",2, "REG_DWORD"
		objShell.RegWrite directory & "DOFDropTargets",2, "REG_DWORD"
		MsgBox PopupMessage
	End If
	tempC = objShell.RegRead(directory & "ForceDisableB2S")
	DOFeffects(1)=objShell.RegRead(directory & "DOFContactors")
	DOFeffects(2)=objShell.RegRead(directory & "DOFKnocker")
	DOFeffects(3)=objShell.RegRead(directory & "DOFChimes")
	DOFeffects(4)=objShell.RegRead(directory & "DOFBell")
	DOFeffects(5)=objShell.RegRead(directory & "DOFGear")
	DOFeffects(6)=objShell.RegRead(directory & "DOFShaker")
	DOFeffects(7)=objShell.RegRead(directory & "DOFFlippers")
	DOFeffects(8)=objShell.RegRead(directory & "DOFTargets")
	DOFeffects(9)=objShell.RegRead(directory & "DOFDropTargets")
	Set objShell = nothing

	If TableType = "PROC" or TableType = "VPMALT" Then
		If TableType = "PROC" Then
			Set Controller = CreateObject("VPROC.Controller")
			If Err Then MsgBox "Can't load PROC"
		Else
			LoadVPinMAME
		End If		
		If tempC = 0 Then
			On Error Resume Next
			If Controller is Nothing Then
				Err.Clear
			Else
				Set B2SController = CreateObject("B2S.Server")
				If B2SController is Nothing Then
					Err.Clear
				Else
					B2SController.B2SName = B2ScGameName
					B2SController.Run()
					On Error Goto 0
					B2SOn = True
					B2SOnALT = True
				End If
			End If
		End If
	Else
		If tempC = 0 Then
			On Error Resume Next
			Set Controller = CreateObject("B2S.Server")
			If Controller is Nothing Then
				Err.Clear
				If TableType = "VPM" Then 
					LoadVPinMAME
				End If
			Else
				Controller.B2SName = cGameName
				If TableType = "EM" Then
					Controller.Run()
				End If
				On Error Goto 0
				B2SOn = True
			End If
		Else
			If TableType = "VPM" Then 
				LoadVPinMAME
			End If
		End If
		Set DOFConfig=Nothing
		Set FileObj=Nothing
	End If
End sub

Function SoundFX (Sound, Effect)
	If ((Effect = 0 And B2SOn) Or DOFeffects(Effect)=1) Then
		SoundFX = ""
	Else
		SoundFX = Sound
	End If
End Function

Function SoundFXDOF (Sound, DOFevent, State, Effect)
	If DOFeffects(Effect)=1 Then
		SoundFXDOF = ""
		DOF DOFevent, State
	ElseIf DOFeffects(Effect)=2 Then
		SoundFXDOF = Sound
		DOF DOFevent, State
	Else
		SoundFXDOF = Sound
	End If
End Function

Function SoundFXDOFALT (Sound, DOFevent, State, Effect)
	If DOFeffects(Effect)=1 Then
		SoundFXDOFALT = ""
		DOFALT DOFevent, State
	ElseIf DOFeffects(Effect)=2 Then
		SoundFXDOFALT = Sound
		DOFALT DOFevent, State
	Else
		SoundFXDOFALT = Sound
	End If
End Function


Sub DOF(DOFevent, State)
	If B2SOn Then
		If State = 2 Then
			Controller.B2SSetData DOFevent, 1:Controller.B2SSetData DOFevent, 0
		Else
			Controller.B2SSetData DOFevent, State
		End If
	End If
End Sub

Sub DOFALT(DOFevent, State)
	If B2SOnALT Then
		If State = 2 Then
			B2SController.B2SSetData DOFevent, 1:B2SController.B2SSetData DOFevent, 0
		Else
			B2SController.B2SSetData DOFevent, State
		End If
	End If
End Sub

'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'   TIMERS
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  


' The frame timer interval is -1, so executes at the display frame rate
Sub FrameTimer_Timer()
	FlipperVisualUpdate		'update flipper shadows and primitives
	If DynamicBallShadowsOn=1 Then RtxBSUpdate 'update ball shadows
End Sub

'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'   TABLE INITS & MATHS
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  


	Sub Table1_Init()
		NewLog
		WriteToLog "-------------", "TABLE INIT"
		'resetbackglass
		Flex_Init
		CreateSternStyle
		LoadEM
		Dim i
		Randomize
		Loadhs
		StartImage3
		StartImage2
		bAttractMode = False
		bOnTheFirstBall = False
		bBallInPlungerLane = False
		bBallSaverActive = False
		bBallSaverReady = False
		bMultiBallMode = False
		bTripleScore = False
		bExtraBall = False
		bDoubleScore = False
		bGameInPlay = False
		bAutoPlunger = False
		bGrubMadness = False
		HakunaMove = 0
		MatataMove = 0
		bMusicOn = True
		ArrowPos = 0
		ArrowNewPos = 0
		BallLocked = False
		sw45activate = False
		BallGuardActive = False
		ChildBallGuardActive = False
		BallsOnPlayfield = 0
		BallsInHole = 0
		TreeKickActivated = False
		WheelKickActivated = False
		GrubLoop = 0
		havedof = 0
		HakunaMove = 0
		MatataMove = 0
		StartState = False
		RampPos = 95
		RampDir = -1
		LowerRamp
		LastSwitchHit = ""
		Tilt = 0
		TiltSensitivity = 6
		Tilted = False
		bBonusHeld = False
		bJustStarted = True
		eblon(CurrentPlayer) = 0
		bExtraBallWonThisBall = False
		gateopen = False
'		SongSelect = False
		'GateWall.Collidable = True
		GiOff
		'PuPlayer.SendMSG "{ ""mt"":301, ""SN"": 2, ""FN"":4, ""FS"":1 }"
		'PuPlayer.SendMSG "{ ""mt"":301, ""SN"": 3, ""FN"":4, ""FS"":1 }"
		StartAttractMode
		CooldownActive = False
		popup.HasHitEvent = False
		popup.Collidable = False
		SaveKicker.Enabled = False
		CoconutsOn = False
		sw25l.state = 0
		sw26l.state = 0
		sw27l.state = 0
		sw36l.state = 0
		sw37l.state = 0
		sw38l.state = 0
		sw41l.state = 0
		sw42l.state = 0
		sw43l.state = 0
		l1.state = 0
		l2.state = 0
		l3.state = 0
		l4.state = 0
		l5.state = 0
		l6.state = 0
		l7.state = 0
		l8.state = 0
		l9.state = 0
		l10.state = 0
		l11.state = 0
		l12.state = 0
		l20.state = 0
		l21.state = 0
		l22.state = 0
		l23.state = 0
		bulbpost.state = 0
		ImageTimerAdult.Enabled = 1


		

	End Sub


	'********************
	' MATHS
	'********************

	Function RndNum(min,max)
	 RndNum = Int(Rnd()*(max-min+1))+min     ' Sets a random number between min AND max
	End Function


		Dim BIP
		BIP = 0







'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'   KEYS
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
	


	Sub Table1_KeyDown(ByVal Keycode)
	If ballrolleron = 1 then
		if keycode = 46 then ' C Key
			 If contball = 1 Then
				  contball = 0
			 Else
				  contball = 1
			 End If
		End If
	End If
	if keycode = 48 then 'B Key
		 If bcboost = 1 Then
			  bcboost = bcboostmulti
		 Else
			  bcboost = 1
		 End If
	End If
	if keycode = 203 then bcleft = 1 ' Left Arrow
	if keycode = 200 then bcup = 1 ' Up Arrow
	if keycode = 208 then bcdown = 1 ' Down Arrow
	if keycode = 205 then bcright = 1 ' Right Arrow

    If PlayerSelectActive Then
        SelectPlayerStart(Keycode)
		'      Exit Sub
    End If

	If hsbModeActive = True Then EnterHighscoreName(keycode) : Exit Sub  		'EnterHighScoreKey(keycode)

	If KeyCode = PlungerKey Then Plunger.Pullback:SoundPlungerPull():DMDBigText "LAUNCH",77,1 

    If Keycode = AddCreditKey Then
				Select Case Int(rnd*3)
                       Case 0: PlaySound ("Coin_In_1"), 0, CoinSoundLevel, 0, 0.25
                       Case 1: PlaySound ("Coin_In_2"), 0, CoinSoundLevel, 0, 0.25
                       Case 2: PlaySound ("Coin_In_3"), 0, CoinSoundLevel, 0, 0.25
                End Select
			Credits = Credits + 1
			'PlaySound "fx_coin"
			if bFreePlay = False Then DOF 125, DOFOn
			'pNote ""  &  Credits  &  " Coin Inserted","Press Start"
			If(Tilted = False)Then
				'DMDFlush
				'If NOT bGameInPlay Then StartAttractMode
				'DMD "_", CL(1, "CREDITS: " & Credits), "", eNone, eNone, eNone, 500, True, "fx_coin"
				'If NOT bGameInPlay Then ShowTableInfo
			End If
    End If

	if bGameInPlay Then
			If keycode = LeftTiltKey Then Nudge 90, 5:SoundNudgeLeft():CheckTilt
			If keycode = RightTiltKey Then Nudge 270, 5:SoundNudgeRight():CheckTilt
			If keycode = CenterTiltKey Then Nudge 0, 3:SoundNudgeCenter():CheckTilt
			If NOT Tilted Then
			If keycode = LeftFlipperKey Then
				FlipperActivate LeftFlipper, LFPress
				SolLFlipper 1
				'LeftFlipper.RotateToEnd
				'PlaySound SoundFX("fx_flipperup",DOFFlippers), 0, .67, AudioPan(LeftFlipper), 0.05,0,0,1,AudioFade(LeftFlipper)
				'ldown = 1
				'checkdown
				if PlayMode = 1 Then
					If bSkillshotReady = True Then
					RotateLaneLights 1
					Else
					RotateLaneLights 3
					End If
				Else
					If bSkillshotReady = True Then
					RotateLaneLights 1
					Else
					RotateLaneLights 3
					End If
				End If
			End If
			If keycode = RightFlipperKey Then 
				FlipperActivate RightFlipper, RFPress
				SolRFlipper 1
				'RightFlipper.RotateToEnd
				'PlaySound SoundFX("fx_flipperup",DOFFlippers), 0, .67, AudioPan(RightFlipper), 0.05,0,0,1,AudioFade(RightFlipper)
				'rdown = 1
				'checkdown
				if PlayMode = 1 Then
					If bSkillshotReady = True Then
					RotateLaneLights 2
					Else
					RotateLaneLights 4
					End If
				Else
					If bSkillshotReady = True Then
					RotateLaneLights 2
					Else
					RotateLaneLights 4
					End If
				End If
			End If

			If keycode = StartGameKey Then
				If((PlayersPlayingGame <MaxPlayers) AND (bOnTheFirstBall = True) ) Then
						PlayersPlayingGame = PlayersPlayingGame + 1
						'PuPlayer.playlistplayex pCallouts,"audiocallouts","player1.wav",80,1
						'chilloutthemusic

						If PlayersPlayingGame = 2 Then
							'PuPlayer.LabelSet pBackglass,"Play2","PLAYER 2",1,"{'mt':2}"
							'pUpdateScores
						'PuPlayer.playlistplayex pCallouts,"audiocallouts","player2.wav",80,1
						'PuPlayer.LabelSet pBackglass,"Players",FormatNumber(PlayersPlayingGame,0),1,""
						'chilloutthemusic
						End If

						If PlayersPlayingGame = 3 Then
							'PuPlayer.LabelSet pBackglass,"Play3","PLAYER 3",1,"{'mt':2}"
							'pUpdateScores
						'PuPlayer.playlistplayex pCallouts,"audiocallouts","player3.wav",80,1
						'PuPlayer.LabelSet pBackglass,"Players",FormatNumber(PlayersPlayingGame,0),1,""
						'chilloutthemusic
						End If

						If PlayersPlayingGame = 4 Then
							'PuPlayer.LabelSet pBackglass,"Play4","PLAYER 4",1,"{'mt':2}"
							'pUpdateScores	
						'PuPlayer.playlistplayex pCallouts,"audiocallouts","player4.wav",80,1
						'PuPlayer.LabelSet pBackglass,"Players",FormatNumber(PlayersPlayingGame,0),1,""
						'chilloutthemusic
						End If

						TotalGamesPlayed = TotalGamesPlayed + 1
						savegp
				End If
			End If
			End If
			Else
			If NOT Tilted Then

				If keycode = LeftFlipperKey Then helptime.enabled = true':DMDintroloop:introtime = 0
				If keycode = RightFlipperKey Then helptime.enabled = true':DMDintroloop:introtime = 0
				If keycode = StartGameKey And bGameInPLay = False Then
					If(BallsOnPlayfield = 0) Then
						ResetForNewGame()
						CreateNewBall
						bSkillShotReady = True

					End If
				End If
			End If
			End If 

	'****************
	' Testing Keys  
	'****************
'	if keycode = "3" then
'		'addscore 18000000
'		bumps(CurrentPlayer) = bumps(CurrentPlayer) + 180
'		BumperRewards
'		CheckHighscore
'	End If
'
'	if keycode = "3" then
'		lm1.State = 1
'		lm2.State = 1
'		lm3.State = 1
'		lm5.State = 1
'		CheckMONSTER
'		skipscene
'	End If
	if keycode = "3" then
'	addscore 50000000

	End If
	End Sub


	Sub Table1_KeyUp(ByVal keycode)
	
    'Manual Ball Control

	if keycode = 203 then bcleft = 0 ' Left Arrow
	if keycode = 200 then bcup = 0 ' Up Arrow
	if keycode = 208 then bcdown = 0 ' Down Arrow
	if keycode = 205 then bcright = 0 ' Right Arrow
    if KeyCode = PlungerKey Then
                Plunger.Fire
                If bBallInPlungerLane = True Then
                        SoundPlungerReleaseBall()                        'Plunger release sound when there is a ball in shooter lane
                Else
                        SoundPlungerReleaseNoBall()                        'Plunger release sound when there is no ball in shooter lane
                End If
        End If

		' Table specific

		If bGameInPLay and hsbModeActive <> True Then


			If keycode = LeftFlipperKey Then
				FlipperDeActivate LeftFlipper, LFPress
				SolLFlipper 0
				ldown = 0
				'PlaySound SoundFX("fx_flipperdown",DOFFlippers), 0, 1, AudioPan(LeftFlipper), 0.05,0,0,1,AudioFade(LeftFlipper)
			End If
			If keycode = RightFlipperKey Then
				FlipperDeActivate RightFlipper, RFPress
				SolRFlipper 0
				rdown = 0
				'PlaySound SoundFX("fx_flipperdown",DOFFlippers), 0, 1, AudioPan(RightFlipper), 0.05,0,0,1,AudioFade(RightFlipper)
			End If
		Elseif bGameInPlay = False Then
			if keycode = LeftFlipperKey Then :End If
			if keycode = RightFlipperKey Then :End If
				
		Else
			If keycode = LeftFlipperKey Then helptime.enabled = false
			If keycode = RightFlipperKey Then helptime.enabled = false
		End If

	End Sub


'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'   FLIPPERS
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  


Const ReflipAngle = 20

Sub SolLFlipper(Enabled)
        If Enabled Then
				RotateLaneLightsLeft
                LF.Fire  'leftflipper.rotatetoend

                If leftflipper.currentangle < leftflipper.endangle + ReflipAngle Then 
                        RandomSoundReflipUpLeft LeftFlipper
                Else 
                        SoundFlipperUpAttackLeft LeftFlipper
                        RandomSoundFlipperUpLeft LeftFlipper
                End If                
        Else
                LeftFlipper.RotateToStart
                If LeftFlipper.currentangle < LeftFlipper.startAngle - 5 Then
                        RandomSoundFlipperDownLeft LeftFlipper
                End If
                FlipperLeftHitParm = FlipperUpSoundLevel
    End If
End Sub

Sub SolRFlipper(Enabled)
        If Enabled Then
				RotateLaneLightsRight
				RF.Fire 'rightflipper.rotatetoend

                If rightflipper.currentangle > rightflipper.endangle - ReflipAngle Then
                        RandomSoundReflipUpRight RightFlipper
                Else 
                        SoundFlipperUpAttackRight RightFlipper
                        RandomSoundFlipperUpRight RightFlipper
                End If
        Else
                RightFlipper.RotateToStart
                If RightFlipper.currentangle > RightFlipper.startAngle + 5 Then
                        RandomSoundFlipperDownRight RightFlipper
                End If        
                FlipperRightHitParm = FlipperUpSoundLevel
        End If
End Sub


Sub RotateLaneLightsLeft
    Dim TempState
    TempState = l17.State
    l17.State = l18.State
    l18.State = l19.State
    l19.State = TempState
End Sub

Sub RotateLaneLightsRight
    Dim TempState
    TempState = l19.State
    l19.State = l18.State
    l18.State = l17.State
    l17.State = TempState
End Sub

'*******************************************
'  VPW Rubberizer by Iaakki
'*******************************************

' iaakki Rubberizer
sub Rubberizer(parm)
	if parm < 10 And parm > 2 And Abs(activeball.angmomz) < 10 then
		'debug.print "parm: " & parm & " momz: " & activeball.angmomz &" vely: "& activeball.vely
		activeball.angmomz = activeball.angmomz * 1.2
		activeball.vely = activeball.vely * 1.2
		'debug.print ">> newmomz: " & activeball.angmomz&" newvely: "& activeball.vely
	Elseif parm <= 2 and parm > 0.2 Then
		'debug.print "* parm: " & parm & " momz: " & activeball.angmomz &" vely: "& activeball.vely
		activeball.angmomz = activeball.angmomz * -1.1
		activeball.vely = activeball.vely * 1.4
		'debug.print "**** >> newmomz: " & activeball.angmomz&" newvely: "& activeball.vely
	end if
end sub


'**************************************************
'        Flipper Collision Subs
'NOTE: COpy and overwrite collision sound from original collision subs over
'RandomSoundFlipper()' below
'**************************************************'

Sub LeftFlipper_Collide(parm)
    CheckLiveCatch Activeball, LeftFlipper, LFCount, parm
    LeftFlipperCollide parm   'This is the Fleep code
	if RubberizerEnabled <> 0 then Rubberizer(parm)
End Sub

Sub RightFlipper_Collide(parm)
    CheckLiveCatch Activeball, RightFlipper, RFCount, parm
    RightFlipperCollide parm  'This is the Fleep code
	if RubberizerEnabled <> 0 then Rubberizer(parm)
End Sub


' This subroutine updates the flipper shadows and visual primitives
Sub FlipperVisualUpdate
	FlipperLSh.RotZ = LeftFlipper.CurrentAngle
	FlipperRSh.RotZ = RightFlipper.CurrentAngle
	LFLogo.RotZ = LeftFlipper.CurrentAngle
	RFlogo.RotZ = RightFlipper.CurrentAngle
End Sub

	'****************
	' nFozzy Flipper Correction
	'****************

dim LF : Set LF = New FlipperPolarity
dim RF : Set RF = New FlipperPolarity

InitPolarity

Sub InitPolarity()
        dim x, a : a = Array(LF, RF)
        for each x in a
                x.AddPoint "Ycoef", 0, RightFlipper.Y-65, 1        'disabled
                x.AddPoint "Ycoef", 1, RightFlipper.Y-11, 1
                x.enabled = True
                x.TimeDelay = 60
        Next

        AddPt "Polarity", 0, 0, 0
        AddPt "Polarity", 1, 0.05, -5.5
        AddPt "Polarity", 2, 0.4, -5.5
        AddPt "Polarity", 3, 0.6, -5.0
        AddPt "Polarity", 4, 0.65, -4.5
        AddPt "Polarity", 5, 0.7, -4.0
        AddPt "Polarity", 6, 0.75, -3.5
        AddPt "Polarity", 7, 0.8, -3.0
        AddPt "Polarity", 8, 0.85, -2.5
        AddPt "Polarity", 9, 0.9,-2.0
        AddPt "Polarity", 10, 0.95, -1.5
        AddPt "Polarity", 11, 1, -1.0
        AddPt "Polarity", 12, 1.05, -0.5
        AddPt "Polarity", 13, 1.1, 0
        AddPt "Polarity", 14, 1.3, 0

        addpt "Velocity", 0, 0,         1
        addpt "Velocity", 1, 0.16, 1.06
        addpt "Velocity", 2, 0.41,         1.05
        addpt "Velocity", 3, 0.53,         1'0.982
        addpt "Velocity", 4, 0.702, 0.968
        addpt "Velocity", 5, 0.95,  0.968
        addpt "Velocity", 6, 1.03,         0.945

        LF.Object = LeftFlipper        
        LF.EndPoint = EndPointLp
        RF.Object = RightFlipper
        RF.EndPoint = EndPointRp
End Sub

Sub TriggerLF_Hit() : LF.Addball activeball : End Sub
Sub TriggerLF_UnHit() : LF.PolarityCorrect activeball : End Sub
Sub TriggerRF_Hit() : RF.Addball activeball : End Sub
Sub TriggerRF_UnHit() : RF.PolarityCorrect activeball : End Sub



'******************************************************
'                        FLIPPER CORRECTION FUNCTIONS
'******************************************************

Sub AddPt(aStr, idx, aX, aY)        'debugger wrapper for adjusting flipper script in-game
        dim a : a = Array(LF, RF)
        dim x : for each x in a
                x.addpoint aStr, idx, aX, aY
        Next
End Sub

Class FlipperPolarity
        Public DebugOn, Enabled
        Private FlipAt        'Timer variable (IE 'flip at 723,530ms...)
        Public TimeDelay        'delay before trigger turns off and polarity is disabled TODO set time!
        private Flipper, FlipperStart,FlipperEnd, FlipperEndY, LR, PartialFlipCoef
        Private Balls(20), balldata(20)
        
        dim PolarityIn, PolarityOut
        dim VelocityIn, VelocityOut
        dim YcoefIn, YcoefOut
        Public Sub Class_Initialize 
                redim PolarityIn(0) : redim PolarityOut(0) : redim VelocityIn(0) : redim VelocityOut(0) : redim YcoefIn(0) : redim YcoefOut(0)
                Enabled = True : TimeDelay = 50 : LR = 1:  dim x : for x = 0 to uBound(balls) : balls(x) = Empty : set Balldata(x) = new SpoofBall : next 
        End Sub
        
        Public Property let Object(aInput) : Set Flipper = aInput : StartPoint = Flipper.x : End Property
        Public Property Let StartPoint(aInput) : if IsObject(aInput) then FlipperStart = aInput.x else FlipperStart = aInput : end if : End Property
        Public Property Get StartPoint : StartPoint = FlipperStart : End Property
        Public Property Let EndPoint(aInput) : FlipperEnd = aInput.x: FlipperEndY = aInput.y: End Property
        Public Property Get EndPoint : EndPoint = FlipperEnd : End Property        
        Public Property Get EndPointY: EndPointY = FlipperEndY : End Property
        
        Public Sub AddPoint(aChooseArray, aIDX, aX, aY) 'Index #, X position, (in) y Position (out) 
                Select Case aChooseArray
                        case "Polarity" : ShuffleArrays PolarityIn, PolarityOut, 1 : PolarityIn(aIDX) = aX : PolarityOut(aIDX) = aY : ShuffleArrays PolarityIn, PolarityOut, 0
                        Case "Velocity" : ShuffleArrays VelocityIn, VelocityOut, 1 :VelocityIn(aIDX) = aX : VelocityOut(aIDX) = aY : ShuffleArrays VelocityIn, VelocityOut, 0
                        Case "Ycoef" : ShuffleArrays YcoefIn, YcoefOut, 1 :YcoefIn(aIDX) = aX : YcoefOut(aIDX) = aY : ShuffleArrays YcoefIn, YcoefOut, 0
                End Select
                if gametime > 100 then Report aChooseArray
        End Sub 

        Public Sub Report(aChooseArray)         'debug, reports all coords in tbPL.text
                if not DebugOn then exit sub
                dim a1, a2 : Select Case aChooseArray
                        case "Polarity" : a1 = PolarityIn : a2 = PolarityOut
                        Case "Velocity" : a1 = VelocityIn : a2 = VelocityOut
                        Case "Ycoef" : a1 = YcoefIn : a2 = YcoefOut 
                        case else :tbpl.text = "wrong string" : exit sub
                End Select
                dim str, x : for x = 0 to uBound(a1) : str = str & aChooseArray & " x: " & round(a1(x),4) & ", " & round(a2(x),4) & vbnewline : next
                tbpl.text = str
        End Sub
        
        Public Sub AddBall(aBall) : dim x : for x = 0 to uBound(balls) : if IsEmpty(balls(x)) then set balls(x) = aBall : exit sub :end if : Next  : End Sub

        Private Sub RemoveBall(aBall)
                dim x : for x = 0 to uBound(balls)
                        if TypeName(balls(x) ) = "IBall" then 
                                if aBall.ID = Balls(x).ID Then
                                        balls(x) = Empty
                                        Balldata(x).Reset
                                End If
                        End If
                Next
        End Sub
        
        Public Sub Fire() 
                Flipper.RotateToEnd
                processballs
        End Sub

        Public Property Get Pos 'returns % position a ball. For debug stuff.
                dim x : for x = 0 to uBound(balls)
                        if not IsEmpty(balls(x) ) then
                                pos = pSlope(Balls(x).x, FlipperStart, 0, FlipperEnd, 1)
                        End If
                Next                
        End Property

        Public Sub ProcessBalls() 'save data of balls in flipper range
                FlipAt = GameTime
                dim x : for x = 0 to uBound(balls)
                        if not IsEmpty(balls(x) ) then
                                balldata(x).Data = balls(x)
                        End If
                Next
                PartialFlipCoef = ((Flipper.StartAngle - Flipper.CurrentAngle) / (Flipper.StartAngle - Flipper.EndAngle))
                PartialFlipCoef = abs(PartialFlipCoef-1)
        End Sub
        Private Function FlipperOn() : if gameTime < FlipAt+TimeDelay then FlipperOn = True : End If : End Function        'Timer shutoff for polaritycorrect
        
        Public Sub PolarityCorrect(aBall)
                if FlipperOn() then 
                        dim tmp, BallPos, x, IDX, Ycoef : Ycoef = 1

                        'y safety Exit
                        if aBall.VelY > -8 then 'ball going down
                                RemoveBall aBall
                                exit Sub
                        end if

                        'Find balldata. BallPos = % on Flipper
                        for x = 0 to uBound(Balls)
                                if aBall.id = BallData(x).id AND not isempty(BallData(x).id) then 
                                        idx = x
                                        BallPos = PSlope(BallData(x).x, FlipperStart, 0, FlipperEnd, 1)
                                        if ballpos > 0.65 then  Ycoef = LinearEnvelope(BallData(x).Y, YcoefIn, YcoefOut)                                'find safety coefficient 'ycoef' data
                                end if
                        Next

                        If BallPos = 0 Then 'no ball data meaning the ball is entering and exiting pretty close to the same position, use current values.
                                BallPos = PSlope(aBall.x, FlipperStart, 0, FlipperEnd, 1)
                                if ballpos > 0.65 then  Ycoef = LinearEnvelope(aBall.Y, YcoefIn, YcoefOut)                                                'find safety coefficient 'ycoef' data
                        End If

                        'Velocity correction
                        if not IsEmpty(VelocityIn(0) ) then
                                Dim VelCoef
         :                         VelCoef = LinearEnvelope(BallPos, VelocityIn, VelocityOut)

                                if partialflipcoef < 1 then VelCoef = PSlope(partialflipcoef, 0, 1, 1, VelCoef)

                                if Enabled then aBall.Velx = aBall.Velx*VelCoef
                                if Enabled then aBall.Vely = aBall.Vely*VelCoef
                        End If

                        'Polarity Correction (optional now)
                        if not IsEmpty(PolarityIn(0) ) then
                                If StartPoint > EndPoint then LR = -1        'Reverse polarity if left flipper
                                dim AddX : AddX = LinearEnvelope(BallPos, PolarityIn, PolarityOut) * LR
        
                                if Enabled then aBall.VelX = aBall.VelX + 1 * (AddX*ycoef*PartialFlipcoef)
                                'playsound "fx_knocker"
                        End If
                End If
                RemoveBall aBall
        End Sub
End Class

'******************************************************
'                FLIPPER POLARITY AND RUBBER DAMPENER
'                        SUPPORTING FUNCTIONS 
'******************************************************

' Used for flipper correction and rubber dampeners
Sub ShuffleArray(ByRef aArray, byVal offset) 'shuffle 1d array
        dim x, aCount : aCount = 0
        redim a(uBound(aArray) )
        for x = 0 to uBound(aArray)        'Shuffle objects in a temp array
                if not IsEmpty(aArray(x) ) Then
                        if IsObject(aArray(x)) then 
                                Set a(aCount) = aArray(x)
                        Else
                                a(aCount) = aArray(x)
                        End If
                        aCount = aCount + 1
                End If
        Next
        if offset < 0 then offset = 0
        redim aArray(aCount-1+offset)        'Resize original array
        for x = 0 to aCount-1                'set objects back into original array
                if IsObject(a(x)) then 
                        Set aArray(x) = a(x)
                Else
                        aArray(x) = a(x)
                End If
        Next
End Sub

' Used for flipper correction and rubber dampeners
Sub ShuffleArrays(aArray1, aArray2, offset)
        ShuffleArray aArray1, offset
        ShuffleArray aArray2, offset
End Sub

' Used for flipper correction, rubber dampeners, and drop targets
Function BallSpeed(ball) 'Calculates the ball speed
    BallSpeed = SQR(ball.VelX^2 + ball.VelY^2 + ball.VelZ^2)
End Function

' Used for flipper correction and rubber dampeners
Function PSlope(Input, X1, Y1, X2, Y2)        'Set up line via two points, no clamping. Input X, output Y
        dim x, y, b, m : x = input : m = (Y2 - Y1) / (X2 - X1) : b = Y2 - m*X2
        Y = M*x+b
        PSlope = Y
End Function

' Used for flipper correction
Class spoofball 
        Public X, Y, Z, VelX, VelY, VelZ, ID, Mass, Radius 
        Public Property Let Data(aBall)
                With aBall
                        x = .x : y = .y : z = .z : velx = .velx : vely = .vely : velz = .velz
                        id = .ID : mass = .mass : radius = .radius
                end with
        End Property
        Public Sub Reset()
                x = Empty : y = Empty : z = Empty  : velx = Empty : vely = Empty : velz = Empty 
                id = Empty : mass = Empty : radius = Empty
        End Sub
End Class

' Used for flipper correction and rubber dampeners
Function LinearEnvelope(xInput, xKeyFrame, yLvl)
        dim y 'Y output
        dim L 'Line
        dim ii : for ii = 1 to uBound(xKeyFrame)        'find active line
                if xInput <= xKeyFrame(ii) then L = ii : exit for : end if
        Next
        if xInput > xKeyFrame(uBound(xKeyFrame) ) then L = uBound(xKeyFrame)        'catch line overrun
        Y = pSlope(xInput, xKeyFrame(L-1), yLvl(L-1), xKeyFrame(L), yLvl(L) )

        if xInput <= xKeyFrame(lBound(xKeyFrame) ) then Y = yLvl(lBound(xKeyFrame) )         'Clamp lower
        if xInput >= xKeyFrame(uBound(xKeyFrame) ) then Y = yLvl(uBound(xKeyFrame) )        'Clamp upper

        LinearEnvelope = Y
End Function


'******************************************************
'                        FLIPPER TRICKS
'******************************************************

RightFlipper.timerinterval=1
Rightflipper.timerenabled=True

sub RightFlipper_timer()
        FlipperTricks LeftFlipper, LFPress, LFCount, LFEndAngle, LFState
        FlipperTricks RightFlipper, RFPress, RFCount, RFEndAngle, RFState
        FlipperNudge RightFlipper, RFEndAngle, RFEOSNudge, LeftFlipper, LFEndAngle
        FlipperNudge LeftFlipper, LFEndAngle, LFEOSNudge,  RightFlipper, RFEndAngle
end sub

Dim LFEOSNudge, RFEOSNudge

Sub FlipperNudge(Flipper1, Endangle1, EOSNudge1, Flipper2, EndAngle2)
        Dim BOT, b

        If Flipper1.currentangle = Endangle1 and EOSNudge1 <> 1 Then
                EOSNudge1 = 1
                'debug.print Flipper1.currentangle &" = "& Endangle1 &"--"& Flipper2.currentangle &" = "& EndAngle2
                If Flipper2.currentangle = EndAngle2 Then 
                        BOT = GetBalls
                        For b = 0 to Ubound(BOT)
                                If FlipperTrigger(BOT(b).x, BOT(b).y, Flipper1) Then
                                        'Debug.Print "ball in flip1. exit"
                                         exit Sub
                                end If
                        Next
                        For b = 0 to Ubound(BOT)
                                If FlipperTrigger(BOT(b).x, BOT(b).y, Flipper2) Then
                                        BOT(b).velx = BOT(b).velx / 1.7
                                        BOT(b).vely = BOT(b).vely - 1
                                end If
                        Next
                End If
        Else 
                If Flipper1.currentangle <> EndAngle1 then 
                        EOSNudge1 = 0
                end if
        End If
End Sub

'*****************
' Maths
'*****************
Const PI = 3.1415927

Function dSin(degrees)
        dsin = sin(degrees * Pi/180)
End Function

Function dCos(degrees)
        dcos = cos(degrees * Pi/180)
End Function

'*************************************************
' Check ball distance from Flipper for Rem
'*************************************************

Function Distance(ax,ay,bx,by)
        Distance = SQR((ax - bx)^2 + (ay - by)^2)
End Function

Function DistancePL(px,py,ax,ay,bx,by) ' Distance between a point and a line where point is px,py
        DistancePL = ABS((by - ay)*px - (bx - ax) * py + bx*ay - by*ax)/Distance(ax,ay,bx,by)
End Function

Function Radians(Degrees)
        Radians = Degrees * PI /180
End Function

Function AnglePP(ax,ay,bx,by)
        AnglePP = Atn2((by - ay),(bx - ax))*180/PI
End Function

Function DistanceFromFlipper(ballx, bally, Flipper)
        DistanceFromFlipper = DistancePL(ballx, bally, Flipper.x, Flipper.y, Cos(Radians(Flipper.currentangle+90))+Flipper.x, Sin(Radians(Flipper.currentangle+90))+Flipper.y)
End Function

Function FlipperTrigger(ballx, bally, Flipper)
        Dim DiffAngle
        DiffAngle  = ABS(Flipper.currentangle - AnglePP(Flipper.x, Flipper.y, ballx, bally) - 90)
        If DiffAngle > 180 Then DiffAngle = DiffAngle - 360

        If DistanceFromFlipper(ballx,bally,Flipper) < 48 and DiffAngle <= 90 and Distance(ballx,bally,Flipper.x,Flipper.y) < Flipper.Length Then
                FlipperTrigger = True
        Else
                FlipperTrigger = False
        End If        
End Function

' Used for drop targets and stand up targets
Function Atn2(dy, dx)
        dim pi
        pi = 4*Atn(1)

        If dx > 0 Then
                Atn2 = Atn(dy / dx)
        ElseIf dx < 0 Then
                If dy = 0 Then 
                        Atn2 = pi
                Else
                        Atn2 = Sgn(dy) * (pi - Atn(Abs(dy / dx)))
                end if
        ElseIf dx = 0 Then
                if dy = 0 Then
                        Atn2 = 0
                else
                        Atn2 = Sgn(dy) * pi / 2
                end if
        End If
End Function

'*************************************************
' End - Check ball distance from Flipper for Rem
'*************************************************

dim LFPress, RFPress, LFCount, RFCount
dim LFState, RFState
dim EOST, EOSA,Frampup, FElasticity,FReturn
dim RFEndAngle, LFEndAngle

EOST = leftflipper.eostorque
EOSA = leftflipper.eostorqueangle
Frampup = LeftFlipper.rampup
FElasticity = LeftFlipper.elasticity
FReturn = LeftFlipper.return
Const EOSTnew = 0.8 
Const EOSAnew = 1
Const EOSRampup = 0
Dim SOSRampup
SOSRampup = 2.5
Const LiveCatch = 16
Const LiveElasticity = 0.45
Const SOSEM = 0.815
Const EOSReturn = 0.025

LFEndAngle = Leftflipper.endangle
RFEndAngle = RightFlipper.endangle

Sub FlipperActivate(Flipper, FlipperPress)
        FlipperPress = 1
        Flipper.Elasticity = FElasticity

        Flipper.eostorque = EOST         
        Flipper.eostorqueangle = EOSA         
End Sub

Sub FlipperDeactivate(Flipper, FlipperPress)
        FlipperPress = 0
        Flipper.eostorqueangle = EOSA
        Flipper.eostorque = EOST*EOSReturn/FReturn

        
        If Abs(Flipper.currentangle) <= Abs(Flipper.endangle) + 0.1 Then
                Dim BOT, b
                BOT = GetBalls
                        
                For b = 0 to UBound(BOT)
                        If Distance(BOT(b).x, BOT(b).y, Flipper.x, Flipper.y) < 55 Then 'check for cradle
                                If BOT(b).vely >= -0.4 Then BOT(b).vely = -0.4
                        End If
                Next
        End If
End Sub

Sub FlipperTricks (Flipper, FlipperPress, FCount, FEndAngle, FState) 
        Dim Dir
        Dir = Flipper.startangle/Abs(Flipper.startangle)        '-1 for Right Flipper

        If Abs(Flipper.currentangle) > Abs(Flipper.startangle) - 0.05 Then
                If FState <> 1 Then
                        Flipper.rampup = SOSRampup 
                        Flipper.endangle = FEndAngle - 3*Dir
                        Flipper.Elasticity = FElasticity * SOSEM
                        FCount = 0 
                        FState = 1
                End If
        ElseIf Abs(Flipper.currentangle) <= Abs(Flipper.endangle) and FlipperPress = 1 then
                if FCount = 0 Then FCount = GameTime

                If FState <> 2 Then
                        Flipper.eostorqueangle = EOSAnew
                        Flipper.eostorque = EOSTnew
                        Flipper.rampup = EOSRampup                        
                        Flipper.endangle = FEndAngle
                        FState = 2
                End If
        Elseif Abs(Flipper.currentangle) > Abs(Flipper.endangle) + 0.01 and FlipperPress = 1 Then 
                If FState <> 3 Then
                        Flipper.eostorque = EOST        
                        Flipper.eostorqueangle = EOSA
                        Flipper.rampup = Frampup
                        Flipper.Elasticity = FElasticity
                        FState = 3
                End If

        End If
End Sub

Const LiveDistanceMin = 30  'minimum distance in vp units from flipper base live catch dampening will occur
Const LiveDistanceMax = 114  'maximum distance in vp units from flipper base live catch dampening will occur (tip protection)

Sub CheckLiveCatch(ball, Flipper, FCount, parm) 'Experimental new live catch
        Dim Dir
        Dir = Flipper.startangle/Abs(Flipper.startangle)    '-1 for Right Flipper
        Dim LiveCatchBounce                                                                                                                        'If live catch is not perfect, it won't freeze ball totally
        Dim CatchTime : CatchTime = GameTime - FCount

        if CatchTime <= LiveCatch and parm > 6 and ABS(Flipper.x - ball.x) > LiveDistanceMin and ABS(Flipper.x - ball.x) < LiveDistanceMax Then
                if CatchTime <= LiveCatch*0.5 Then                                                'Perfect catch only when catch time happens in the beginning of the window
                        LiveCatchBounce = 0
                else
                        LiveCatchBounce = Abs((LiveCatch/2) - CatchTime)        'Partial catch when catch happens a bit late
                end If

                If LiveCatchBounce = 0 and ball.velx * Dir > 0 Then ball.velx = 0
                ball.vely = LiveCatchBounce * (32 / LiveCatch) ' Multiplier for inaccuracy bounce
                ball.angmomx= 0
                ball.angmomy= 0
                ball.angmomz= 0
        End If
End Sub



'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  MANUAL BALLCONTROL
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
	' 

	Sub StartControl_Hit()
		Set ControlBall = ActiveBall
			If StartState = True Then
			StartState = False
			contballinplay = true
			Exit Sub
			End If
			if StartState = False Then
			StartState = True
			contballinplay = true
			Exit Sub
			End If
		
	End Sub

	Sub StopControl_Hit()
		ID=26:FX():ScoreID=26:ScoreAmount:
		contballinplay = false
	End Sub

	Dim bcup, bcdown, bcleft, bcright, contball, contballinplay, ControlBall, bcboost
	Dim bcvel, bcyveloffset, bcboostmulti

	bcboost = 1 'Do Not Change - default setting
	bcvel = 4 'Controls the speed of the ball movement
	bcyveloffset = -0.01 'Offsets the force of gravity to keep the ball from drifting vertically on the table, should be negative
	bcboostmulti = 3 'Boost multiplier to ball veloctiy (toggled with the B key)

	Sub BallControl_Timer()
		 If Contball and ContBallInPlay then
			  If bcright = 1 Then
				   ControlBall.velx = bcvel*bcboost
			  ElseIf bcleft = 1 Then
				   ControlBall.velx = - bcvel*bcboost
			  Else
				   ControlBall.velx=0
			  End If

			 If bcup = 1 Then
				  ControlBall.vely = -bcvel*bcboost
			 ElseIf bcdown = 1 Then
				  ControlBall.vely = bcvel*bcboost
			 Else
				  ControlBall.vely= bcyveloffset
			 End If
		 End If
	End Sub


'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  nFozzy RUBBER FUNCTIONS
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  


'****************************************************************************
'PHYSICS DAMPENERS
'****************************************************************************

'These are data mined bounce curves, 
'dialed in with the in-game elasticity as much as possible to prevent angle / spin issues.
'Requires tracking ballspeed to calculate COR


Sub dPosts_Hit(idx) 
        RubbersD.dampen Activeball
End Sub

Sub dSleeves_Hit(idx) 
        SleevesD.Dampen Activeball
End Sub


dim RubbersD : Set RubbersD = new Dampener        'frubber
RubbersD.name = "Rubbers"
RubbersD.debugOn = False        'shows info in textbox "TBPout"
RubbersD.Print = False        'debug, reports in debugger (in vel, out cor)
'cor bounce curve (linear)
'for best results, try to match in-game velocity as closely as possible to the desired curve
'RubbersD.addpoint 0, 0, 0.935        'point# (keep sequential), ballspeed, CoR (elasticity)
RubbersD.addpoint 0, 0, 0.96        'point# (keep sequential), ballspeed, CoR (elasticity)
RubbersD.addpoint 1, 3.77, 0.96
RubbersD.addpoint 2, 5.76, 0.967        'dont take this as gospel. if you can data mine rubber elasticitiy, please help!
RubbersD.addpoint 3, 15.84, 0.874
RubbersD.addpoint 4, 56, 0.64        'there's clamping so interpolate up to 56 at least

dim SleevesD : Set SleevesD = new Dampener        'this is just rubber but cut down to 85%...
SleevesD.name = "Sleeves"
SleevesD.debugOn = False        'shows info in textbox "TBPout"
SleevesD.Print = False        'debug, reports in debugger (in vel, out cor)
SleevesD.CopyCoef RubbersD, 0.85

Class Dampener
        Public Print, debugOn 'tbpOut.text
        public name, Threshold         'Minimum threshold. Useful for Flippers, which don't have a hit threshold.
        Public ModIn, ModOut
        Private Sub Class_Initialize : redim ModIn(0) : redim Modout(0): End Sub 

        Public Sub AddPoint(aIdx, aX, aY) 
                ShuffleArrays ModIn, ModOut, 1 : ModIn(aIDX) = aX : ModOut(aIDX) = aY : ShuffleArrays ModIn, ModOut, 0
                if gametime > 100 then Report
        End Sub

        public sub Dampen(aBall)
                if threshold then if BallSpeed(aBall) < threshold then exit sub end if end if
                dim RealCOR, DesiredCOR, str, coef
                DesiredCor = LinearEnvelope(cor.ballvel(aBall.id), ModIn, ModOut )
                RealCOR = BallSpeed(aBall) / cor.ballvel(aBall.id)
                coef = desiredcor / realcor 
                if debugOn then str = name & " in vel:" & round(cor.ballvel(aBall.id),2 ) & vbnewline & "desired cor: " & round(desiredcor,4) & vbnewline & _
                "actual cor: " & round(realCOR,4) & vbnewline & "ballspeed coef: " & round(coef, 3) & vbnewline 
                if Print then debug.print Round(cor.ballvel(aBall.id),2) & ", " & round(desiredcor,3)
                
                aBall.velx = aBall.velx * coef : aBall.vely = aBall.vely * coef
                if debugOn then TBPout.text = str
        End Sub

        Public Sub CopyCoef(aObj, aCoef) 'alternative addpoints, copy with coef
                dim x : for x = 0 to uBound(aObj.ModIn)
                        addpoint x, aObj.ModIn(x), aObj.ModOut(x)*aCoef
                Next
        End Sub


        Public Sub Report()         'debug, reports all coords in tbPL.text
                if not debugOn then exit sub
                dim a1, a2 : a1 = ModIn : a2 = ModOut
                dim str, x : for x = 0 to uBound(a1) : str = str & x & ": " & round(a1(x),4) & ", " & round(a2(x),4) & vbnewline : next
                TBPout.text = str
        End Sub
        

End Class



'******************************************************
'                TRACK ALL BALL VELOCITIES
'                 FOR RUBBER DAMPENER AND DROP TARGETS
'******************************************************



'*** Determines if a Points (px,py) is inside a 4 point polygon A-D in Clockwise/CCW order
Function InRect(px,py,ax,ay,bx,by,cx,cy,dx,dy)
        Dim AB, BC, CD, DA
        AB = (bx*py) - (by*px) - (ax*py) + (ay*px) + (ax*by) - (ay*bx)
        BC = (cx*py) - (cy*px) - (bx*py) + (by*px) + (bx*cy) - (by*cx)
        CD = (dx*py) - (dy*px) - (cx*py) + (cy*px) + (cx*dy) - (cy*dx)
        DA = (ax*py) - (ay*px) - (dx*py) + (dy*px) + (dx*ay) - (dy*ax)
 
        If (AB <= 0 AND BC <=0 AND CD <= 0 AND DA <= 0) Or (AB >= 0 AND BC >=0 AND CD >= 0 AND DA >= 0) Then
                InRect = True
        Else
                InRect = False       
        End If
End Function

Sub RDampen_Timer()
Cor.Update
End Sub



'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'   SHADOWS
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  

'***************************************************************
' VPW Dynamic Ball Shadows by Iakki, Apophis, and Wylte
'***************************************************************

' The sets of primitives named BallShadow#, RtxBallShadow#, and RtxBall2Shadow#, with at least as many objects each as there can be balls
' A collection called RtxBS that includes all light sources you want to cast ball shadows
' These must be organized in order, so that lights that intersect on the table are adjacent in the collection
' The "RtxBSUpdate" sub should be called with a interval of -1 (framerate)


Const fovY					= 0		'Offset y position under ball to account for layback or inclination
Const DynamicBSFactor 		= 0.95	'0 to 1, higher is darker, 1 will be max even with 2 sources
Const AmbientBSFactor 		= 0.7	'0 to 1, higher is darker, 1 will be max even with 2 sources
Const Wideness				= 20	'Sets how wide the shadows can get (20 should be most realistic?)
Const Thinness				= 5		'Sets minimum as ball moves away from source

Dim sourcenames, currentShadowCount

sourcenames = Array ("","","","","","","","","","","","","","","","","","","")
currentShadowCount = Array (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)


dim objrtx1(20), objrtx2(20), RtxBScnt
dim objBallShadow(20)
RtxInit

sub RtxInit()
	Dim iii
	For Each iii in RtxBS
		RtxBScnt = RtxBScnt + 1		'count lights
		'		iii.state = 1 				'lights on
	next

	for iii = 0 to tnob
		Set objrtx1(iii) = Eval("RtxBallShadow" & iii)
		objrtx1(iii).material = "RtxBallShadow" & iii
		objrtx1(iii).z = iii/1000 + 0.10
		objrtx1(iii).visible = 0
		'objrtx1(iii).uservalue=0

		Set objrtx2(iii) = Eval("RtxBall2Shadow" & iii)
		objrtx2(iii).material = "RtxBallShadow2_" & iii
		objrtx2(iii).z = (iii)/1000 + 0.12
		objrtx2(iii).visible = 0
		'objrtx2(iii).uservalue=0
		currentShadowCount(iii) = 0
		Set objBallShadow(iii) = Eval("BallShadow" & iii)
		objBallShadow(iii).material = "BallShadow" & iii
	Next
	'msgbox RtxBScnt
end sub


Sub RtxBSUpdate
	Dim falloff:        falloff 		= 150			'Max distance to light source for RTX BS calcs
	Dim ShadowOpacity, ShadowOpacity2 
	Dim s, Source, LSd, CntDwn, b, currentMat, AnotherSource, BOT
	BOT = GetBalls

	' hide shadow of deleted balls
	For s = UBound(BOT) + 1 to tnob
		objrtx1(s).visible = 0
		objrtx2(s).visible = 0
		objBallShadow(s).visible = 0
	Next

	If UBound(BOT) = lob - 1 Then Exit Sub		'No balls in play exit, same as JP's


	For s = lob to UBound(BOT)

		'Normal ambient shadow
		If BOT(s).X < tablewidth/2 Then
			objBallShadow(s).X = ((BOT(s).X) - (Ballsize/10) + ((BOT(s).X - (tablewidth/2))/13)) + 5
		Else
			objBallShadow(s).X = ((BOT(s).X) + (Ballsize/10) + ((BOT(s).X - (tablewidth/2))/13)) - 5
		End If
		objBallShadow(s).Y = BOT(s).Y + fovY
		objBallShadow(s).Z = s/1000 + 0.04 'make ball shadows to be on different z-order

		If BOT(s).Z < 30 Then 'or BOT(s).Z > 105 Then
			objBallShadow(s).visible = 1
		Else
			'other rules here, like ramps and upper pf
			objBallShadow(s).visible = 0
		end if


		'Dynamic shadows

		For Each Source in RtxBS							'Rename this to match your collection name
			LSd=DistanceFast((BOT(s).x-Source.x),(BOT(s).y-Source.y))			'Calculating the Linear distance to the Source
			If BOT(s).Z < 30 Then 'Or BOT(s).Z > 105 Then
				If LSd < falloff and Source.state=1 Then	    'If the ball is within the falloff range of a light and light is on
					CntDwn = RtxBScnt
					currentShadowCount(s) = currentShadowCount(s) + 1

					if currentShadowCount(s) = 1 Then
						sourcenames(s) = source.name
						currentMat = objrtx1(s).material
						objrtx2(s).visible = 0 : objrtx1(s).visible = 1 : objrtx1(s).X = BOT(s).X : objrtx1(s).Y = BOT(s).Y + fovY
						objrtx1(s).Z = s/1000 + 0.01
						objrtx1(s).rotz = AnglePP(Source.x, Source.y, BOT(s).X, BOT(s).Y) + 90
						ShadowOpacity = (falloff-LSd)/falloff
						objrtx1(s).size_y = Wideness*ShadowOpacity+Thinness
						UpdateMaterial currentMat,1,0,0,0,0,0,ShadowOpacity*DynamicBSFactor^2,RGB(0,0,0),0,0,False,True,0,0,0,0
						'debug.print "update1" & source.name & " at:" & ShadowOpacity

						currentMat = objBallShadow(s).material
						UpdateMaterial currentMat,1,0,0,0,0,0,AmbientBSFactor*(1-ShadowOpacity),RGB(0,0,0),0,0,False,True,0,0,0,0

					Elseif currentShadowCount(s) = 2 Then

						currentMat = objrtx1(s).material
						set AnotherSource = Eval(sourcenames(s))
						objrtx1(s).visible = 1 : objrtx1(s).X = BOT(s).X : objrtx1(s).Y = BOT(s).Y + fovY
						objrtx1(s).Z = s/1000 + 0.01
						objrtx1(s).rotz = AnglePP(AnotherSource.x, AnotherSource.y, BOT(s).X, BOT(s).Y) + 90
						ShadowOpacity = (falloff-(((BOT(s).x-AnotherSource.x)^2+(BOT(s).y-AnotherSource.y)^2)^0.5))/falloff
						objrtx1(s).size_y = Wideness*ShadowOpacity+Thinness
						UpdateMaterial currentMat,1,0,0,0,0,0,ShadowOpacity*DynamicBSFactor^3,RGB(0,0,0),0,0,False,True,0,0,0,0

						currentMat = objrtx2(s).material
						objrtx2(s).visible = 1 : objrtx2(s).X = BOT(s).X : objrtx2(s).Y = BOT(s).Y + fovY
						objrtx2(s).Z = s/1000 + 0.02
						objrtx2(s).rotz = AnglePP(Source.x, Source.y, BOT(s).X, BOT(s).Y) + 90
						ShadowOpacity2 = (falloff-LSd)/falloff
						objrtx2(s).size_y = Wideness*ShadowOpacity2+Thinness
						UpdateMaterial currentMat,1,0,0,0,0,0,ShadowOpacity2*DynamicBSFactor^3,RGB(0,0,0),0,0,False,True,0,0,0,0
						'debug.print "update2: " & source.name & " at:" & ShadowOpacity & " and "  & Eval(sourcenames(s)).name & " at:" & ShadowOpacity2

						currentMat = objBallShadow(s).material
						UpdateMaterial currentMat,1,0,0,0,0,0,AmbientBSFactor*(1-max(ShadowOpacity,ShadowOpacity2)),RGB(0,0,0),0,0,False,True,0,0,0,0
					end if
				Else
					CntDwn = CntDwn - 1				'If ball is not in range of any light, this will hit 0
					currentShadowCount(s) = 0
				End If
			Else
				'other rules here, like ramps and upper pf
				objrtx2(s).visible = 0 : objrtx1(s).visible = 0
			End If

		Next
		If CntDwn <= 0 Then
			if CntDwn = -(RtxBScnt) Then
				For b = lob to UBound(BOT)
					objrtx1(b).visible = 0
					objrtx2(b).visible = 0
				Next
			end if

		End If
	Next
End Sub


Function DistanceFast(x, y)
	dim ratio, ax, ay
	'Get absolute value of each vector
	ax = abs(x)
	ay = abs(y)
	'Create a ratio
	ratio = 1 / max(ax, ay)
	ratio = ratio * (1.29289 - (ax + ay) * ratio * 0.29289)
	if ratio > 0 then
		DistanceFast = 1/ratio
	Else
		DistanceFast = 0
	End if
end Function

Function max(a,b)
	if a > b then 
		max = a
	Else
		max = b
	end if
end Function


	'*****************************************
	'	ninuzzu's	FLIPPER SHADOWS
	'*****************************************

	sub FlipperTimer_Timer()
		FlipperLSh.RotZ = LeftFlipper.currentangle
		FlipperRSh.RotZ = RightFlipper.currentangle

	End Sub

'******************************************************
'                BALL ROLLING AND DROP SOUNDS
'******************************************************

Const tnob = 5 	' total number of balls
Const lob = 0	'Locked balls
ReDim rolling(tnob)
InitRolling

Dim DropCount
ReDim DropCount(tnob)

Sub InitRolling
        Dim i
        For i = 0 to tnob
                rolling(i) = False
        Next
End Sub

Sub RollingTimer_Timer()
        Dim BOT, b
        BOT = GetBalls

        ' stop the sound of deleted balls
        For b = UBound(BOT) + 1 to tnob
                rolling(b) = False
                StopSound("BallRoll_" & b)
        Next

        ' exit the sub if no balls on the table
        If UBound(BOT) = -1 Then Exit Sub

        ' play the rolling sound for each ball

        For b = 0 to UBound(BOT)
                If BallVel(BOT(b)) > 1 AND BOT(b).z < 30 Then
                        rolling(b) = True
                        PlaySound ("BallRoll_" & b), -1, VolPlayfieldRoll(BOT(b)) * 1.1 * VolumeDial, AudioPan(BOT(b)), 0, PitchPlayfieldRoll(BOT(b)), 1, 0, AudioFade(BOT(b))

                Else
                        If rolling(b) = True Then
                                StopSound("BallRoll_" & b)
                                rolling(b) = False
                        End If
                End If

                '***Ball Drop Sounds***
                If BOT(b).VelZ < -1 and BOT(b).z < 55 and BOT(b).z > 27 Then 'height adjust for ball drop sounds
                        If DropCount(b) >= 5 Then
                                DropCount(b) = 0
                                If BOT(b).velz > -7 Then
                                        RandomSoundBallBouncePlayfieldSoft BOT(b)
                                Else
                                        RandomSoundBallBouncePlayfieldHard BOT(b)
                                End If                                
                        End If
                End If
                If DropCount(b) < 5 Then
                        DropCount(b) = DropCount(b) + 1
                End If
        Next
End Sub


'******************************************************
'                                        KNOCKER
'******************************************************
SolCallback(6)        = "SolKnocker" 'Change the solenoid number to the correct number for your table.

Sub SolKnocker(Enabled)
        If enabled Then
                KnockerSolenoid 'Add knocker position object
        End If
End Sub



'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'   TILT
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  


	'NOTE: The TiltDecreaseTimer Subtracts .01 from the "Tilt" variable every round

	Sub CheckTilt                                    'Called when table is nudged
		Tilt = Tilt + TiltSensitivity                'Add to tilt count
		TiltDecreaseTimer.Enabled = True
		If(Tilt> TiltSensitivity) AND(Tilt <15) Then 'show a warning
			ID=36:FX():ScoreID=36:ScoreAmount
			DOF 131, DOFPulse
			DOF 311, DOFPulse  'DOF MX - Tilt Warning
		End if
		If Tilt> 15 Then 'If more that 15 then TILT the table
			Tilted = True
			ID=37:FX():ScoreID=37:ScoreAmount
			DOF 310, DOFPulse   'DOF MX - TILT
			DOF 127, DOFOff   'DOF - Beacon - OFF
			DisableTable True
			tilttableclear.enabled = true
			TiltRecoveryTimer.Enabled = True 'start the Tilt delay to check for all the balls to be drained
		End If
	End Sub

	Dim tilttime:tilttime = 0

	sub tilttableclear_timer
		tilttime = tilttime + 1
		Select Case tilttime
			Case 10
				tableclearing
		End Select
	End Sub

	Sub tableclearing

	End Sub

	Sub posttiltreset

	End Sub

	Sub TiltDecreaseTimer_Timer
		' DecreaseTilt
		If Tilt> 0 Then
			Tilt = Tilt - 0.1
		Else
			TiltDecreaseTimer.Enabled = False
		End If
	End Sub

	Sub DisableTable(Enabled)
		If Enabled Then
			GiOff
			if Tilted Then
				CooldownEnd
			end If
			LightSeqTilt.Play SeqAllOff
			LeftFlipper.RotateToStart
			RightFlipper.RotateToStart
			LeftSlingshot.Disabled = 1
			RightSlingshot.Disabled = 1
			'PuPlayer.playresume 4
			'PuPlayer.playlistplayex pAudio,"audiomodes","clear.mp3",100,1
			'PuPlayer.playlistplayex pMusic,"audioclear","clear.mp3",100, 1
		Else
			GiOn
			LightSeqTilt.StopPlay
			LeftSlingshot.Disabled = 0
			RightSlingshot.Disabled = 0
		End If
	End Sub

	Sub TiltRecoveryTimer_Timer()
		If(BallsOnPlayfield = 0) Then
			'EndOfBall()
			TiltRecoveryTimer.Enabled = False
		End If
	End Sub



'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'   SOUND FUNCTIONS
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  


	'*********************************************************************
	'                 Positional Sound Playback Functions
	'*********************************************************************

	' Play a sound, depending on the X,Y position of the table element (especially cool for surround speaker setups, otherwise stereo panning only)
	' parameters (defaults): loopcount (1), volume (1), randompitch (0), pitch (0), useexisting (0), restart (1))
	' Note that this will not work (currently) for walls/slingshots as these do not feature a simple, single X,Y position
	Sub PlayXYSound(soundname, tableobj, loopcount, volume, randompitch, pitch, useexisting, restart)
		PlaySound soundname, loopcount, volume, AudioPan(tableobj), randompitch, pitch, useexisting, restart, AudioFade(tableobj)
	End Sub

	'*********************************************************************
	'                 FLEEP SOUND PACKAGE
	'*********************************************************************

'////////////////////////////  MECHANICAL SOUNDS  ///////////////////////////
'//  This part in the script is an entire block that is dedicated to the physics sound system.
'//  Various scripts and sounds that may be pretty generic and could suit other WPC systems, but the most are tailored specifically for this table.

'///////////////////////////////  SOUNDS PARAMETERS  //////////////////////////////
Dim GlobalSoundLevel, CoinSoundLevel, PlungerReleaseSoundLevel, PlungerPullSoundLevel, NudgeLeftSoundLevel
Dim NudgeRightSoundLevel, NudgeCenterSoundLevel, StartButtonSoundLevel, RollingSoundFactor

CoinSoundLevel = 1                                                                                                                'volume level; range [0, 1]
NudgeLeftSoundLevel = 1                                                                                                        'volume level; range [0, 1]
NudgeRightSoundLevel = 1                                                                                                'volume level; range [0, 1]
NudgeCenterSoundLevel = 1                                                                                                'volume level; range [0, 1]
StartButtonSoundLevel = 0.1                                                                                                'volume level; range [0, 1]
PlungerReleaseSoundLevel = 0.8 '1 wjr                                                                                        'volume level; range [0, 1]
PlungerPullSoundLevel = 1                                                                                                'volume level; range [0, 1]
RollingSoundFactor = 1.1/5                

'///////////////////////-----Solenoids, Kickers and Flash Relays-----///////////////////////
Dim FlipperUpAttackMinimumSoundLevel, FlipperUpAttackMaximumSoundLevel, FlipperUpAttackLeftSoundLevel, FlipperUpAttackRightSoundLevel
Dim FlipperUpSoundLevel, FlipperDownSoundLevel, FlipperLeftHitParm, FlipperRightHitParm
Dim SlingshotSoundLevel, BumperSoundFactor, KnockerSoundLevel

FlipperUpAttackMinimumSoundLevel = 0.010                                                           'volume level; range [0, 1]
FlipperUpAttackMaximumSoundLevel = 0.635                                                                'volume level; range [0, 1]
FlipperUpSoundLevel = 1.0                                                                        'volume level; range [0, 1]
FlipperDownSoundLevel = 0.45                                                                      'volume level; range [0, 1]
FlipperLeftHitParm = FlipperUpSoundLevel                                                                'sound helper; not configurable
FlipperRightHitParm = FlipperUpSoundLevel                                                                'sound helper; not configurable
SlingshotSoundLevel = 0.95                                                                                                'volume level; range [0, 1]
BumperSoundFactor = 4.25                                                                                                'volume multiplier; must not be zero
KnockerSoundLevel = 1                                                                                                         'volume level; range [0, 1]

'///////////////////////-----Ball Drops, Bumps and Collisions-----///////////////////////
Dim RubberStrongSoundFactor, RubberWeakSoundFactor, RubberFlipperSoundFactor,BallWithBallCollisionSoundFactor
Dim BallBouncePlayfieldSoftFactor, BallBouncePlayfieldHardFactor, PlasticRampDropToPlayfieldSoundLevel, WireRampDropToPlayfieldSoundLevel, DelayedBallDropOnPlayfieldSoundLevel
Dim WallImpactSoundFactor, MetalImpactSoundFactor, SubwaySoundLevel, SubwayEntrySoundLevel, ScoopEntrySoundLevel
Dim SaucerLockSoundLevel, SaucerKickSoundLevel

BallWithBallCollisionSoundFactor = 3.2                                                                        'volume multiplier; must not be zero
RubberStrongSoundFactor = 0.055/5                                                                                        'volume multiplier; must not be zero
RubberWeakSoundFactor = 0.075/5                                                                                        'volume multiplier; must not be zero
RubberFlipperSoundFactor = 0.075/5                                                                                'volume multiplier; must not be zero
BallBouncePlayfieldSoftFactor = 0.025                                                                        'volume multiplier; must not be zero
BallBouncePlayfieldHardFactor = 0.025                                                                        'volume multiplier; must not be zero
DelayedBallDropOnPlayfieldSoundLevel = 0.8                                                                        'volume level; range [0, 1]
WallImpactSoundFactor = 0.075                                                                                        'volume multiplier; must not be zero
MetalImpactSoundFactor = 0.075/3
SaucerLockSoundLevel = 0.8
SaucerKickSoundLevel = 0.8

'///////////////////////-----Gates, Spinners, Rollovers and Targets-----///////////////////////

Dim GateSoundLevel, TargetSoundFactor, SpinnerSoundLevel, RolloverSoundLevel, DTSoundLevel

GateSoundLevel = 0.5/5                                                                                                        'volume level; range [0, 1]
TargetSoundFactor = 0.0025 * 10                                                                                        'volume multiplier; must not be zero
DTSoundLevel = 0.25                                                                                                                'volume multiplier; must not be zero
RolloverSoundLevel = 0.25                                                                      'volume level; range [0, 1]

'///////////////////////-----Ball Release, Guides and Drain-----///////////////////////
Dim DrainSoundLevel, BallReleaseSoundLevel, BottomArchBallGuideSoundFactor, FlipperBallGuideSoundFactor 

DrainSoundLevel = 0.8                                                                                                                'volume level; range [0, 1]
BallReleaseSoundLevel = 1                                                                                                'volume level; range [0, 1]
BottomArchBallGuideSoundFactor = 0.2                                                                        'volume multiplier; must not be zero
FlipperBallGuideSoundFactor = 0.015                                                                                'volume multiplier; must not be zero

'///////////////////////-----Loops and Lanes-----///////////////////////
Dim ArchSoundFactor
ArchSoundFactor = 0.025/5                                                                                                        'volume multiplier; must not be zero


'/////////////////////////////  SOUND PLAYBACK FUNCTIONS  ////////////////////////////
'/////////////////////////////  POSITIONAL SOUND PLAYBACK METHODS  ////////////////////////////
' Positional sound playback methods will play a sound, depending on the X,Y position of the table element or depending on ActiveBall object position
' These are similar subroutines that are less complicated to use (e.g. simply use standard parameters for the PlaySound call)
' For surround setup - positional sound playback functions will fade between front and rear surround channels and pan between left and right channels
' For stereo setup - positional sound playback functions will only pan between left and right channels
' For mono setup - positional sound playback functions will not pan between left and right channels and will not fade between front and rear channels

' PlaySound full syntax - PlaySound(string, int loopcount, float volume, float pan, float randompitch, int pitch, bool useexisting, bool restart, float front_rear_fade)
' Note - These functions will not work (currently) for walls/slingshots as these do not feature a simple, single X,Y position
Sub PlaySoundAtLevelStatic(playsoundparams, aVol, tableobj)
    PlaySound playsoundparams, 0, aVol * VolumeDial, AudioPan(tableobj), 0, 0, 0, 0, AudioFade(tableobj)
End Sub

Sub PlaySoundAtLevelExistingStatic(playsoundparams, aVol, tableobj)
    PlaySound playsoundparams, 0, aVol * VolumeDial, AudioPan(tableobj), 0, 0, 1, 0, AudioFade(tableobj)
End Sub

Sub PlaySoundAtLevelStaticLoop(playsoundparams, aVol, tableobj)
    PlaySound playsoundparams, -1, aVol * VolumeDial, AudioPan(tableobj), 0, 0, 0, 0, AudioFade(tableobj)
End Sub

Sub PlaySoundAtLevelStaticRandomPitch(playsoundparams, aVol, randomPitch, tableobj)
    PlaySound playsoundparams, 0, aVol * VolumeDial, AudioPan(tableobj), randomPitch, 0, 0, 0, AudioFade(tableobj)
End Sub

Sub PlaySoundAtLevelActiveBall(playsoundparams, aVol)
        PlaySound playsoundparams, 0, aVol * VolumeDial, AudioPan(ActiveBall), 0, 0, 0, 0, AudioFade(ActiveBall)
End Sub

Sub PlaySoundAtLevelExistingActiveBall(playsoundparams, aVol)
        PlaySound playsoundparams, 0, aVol * VolumeDial, AudioPan(ActiveBall), 0, 0, 1, 0, AudioFade(ActiveBall)
End Sub

Sub PlaySoundAtLeveTimerActiveBall(playsoundparams, aVol, ballvariable)
        PlaySound playsoundparams, 0, aVol * VolumeDial, AudioPan(ballvariable), 0, 0, 0, 0, AudioFade(ballvariable)
End Sub

Sub PlaySoundAtLevelTimerExistingActiveBall(playsoundparams, aVol, ballvariable)
        PlaySound playsoundparams, 0, aVol * VolumeDial, AudioPan(ballvariable), 0, 0, 1, 0, AudioFade(ballvariable)
End Sub

Sub PlaySoundAtLevelRoll(playsoundparams, aVol, pitch)
    PlaySound playsoundparams, -1, aVol * VolumeDial, AudioPan(tableobj), randomPitch, 0, 0, 0, AudioFade(tableobj)
End Sub

' Previous Positional Sound Subs

Sub PlaySoundAt(soundname, tableobj)
    PlaySound soundname, 1, 1 * VolumeDial, AudioPan(tableobj), 0,0,0, 1, AudioFade(tableobj)
End Sub

Sub PlaySoundAtVol(soundname, tableobj, aVol)
    PlaySound soundname, 1, aVol * VolumeDial, AudioPan(tableobj), 0,0,0, 1, AudioFade(tableobj)
End Sub

Sub PlaySoundAtBall(soundname)
    PlaySoundAt soundname, ActiveBall
End Sub

Sub PlaySoundAtBallVol (Soundname, aVol)
        Playsound soundname, 1,aVol * VolumeDial, AudioPan(ActiveBall), 0,0,0, 1, AudioFade(ActiveBall)
End Sub

Sub PlaySoundAtBallVolM (Soundname, aVol)
        Playsound soundname, 1,aVol * VolumeDial, AudioPan(ActiveBall), 0,0,0, 0, AudioFade(ActiveBall)
End Sub

Sub PlaySoundAtVolLoops(sound, tableobj, Vol, Loops)
        PlaySound sound, Loops, Vol * VolumeDial, AudioPan(tableobj), 0,0,0, 1, AudioFade(tableobj)
End Sub


' *********************************************************************
'                     Fleep  Supporting Ball & Sound Functions
' *********************************************************************

Dim tablewidth, tableheight : tablewidth = table1.width : tableheight = table1.height

Function AudioFade(tableobj) ' Fades between front and back of the table (for surround systems or 2x2 speakers, etc), depending on the Y position on the table. "table1" is the name of the table
        Dim tmp
    tmp = tableobj.y * 2 / tableheight-1
    If tmp > 0 Then
                AudioFade = Csng(tmp ^10)
    Else
        AudioFade = Csng(-((- tmp) ^10) )
    End If
End Function

Function AudioPan(tableobj) ' Calculates the pan for a tableobj based on the X position on the table. "table1" is the name of the table
    Dim tmp
    tmp = tableobj.x * 2 / tablewidth-1
    If tmp > 0 Then
        AudioPan = Csng(tmp ^10)
    Else
        AudioPan = Csng(-((- tmp) ^10) )
    End If
End Function

Function Vol(ball) ' Calculates the volume of the sound based on the ball speed
        Vol = Csng(BallVel(ball) ^2)
End Function

Function Volz(ball) ' Calculates the volume of the sound based on the ball speed
        Volz = Csng((ball.velz) ^2)
End Function

Function Pitch(ball) ' Calculates the pitch of the sound based on the ball speed
    Pitch = BallVel(ball) * 20
End Function

Function BallVel(ball) 'Calculates the ball speed
    BallVel = INT(SQR((ball.VelX ^2) + (ball.VelY ^2) ) )
End Function

Function VolPlayfieldRoll(ball) ' Calculates the roll volume of the sound based on the ball speed
        VolPlayfieldRoll = RollingSoundFactor * 0.0005 * Csng(BallVel(ball) ^3)
End Function

Function PitchPlayfieldRoll(ball) ' Calculates the roll pitch of the sound based on the ball speed
    PitchPlayfieldRoll = BallVel(ball) ^2 * 15
End Function

Function RndInt(min, max)
    RndInt = Int(Rnd() * (max-min + 1) + min)' Sets a random number integer between min and max
End Function

Function RndNum(min, max)
    RndNum = Rnd() * (max-min) + min' Sets a random number between min and max
End Function

'/////////////////////////////  GENERAL SOUND SUBROUTINES  ////////////////////////////
Sub SoundStartButton()
        PlaySound ("Start_Button"), 0, StartButtonSoundLevel, 0, 0.25
End Sub

Sub SoundNudgeLeft()
        PlaySound ("Nudge_" & Int(Rnd*2)+1), 0, NudgeLeftSoundLevel * VolumeDial, -0.1, 0.25
End Sub

Sub SoundNudgeRight()
        PlaySound ("Nudge_" & Int(Rnd*2)+1), 0, NudgeRightSoundLevel * VolumeDial, 0.1, 0.25
End Sub

Sub SoundNudgeCenter()
        PlaySound ("Nudge_" & Int(Rnd*2)+1), 0, NudgeCenterSoundLevel * VolumeDial, 0, 0.25
End Sub


Sub SoundPlungerPull()
        PlaySoundAtLevelStatic ("Plunger_Pull_1"), PlungerPullSoundLevel, Plunger
End Sub

Sub SoundPlungerReleaseBall()
        PlaySoundAtLevelStatic ("Plunger_Release_Ball"), PlungerReleaseSoundLevel, Plunger        
End Sub

Sub SoundPlungerReleaseNoBall()
        PlaySoundAtLevelStatic ("Plunger_Release_No_Ball"), PlungerReleaseSoundLevel, Plunger
End Sub


'/////////////////////////////  KNOCKER SOLENOID  ////////////////////////////
Sub KnockerSolenoid()
        PlaySoundAtLevelStatic SoundFX("Knocker_1",DOFKnocker), KnockerSoundLevel, KnockerPosition
End Sub

'/////////////////////////////  DRAIN SOUNDS  ////////////////////////////
Sub RandomSoundDrain(drainswitch)
        PlaySoundAtLevelStatic ("Drain_" & Int(Rnd*11)+1), DrainSoundLevel, drainswitch
End Sub

'/////////////////////////////  TROUGH BALL RELEASE SOLENOID SOUNDS  ////////////////////////////

Sub RandomSoundBallRelease(drainswitch)
        PlaySoundAtLevelStatic SoundFX("BallRelease" & Int(Rnd*7)+1,DOFContactors), BallReleaseSoundLevel, drainswitch
End Sub

'/////////////////////////////  SLINGSHOT SOLENOID SOUNDS  ////////////////////////////
Sub RandomSoundSlingshotLeft(sling)
        PlaySoundAtLevelStatic SoundFX("Sling_L" & Int(Rnd*10)+1,DOFContactors), SlingshotSoundLevel, Sling
End Sub

Sub RandomSoundSlingshotRight(sling)
        PlaySoundAtLevelStatic SoundFX("Sling_R" & Int(Rnd*8)+1,DOFContactors), SlingshotSoundLevel, Sling
End Sub

'/////////////////////////////  BUMPER SOLENOID SOUNDS  ////////////////////////////
Sub RandomSoundBumperTop(Bump)
        PlaySoundAtLevelStatic SoundFX("Bumpers_Top_" & Int(Rnd*5)+1,DOFContactors), Vol(ActiveBall) * BumperSoundFactor, Bump
End Sub

Sub RandomSoundBumperMiddle(Bump)
        PlaySoundAtLevelStatic SoundFX("Bumpers_Middle_" & Int(Rnd*5)+1,DOFContactors), Vol(ActiveBall) * BumperSoundFactor, Bump
End Sub

Sub RandomSoundBumperBottom(Bump)
        PlaySoundAtLevelStatic SoundFX("Bumpers_Bottom_" & Int(Rnd*5)+1,DOFContactors), Vol(ActiveBall) * BumperSoundFactor, Bump
End Sub

'/////////////////////////////  FLIPPER BATS SOUND SUBROUTINES  ////////////////////////////
'/////////////////////////////  FLIPPER BATS SOLENOID ATTACK SOUND  ////////////////////////////
Sub SoundFlipperUpAttackLeft(flipper)
        FlipperUpAttackLeftSoundLevel = RndNum(FlipperUpAttackMinimumSoundLevel, FlipperUpAttackMaximumSoundLevel)
        PlaySoundAtLevelStatic ("Flipper_Attack-L01"), FlipperUpAttackLeftSoundLevel, flipper
End Sub

Sub SoundFlipperUpAttackRight(flipper)
        FlipperUpAttackRightSoundLevel = RndNum(FlipperUpAttackMinimumSoundLevel, FlipperUpAttackMaximumSoundLevel)
                PlaySoundAtLevelStatic ("Flipper_Attack-R01"), FlipperUpAttackLeftSoundLevel, flipper
End Sub

'/////////////////////////////  FLIPPER BATS SOLENOID CORE SOUND  ////////////////////////////
Sub RandomSoundFlipperUpLeft(flipper)
        PlaySoundAtLevelStatic SoundFX("Flipper_L0" & Int(Rnd*9)+1,DOFFlippers), FlipperLeftHitParm, Flipper
End Sub

Sub RandomSoundFlipperUpRight(flipper)
        PlaySoundAtLevelStatic SoundFX("Flipper_R0" & Int(Rnd*9)+1,DOFFlippers), FlipperRightHitParm, Flipper
End Sub

Sub RandomSoundReflipUpLeft(flipper)
        PlaySoundAtLevelStatic SoundFX("Flipper_ReFlip_L0" & Int(Rnd*3)+1,DOFFlippers), (RndNum(0.8, 1))*FlipperUpSoundLevel, Flipper
End Sub

Sub RandomSoundReflipUpRight(flipper)
        PlaySoundAtLevelStatic SoundFX("Flipper_ReFlip_R0" & Int(Rnd*3)+1,DOFFlippers), (RndNum(0.8, 1))*FlipperUpSoundLevel, Flipper
End Sub

Sub RandomSoundFlipperDownLeft(flipper)
        PlaySoundAtLevelStatic SoundFX("Flipper_Left_Down_" & Int(Rnd*7)+1,DOFFlippers), FlipperDownSoundLevel, Flipper
End Sub

Sub RandomSoundFlipperDownRight(flipper)
        PlaySoundAtLevelStatic SoundFX("Flipper_Right_Down_" & Int(Rnd*8)+1,DOFFlippers), FlipperDownSoundLevel, Flipper
End Sub

'/////////////////////////////  FLIPPER BATS BALL COLLIDE SOUND  ////////////////////////////

Sub LeftFlipperCollide(parm)
        FlipperLeftHitParm = parm/10
        If FlipperLeftHitParm > 1 Then
                FlipperLeftHitParm = 1
        End If
        FlipperLeftHitParm = FlipperUpSoundLevel * FlipperLeftHitParm
        RandomSoundRubberFlipper(parm)
End Sub

Sub RightFlipperCollide(parm)
        FlipperRightHitParm = parm/10
        If FlipperRightHitParm > 1 Then
                FlipperRightHitParm = 1
        End If
        FlipperRightHitParm = FlipperUpSoundLevel * FlipperRightHitParm
         RandomSoundRubberFlipper(parm)
End Sub

Sub RandomSoundRubberFlipper(parm)
        PlaySoundAtLevelActiveBall ("Flipper_Rubber_" & Int(Rnd*7)+1), parm  * RubberFlipperSoundFactor
End Sub

'/////////////////////////////  ROLLOVER SOUNDS  ////////////////////////////
Sub RandomSoundRollover()
        PlaySoundAtLevelActiveBall ("Rollover_" & Int(Rnd*4)+1), RolloverSoundLevel
End Sub

Sub Rollovers_Hit(idx)
        RandomSoundRollover
End Sub

'/////////////////////////////  VARIOUS PLAYFIELD SOUND SUBROUTINES  ////////////////////////////
'/////////////////////////////  RUBBERS AND POSTS  ////////////////////////////
'/////////////////////////////  RUBBERS - EVENTS  ////////////////////////////
Sub Rubbers_Hit(idx)
         dim finalspeed
          finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
         If finalspeed > 5 then                
                 RandomSoundRubberStrong 1
        End if
        If finalspeed <= 5 then
                 RandomSoundRubberWeak()
         End If        
End Sub

'/////////////////////////////  RUBBERS AND POSTS - STRONG IMPACTS  ////////////////////////////
Sub RandomSoundRubberStrong(voladj)
        Select Case Int(Rnd*10)+1
                Case 1 : PlaySoundAtLevelActiveBall ("Rubber_Strong_1"), Vol(ActiveBall) * RubberStrongSoundFactor*voladj
                Case 2 : PlaySoundAtLevelActiveBall ("Rubber_Strong_2"), Vol(ActiveBall) * RubberStrongSoundFactor*voladj
                Case 3 : PlaySoundAtLevelActiveBall ("Rubber_Strong_3"), Vol(ActiveBall) * RubberStrongSoundFactor*voladj
                Case 4 : PlaySoundAtLevelActiveBall ("Rubber_Strong_4"), Vol(ActiveBall) * RubberStrongSoundFactor*voladj
                Case 5 : PlaySoundAtLevelActiveBall ("Rubber_Strong_5"), Vol(ActiveBall) * RubberStrongSoundFactor*voladj
                Case 6 : PlaySoundAtLevelActiveBall ("Rubber_Strong_6"), Vol(ActiveBall) * RubberStrongSoundFactor*voladj
                Case 7 : PlaySoundAtLevelActiveBall ("Rubber_Strong_7"), Vol(ActiveBall) * RubberStrongSoundFactor*voladj
                Case 8 : PlaySoundAtLevelActiveBall ("Rubber_Strong_8"), Vol(ActiveBall) * RubberStrongSoundFactor*voladj
                Case 9 : PlaySoundAtLevelActiveBall ("Rubber_Strong_9"), Vol(ActiveBall) * RubberStrongSoundFactor*voladj
                Case 10 : PlaySoundAtLevelActiveBall ("Rubber_1_Hard"), Vol(ActiveBall) * RubberStrongSoundFactor * 0.6*voladj
        End Select
End Sub

'/////////////////////////////  RUBBERS AND POSTS - WEAK IMPACTS  ////////////////////////////
Sub RandomSoundRubberWeak()
        PlaySoundAtLevelActiveBall ("Rubber_" & Int(Rnd*9)+1), Vol(ActiveBall) * RubberWeakSoundFactor
End Sub

'/////////////////////////////  WALL IMPACTS  ////////////////////////////
Sub Walls_Hit(idx)
         dim finalspeed
          finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
         If finalspeed > 5 then
                 RandomSoundRubberStrong 1 
        End if
        If finalspeed <= 5 then
                 RandomSoundRubberWeak()
         End If        
End Sub

Sub RandomSoundWall()
         dim finalspeed
          finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
         If finalspeed > 16 then 
                Select Case Int(Rnd*5)+1
                        Case 1 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_1"), Vol(ActiveBall) * WallImpactSoundFactor
                        Case 2 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_2"), Vol(ActiveBall) * WallImpactSoundFactor
                        Case 3 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_5"), Vol(ActiveBall) * WallImpactSoundFactor
                        Case 4 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_7"), Vol(ActiveBall) * WallImpactSoundFactor
                        Case 5 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_9"), Vol(ActiveBall) * WallImpactSoundFactor
                End Select
        End if
        If finalspeed >= 6 AND finalspeed <= 16 then
                Select Case Int(Rnd*4)+1
                        Case 1 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_3"), Vol(ActiveBall) * WallImpactSoundFactor
                        Case 2 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_4"), Vol(ActiveBall) * WallImpactSoundFactor
                        Case 3 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_6"), Vol(ActiveBall) * WallImpactSoundFactor
                        Case 4 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_8"), Vol(ActiveBall) * WallImpactSoundFactor
                End Select
         End If
        If finalspeed < 6 Then
                Select Case Int(Rnd*3)+1
                        Case 1 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_4"), Vol(ActiveBall) * WallImpactSoundFactor
                        Case 2 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_6"), Vol(ActiveBall) * WallImpactSoundFactor
                        Case 3 : PlaySoundAtLevelExistingActiveBall ("Wall_Hit_8"), Vol(ActiveBall) * WallImpactSoundFactor
                End Select
        End if
End Sub

'/////////////////////////////  METAL TOUCH SOUNDS  ////////////////////////////
Sub RandomSoundMetal()
        PlaySoundAtLevelActiveBall ("Metal_Touch_" & Int(Rnd*13)+1), Vol(ActiveBall) * MetalImpactSoundFactor
End Sub

'/////////////////////////////  METAL - EVENTS  ////////////////////////////

Sub Metals_Hit (idx)
        RandomSoundMetal
End Sub

Sub ShooterDiverter_collide(idx)
        RandomSoundMetal
End Sub

'/////////////////////////////  BOTTOM ARCH BALL GUIDE  ////////////////////////////
'/////////////////////////////  BOTTOM ARCH BALL GUIDE - SOFT BOUNCES  ////////////////////////////
Sub RandomSoundBottomArchBallGuide()
         dim finalspeed
          finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
         If finalspeed > 16 then 
                PlaySoundAtLevelActiveBall ("Apron_Bounce_"& Int(Rnd*2)+1), Vol(ActiveBall) * BottomArchBallGuideSoundFactor
        End if
        If finalspeed >= 6 AND finalspeed <= 16 then
                 Select Case Int(Rnd*2)+1
                        Case 1 : PlaySoundAtLevelActiveBall ("Apron_Bounce_1"), Vol(ActiveBall) * BottomArchBallGuideSoundFactor
                        Case 2 : PlaySoundAtLevelActiveBall ("Apron_Bounce_Soft_1"), Vol(ActiveBall) * BottomArchBallGuideSoundFactor
                End Select
         End If
        If finalspeed < 6 Then
                 Select Case Int(Rnd*2)+1
                        Case 1 : PlaySoundAtLevelActiveBall ("Apron_Bounce_Soft_1"), Vol(ActiveBall) * BottomArchBallGuideSoundFactor
                        Case 2 : PlaySoundAtLevelActiveBall ("Apron_Medium_3"), Vol(ActiveBall) * BottomArchBallGuideSoundFactor
                End Select
        End if
End Sub

'/////////////////////////////  BOTTOM ARCH BALL GUIDE - HARD HITS  ////////////////////////////
Sub RandomSoundBottomArchBallGuideHardHit()
        PlaySoundAtLevelActiveBall ("Apron_Hard_Hit_" & Int(Rnd*3)+1), BottomArchBallGuideSoundFactor * 0.25
End Sub

Sub Apron_Hit (idx)
        If Abs(cor.ballvelx(activeball.id) < 4) and cor.ballvely(activeball.id) > 7 then
                RandomSoundBottomArchBallGuideHardHit()
        Else
                RandomSoundBottomArchBallGuide
        End If
End Sub

'/////////////////////////////  FLIPPER BALL GUIDE  ////////////////////////////
Sub RandomSoundFlipperBallGuide()
         dim finalspeed
          finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
         If finalspeed > 16 then 
                 Select Case Int(Rnd*2)+1
                        Case 1 : PlaySoundAtLevelActiveBall ("Apron_Hard_1"),  Vol(ActiveBall) * FlipperBallGuideSoundFactor
                        Case 2 : PlaySoundAtLevelActiveBall ("Apron_Hard_2"),  Vol(ActiveBall) * 0.8 * FlipperBallGuideSoundFactor
                End Select
        End if
        If finalspeed >= 6 AND finalspeed <= 16 then
                PlaySoundAtLevelActiveBall ("Apron_Medium_" & Int(Rnd*3)+1),  Vol(ActiveBall) * FlipperBallGuideSoundFactor
         End If
        If finalspeed < 6 Then
                PlaySoundAtLevelActiveBall ("Apron_Soft_" & Int(Rnd*7)+1),  Vol(ActiveBall) * FlipperBallGuideSoundFactor
        End If
End Sub

'/////////////////////////////  TARGET HIT SOUNDS  ////////////////////////////
Sub RandomSoundTargetHitStrong()
        PlaySoundAtLevelActiveBall SoundFX("Target_Hit_" & Int(Rnd*4)+5,DOFTargets), Vol(ActiveBall) * 0.45 * TargetSoundFactor
End Sub

Sub RandomSoundTargetHitWeak()                
        PlaySoundAtLevelActiveBall SoundFX("Target_Hit_" & Int(Rnd*4)+1,DOFTargets), Vol(ActiveBall) * TargetSoundFactor
End Sub

Sub PlayTargetSound()
         dim finalspeed
          finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
         If finalspeed > 10 then
                 RandomSoundTargetHitStrong()
                RandomSoundBallBouncePlayfieldSoft Activeball
        Else 
                 RandomSoundTargetHitWeak()
         End If        
End Sub

Sub Targets_Hit (idx)
        PlayTargetSound        
End Sub

'/////////////////////////////  BALL BOUNCE SOUNDS  ////////////////////////////
Sub RandomSoundBallBouncePlayfieldSoft(aBall)
        Select Case Int(Rnd*9)+1
                Case 1 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Soft_1"), volz(aBall) * BallBouncePlayfieldSoftFactor, aBall
                Case 2 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Soft_2"), volz(aBall) * BallBouncePlayfieldSoftFactor * 0.5, aBall
                Case 3 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Soft_3"), volz(aBall) * BallBouncePlayfieldSoftFactor * 0.8, aBall
                Case 4 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Soft_4"), volz(aBall) * BallBouncePlayfieldSoftFactor * 0.5, aBall
                Case 5 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Soft_5"), volz(aBall) * BallBouncePlayfieldSoftFactor, aBall
                Case 6 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Hard_1"), volz(aBall) * BallBouncePlayfieldSoftFactor * 0.2, aBall
                Case 7 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Hard_2"), volz(aBall) * BallBouncePlayfieldSoftFactor * 0.2, aBall
                Case 8 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Hard_5"), volz(aBall) * BallBouncePlayfieldSoftFactor * 0.2, aBall
                Case 9 : PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Hard_7"), volz(aBall) * BallBouncePlayfieldSoftFactor * 0.3, aBall
        End Select
End Sub

Sub RandomSoundBallBouncePlayfieldHard(aBall)
        PlaySoundAtLevelStatic ("Ball_Bounce_Playfield_Hard_" & Int(Rnd*7)+1), volz(aBall) * BallBouncePlayfieldHardFactor, aBall
End Sub

'/////////////////////////////  DELAYED DROP - TO PLAYFIELD - SOUND  ////////////////////////////
Sub RandomSoundDelayedBallDropOnPlayfield(aBall)
        Select Case Int(Rnd*5)+1
                Case 1 : PlaySoundAtLevelStatic ("Ball_Drop_Playfield_1_Delayed"), DelayedBallDropOnPlayfieldSoundLevel, aBall
                Case 2 : PlaySoundAtLevelStatic ("Ball_Drop_Playfield_2_Delayed"), DelayedBallDropOnPlayfieldSoundLevel, aBall
                Case 3 : PlaySoundAtLevelStatic ("Ball_Drop_Playfield_3_Delayed"), DelayedBallDropOnPlayfieldSoundLevel, aBall
                Case 4 : PlaySoundAtLevelStatic ("Ball_Drop_Playfield_4_Delayed"), DelayedBallDropOnPlayfieldSoundLevel, aBall
                Case 5 : PlaySoundAtLevelStatic ("Ball_Drop_Playfield_5_Delayed"), DelayedBallDropOnPlayfieldSoundLevel, aBall
        End Select
End Sub

'/////////////////////////////  BALL GATES AND BRACKET GATES SOUNDS  ////////////////////////////

Sub SoundPlayfieldGate()                        
        PlaySoundAtLevelStatic ("Gate_FastTrigger_" & Int(Rnd*2)+1), GateSoundLevel, Activeball
End Sub

Sub SoundHeavyGate()
        PlaySoundAtLevelStatic ("Gate_2"), GateSoundLevel, Activeball
End Sub

Sub Gates_hit(idx)
        SoundHeavyGate
End Sub

Sub GatesWire_hit(idx)        
        SoundPlayfieldGate        
End Sub        

'/////////////////////////////  LEFT LANE ENTRANCE - SOUNDS  ////////////////////////////

Sub RandomSoundLeftArch()
        PlaySoundAtLevelActiveBall ("Arch_L" & Int(Rnd*4)+1), Vol(ActiveBall) * ArchSoundFactor
End Sub

Sub RandomSoundRightArch()
        PlaySoundAtLevelActiveBall ("Arch_R" & Int(Rnd*4)+1), Vol(ActiveBall) * ArchSoundFactor
End Sub


Sub Arch1_hit()
        If Activeball.velx > 1 Then SoundPlayfieldGate
        StopSound "Arch_L1"
        StopSound "Arch_L2"
        StopSound "Arch_L3"
        StopSound "Arch_L4"
End Sub

Sub Arch1_unhit()
        If activeball.velx < -8 Then
                RandomSoundRightArch
        End If
End Sub

Sub Arch2_hit()
        If Activeball.velx < 1 Then SoundPlayfieldGate
        StopSound "Arch_R1"
        StopSound "Arch_R2"
        StopSound "Arch_R3"
        StopSound "Arch_R4"
End Sub

Sub Arch2_unhit()
        If activeball.velx > 10 Then
                RandomSoundLeftArch
        End If
End Sub

'/////////////////////////////  SAUCERS (KICKER HOLES)  ////////////////////////////

Sub SoundSaucerLock()
        PlaySoundAtLevelStatic ("Saucer_Enter_" & Int(Rnd*2)+1), SaucerLockSoundLevel, Activeball
End Sub

Sub SoundSaucerKick(scenario, saucer)
        Select Case scenario
                Case 0: PlaySoundAtLevelStatic SoundFX("Saucer_Empty", DOFContactors), SaucerKickSoundLevel, saucer
                Case 1: PlaySoundAtLevelStatic SoundFX("Saucer_Kick", DOFContactors), SaucerKickSoundLevel, saucer
        End Select
End Sub

'/////////////////////////////  BALL COLLISION SOUND  ////////////////////////////
Sub OnBallBallCollision(ball1, ball2, velocity)
        Dim snd
        Select Case Int(Rnd*7)+1
                Case 1 : snd = "Ball_Collide_1"
                Case 2 : snd = "Ball_Collide_2"
                Case 3 : snd = "Ball_Collide_3"
                Case 4 : snd = "Ball_Collide_4"
                Case 5 : snd = "Ball_Collide_5"
                Case 6 : snd = "Ball_Collide_6"
                Case 7 : snd = "Ball_Collide_7"
        End Select

        PlaySound (snd), 0, Csng(velocity) ^2 / 200 * BallWithBallCollisionSoundFactor * VolumeDial, AudioPan(ball1), 0, Pitch(ball1), 0, 0, AudioFade(ball1)
End Sub


'/////////////////////////////////////////////////////////////////
'                                        End Mechanical Sounds
'/////////////////////////////////////////////////////////////////


    '******************************************************
    '                TRACK ALL BALL VELOCITIES
    '                 FOR RUBBER DAMPENER AND DROP TARGETS
    '******************************************************
    
    dim cor : set cor = New CoRTracker
    
    Class CoRTracker
            public ballvel, ballvelx, ballvely
    
            Private Sub Class_Initialize : redim ballvel(0) : redim ballvelx(0): redim ballvely(0) : End Sub 
    
            Public Sub Update()        'tracks in-ball-velocity
                    dim str, b, AllBalls, highestID : allBalls = getballs
    
                    for each b in allballs
                            if b.id >= HighestID then highestID = b.id
                    Next
    
                    if uBound(ballvel) < highestID then redim ballvel(highestID)        'set bounds
                    if uBound(ballvelx) < highestID then redim ballvelx(highestID)        'set bounds
                    if uBound(ballvely) < highestID then redim ballvely(highestID)        'set bounds
    
                    for each b in allballs
                            ballvel(b.id) = BallSpeed(b)
                            ballvelx(b.id) = b.velx
                            ballvely(b.id) = b.vely
                    Next
            End Sub
    End Class
    
 

'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'   START GAME, END GANE
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'

Dim SlotAward, SelectCounter, SlotValue

	Sub ResetForNewGame()
'    UpdateMusic = 0
'    UpdateMusic = UpdateMusic + 6
'	UpdateMusicNow
	Dim i
	For i = 1 To MaxPlayers
	BallsRemaining(i) = 3
	grubs(i) = 0
	Next
    SlotValue = 0
    SelectCounter = 0
 '   SlotAward = Array("choose1", "choose2")
	StopAttractMode
	DMD_ShowImages "choose3",1,3000,3000,0
    PlayerSelectActive = True
end sub

Sub SelectPlayerStart(Keycode)
'    DMD "", "", SlotAward(SelectCounter), eNone, eNone, eNone, 500, False, ""
    If keycode = LeftFlipperKey then
		Playsound "beep"
        SelectCounter = SelectCounter - 1
        If SelectCounter = -1 Then SelectCounter = 0
    end If
    If keycode = RightFlipperKey then
		Playsound "beep"
        SelectCounter = SelectCounter + 1
        If SelectCounter = 2 Then SelectCounter = 1 
    end If
    Select Case SelectCounter
        Case 0
            DMD_ShowImages "choose2",1,20000,20000,0
			loadadultset
            SlotValue = 0
        Case 1
            DMD_ShowImages "choose1",1,20000,20000,0
			loadchildset
            SlotValue = 1
    End Select

    If keycode = PlungerKey Then
        Select Case SlotValue
            Case 0
            'DMDFlush
				'loadadultset
				PlayerSelectActive = False
                vpmtimer.addtimer 1000, "ResetForNewGame2() '"
            Case 1
            'DMDFlush
				'loadchildset
				PlayerSelectActive = False
                vpmtimer.addtimer 1000, "ResetForNewGame2() '"
        End Select
        'vpmtimer.addtimer 1000, "ResetForNewGame2() '"
    end if
end sub

sub loadadultset
	PlayMode = 1
	popupr001.HasHitEvent = False
	popupr001.Collidable = False
	popupr002.HasHitEvent = False
	popupr002.Collidable = False
    popupr001.Isdropped = 1
    popupr002.Isdropped = 1
	PopupPr001.visible = False
	PopupPr002.visible = False
	ImageTimerAdult.Enabled = 1
end Sub

sub loadchildset
	PlayMode = 2
    popupr001.Isdropped = 0
    popupr002.Isdropped = 0
	popupr001.HasHitEvent = True
	popupr001.Collidable = True
	popupr002.HasHitEvent = True
	popupr002.Collidable = True
	PopupPr001.visible = True
	PopupPr002.visible = True
	ImageTimerChild.Enabled = 1
end Sub


Sub ResetForNewGame2()
	if (Credits >=1) Or (bFreePlay = True) Then
		Dim i

		'update music
		UpdateMusic = 0

		bGameInPLay = True
		StopAttractMode
		GiOn
		TotalGamesPlayed = TotalGamesPlayed + 1
		savegp
		CurrentPlayer = 1
		PlayersPlayingGame = 1
		bOnTheFirstBall = True
		For i = 1 To MaxPlayers
			Score(i) = 0
			BonusPoints(i) = 0
			BonusHeldPoints(i) = 0
			BonusMultiplier(i) = 1
			BallsRemaining(i) = 3
			ExtraBallsAwards(i) = 0
			grubs(i) = 0
			bBallSaverActive = False
			bBallSaverReady = False
			bMultiBallMode = False
			bTripleScore = False
			bExtraBall = False
			bDoubleScore = False
			bAutoPlunger = False
			bGrubMadness = False
			BallLocked = False
			sw45activate = False
			BallGuardActive = False
			ChildBallGuardActive = False
			ArrowPos = 0
			ArrowNewPos = 0
			'BallsOnPlayfield = 0
			BallsInHole = 0
			TreeKickActivated = False
			WheelKickActivated = False
			havedof = 0
			HakunaMove = 0
			MatataMove = 0
			StartState = False
			eblon(CurrentPlayer) = 0
			bExtraBallWonThisBall = False
			GrubLoop = 0
			gateopen = False
			Advance = 0
			'SongSelect = False
			'GateWall.Collidable = True
			popup.HasHitEvent = False
			popup.Collidable = False
			SaveKicker.Enabled = False
			CoconutsOn = False
			l1.state = 0
			l2.state = 0
			l3.state = 0
			l4.state = 0
			l5.state = 0
			l6.state = 0
			l7.state = 0
			l8.state = 0
			l9.state = 0
			l10.state = 0
			l11.state = 0
			l12.state = 0
			l17.state = 0
			l18.state = 0
			l19.state = 0
			l28.state = 0
			l29.state = 0
			l30.state = 0
			l31.state = 0
			l32.state = 0
			l36.state = 0
			l37.state = 0
			l38.state = 0
			l39.state = 0
			l40.state = 0
			sw25l.state = 0
			sw26l.state = 0
			sw27l.state = 0
			sw36l.state = 0
			sw37l.state = 0
			sw38l.state = 0
			sw41l.state = 0
			sw42l.state = 0
			sw43l.state = 0
			l20.state = 0
			l21.state = 0
			l22.state = 0
			l23.state = 0
			if RampDir = 1 Then LowerRamp:End If
		Next
		Tilt = 0
		Game_Init()
		UpdateSkillShot
		vpmtimer.addtimer 1500, "FirstBall '"
	Else
		'pNote "INSERT COINS",""  &  Credits  &  " Coins"
	End If
	End Sub


Sub EndOfGame()
        'PuPlayer.playlistplayex pMusic,"audioclear","clear.mp3",100, 1
        ID=38:FX():ScoreID=38:ScoreAmount
        DMD_ShowImages "gameover",4,500,3500,2000
        vpmtimer.addtimer 3500, "StartAttractMode '"
        introposition = 0
        bGameInPLay = False
        bJustStarted = False
		GrubMadnessEnd
		stopbugsandnuts()
		HurryUpEnd
		BallsOnPlayfield = 0
		if BallLocked = True Then
				mball2.Enabled = True
				BallLocked = False
		End If
		Dim i
        GiOff
    End Sub



'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'   FLEXDMD SCRIPTING
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  

	' DMDTimer @17ms
' StartFlex with the intro @ Table1_Init
' Startgame ( KeyDown : PlungerKey ) calls the Game DMD to start if intro is on
' Commands :
' 	DMDBigText "LAUNCH",77,1  : display text instead of score : "text",frames(x17ms),effect  0=solid 1=blink
'	DMDBGFlash=15 : will light up background with new image for xx frames
'	DMDFire=Flexframe+50  : will animate the font for 50 frames


Dim FlexDMD
Dim FlexMode
Dim FlexFrame

Const 	FlexDMD_RenderMode_DMD_GRAY = 0, _
		FlexDMD_RenderMode_DMD_GRAY_4 = 1, _
		FlexDMD_RenderMode_DMD_RGB = 2, _
		FlexDMD_RenderMode_SEG_2x16Alpha = 3, _
		FlexDMD_RenderMode_SEG_2x20Alpha = 4, _
		FlexDMD_RenderMode_SEG_2x7Alpha_2x7Num = 5, _
		FlexDMD_RenderMode_SEG_2x7Alpha_2x7Num_4x1Num = 6, _
		FlexDMD_RenderMode_SEG_2x7Num_2x7Num_4x1Num = 7, _
		FlexDMD_RenderMode_SEG_2x7Num_2x7Num_10x1Num = 8, _
		FlexDMD_RenderMode_SEG_2x7Num_2x7Num_4x1Num_gen7 = 9, _
		FlexDMD_RenderMode_SEG_2x7Num10_2x7Num10_4x1Num = 10, _
		FlexDMD_RenderMode_SEG_2x6Num_2x6Num_4x1Num = 11, _
		FlexDMD_RenderMode_SEG_2x6Num10_2x6Num10_4x1Num = 12, _
		FlexDMD_RenderMode_SEG_4x7Num10 = 13, _
		FlexDMD_RenderMode_SEG_6x4Num_4x1Num = 14, _
		FlexDMD_RenderMode_SEG_2x7Num_4x1Num_1x16Alpha = 15, _
		FlexDMD_RenderMode_SEG_1x16Alpha_1x16Num_1x7Num = 16

Const 	FlexDMD_Align_TopLeft = 0, _
		FlexDMD_Align_Top = 1, _
		FlexDMD_Align_TopRight = 2, _
		FlexDMD_Align_Left = 3, _
		FlexDMD_Align_Center = 4, _
		FlexDMD_Align_Right = 5, _
		FlexDMD_Align_BottomLeft = 6, _
		FlexDMD_Align_Bottom = 7, _
		FlexDMD_Align_BottomRight = 8


Sub Flex_Init
	If UseFlexDMD = 0 Then Exit Sub
	Set FlexDMD = CreateObject("FlexDMD.FlexDMD")
    If FlexDMD is Nothing Then
        MsgBox "No FlexDMD found. This table will NOT run without it."
        Exit Sub
    End If
	SetLocale(1033)
	With FlexDMD
		.GameName = cGameName
		.TableFile = Table1.Filename & ".vpx"
		.Color = RGB(255, 88, 32)
		.RenderMode = FlexDMD_RenderMode_DMD_RGB
		.Width = 128
		.Height = 32
		.ProjectFolder = "./TimonPumbaaDMD/"
		.Clear = True
		.Run = True
	End With

	DMDTimer.interval=17
	DMDTimer.enabled=True

End Sub

Sub Table1_Exit()
	If UseFlexDMD = 0 Then Exit Sub
    If Not FlexDMD is Nothing Then
		FlexDMD.Show = False
		FlexDMD.Run = False
		FlexDMD = NULL
    End If
End Sub


Dim FontScoreInactive
Dim FontScoreActive
Dim FontBig1
Dim FontBig2
Dim FontBig3
Dim FontScoreActive2
Dim FontScoreInactive2

Sub CreateSternStyle
	If UseFlexDMD = 0 Then Exit Sub

	Dim i

	Set FontScoreActive = FlexDMD.NewFont("TeenyTinyPixls5.fnt", vbWhite, vbWhite, 0)
	Set FontScoreActive2 = FlexDMD.NewFont("TeenyTinyPixls5.fnt", vbWhite, vbBlack, 1)
	Set FontScoreInactive = FlexDMD.NewFont("TeenyTinyPixls5.fnt", RGB(100, 100, 100), vbWhite, 0)
	Set FontScoreInactive2 = FlexDMD.NewFont("TeenyTinyPixls5.fnt", RGB(100, 100, 100), vbBlack, 1)
	Set FontBig1 = FlexDMD.NewFont("sys80.fnt", vbWhite, vbBlack, 0)
	Set FontBig2 = FlexDMD.NewFont("sys80_1.fnt", vbWhite, vbBlack, 0)
	Set FontBig3 = FlexDMD.NewFont("sys80.fnt", RGB ( 10,10,10) ,vbBlack, 0)
	Dim scene
	Set scene = FlexDMD.NewGroup("Score")
	
	With Scene
		.AddActor FlexDMD.NewImage("bg","bgdarker.png")
		.Getimage("bg").visible = True ' False
		.AddActor FlexDMD.NewImage("bg2","bg.png")
		.Getimage("bg2").visible = False


	End With


	'Dim title : Set title = FlexDMD.NewLabel("TitleScroller", FontScoreActive, ">>> Timon and Pumbaa <<<")
	'Dim af : Set af = title.ActionFactory
	'Dim list : Set list = af.Sequence()
	'list.Add af.MoveTo(128, 2, 0)
	'list.Add af.Wait(0.5)
	'list.Add af.MoveTo(-128, 2, 5.0)
	'list.Add af.Wait(3.0)
	'title.AddAction af.Repeat(list, -1)
	'scene.GetGroup("Score").AddActor title


	Set title = FlexDMD.NewLabel("Title2", FontBig3, " ")
	title.SetAlignedPosition 42, 16, FlexDMD_Align_Center
	scene.GetGroup("Score").AddActor title
	Set title = FlexDMD.NewLabel("Title", FontBig1, " ")
	title.SetAlignedPosition 42, 16, FlexDMD_Align_Center
	scene.GetGroup("Score").AddActor title


	scene.GetGroup("Score").AddActor FlexDMD.NewLabel("Ball", FontScoreActive, "Ball 1")
	scene.GetGroup("Score").AddActor FlexDMD.NewLabel("Grubs", FontScoreActive, "Credit 5")


' ontop images , will cover everything over here
	Scene.AddActor FlexDMD.NewImage("balllost1","bl.png") : Scene.Getimage("balllost1").visible = False

	Scene.AddActor FlexDMD.NewImage("gameover1","go1.png") : Scene.Getimage("gameover1").visible = False
	Scene.AddActor FlexDMD.NewImage("gameover2","go2.png") : Scene.Getimage("gameover2").visible = False
	Scene.AddActor FlexDMD.NewImage("gameover3","go3.png") : Scene.Getimage("gameover3").visible = False
	Scene.AddActor FlexDMD.NewImage("gameover4","go4.png") : Scene.Getimage("gameover4").visible = False
	Scene.AddActor FlexDMD.NewImage("gameoverb1","gameoverb1.png") : Scene.Getimage("gameoverb1").visible = False
	Scene.AddActor FlexDMD.NewImage("gameoverb2","gameoverb2.png") : Scene.Getimage("gameoverb2").visible = False
	Scene.AddActor FlexDMD.NewImage("gameoverb3","gameoverb3.png") : Scene.Getimage("gameoverb3").visible = False
	Scene.AddActor FlexDMD.NewImage("freeplay1","freeplay1.png") : Scene.Getimage("freeplay1").visible = False
	Scene.AddActor FlexDMD.NewImage("ballsaved1","ballsaved.png") : Scene.Getimage("ballsaved1").visible = False	
	Scene.AddActor FlexDMD.NewImage("burpoff1","burpoff.png") : Scene.Getimage("burpoff1").visible = False	
	Scene.AddActor FlexDMD.NewImage("extraball1","extraball.png") : Scene.Getimage("extraball1").visible = False	
	Scene.AddActor FlexDMD.NewImage("grubmadness1","grubmadness.png") : Scene.Getimage("grubmadness1").visible = False	
	Scene.AddActor FlexDMD.NewImage("mball1","mball.png") : Scene.Getimage("mball1").visible = False



    Scene.AddActor FlexDMD.NewImage("5001","500.png") : Scene.Getimage("5001").visible = False
    Scene.AddActor FlexDMD.NewImage("1k1","1k.png") : Scene.Getimage("1k1").visible = False
    Scene.AddActor FlexDMD.NewImage("5k1","5k.png") : Scene.Getimage("5k1").visible = False
    Scene.AddActor FlexDMD.NewImage("10k1","10k.png") : Scene.Getimage("10k1").visible = False
	Scene.AddActor FlexDMD.NewImage("20k1","20k.png") : Scene.Getimage("20k1").visible = False
    Scene.AddActor FlexDMD.NewImage("2x1","2x.png") : Scene.Getimage("2x1").visible = False
    Scene.AddActor FlexDMD.NewImage("3x1","3x.png") : Scene.Getimage("3x1").visible = False
    Scene.AddActor FlexDMD.NewImage("4x1","4x.png") : Scene.Getimage("4x1").visible = False
    Scene.AddActor FlexDMD.NewImage("5x1","5x.png") : Scene.Getimage("5x1").visible = False
    Scene.AddActor FlexDMD.NewImage("6x1","6x.png") : Scene.Getimage("6x1").visible = False
    Scene.AddActor FlexDMD.NewImage("choose31","choose3.png") : Scene.Getimage("choose31").visible = False
    Scene.AddActor FlexDMD.NewImage("choose21","choose2.png") : Scene.Getimage("choose21").visible = False
    Scene.AddActor FlexDMD.NewImage("choose11","choose1.png") : Scene.Getimage("choose11").visible = False



	Scene.AddActor FlexDMD.NewImage("intro1","intro1.png") : Scene.Getimage("intro1").visible = False
    Scene.AddActor FlexDMD.NewImage("intro2","intro1.png") : Scene.Getimage("intro2").visible = False
    Scene.AddActor FlexDMD.NewImage("intro3","intro1.png") : Scene.Getimage("intro3").visible = False
    Scene.AddActor FlexDMD.NewImage("intro4","intro1.png") : Scene.Getimage("intro4").visible = False
    Scene.AddActor FlexDMD.NewImage("intro5","intro2.png") : Scene.Getimage("intro5").visible = False
    Scene.AddActor FlexDMD.NewImage("intro6","intro2.png") : Scene.Getimage("intro6").visible = False
    Scene.AddActor FlexDMD.NewImage("intro7","intro3.png") : Scene.Getimage("intro7").visible = False
    Scene.AddActor FlexDMD.NewImage("intro8","intro4.png") : Scene.Getimage("intro8").visible = False
    Scene.AddActor FlexDMD.NewImage("intro9","intro5.png") : Scene.Getimage("intro9").visible = False


	Scene.AddActor FlexDMD.NewImage("logo1","attracht4.png") : Scene.Getimage("logo1").visible = False	
	Scene.AddActor FlexDMD.NewImage("attract1","bgdark3.png") : Scene.Getimage("attract1").visible = False	



	Scene.AddActor FlexDMD.NewLabel("overlaytext1", FontScoreActive, " ") : Scene.GetLabel("overlaytext1").visible = False
	Scene.AddActor FlexDMD.NewLabel("overlaytext2", FontScoreActive, " ") : Scene.GetLabel("overlaytext2").visible = False
	Scene.AddActor FlexDMD.NewLabel("overlaytext3", FontScoreActive, " ") : Scene.GetLabel("overlaytext3").visible = False
	Scene.AddActor FlexDMD.NewLabel("overlaytext1", FontScoreActive, " ") : Scene.GetLabel("overlaytext1").visible = False
	Scene.AddActor FlexDMD.NewLabel("overlaytext2", FontScoreActive, " ") : Scene.GetLabel("overlaytext2").visible = False
	Scene.AddActor FlexDMD.NewLabel("overlaytext3", FontScoreActive, " ") : Scene.GetLabel("overlaytext3").visible = False

	FlexDMD.LockRenderThread
	FlexDMD.RenderMode = FlexDMD_RenderMode_DMD_RGB
	FlexDMD.Stage.RemoveAll
	FlexDMD.Stage.AddActor scene
	FlexDMD.Show = True
	FlexDMD.UnlockRenderThread

	FlexMode=1

End Sub

Dim DMDTextOnScore
Dim DMDTextDisplayTime
Dim DMDTextEffect
Sub DMDBigText ( tex,time,effect)
	If UseFlexDMD = 0 Then Exit Sub
	DMDTextOnScore=tex
	DMDTextDisplayTime = FLEXframe + time

	DMDTextEffect=effect
End Sub


Dim bAttractModeCounter
Sub  DMD_Attract
	bAttractModeCounter = bAttractModeCounter +1
	

	Select Case bAttractModeCounter

		Case   10 : DMD_ShowImages "intro",9,500,6000,2000
		Case  350 : DMD_ShowImages "attract",1,8800,8800,0
					DMD_ShowText "HIGHSCORES",1,Fontbig1,8,True,100,6600
		Case  380 : DMD_ShowText "1-" & HighScoreName(0) & " " & HighScore(0),2,Fontbig1,20,False,100,1800
		Case  510 : DMD_ShowText "2-" & HighScoreName(1) & " " & HighScore(1),2,Fontbig1,20,False,100,1800
		Case  640 : DMD_ShowText "3-" & HighScoreName(2) & " " & HighScore(2),2,Fontbig1,20,False,100,1800
		
		Case  800 : DMD_ShowText_Reset 
					DMD_ShowImages "gameoverb",3,100,2000,0

		Case  910 : DMD_ShowImages "attract",1,3300,3300,0
					DMD_ShowText "LAST PLAYER",1,Fontbig1,8,True,100,2300
		Case  933 : DMD_ShowText Score(currentplayer),2,Fontbig1,20,False,100,1800

		Case 1020 : DMD_ShowText_Reset
					DMD_ShowImages "freeplay",1,100,2000,0
		Case 1120 : bAttractModeCounter=0
	End Select
End Sub


Dim DMDFire
Dim DMDBGFlash
Sub DMDTimer_Timer
	If UseFlexDMD = 0 Then Exit Sub
	Dim i, n, x, y, label
	FlexFrame = FlexFrame + 1
	FlexDMD.LockRenderThread

	If hsbModeActive Then DMD_EnterHigh
	If bAttractMode Then DMD_Attract

	DMD_OverlayText
	If FlexOverlay>0 Then 
		DMD_Overlay
	Else ' do everything Else

				If DMDBGFlash>0 Then DMDBGFlash=DMDBGFlash-1 : FlexDMD.Stage.GetImage("bg2").visible=True : Else :  FlexDMD.Stage.GetImage("bg2").visible=False

				If DMDfire>FLEXframe And (FlexFrame mod 8)>3 Then
					FlexDMD.Stage.GetLabel("Title").font = FontBig2
				Else 
					FlexDMD.Stage.GetLabel("Title").font = FontBig1	
				End If

				If DMDTextDisplayTime>FLEXframe Then
					If DMDTextEffect=1 And (FLEXframe mod 20) >10 Then 
						FlexDMD.Stage.GetLabel("Title").Text = " "
						FlexDMD.Stage.GetLabel("Title2").Text = " "
					Else
						FlexDMD.Stage.GetLabel("Title").Text = DMDTextOnScore
						FlexDMD.Stage.GetLabel("Title2").Text = DMDTextOnScore
					End If
				Else
					FlexDMD.Stage.GetLabel("Title").Text = FormatNumber(Score(CurrentPlayer), 0)
					FlexDMD.Stage.GetLabel("Title2").Text = FormatNumber(Score(CurrentPlayer), 0)
				End If
				FlexDMD.Stage.GetLabel("Title").SetAlignedPosition 64, 16, FlexDMD_Align_Center
				FlexDMD.Stage.GetLabel("Title2").SetAlignedPosition 65, 17, FlexDMD_Align_Center

				FlexDMD.Stage.GetLabel("Ball").SetAlignedPosition 0, 33, FlexDMD_Align_BottomLeft
				FlexDMD.Stage.GetLabel("Grubs").SetAlignedPosition 123, 33, FlexDMD_Align_BottomRight
				FlexDMD.Stage.GetLabel("Ball").Text = "Ball " & 4 - BallsRemaining(CurrentPlayer)
				FlexDMD.Stage.GetLabel("Grubs").Text = "Grubs " & (Grubs(CurrentPlayer))

	End If

	FlexDMD.UnlockRenderThread
End Sub


'************************************************************************************************************
'Example commands to use in your script
'************************************************************************************************************
' DMD_ShowImages "gameover",4,100,5000,0	' 100ms each of the 4 frames for max 5000ms
' DMD_ShowImages "gameover",4,100,5000,1000	'(last image= 1000ms)
' DMD_ShowImages "gameover",4,100,10,0		' run sequence 10 times only
' DMD_ShowImages "gameover",4,100,-1,0		' run sequence forever until new command is issued

' DMD_ShowImages "balllost",1,100,2000,0	' these two does the same since its just 1 image
' DMD_ShowImages "balllost",1,2000,2000,0

' DMD_ShowText "THIS IS TESTING1",1,FontScoreActive2,5,True,100,5000
' DMD_ShowText "THIS IS two",2,FontScoreActive,12,false,100,5000
' DMD_ShowText "last one",3,FontScoreinActive2,22,True,100,5000
' DMD_ShowText_Reset   ' if it needs to stop 

Sub CheckHighscore()
	If Score(CurrentPlayer) > HighScore(2) Then
		AwardSpecial
		vpmtimer.addtimer 1000, "PlaySound ""vo_contratulationsgreatscore"" '"
		'enter player's name
		StartHighscoreName
		DOF 403, DOFPulse   'DOF MX - Hi Score
	Else
		EndOfBallComplete
	End If
End Sub


Dim EnterName
Dim EnterNamePos
Dim EnterNameCurrenLetter
Sub StartHighscoreName
	hsbModeActive = True
	PlaySound "vo_enteryourinitials"
	Playsound "bellhs"
	EnterName = ""
	EnterNamePos = 1
	EnterNameCurrenLetter = 1
	bEnterHighCounter=0
	Enterblinking=0 
End Sub


Dim Enterblinking
Dim bEnterHighCounter
Sub DMD_EnterHigh

	Dim Displaytext
	Enterblinking = Enterblinking +1
	If ( Enterblinking mod 50 ) >20 Then
		If Len(EnterName) = 0 Then Displaytext = "< " & mid("ABCDEFGHIJJKLMNOPQRSTUVWXYZ0123456789",EnterNamePos,1) & " >"
		If Len(EnterName) = 1 Then Displaytext = Entername & "< " & mid("ABCDEFGHIJJKLMNOPQRSTUVWXYZ0123456789",EnterNamePos,1) & " >"
		If Len(EnterName) = 2 Then Displaytext = Entername & "< " & mid("ABCDEFGHIJJKLMNOPQRSTUVWXYZ0123456789",EnterNamePos,1) & " >"
		If Len(EnterName) = 3 Then Displaytext = "> " & Entername & " <"
	Else
		If Len(EnterName) = 0 Then Displaytext = "<   >"
		If Len(EnterName) = 1 Then Displaytext = Entername & "<   >"
		If Len(EnterName) = 2 Then Displaytext = Entername & "<   >"
		If Len(EnterName) = 3 Then Displaytext = ">        <"
	End If
	If bEnterHighCounter < 190 Then DMD_ShowText Displaytext,2,FontBig1,19,False,100,-1
	
	If bEnterHighCounter > 9 Then bEnterHighCounter=bEnterHighCounter+1

	Select Case bEnterHighCounter

		Case   0 :
			DMD_ShowImages "attract",1,1500,-1,0
			DMD_ShowText "ENTER NAME",1,FontBig1,7,False,100,-1		
			DMD_ShowText Score(CurrentPlayer),3,FontScoreActive2,28,False,100,-1
		Case  200,201 : 
			DMD_showtext_reset
			DMD_ShowImages "gameover",1,150,150,0

		Case 205 :
			If Score(CurrentPlayer) > HighScore(0) Then
				HighScore(1)=HighScore(0)
				HighScoreName(1)=HighScoreName(0)
				HighScore(2)=HighScore(1)
				HighScoreName(2)=HighScoreName(1)
				HighScore(0)=Score(CurrentPlayer)
				HighScoreName(0)=EnterName
			ElseIf Score(CurrentPlayer) > HighScore(1) Then
				HighScore(2)=HighScore(1)
				HighScoreName(2)=HighScoreName(1)
				HighScore(1)=Score(CurrentPlayer)
				HighScoreName(1)=EnterName
			ElseIf Score(CurrentPlayer) > HighScore(2) Then
				HighScore(2)=Score(CurrentPlayer)
				HighScoreName(2)=EnterName
			End If

			savehs

		Case 210 :
			hsbModeActive = False
			EndOfBallComplete

	End Select

End Sub


Sub EnterHighscoreName(keycode)
	If Len(EnterName) < 3 Then
		If keycode = LeftFlipperKey Then
			EnterNamePos = EnterNamePos - 1
			If EnterNamePos < 1 Then EnterNamePos = 36
'			Playsound "fx_Previous" 						' add a sound for this
		End If

		If keycode = RightFlipperKey Then
			EnterNamePos = EnterNamePos + 1
			If EnterNamePos >36 Then EnterNamePos = 1
'			Playsound "fx_Next" 							' add a sound for this
		End If

		If keycode = StartGameKey or keycode = PlungerKey Then
			soundStartButton()
			EnterName=EnterName + mid("ABCDEFGHIJJKLMNOPQRSTUVWXYZ0123456789",EnterNamePos,1)

			If Len(EnterName) =3 Then bEnterHighCounter=10 ' ending started

		End if
	End If
End Sub


Dim Flex_Overlay_TextBlink(3)
Dim Flex_Overlay_TextBlinkOn(3)
Dim Flex_Overlay_TextBlinkDelay(3)
Dim Flex_Overlay_TextBlinkDelayCounter(3)
Dim Flex_Overlay_TextTimer(3)

Sub DMD_ShowText_Reset
	Flex_Overlay_TextTimer(1)=0
	Flex_Overlay_TextTimer(2)=0
	Flex_Overlay_TextTimer(3)=0
End Sub


Sub DMD_ShowText ( txt , nr , font , posy , blinking , blinkdealy , timer )
	FlexDMD.Stage.GetLabel("overlaytext"&nr).font = font
	FlexDMD.Stage.GetLabel("overlaytext"&nr).Text = txt
	FlexDMD.Stage.GetLabel("overlaytext"&nr).SetAlignedPosition 64, posy , FlexDMD_Align_Center

	Flex_Overlay_TextBlink(nr) = blinking
	Flex_Overlay_TextBlinkOn(nr) = False
	Flex_Overlay_TextBlinkDelay(nr) = blinkdealy
	Flex_Overlay_TextBlinkDelayCounter(nr) = 0
	Flex_Overlay_TextTimer(nr) = timer
End Sub

Sub DMD_OverlayText
	Dim nr
	For nr = 1 to 3
		If Flex_Overlay_TextTimer(nr) = -1 Then
			FlexDMD.Stage.GetLabel("overlaytext"&nr).visible = True
		Elseif Flex_Overlay_TextTimer(nr) > 0 Then
			Flex_Overlay_TextTimer(nr) = Flex_Overlay_TextTimer(nr) - Flextimer
			If Flex_Overlay_TextTimer(nr) < 0 Then Flex_Overlay_TextTimer(nr) = 0
			If Flex_Overlay_TextBlink(nr) Then
 
				If Flex_Overlay_TextBlinkDelayCounter(nr) > 0 Then
					Flex_Overlay_TextBlinkDelayCounter(nr) = Flex_Overlay_TextBlinkDelayCounter(nr) - Flextimer
				Else
					Flex_Overlay_TextBlinkDelayCounter(nr) = Flex_Overlay_TextBlinkDelay(nr)
					If Flex_Overlay_TextBlinkOn(nr) Then
						Flex_Overlay_TextBlinkOn(nr)= false
						FlexDMD.Stage.GetLabel("overlaytext"&nr).visible = False
					Else
						Flex_Overlay_TextBlinkOn(nr)=True
						FlexDMD.Stage.GetLabel("overlaytext"&nr).visible = True
					End If
				End If
			Else
				FlexDMD.Stage.GetLabel("overlaytext"&nr).visible = True
			End If
		Else
			FlexDMD.Stage.GetLabel("overlaytext"&nr).visible = False
		End If
	Next
End Sub


Dim FlexOverlay
Const FlexTimer=17 ' dmd update timer ...find the interval on the timer : 17ms is normal for 60hz dont need to update dmd faster than that
Dim Flex_Overlay_FrameCounter
Dim Flex_Overlay_DelayCounter
Dim Flex_Overlay_TotalTimeCounter
Dim Flex_Overlay_CurrentImage
Sub DMD_Overlay

	If Flex_Overlay_TotalTime > 100 Then
		Flex_Overlay_TotalTimeCounter = Flex_Overlay_TotalTimeCounter - FlexTimer
		If Flex_Overlay_TotalTimeCounter < 0 Then
			FlexOverlay = 0			
			If Flex_Overlay_CurrentImage > 0 Then FlexDMD.Stage.GetImage(Flex_Overlay_image & Flex_Overlay_CurrentImage ).Visible=False
			Exit Sub
		End If
	End If

	If Flex_Overlay_DelayCounter<1 Then 

		Flex_Overlay_FrameCounter = Flex_Overlay_FrameCounter + 1
		Flex_Overlay_DelayCounter = Flex_Overlay_Delay
		If Flex_Overlay_FrameCounter = Flex_Overlay_Frames Then Flex_Overlay_DelayCounter = Flex_Overlay_LastFrame
		If Flex_Overlay_FrameCounter > Flex_Overlay_Frames Then Flex_Overlay_FrameCounter = 1

		If Flex_Overlay_TotalTime > 0 And Flex_Overlay_TotalTime < 100 Then
			Flex_Overlay_TotalTimeCounter = Flex_Overlay_TotalTimeCounter -1
			If Flex_Overlay_TotalTimeCounter < 1 Then
				FlexOverlay = 0
				If Flex_Overlay_CurrentImage > 0 Then FlexDMD.Stage.GetImage(Flex_Overlay_image & Flex_Overlay_CurrentImage ).Visible=False
				Exit Sub
			End If
		End If

	Else
		Flex_Overlay_DelayCounter = Flex_Overlay_DelayCounter - FlexTimer
	End If

	If Flex_Overlay_CurrentImage <> Flex_Overlay_FrameCounter Then
		If Flex_Overlay_CurrentImage > 0 Then FlexDMD.Stage.GetImage(Flex_Overlay_image & Flex_Overlay_CurrentImage ).Visible=False
		Flex_Overlay_CurrentImage = Flex_Overlay_FrameCounter
	End If
	debug.print "img=" & Flex_Overlay_image & Flex_Overlay_FrameCounter
	FlexDMD.Stage.GetImage(Flex_Overlay_image & Flex_Overlay_FrameCounter ).Visible=True



End Sub

' DMD_ShowImages "gameover",4,100,5000,1000
Dim Flex_Overlay_Image
Dim Flex_Overlay_Frames
Dim Flex_Overlay_Delay
Dim Flex_Overlay_TotalTime
Dim Flex_Overlay_LastFrame
Sub DMD_ShowImages( img, nrframes, delay , totaltime , lastframe ) ' TOTALTIME <100 = play sequence only nr of timer : totaltime can be -1 = until turned off with a new command
	
	If nrframes<1 Then nrframes = 1
	If delay<1 Then delay = 1
	If img="" Then Exit Sub

	If FlexOverlay=1 And Flex_Overlay_CurrentImage > 0 Then FlexDMD.Stage.GetImage(Flex_Overlay_image & Flex_Overlay_CurrentImage ).Visible=False

	Flex_Overlay_CurrentImage=0
	
	FlexOverlay=1
	Flex_Overlay_image = img
	Flex_Overlay_Frames = nrframes
	Flex_Overlay_Delay = delay
	Flex_Overlay_TotalTime = totaltime
	Flex_Overlay_LastFrame = lastframe
	If Flex_Overlay_LastFrame < Flex_Overlay_Delay Then Flex_Overlay_LastFrame = Flex_Overlay_Delay

	Flex_Overlay_FrameCounter = 1
	Flex_Overlay_DelayCounter = Flex_Overlay_Delay
	Flex_Overlay_TotalTimeCounter = Flex_Overlay_TotalTime

End Sub

Sub DMD_ShowImages_Reset 
	FlexOverlay=0
End Sub





'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'   Pinup Active Backglass
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  

'  Quick Steps:
'      1>  create a folder in PUPVideos with Starter_PuPPack.zip and call the folder "yourgame"
'      2>  above set global variable pGameName="yourgame"
'      3>  copy paste the settings section above to top of table script for user changes.
'      4>  on Table you need to create ONE timer only called pupDMDUpdate and set it to 250 ms enabled on startup.
'      5>  go to your table1_init or table first startup function and call PUPINIT function
'      6>  Go to bottom on framework here and setup game to call the appropriate events like pStartGame (call that in your game code where needed)...etc
'      7>  attractmodenext at bottom is setup for you already,  just go to each case and add/remove as many as you want and setup the messages to show.  
'      8>  Have fun and use pDMDDisplay(xxxx)  sub all over where needed.  remember its best to make a bunch of mp4 with text animations... looks the best for sure!
'
'
'Note:  for *Future Pinball* "pupDMDupdate_Timer()" timer needs to be renamed to "pupDMDupdate_expired()"  and then all is good.
'       and for future pinball you need to add the follow lines near top
'Need to use BAM and have com idll enabled.
'				Dim icom : Set icom = xBAM.Get("icom") ' "icom" is name of "icom.dll" in BAM\Plugins dir
'				if icom is Nothing then MSGBOX "Error cannot run without icom.dll plugin"
'				Function CreateObject(className)       
'   					Set CreateObject = icom.CreateObject(className)   
'				End Function

'**************************
'   PinUp Player Config
'   Change HasPuP = True if using PinUp Player Videos
'**************************

	'Dim HasPup:HasPuP = True

	Dim PuPlayer

	Const pTopper=0
	Const pDMD=1
	Const pBackglass=2
	Const pPlayfield=3
	Const pMusic=4
	Const pAudio=7
	Const pCallouts=8
	Const pFX1=9
	Const pFX2=10


	if UsePupDMD Then
	on error resume next
	Set PuPlayer = CreateObject("PinUpPlayer.PinDisplay") 
	on error goto 0
	if not IsObject(PuPlayer) then UsePupDMD = 0
	end If

	if UsePupDMD Then

	PuPlayer.Init pBackglass,cGameName
	PuPlayer.Init pMusic,cGameName
	PuPlayer.Init pAudio,cGameName
	PuPlayer.Init pCallouts,cGameName
	PuPlayer.Init pFX1,cGameName
	PuPlayer.Init pFX2,cGameName
	PuPlayer.Init pPlayfield,cGameName
	If toppervideo = 1 Then
	PuPlayer.Init pTopper,cGameName
	End If

	PuPlayer.SetScreenex pBackglass,0,0,0,0,0       'Set PuPlayer DMD TO Always ON    <screen number> , xpos, ypos, width, height, POPUP
	PuPlayer.SetScreenex pAudio,0,0,0,0,2
	PuPlayer.hide pAudio
	PuPlayer.SetScreenex pMusic,0,0,0,0,2
	PuPlayer.hide pMusic
	PuPlayer.SetScreenex pCallouts,0,0,0,0,2
	PuPlayer.SetScreenex pFX1,0,0,0,0,2
	PuPlayer.SetScreenex pFX2,0,0,0,0,2
	PuPlayer.hide pCallouts
	PuPlayer.SetScreenex pPlayfield,3,0,0,0,0

	Sub chilloutthemusic
		PuPlayer.SendMSG "{ ""mt"":301, ""SN"": 2, ""FN"":11, ""VL"":10 }"
		PuPlayer.SendMSG "{ ""mt"":301, ""SN"": 4, ""FN"":11, ""VL"":10 }"
		PuPlayer.SendMSG "{ ""mt"":301, ""SN"": 7, ""FN"":11, ""VL"":10 }"
		'PuPlayer.SendMSG "{ ""mt"":301, ""SN"": 3, ""FN"":11, ""VL"":10 }"
		vpmtimer.addtimer 2200, "turnitbackup'"
	End Sub

	Sub turnitbackup
		PuPlayer.SendMSG "{ ""mt"":301, ""SN"": 2, ""FN"":11, ""VL"":99 }"
		PuPlayer.SendMSG "{ ""mt"":301, ""SN"": 4, ""FN"":11, ""VL"":99 }"
		PuPlayer.SendMSG "{ ""mt"":301, ""SN"": 7, ""FN"":11, ""VL"":99 }"
		'PuPlayer.SendMSG "{ ""mt"":301, ""SN"": 3, ""FN"":11, ""VL"":99 }"
	End Sub


	PuPlayer.playlistadd pMusic,"audioattract", 1 , 0
	PuPlayer.playlistadd pMusic,"audiobg", 1 , 0
	PuPlayer.playlistadd pAudio,"audioevents", 1 , 0
	PuPlayer.playlistadd pAudio,"audiohighscore", 1 , 0
	PuPlayer.playlistadd pCallouts,"audiocallouts", 1 , 0
	PuPlayer.playlistadd pBackglass,"backglass", 1 , 0
	PuPlayer.playlistadd pBackglass,"PuPOverlays", 1 , 0
	PuPlayer.playlistadd pBackglass,"videoattract", 1 , 0
	PuPlayer.playlistadd pBackglass,"PuPVideos", 1 , 0
	PuPlayer.playlistadd pFX1,"PuPFX", 1 , 0
	PuPlayer.playlistadd pFX2,"PuPFX", 1 , 0
	PuPlayer.playlistadd pPlayfield,"PlayfieldVideos", 1 , 0

	If toppervideo = 1 Then
 	PuPlayer.playlistadd pTopper,"topper", 1 , 0
	End If

	'Set Background video on DMD
		'PuPlayer.playlistplayex pPlayfield,"PlayfieldVideos","Default.mp4",0,1
		PuPlayer.playlistplayex pBackglass,"backglass","FullDMD.png",0,1
		PuPlayer.playlistplayex pBackglass,"PuPOverlays","FullDMDOverlay.png",0,1
		PuPlayer.SetBackground pBackglass,1	

	End if

	If toppervideo = 1 Then
		PuPlayer.playlistplayex pTopper,"topper","topper.mp4",0,1
		PuPlayer.SetBackground pTopper,1	
	End If


	'PuPlayer.LabelInit pBackglass

	'Setup Pages.  Note if you use fonts they must be in FONTS folder of the pupVideos\tablename\FONTS
	'syntax - PuPlayer.LabelNew <screen# or pDMD>,<Labelname>,<fontName>,<size%>,<colour>,<rotation>,<xAlign>,<yAlign>,<xpos>,<ypos>,<PageNum>,<visible>

	'Page 1 (default score display)
	'PuPlayer.LabelNew<screen# >,<Labelname>	<fontName>,	<size%>,<colour>,	<rotation>,	<xAlign>,	<yAlign>,	<xpos>,	<ypos>,	<PageNum>,	<visible>
	'PuPlayer.LabelNew pBackglass,"Play1",		typefont,	3,		16777215,	0,			0,			1,			8,		71,		1,			0
	'PuPlayer.LabelNew pBackglass,"Play1score",	numberfont,	3,		16777215,	0,			0,			1,			18,		71,		1,			0
	'PuPlayer.LabelNew pBackglass,"Play2",		typefont,	3,		16777215,	0,			0,			1,			8,		75,		1,			0
	'PuPlayer.LabelNew pBackglass,"Play2score",	numberfont,	3,		16777215,	0,			0,			1,			18,		75,		1,			0
	'PuPlayer.LabelNew pBackglass,"Play3",		typefont,	3,		16777215,	0,			0,			1,			8,		79,		1,			0
	'PuPlayer.LabelNew pBackglass,"Play3score",	numberfont,	3,		16777215,	0,			0,			1,			18,		79,		1,			0
	'PuPlayer.LabelNew pBackglass,"Play4",		typefont,	3,		16777215,	0,			0,			1,			8,		83,		1,			0
	'PuPlayer.LabelNew pBackglass,"Play4score",	numberfont,	3,		16777215,	0,			0,			1,			18,		83,		1,			0
	'PuPlayer.LabelNew pBackglass,"curscore",	numberfont,	7,		16777215,	0,			1,			1,			11,		40,		1,			1
	'PuPlayer.LabelNew pBackglass,"hs",			numberfont,	3,		16777215,	0,			1,			1,			15,		91,		1,			1
	'PuPlayer.LabelNew pBackglass,"notetitle",	numberfont,	3,		16777215,	0,			1,			1,			50,		20,		1,			1
	'PuPlayer.LabelNew pBackglass,"notecopy",	typefont,	2,		16777215,	0,			1,			1,			50,		23,		1,			1
	'PuPlayer.LabelNew pBackglass,"titlebg",		zoombgfont,	9,		0  		,	0,			1,			1,			50,		50,		1,			1
	'PuPlayer.LabelNew pBackglass,"title",		zoomfont,	9,		16777215,	0,			1,			1,			50,		50,		1,			1
	'PuPlayer.LabelNew pBackglass,"titlebg2",	zoombgfont,	6,		0  		,	0,			1,			1,			50,		50,		1,			1
	'PuPlayer.LabelNew pBackglass,"title2",		zoomfont,	6,		16777215,	0,			1,			1,			50,		50,		1,			1
	'PuPlayer.LabelNew pBackglass,"Grubs",		numberfont,	8,		16777215,	0,			1,			1,			21.45,	51.3,	1,			1
	'PuPlayer.LabelNew pBackglass,"Credits",		numberfont,	8,		16777215,	0,			1,			1,			21.45,	65	,	1,			1
	'PuPlayer.LabelNew pBackglass,"Ball",		numberfont,	8,		16777215,	0,			1,			1,			12,		51.3,	1,			1
	'PuPlayer.LabelNew pBackglass,"Players",		numberfont,	8,		16777215,	0,			1,			1,			12,		65,		1,			1
	'PuPlayer.LabelNew pBackglass,"highheader",	typefont,	10,		32768,		0,			1,			1,			62,		35,		1,			1
	'PuPlayer.LabelNew pBackglass,"high1name",	typefont,	8,		32768,		0,			1,			1,			55,		45,		1,			1
	'PuPlayer.LabelNew pBackglass,"high1score",	numberfont,	8,		0,			0,			1,			1,			69,		45,		1,			1
	'PuPlayer.LabelNew pBackglass,"high2name",	typefont,	8,		32768,		0,			1,			1,			55,		55,		1,			1
	'PuPlayer.LabelNew pBackglass,"high2score",	numberfont,	8,		0,			0,			1,			1,			69,		55,		1,			1
	'PuPlayer.LabelNew pBackglass,"high3name",	typefont,	8,		32768,		0,			1,			1,			55,		65,		1,			1
	'PuPlayer.LabelNew pBackglass,"high3score",	numberfont,	8,		0,			0,			1,			1,			69,		65,		1,			1
	'PuPlayer.LabelNew pBackglass,"high4name",	typefont,	8,		32768,		0,			1,			1,			55,		75,		1,			1
	'PuPlayer.LabelNew pBackglass,"high4score",	numberfont,	8,		0,			0,			1,			1,			69,		75,		1,			1
	'PuPlayer.LabelNew pBackglass,"HighScore",	typefont,	10,		32768,		0,			0,			1,			62,		35,		1,			1
	'PuPlayer.LabelNew pBackglass,"HighScoreL1",	numberfont,	8,		16777215,	0,			0,			1,			55,		40,		1,			1
	'PuPlayer.LabelNew pBackglass,"HighScoreL2",	numberfont,	8,		16777215,	0,			0,			1,			60,		40,		1,			1
	'PuPlayer.LabelNew pBackglass,"HighScoreL3",	numberfont,	8,		16777215,	0,			0,			1,			65,		40,		1,			1
	'PuPlayer.LabelNew pBackglass,"HighScoreL4",	numberfont,	4,		16777215,	0,			0,			1,			70,		50,		1,			1



	Sub resetbackglass
	Loadhs
	PuPlayer.LabelShowPage pBackglass,1,0,""
	PuPlayer.playlistplayex pBackglass,"scene","layout.png",0,1
	PuPlayer.SetBackground pBackglass,1
	PuPlayer.LabelSet pBackglass,"hs","" & FormatNumber(HighScore(0),0),1,""
	PuPlayer.LabelSet pBackglass,"Grubs",FormatNumber(Grubs(CurrentPlayer),0),1,""
	PuPlayer.LabelSet pBackglass,"Ball",FormatNumber(BallsRemaining(CurrentPlayer),0),1,""
	PuPlayer.LabelSet pBackglass,"Players",FormatNumber(CurrentPlayer,0),1,""
		If bFreePlay then
			PuPlayer.LabelSet pBackglass,"Credits","-",1,""
		else
			PuPlayer.LabelSet pBackglass,"Credits",FormatNumber(Credits,0),1,""
		End If

	End Sub


	Dim titlepos
	titlepos = 0
	titletimer.enabled = 0
	dim title
	title = ""
	dim subtitle
	subtitle = ""

	Sub titletimer_timer
		titlepos = titlepos + 1
		Select Case titlepos
			Case 1
				PuPlayer.LabelSet pBackglass,"title",title,1,"{'mt':2,'color':2565927, 'size': 0, 'xpos': 50, 'xalign': 1, 'ypos': 36, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"titlebg",title,1,"{'mt':2,'color':0, 'size': 0, 'xpos': 50, 'xalign': 1, 'ypos': 36, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"title2",subtitle,1,"{'mt':2,'color':2565927, 'size': 0, 'xpos': 50, 'xalign': 1, 'ypos': 45, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"titlebg2",subtitle,1,"{'mt':2,'color':0, 'size': 0, 'xpos': 50, 'xalign': 1, 'ypos': 45, 'yalign': 0}"
			Case 2
				PuPlayer.LabelSet pBackglass,"title",title,1,"{'mt':2,'color':5066061, 'size': 0.6, 'xpos': 50, 'xalign': 1, 'ypos': 36, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"titlebg",title,1,"{'mt':2,'color':0, 'size': 0.6, 'xpos': 50, 'xalign': 1, 'ypos': 36, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"title2",subtitle,1,"{'mt':2,'color':5066061, 'size': 0.4, 'xpos': 50, 'xalign': 1, 'ypos': 45, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"titlebg2",subtitle,1,"{'mt':2,'color':0, 'size': 0.4, 'xpos': 50, 'xalign': 1, 'ypos': 45, 'yalign': 0}"
			Case 3
				PuPlayer.LabelSet pBackglass,"title",title,1,"{'mt':2,'color':7960953, 'size': 1.2, 'xpos': 50, 'xalign': 1, 'ypos': 36, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"titlebg",title,1,"{'mt':2,'color':0, 'size': 1.2, 'xpos': 50, 'xalign': 1, 'ypos': 36, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"title2",subtitle,1,"{'mt':2,'color':7960953, 'size': 0.8, 'xpos': 50, 'xalign': 1, 'ypos': 45, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"titlebg2",subtitle,1,"{'mt':2,'color':0, 'size': 0.8, 'xpos': 50, 'xalign': 1, 'ypos': 45, 'yalign': 0}"
			Case 4
				PuPlayer.LabelSet pBackglass,"title",title,1,"{'mt':2,'color':9671571, 'size': 1.8, 'xpos': 50, 'xalign': 1, 'ypos': 36, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"titlebg",title,1,"{'mt':2,'color':0, 'size': 1.8, 'xpos': 50, 'xalign': 1, 'ypos': 36, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"title2",subtitle,1,"{'mt':2,'color':9671571, 'size': 1.2, 'xpos': 50, 'xalign': 1, 'ypos': 45, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"titlebg2",subtitle,1,"{'mt':2,'color':0, 'size': 1.2, 'xpos': 50, 'xalign': 1, 'ypos': 45, 'yalign': 0}"
			Case 5
				PuPlayer.LabelSet pBackglass,"title",title,1,"{'mt':2,'color':11842740, 'size': 2.4, 'xpos': 50, 'xalign': 1, 'ypos': 36, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"titlebg",title,1,"{'mt':2,'color':0, 'size': 2.4, 'xpos': 50, 'xalign': 1, 'ypos': 36, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"title2",subtitle,1,"{'mt':2,'color':11842740, 'size': 1.6, 'xpos': 50, 'xalign': 1, 'ypos': 45, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"titlebg2",subtitle,1,"{'mt':2,'color':0, 'size': 1.6, 'xpos': 50, 'xalign': 1, 'ypos': 45, 'yalign': 0}"
			Case 6
				PuPlayer.LabelSet pBackglass,"title",title,1,"{'mt':2,'color':13224393, 'size': 3, 'xpos': 50, 'xalign': 1, 'ypos': 36, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"titlebg",title,1,"{'mt':2,'color':0, 'size': 3, 'xpos': 50, 'xalign': 1, 'ypos': 36, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"title2",subtitle,1,"{'mt':2,'color':13224393, 'size': 2, 'xpos': 50, 'xalign': 1, 'ypos': 45, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"titlebg2",subtitle,1,"{'mt':2,'color':0, 'size': 2, 'xpos': 50, 'xalign': 1, 'ypos': 45, 'yalign': 0}"
			Case 7
				PuPlayer.LabelSet pBackglass,"title",title,1,"{'mt':2,'color':14671839, 'size': 3.6, 'xpos': 50, 'xalign': 1, 'ypos': 36, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"titlebg",title,1,"{'mt':2,'color':0, 'size': 3.6, 'xpos': 50, 'xalign': 1, 'ypos': 36, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"title2",subtitle,1,"{'mt':2,'color':14671839, 'size': 2.4, 'xpos': 50, 'xalign': 1, 'ypos': 45, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"titlebg2",subtitle,1,"{'mt':2,'color':0, 'size': 2.4, 'xpos': 50, 'xalign': 1, 'ypos': 45, 'yalign': 0}"
			Case 8
				PuPlayer.LabelSet pBackglass,"title",title,1,"{'mt':2,'color':15790320, 'size': 4.2, 'xpos': 50, 'xalign': 1, 'ypos': 36, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"titlebg",title,1,"{'mt':2,'color':0, 'size': 4.2, 'xpos': 50, 'xalign': 1, 'ypos': 36, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"title2",subtitle,1,"{'mt':2,'color':15790320, 'size': 2.8, 'xpos': 50, 'xalign': 1, 'ypos': 45, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"titlebg2",subtitle,1,"{'mt':2,'color':0, 'size': 2.8, 'xpos': 50, 'xalign': 1, 'ypos': 45, 'yalign': 0}"
			Case 9
				PuPlayer.LabelSet pBackglass,"title",title,1,"{'mt':2,'color':16316664, 'size': 4.8, 'xpos': 50, 'xalign': 1, 'ypos': 36, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"titlebg",title,1,"{'mt':2,'color':0, 'size': 4.8, 'xpos': 50, 'xalign': 1, 'ypos': 36, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"title2",subtitle,1,"{'mt':2,'color':16316664, 'size': 3.2, 'xpos': 50, 'xalign': 1, 'ypos': 45, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"titlebg2",subtitle,1,"{'mt':2,'color':0, 'size': 3.2, 'xpos': 50, 'xalign': 1, 'ypos': 45, 'yalign': 0}"
			Case 10
				PuPlayer.LabelSet pBackglass,"title",title,1,"{'mt':2,'color':16777215, 'size': 5.4, 'xpos': 50, 'xalign': 1, 'ypos': 36, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"titlebg",title,1,"{'mt':2,'color':0, 'size': 5.4, 'xpos': 50, 'xalign': 1, 'ypos': 36, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"title2",subtitle,1,"{'mt':2,'color':16777215, 'size': 3.6, 'xpos': 50, 'xalign': 1, 'ypos': 45, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"titlebg2",subtitle,1,"{'mt':2,'color':0, 'size': 3.6, 'xpos': 50, 'xalign': 1, 'ypos': 45, 'yalign': 0}"
			Case 11
				PuPlayer.LabelSet pBackglass,"title",title,1,"{'mt':2,'color':16777215, 'size': 6, 'xpos': 50, 'xalign': 1, 'ypos': 36, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"titlebg",title,1,"{'mt':2,'color':0, 'size': 6, 'xpos': 50, 'xalign': 1, 'ypos': 36, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"title2",subtitle,1,"{'mt':2,'color':16777215, 'size': 4, 'xpos': 50, 'xalign': 1, 'ypos': 45, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"titlebg2",subtitle,1,"{'mt':2,'color':0, 'size': 4, 'xpos': 50, 'xalign': 1, 'ypos': 45, 'yalign': 0}"
			Case 150
				PuPlayer.LabelSet pBackglass,"title","",1,"{'mt':2,'color':16777215, 'size': 6, 'xpos': 50, 'xalign': 1, 'ypos': 36, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"titlebg","",1,"{'mt':2,'color':0, 'size': 6, 'xpos': 50, 'xalign': 1, 'ypos': 36, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"title2","",1,"{'mt':2,'color':16777215, 'size': 4, 'xpos': 50, 'xalign': 1, 'ypos': 45, 'yalign': 0}"
				PuPlayer.LabelSet pBackglass,"titlebg2","",1,"{'mt':2,'color':0, 'size': 4, 'xpos': 50, 'xalign': 1, 'ypos': 45, 'yalign': 0}"
				titlepos = 0
				titletimer.enabled = 0
		End Select
	End Sub

	
	Sub pNote(msgText,msg2text)
		title = msgText
		subtitle = msg2text
		If titlepos = 0 Then
			'titletimer.enabled = 1
		Else
			titlepos = 0
			titletimer.enabled = 1
			PuPlayer.LabelSet pBackglass,"title","",1,"{'mt':2,'color':16777215, 'size': 6, 'xpos': 50, 'xalign': 1, 'ypos': 36, 'yalign': 0}"
			PuPlayer.LabelSet pBackglass,"titlebg","",1,"{'mt':2,'color':0, 'size': 6, 'xpos': 50, 'xalign': 1, 'ypos': 36, 'yalign': 0}"
			PuPlayer.LabelSet pBackglass,"title2","",1,"{'mt':2,'color':16777215, 'size': 4, 'xpos': 50, 'xalign': 1, 'ypos': 45, 'yalign': 0}"
			PuPlayer.LabelSet pBackglass,"titlebg2","",1,"{'mt':2,'color':0, 'size': 4, 'xpos': 50, 'xalign': 1, 'ypos': 45, 'yalign': 0}"
		End If
	End Sub


Sub pHakunaMatata
		PuPlayer.LabelShowPage pBackglass,1,0,""
		PuPlayer.LabelSet pFX1, "PupFX", "",0,""
		PuPlayer.LabelSet pFX1, "PupFX", "",0,""
		PuPlayer.playlistplayex pFX1,"PupFX","H_H.png",100,4:
		PuPlayer.playlistplayex pFX2,"PupFX","M_M.png",100,4:
End Sub

	Sub currentplayerbackglass

	End Sub


	Sub pUpdateScores
		PuPlayer.LabelSet pBackglass,"curscore",FormatNumber(Score(CurrentPlayer),0),1,""
		PuPlayer.LabelSet pBackglass,"Grubs",FormatNumber(Grubs(CurrentPlayer) - 1,0),1,""
		PuPlayer.LabelSet pBackglass,"Players","" & CurrentPlayer,1,""
		'PuPlayer.LabelSet pBackglass,"curplayer","Player " & CurrentPlayer,1,""
		If CurrentPlayer = 1 Then
			PuPlayer.LabelSet pBackglass,"Play1score","" & FormatNumber(Score(CurrentPlayer),0),1,"{'mt':2,'color':16777215, 'size': 2.4 }"
			PuPlayer.LabelSet pBackglass,"Play1","Player 1",1,"{'mt':2,'color':16777215 }"
			'make other scores red (inactive)
			If PlayersPlayingGame = 2 Then
				PuPlayer.LabelSet pBackglass,"Play2score","" & FormatNumber(Score(2),0),1,"{'mt':2,'color':8421504, 'size': 2.4 }"
				PuPlayer.LabelSet pBackglass,"Play2","Player 2",1,"{'mt':2,'color':8421504}"
			End If
			If PlayersPlayingGame = 3 Then
				PuPlayer.LabelSet pBackglass,"Play2score","" & FormatNumber(Score(2),0),1,"{'mt':2,'color':8421504, 'size': 2.4 }"
				PuPlayer.LabelSet pBackglass,"Play2","Player 2",1,"{'mt':2,'color':8421504}"
				PuPlayer.LabelSet pBackglass,"Play3score","" & FormatNumber(Score(3),0),1,"{'mt':2,'color':8421504, 'size': 2.4 }"
				PuPlayer.LabelSet pBackglass,"Play3","Player 3",1,"{'mt':2,'color':8421504}"
			End If
			If PlayersPlayingGame = 4 Then
				PuPlayer.LabelSet pBackglass,"Play2score","" & FormatNumber(Score(2),0),1,"{'mt':2,'color':8421504, 'size': 2.4 }"
				PuPlayer.LabelSet pBackglass,"Play2","Player 2",1,"{'mt':2,'color':8421504}"
				PuPlayer.LabelSet pBackglass,"Play3score","" & FormatNumber(Score(3),0),1,"{'mt':2,'color':8421504, 'size': 2.4 }"
				PuPlayer.LabelSet pBackglass,"Play3","Player 3",1,"{'mt':2,'color':8421504}"
				PuPlayer.LabelSet pBackglass,"Play4score","" & FormatNumber(Score(4),0),1,"{'mt':2,'color':8421504, 'size': 2.4 }"
				PuPlayer.LabelSet pBackglass,"Play4","Player 4",1,"{'mt':2,'color':8421504}"
			End If
		End If
		If CurrentPlayer = 2 Then
			PuPlayer.LabelSet pBackglass,"Play2score","" & FormatNumber(Score(CurrentPlayer),0),1,"{'mt':2,'color':16777215, 'size': 2.4 }"
			PuPlayer.LabelSet pBackglass,"Play2","Player 2",1,"{'mt':2,'color':16777215 }"
			If PlayersPlayingGame = 2 Then
				PuPlayer.LabelSet pBackglass,"Play1score","" & FormatNumber(Score(1),0),1,"{'mt':2,'color':8421504, 'size': 2.4 }"
				PuPlayer.LabelSet pBackglass,"Play1","Player 1",1,"{'mt':2,'color':8421504}"
			End If
			If PlayersPlayingGame = 3 Then
				PuPlayer.LabelSet pBackglass,"Play1score","" & FormatNumber(Score(1),0),1,"{'mt':2,'color':8421504, 'size': 2.4 }"
				PuPlayer.LabelSet pBackglass,"Play1","Player 1",1,"{'mt':2,'color':8421504}"
				PuPlayer.LabelSet pBackglass,"Play3score","" & FormatNumber(Score(3),0),1,"{'mt':2,'color':8421504, 'size': 2.4 }"
				PuPlayer.LabelSet pBackglass,"Play3","Player 3",1,"{'mt':2,'color':8421504}"
			End If
			If PlayersPlayingGame = 4 Then
				PuPlayer.LabelSet pBackglass,"Play1score","" & FormatNumber(Score(1),0),1,"{'mt':2,'color':8421504, 'size': 2.4 }"
				PuPlayer.LabelSet pBackglass,"Play1","Player 1",1,"{'mt':2,'color':8421504}"
				PuPlayer.LabelSet pBackglass,"Play3score","" & FormatNumber(Score(3),0),1,"{'mt':2,'color':8421504, 'size': 2.4 }"
				PuPlayer.LabelSet pBackglass,"Play3","Player 3",1,"{'mt':2,'color':8421504}"
				PuPlayer.LabelSet pBackglass,"Play4score","" & FormatNumber(Score(4),0),1,"{'mt':2,'color':8421504, 'size': 2.4 }"
				PuPlayer.LabelSet pBackglass,"Play4","Player 4",1,"{'mt':2,'color':8421504}"
			End If
		End If
		If CurrentPlayer = 3 Then
			PuPlayer.LabelSet pBackglass,"Play3score","" & FormatNumber(Score(CurrentPlayer),0),1,"{'mt':2,'color':16777215, 'size': 2.4 }"
			PuPlayer.LabelSet pBackglass,"Play3","Player 3",1,"{'mt':2,'color':16777215 }"
			If PlayersPlayingGame = 3 Then
				PuPlayer.LabelSet pBackglass,"Play1score","" & FormatNumber(Score(1),0),1,"{'mt':2,'color':8421504, 'size': 2.4 }"
				PuPlayer.LabelSet pBackglass,"Play1","Player 1",1,"{'mt':2,'color':8421504}"
				PuPlayer.LabelSet pBackglass,"Play2score","" & FormatNumber(Score(2),0),1,"{'mt':2,'color':8421504, 'size': 2.4 }"
				PuPlayer.LabelSet pBackglass,"Play2","Player 2",1,"{'mt':2,'color':8421504}"
			End If
			If PlayersPlayingGame = 4 Then
				PuPlayer.LabelSet pBackglass,"Play1score","" & FormatNumber(Score(1),0),1,"{'mt':2,'color':8421504, 'size': 2.4 }"
				PuPlayer.LabelSet pBackglass,"Play1","Player 1",1,"{'mt':2,'color':8421504}"
				PuPlayer.LabelSet pBackglass,"Play2score","" & FormatNumber(Score(2),0),1,"{'mt':2,'color':8421504, 'size': 2.4 }"
				PuPlayer.LabelSet pBackglass,"Play2","Player 2",1,"{'mt':2,'color':8421504}"
				PuPlayer.LabelSet pBackglass,"Play4score","" & FormatNumber(Score(4),0),1,"{'mt':2,'color':8421504, 'size': 2.4 }"
				PuPlayer.LabelSet pBackglass,"Play4","Player 4",1,"{'mt':2,'color':8421504}"
			End If
		End If
		If CurrentPlayer = 4 Then
			PuPlayer.LabelSet pBackglass,"Play4score","" & FormatNumber(Score(CurrentPlayer),0),1,"{'mt':2,'color':16777215, 'size': 2.4 }"
			PuPlayer.LabelSet pBackglass,"Play4","Player 4",1,"{'mt':2,'color':16777215 }"
			If PlayersPlayingGame = 4 Then
				PuPlayer.LabelSet pBackglass,"Play1score","" & FormatNumber(Score(1),0),1,"{'mt':2,'color':8421504, 'size': 2.4 }"
				PuPlayer.LabelSet pBackglass,"Play1","Player 1",1,"{'mt':2,'color':8421504}"
				PuPlayer.LabelSet pBackglass,"Play2score","" & FormatNumber(Score(2),0),1,"{'mt':2,'color':8421504, 'size': 2.4 }"
				PuPlayer.LabelSet pBackglass,"Play2","Player 2",1,"{'mt':2,'color':8421504}"
				PuPlayer.LabelSet pBackglass,"Play3score","" & FormatNumber(Score(3),0),1,"{'mt':2,'color':8421504, 'size': 2.4 }"
				PuPlayer.LabelSet pBackglass,"Play3","Player 3",1,"{'mt':2,'color':8421504}"
			End If
		End If
	PuPlayer.LabelSet pBackglass,"Ball",""  &  bpgcurrent - BallsRemaining(CurrentPlayer) + 1 ,1,""
	end Sub


'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  High Scores
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  

	' load em up

	'high score clearing
	If resetScores = True Then
		If areYouSure = "i am serious" Then
			SaveValue TableName, "HighScore1", 500000
			SaveValue TableName, "HighScore1Name", "SBW"
			SaveValue TableName, "HighScore2", 300000
			SaveValue TableName, "HighScore2Name", "SBW"
			SaveValue TableName, "HighScore3", 100000
			SaveValue TableName, "HighScore3Name", "SBW"
			SaveValue TableName, "HighScore4", 100000
			SaveValue TableName, "HighScore4Name", "SBW"
		end If
	end if


	Dim hschecker:hschecker = 0

	Sub Loadhs
		Dim x
		x = LoadValue(TableName, "HighScore1")
		If(x <> "") Then HighScore(0) = CDbl(x) Else HighScore(0) = 500000 End If

		x = LoadValue(TableName, "HighScore1Name")
		If(x <> "") Then HighScoreName(0) = x Else HighScoreName(0) = "SBW" End If

		x = LoadValue(TableName, "HighScore2")
		If(x <> "") then HighScore(1) = CDbl(x) Else HighScore(1) = 300000 End If

		x = LoadValue(TableName, "HighScore2Name")
		If(x <> "") then HighScoreName(1) = x Else HighScoreName(1) = "JPS" End If

		x = LoadValue(TableName, "HighScore3")
		If(x <> "") then HighScore(2) = CDbl(x) Else HighScore(2) = 100000 End If

		x = LoadValue(TableName, "HighScore3Name")
		If(x <> "") then HighScoreName(2) = x Else HighScoreName(2) = "011" End If

		x = LoadValue(TableName, "HighScore4")
		If(x <> "") then HighScore(3) = CDbl(x) Else HighScore(3) = 100000 End If

		x = LoadValue(TableName, "Credits")
		If(x <> "") then Credits = CInt(x) Else Credits = 0 End If

		x = LoadValue(TableName, "TotalGamesPlayed")
		If(x <> "") then TotalGamesPlayed = CInt(x) Else TotalGamesPlayed = 0 End If

		If hschecker = 0 Then
		checkorder
		End If
	End Sub

	Dim hs3,hs2,hs1,hs0,hsn3,hsn2,hsn1,hsn0


	Sub checkorder
		hschecker = 1
		hs3 = HighScore(3)
		hs2 = HighScore(2)
		hs1 = HighScore(1)
		hs0 = HighScore(0)
		hsn3 = HighScoreName(3)
		hsn2 = HighScoreName(2)
		hsn1 = HighScoreName(1)
		hsn0 = HighScoreName(0)
		If hs3 > hs0 Then
			HighScore(0) = hs3
			HighScoreName(0) = hsn3	
			HighScore(1) = hs0
			HighScoreName(1) = hsn0	
			HighScore(2) = hs1
			HighScoreName(2) = hsn1	
			HighScore(3) = hs2
			HighScoreName(3) = hsn2

		ElseIf hs3 > hs1 Then
			HighScore(0) = hs0
			HighScoreName(0) = hsn0	
			HighScore(1) = hs3
			HighScoreName(1) = hsn3	
			HighScore(2) = hs1
			HighScoreName(2) = hsn1	
			HighScore(3) = hs2
			HighScoreName(3) = hsn2
		ElseIf hs3 > hs2 Then
			HighScore(0) = hs0
			HighScoreName(0) = hsn0	
			HighScore(1) = hs1
			HighScoreName(1) = hsn1	
			HighScore(2) = hs3
			HighScoreName(2) = hsn3	
			HighScore(3) = hs2
			HighScoreName(3) = hsn2
		ElseIf hs3 < hs2 Then
			HighScore(0) = hs0
			HighScoreName(0) = hsn0	
			HighScore(1) = hs1
			HighScoreName(1) = hsn1	
			HighScore(2) = hs2
			HighScoreName(2) = hsn2	
			HighScore(3) = hs3
			HighScoreName(3) = hsn3
		End If

		savehs
	End Sub


	Sub Savehs
		SaveValue TableName, "HighScore1", HighScore(0)
		SaveValue TableName, "HighScore1Name", HighScoreName(0)
		SaveValue TableName, "HighScore2", HighScore(1)
		SaveValue TableName, "HighScore2Name", HighScoreName(1)
		SaveValue TableName, "HighScore3", HighScore(2)
		SaveValue TableName, "HighScore3Name", HighScoreName(2)
		SaveValue TableName, "HighScore4", HighScore(3)
		SaveValue TableName, "HighScore4Name", HighScoreName(3)
	End Sub


	Sub Savegp
		SaveValue TableName, "TotalGamesPlayed", TotalGamesPlayed
		vpmtimer.addtimer 1000, "Loadhs'"
	End Sub


	' Initials

	Dim hsbModeActive:hsbModeActive = False
	Dim hsEnteredName
	Dim hsEnteredDigits(3)
	Dim hsCurrentDigit
	Dim hsValidLetters
	Dim hsCurrentLetter
	Dim hsLetterFlash

	' Check the scores to see if you got one

'	Sub CheckHighscore()
'		Dim tmp
'		tmp = Score(CurrentPlayer)
'
'		If tmp > HighScore(3) Then
'			AwardSpecial
'			vpmtimer.addtimer 2000, "PlaySound ""vo_contratulationsgreatscore"" '"
'			HighScore(3) = tmp
'			'enter player's name
'			'HighScoreEntryInit()
'			DOF 403, DOFPulse   'DOF MX - Hi Score
'		Else
'			EndOfBallComplete
'		End If
'	End Sub





	Sub HighScoreEntryInit()
		hsbModeActive = True
		PlaySound "vo_enteryourinitials"

		hsEnteredDigits(1) = "A"
		hsEnteredDigits(2) = " "
		hsEnteredDigits(3) = " "

		hsCurrentDigit = 1


		ID=39:FX():ScoreID=39:ScoreAmount
		'chilloutthemusic
		'PuPlayer.playlistplayex pBackglass,"videohighscore","hs1.mov",100,7
		'PuPlayer.SetLoop 2,1
		Playsound "bellhs"
		HighScoreDisplayName()
		HighScorelabels	
	End Sub

	' flipper moving around the letters

	Sub EnterHighScoreKey(keycode)
		If keycode = LeftFlipperKey Then
			Playsound "fx_Previous"
				If hsletter = 0 Then
					hsletter = 26
				Else
					hsLetter = hsLetter - 1
				End If
				HighScoreDisplayName()
		End If

		If keycode = RightFlipperKey Then
			Playsound "fx_Next"
				If hsletter = 26 Then
					hsletter = 0
				Else
					hsLetter = hsLetter + 1
				End If
				HighScoreDisplayName()
		End If

		If keycode = StartGameKey or keycode = PlungerKey Then
			soundStartButton()
				If hsCurrentDigit = 3 Then
					If hsletter = 0 Then
						hsCurrentDigit = hsCurrentDigit -1
					Else
						assignletter
						vpmtimer.addtimer 700, "HighScoreCommitName()'"
						'PuPlayer.playlistplayex pBackglass,"videobarb","clear.mov",100,7
					End If
				End If
				If hsCurrentDigit < 3 Then
					If hsletter = 0 Then
						If hsCurrentDigit = 1 Then
						Else
							hsCurrentDigit = hsCurrentDigit -1
						End If
					Else
						assignletter
						hsCurrentDigit = hsCurrentDigit + 1
						HighScoreDisplayName()

					End If
				End If
		End if
	End Sub

	Dim hsletter
	hsletter = 1

	dim hsdigit:hsdigit = 1

	Sub assignletter
		if hscurrentdigit = 1 Then
			hsdigit = 1
		End If
		if hscurrentdigit = 2 Then
			hsdigit = 2
		End If
		if hscurrentdigit = 3 Then
			hsdigit = 3
		End If
		If hsletter = 1 Then 
			hsEnteredDigits(hsdigit) = "A"
		End If
		If hsletter = 2 Then 
			hsEnteredDigits(hsdigit) = "B"
		End If
		If hsletter = 3 Then 
			hsEnteredDigits(hsdigit) = "C"
		End If
		If hsletter = 4 Then 
			hsEnteredDigits(hsdigit) = "D"
		End If
		If hsletter = 5 Then 
			hsEnteredDigits(hsdigit) = "E"
		End If
		If hsletter = 6 Then 
			hsEnteredDigits(hsdigit) = "F"
		End If
		If hsletter = 7 Then 
			hsEnteredDigits(hsdigit) = "G"
		End If
		If hsletter = 8 Then 
			hsEnteredDigits(hsdigit) = "H"
		End If
		If hsletter = 9 Then 
			hsEnteredDigits(hsdigit) = "I"
		End If
		If hsletter = 10 Then 
			hsEnteredDigits(hsdigit) = "J"
		End If
		If hsletter = 11 Then 
			hsEnteredDigits(hsdigit) = "K"
		End If
		If hsletter = 12 Then 
			hsEnteredDigits(hsdigit) = "L"
		End If
		If hsletter = 13 Then 
			hsEnteredDigits(hsdigit) = "M"
		End If
		If hsletter = 14 Then 
			hsEnteredDigits(hsdigit) = "N"
		End If
		If hsletter = 15 Then 
			hsEnteredDigits(hsdigit) = "O"
		End If
		If hsletter = 16 Then 
			hsEnteredDigits(hsdigit) = "P"
		End If
		If hsletter = 17 Then 
			hsEnteredDigits(hsdigit) = "Q"
		End If
		If hsletter = 18 Then 
			hsEnteredDigits(hsdigit) = "R"
		End If
		If hsletter = 19 Then 
			hsEnteredDigits(hsdigit) = "S"
		End If
		If hsletter = 20 Then 
			hsEnteredDigits(hsdigit) = "T"
		End If
		If hsletter = 21 Then 
			hsEnteredDigits(hsdigit) = "U"
		End If
		If hsletter = 22 Then 
			hsEnteredDigits(hsdigit) = "V"
		End If
		If hsletter = 23 Then 
			hsEnteredDigits(hsdigit) = "W"
		End If
		If hsletter = 24 Then 
			hsEnteredDigits(hsdigit) = "X"
		End If
		If hsletter = 25 Then 
			hsEnteredDigits(hsdigit) = "Y"
		End If
		If hsletter = 26 Then 
			hsEnteredDigits(hsdigit) = "Z"
		End If

	End Sub

	Sub HighScorelabels
		PuPlayer.playlistplayex pBackglass,"Backglass","FullDMD.png",100,1
		PuPlayer.LabelSet pBackglass,"HighScore","YOU GOT A\rHIGH SCORE!",1,""
		PuPlayer.LabelSet pBackglass,"HighScoreL1","A",1,""
		PuPlayer.LabelSet pBackglass,"HighScoreL2"," ",1,""
		PuPlayer.LabelSet pBackglass,"HighScoreL3"," ",1,""
		PuPlayer.LabelSet pBackglass,"HighScoreL4",Score(CurrentPlayer),1,""
		hsletter = 1
	End Sub

	Sub HighScoreDisplayName()

		Select case hsLetter
		Case 0
			if(hsCurrentDigit = 1) then PuPlayer.LabelSet pBackglass,"HighScoreL1","<",1,""
			if(hsCurrentDigit = 2) then PuPlayer.LabelSet pBackglass,"HighScoreL2","<",1,""
			if(hsCurrentDigit = 3) then PuPlayer.LabelSet pBackglass,"HighScoreL3","<",1,""
		Case 1
			if(hsCurrentDigit = 1) then PuPlayer.LabelSet pBackglass,"HighScoreL1","A",1,""
			if(hsCurrentDigit = 2) then PuPlayer.LabelSet pBackglass,"HighScoreL2","A",1,""
			if(hsCurrentDigit = 3) then PuPlayer.LabelSet pBackglass,"HighScoreL3","A",1,""
		Case 2
			if(hsCurrentDigit = 1) then PuPlayer.LabelSet pBackglass,"HighScoreL1","B",1,""
			if(hsCurrentDigit = 2) then PuPlayer.LabelSet pBackglass,"HighScoreL2","B",1,""
			if(hsCurrentDigit = 3) then PuPlayer.LabelSet pBackglass,"HighScoreL3","B",1,""
		Case 3
			if(hsCurrentDigit = 1) then PuPlayer.LabelSet pBackglass,"HighScoreL1","C",1,""
			if(hsCurrentDigit = 2) then PuPlayer.LabelSet pBackglass,"HighScoreL2","C",1,""
			if(hsCurrentDigit = 3) then PuPlayer.LabelSet pBackglass,"HighScoreL3","C",1,""
		Case 4
			if(hsCurrentDigit = 1) then PuPlayer.LabelSet pBackglass,"HighScoreL1","D",1,""
			if(hsCurrentDigit = 2) then PuPlayer.LabelSet pBackglass,"HighScoreL2","D",1,""
			if(hsCurrentDigit = 3) then PuPlayer.LabelSet pBackglass,"HighScoreL3","D",1,""
		Case 5
			if(hsCurrentDigit = 1) then PuPlayer.LabelSet pBackglass,"HighScoreL1","E",1,""
			if(hsCurrentDigit = 2) then PuPlayer.LabelSet pBackglass,"HighScoreL2","E",1,""
			if(hsCurrentDigit = 3) then PuPlayer.LabelSet pBackglass,"HighScoreL3","E",1,""
		Case 6
			if(hsCurrentDigit = 1) then PuPlayer.LabelSet pBackglass,"HighScoreL1","F",1,""
			if(hsCurrentDigit = 2) then PuPlayer.LabelSet pBackglass,"HighScoreL2","F",1,""
			if(hsCurrentDigit = 3) then PuPlayer.LabelSet pBackglass,"HighScoreL3","F",1,""
		Case 7
			if(hsCurrentDigit = 1) then PuPlayer.LabelSet pBackglass,"HighScoreL1","G",1,""
			if(hsCurrentDigit = 2) then PuPlayer.LabelSet pBackglass,"HighScoreL2","G",1,""
			if(hsCurrentDigit = 3) then PuPlayer.LabelSet pBackglass,"HighScoreL3","G",1,""
		Case 8
			if(hsCurrentDigit = 1) then PuPlayer.LabelSet pBackglass,"HighScoreL1","H",1,""
			if(hsCurrentDigit = 2) then PuPlayer.LabelSet pBackglass,"HighScoreL2","H",1,""
			if(hsCurrentDigit = 3) then PuPlayer.LabelSet pBackglass,"HighScoreL3","H",1,""
		Case 9
			if(hsCurrentDigit = 1) then PuPlayer.LabelSet pBackglass,"HighScoreL1","I",1,""
			if(hsCurrentDigit = 2) then PuPlayer.LabelSet pBackglass,"HighScoreL2","I",1,""
			if(hsCurrentDigit = 3) then PuPlayer.LabelSet pBackglass,"HighScoreL3","I",1,""
		Case 10
			if(hsCurrentDigit = 1) then PuPlayer.LabelSet pBackglass,"HighScoreL1","J",1,""
			if(hsCurrentDigit = 2) then PuPlayer.LabelSet pBackglass,"HighScoreL2","J",1,""
			if(hsCurrentDigit = 3) then PuPlayer.LabelSet pBackglass,"HighScoreL3","J",1,""
		Case 11
			if(hsCurrentDigit = 1) then PuPlayer.LabelSet pBackglass,"HighScoreL1","K",1,""
			if(hsCurrentDigit = 2) then PuPlayer.LabelSet pBackglass,"HighScoreL2","K",1,""
			if(hsCurrentDigit = 3) then PuPlayer.LabelSet pBackglass,"HighScoreL3","K",1,""
		Case 12
			if(hsCurrentDigit = 1) then PuPlayer.LabelSet pBackglass,"HighScoreL1","L",1,""
			if(hsCurrentDigit = 2) then PuPlayer.LabelSet pBackglass,"HighScoreL2","L",1,""
			if(hsCurrentDigit = 3) then PuPlayer.LabelSet pBackglass,"HighScoreL3","L",1,""
		Case 13
			if(hsCurrentDigit = 1) then PuPlayer.LabelSet pBackglass,"HighScoreL1","M",1,""
			if(hsCurrentDigit = 2) then PuPlayer.LabelSet pBackglass,"HighScoreL2","M",1,""
			if(hsCurrentDigit = 3) then PuPlayer.LabelSet pBackglass,"HighScoreL3","M",1,""
		Case 14
			if(hsCurrentDigit = 1) then PuPlayer.LabelSet pBackglass,"HighScoreL1","N",1,""
			if(hsCurrentDigit = 2) then PuPlayer.LabelSet pBackglass,"HighScoreL2","N",1,""
			if(hsCurrentDigit = 3) then PuPlayer.LabelSet pBackglass,"HighScoreL3","N",1,""
		Case 15
			if(hsCurrentDigit = 1) then PuPlayer.LabelSet pBackglass,"HighScoreL1","O",1,""
			if(hsCurrentDigit = 2) then PuPlayer.LabelSet pBackglass,"HighScoreL2","O",1,""
			if(hsCurrentDigit = 3) then PuPlayer.LabelSet pBackglass,"HighScoreL3","O",1,""
		Case 16
			if(hsCurrentDigit = 1) then PuPlayer.LabelSet pBackglass,"HighScoreL1","P",1,""
			if(hsCurrentDigit = 2) then PuPlayer.LabelSet pBackglass,"HighScoreL2","P",1,""
			if(hsCurrentDigit = 3) then PuPlayer.LabelSet pBackglass,"HighScoreL3","P",1,""
		Case 17
			if(hsCurrentDigit = 1) then PuPlayer.LabelSet pBackglass,"HighScoreL1","Q",1,""
			if(hsCurrentDigit = 2) then PuPlayer.LabelSet pBackglass,"HighScoreL2","Q",1,""
			if(hsCurrentDigit = 3) then PuPlayer.LabelSet pBackglass,"HighScoreL3","Q",1,""
		Case 18
			if(hsCurrentDigit = 1) then PuPlayer.LabelSet pBackglass,"HighScoreL1","R",1,""
			if(hsCurrentDigit = 2) then PuPlayer.LabelSet pBackglass,"HighScoreL2","R",1,""
			if(hsCurrentDigit = 3) then PuPlayer.LabelSet pBackglass,"HighScoreL3","R",1,""
		Case 19
			if(hsCurrentDigit = 1) then PuPlayer.LabelSet pBackglass,"HighScoreL1","S",1,""
			if(hsCurrentDigit = 2) then PuPlayer.LabelSet pBackglass,"HighScoreL2","S",1,""
			if(hsCurrentDigit = 3) then PuPlayer.LabelSet pBackglass,"HighScoreL3","S",1,""
		Case 20
			if(hsCurrentDigit = 1) then PuPlayer.LabelSet pBackglass,"HighScoreL1","T",1,""
			if(hsCurrentDigit = 2) then PuPlayer.LabelSet pBackglass,"HighScoreL2","T",1,""
			if(hsCurrentDigit = 3) then PuPlayer.LabelSet pBackglass,"HighScoreL3","T",1,""
		Case 21
			if(hsCurrentDigit = 1) then PuPlayer.LabelSet pBackglass,"HighScoreL1","U",1,""
			if(hsCurrentDigit = 2) then PuPlayer.LabelSet pBackglass,"HighScoreL2","U",1,""
			if(hsCurrentDigit = 3) then PuPlayer.LabelSet pBackglass,"HighScoreL3","U",1,""
		Case 22
			if(hsCurrentDigit = 1) then PuPlayer.LabelSet pBackglass,"HighScoreL1","V",1,""
			if(hsCurrentDigit = 2) then PuPlayer.LabelSet pBackglass,"HighScoreL2","V",1,""
			if(hsCurrentDigit = 3) then PuPlayer.LabelSet pBackglass,"HighScoreL3","V",1,""
		Case 23
			if(hsCurrentDigit = 1) then PuPlayer.LabelSet pBackglass,"HighScoreL1","W",1,""
			if(hsCurrentDigit = 2) then PuPlayer.LabelSet pBackglass,"HighScoreL2","W",1,""
			if(hsCurrentDigit = 3) then PuPlayer.LabelSet pBackglass,"HighScoreL3","W",1,""
		Case 24
			if(hsCurrentDigit = 1) then PuPlayer.LabelSet pBackglass,"HighScoreL1","X",1,""
			if(hsCurrentDigit = 2) then PuPlayer.LabelSet pBackglass,"HighScoreL2","X",1,""
			if(hsCurrentDigit = 3) then PuPlayer.LabelSet pBackglass,"HighScoreL3","X",1,""
		Case 25
			if(hsCurrentDigit = 1) then PuPlayer.LabelSet pBackglass,"HighScoreL1","Y",1,""
			if(hsCurrentDigit = 2) then PuPlayer.LabelSet pBackglass,"HighScoreL2","Y",1,""
			if(hsCurrentDigit = 3) then PuPlayer.LabelSet pBackglass,"HighScoreL3","Y",1,""
		Case 26
			if(hsCurrentDigit = 1) then PuPlayer.LabelSet pBackglass,"HighScoreL1","Z",1,""
			if(hsCurrentDigit = 2) then PuPlayer.LabelSet pBackglass,"HighScoreL2","Z",1,""
			if(hsCurrentDigit = 3) then PuPlayer.LabelSet pBackglass,"HighScoreL3","Z",1,""
		End Select
	End Sub

	' post the high score letters


	Sub HighScoreCommitName()
		PuPlayer.playlistplayex pBackglass,"videobarb","clear.mov",100,7
		hsEnteredName = hsEnteredDigits(1) & hsEnteredDigits(2) & hsEnteredDigits(3)
		HighScoreName(3) = hsEnteredName
		checkorder
		EndOfBallComplete()
		PuPlayer.LabelSet pBackglass,"HighScore","",1,""
		PuPlayer.LabelSet pBackglass,"HighScoreL1","",1,""
		PuPlayer.LabelSet pBackglass,"HighScoreL2"," ",1,""
		PuPlayer.LabelSet pBackglass,"HighScoreL3"," ",1,""
	End Sub

'********************************************************************************************************************************************
'********************************************************************************************************************************************
'********************************************************************************************************************************************
'********************************************************************************************************************************************
'********************************************************************************************************************************************
'FRAMEWORK BASE CODE END HERE
'********************************************************************************************************************************************
'********************************************************************************************************************************************
'********************************************************************************************************************************************
'********************************************************************************************************************************************
'********************************************************************************************************************************************

'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  ATTRACT MODE
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
' 


	Dim introposition
	introposition = 0

	Sub DMDintroloop
		PuPlayer.LabelSet pBackglass,"modetitle","",1,"{'mt':2,'color':16777215, 'size': 0, 'xpos': 80.7, 'xalign': 1, 'ypos': 72.6, 'yalign': 0}"
		introtime = 0	
		introposition = introposition + 1
		Select Case introposition
		Case 1
			PuPlayer.LabelSet pBackglass,"HighScore","",1,""
			PuPlayer.LabelSet pBackglass,"HighScoreL1","",1,""
			PuPlayer.LabelSet pBackglass,"HighScoreL2","",1,""
			PuPlayer.LabelSet pBackglass,"HighScoreL3","",1,""
			PuPlayer.playlistplayex pMusic,"audioclear","clear.mp3",100, 1
			PuPlayer.playlistplayex pBackglass,"Backglass","FullDMD.png",100,1
			PuPlayer.LabelSet pBackglass,"notetitle","Need Rules Help?",1,""
			PuPlayer.LabelSet pBackglass,"notecopy","Hold both flippers for 2 seconds while in attract mode for rules overlay.",1,""
			PuPlayer.LabelSet pBackglass,"highheader","",1,""
			PuPlayer.LabelSet pBackglass,"high1name","",1,""
			PuPlayer.LabelSet pBackglass,"high1score","",1,""
			PuPlayer.LabelSet pBackglass,"high2name","",1,""
			PuPlayer.LabelSet pBackglass,"high2score","",1,""
			PuPlayer.LabelSet pBackglass,"high3name","",1,""
			PuPlayer.LabelSet pBackglass,"high3score","",1,""
			PuPlayer.LabelSet pBackglass,"high4name","",1,""
			PuPlayer.LabelSet pBackglass,"high4score","",1,""
		Case 2
			loadhs
			'PuPlayer.playlistplayex pMusic,"audiohighscore","",99,1
			PuPlayer.playlistplayex pBackglass,"Backglass","FullDMDHS.png",100,1
			PuPlayer.LabelSet pBackglass,"HighScore","",1,""
			PuPlayer.LabelSet pBackglass,"HighScoreL1","",1,""
			PuPlayer.LabelSet pBackglass,"HighScoreL2","",1,""
			PuPlayer.LabelSet pBackglass,"HighScoreL3","",1,""
			PuPlayer.LabelSet pBackglass,"notetitle","Got A killer good High Score?",1,""
			PuPlayer.LabelSet pBackglass,"notecopy","Post it to #stlevpx on instagram to brag.",1,""
			PuPlayer.LabelSet pBackglass,"highheader","HIGH SCORES",1,""
			PuPlayer.LabelSet pBackglass,"high1name",HighScoreName(0),1,""
			PuPlayer.LabelSet pBackglass,"high1score",FormatNumber(HighScore(0),0),1,""
			PuPlayer.LabelSet pBackglass,"high2name",HighScoreName(1),1,""
			PuPlayer.LabelSet pBackglass,"high2score",FormatNumber(HighScore(1),0),1,""
			PuPlayer.LabelSet pBackglass,"high3name",HighScoreName(2),1,""
			PuPlayer.LabelSet pBackglass,"high3score",FormatNumber(HighScore(2),0),1,""
			PuPlayer.LabelSet pBackglass,"high4name",HighScoreName(3),1,""
			PuPlayer.LabelSet pBackglass,"high4score",FormatNumber(HighScore(3),0),1,""
		Case 3
			PuPlayer.playlistplayex pBackglass,"Backglass","FullDMD.png",100,1
			PuPlayer.LabelSet pBackglass,"notetitle","Did You Know?",1,""
			PuPlayer.LabelSet pBackglass,"HighScore","",1,""
			PuPlayer.LabelSet pBackglass,"HighScoreL1","",1,""
			PuPlayer.LabelSet pBackglass,"HighScoreL2","",1,""
			PuPlayer.LabelSet pBackglass,"HighScoreL3","",1,""
			PuPlayer.LabelSet pBackglass,"notecopy","You can change the music to 80s jams in the script? Check it out..",1,""
			PuPlayer.LabelSet pBackglass,"highheader","",1,""
			PuPlayer.LabelSet pBackglass,"high1name","",1,""
			PuPlayer.LabelSet pBackglass,"high1score","",1,""
			PuPlayer.LabelSet pBackglass,"high2name","",1,""
			PuPlayer.LabelSet pBackglass,"high2score","",1,""
			PuPlayer.LabelSet pBackglass,"high3name","",1,""
			PuPlayer.LabelSet pBackglass,"high3score","",1,""
			PuPlayer.LabelSet pBackglass,"high4name","",1,""
			PuPlayer.LabelSet pBackglass,"high4score","",1,""
		Case 4
			PuPlayer.LabelSet pBackglass,"notetitle","Want to code your own original table?",1,""
			PuPlayer.LabelSet pBackglass,"notecopy","Check Scottywics YouTube Channel for helpful guides.",1,""
			PuPlayer.playlistplayex pBackglass,"Backglass","FullDMD.png",100,1

		Case 5
			PuPlayer.playlistplayex pBackglass,"Backglass","FullDMD.png",100,1
			PuPlayer.LabelSet pBackglass,"notetitle","Be Excellent to Each Other",1,""
			PuPlayer.LabelSet pBackglass,"notecopy","There is no place for homophobia, fascism, sexism, racism or hate.",1,""
			introposition = 0
	End Select
	End Sub


	Dim introtime
	introtime = 0

	Sub intromover_timer
		introtime = introtime + 1
		If introposition = 1 Then
			If introtime = 47 Then
				'DMDintroloop
			End If
		End If
		If introposition = 2 Then
			If introtime = 13 Then
				'DMDintroloop
			End If
		End If
		If introposition = 3 Then
			If introtime = 13 Then
				'DMDintroloop
			End If
		End If
		If introposition = 4 Then
			If introtime = 9 Then
				'DMDintroloop
			End If
		End If
		If introposition = 0 Then
			If introtime = 9 Then
				introposition = 0
				'DMDintroloop
			End If
		End If
	End Sub



	Sub StartAttractMode()

		
'		FlexDMD.Stage.Getimage("logo").visible = True

		UpdateMusic = 0
		UpdateMusicNow
		DOF 323, DOFOn   'DOF MX - Attract Mode ON
		bAttractMode = True
		bAttractModeCounter = 0

		'UltraDMDTimer.Enabled = 1
		StartLightSeq
		'ShowTableInfo
		'DMDintroloop
		StartRainbow alights
		StartRainbow2 GI
		'DMDattract.Enabled = 1
		'intromover.enabled = true
		'PuPlayer.playlistplayex pPlayfield,"PlayfieldVideos","Attract.mp4",70,1
		'ruleshelperoff
	End Sub

	Sub StopAttractMode()

'		FlexDMD.Stage.Getimage("logo").visible = False
		DMD_showtext_reset
		DMD_ShowImages "logo",1,50,50,0


		UpdateMusic = 1
		UpdateMusicNow
		DOF 323, DOFOff   'DOF MX - Attract Mode Off
		bAttractMode = False
		'DMDScoreNow
		LightSeqAttract.StopPlay
		LightSeqAttract2.StopPlay
		StopRainbow alights
		StopRainbow2 GI
		ResetAllLightsColor
		'DMDattract.Enabled = 0
		'intromover.enabled = false
		'PuPlayer.playlistplayex pPlayfield,"PlayfieldVideos","Default.mp4",70,1
		'PuPlayer.playlistplayex pBackglass,"backglass","FullDMD.png",100,1
		
	'StopSong
	End Sub



'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  CINEMATIC SKIPPING
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  


	Dim ldown:ldown = 0
	Dim rdown:rdown = 0

	Sub checkdown
		If ldown + rdown = 2 Then
			skipscene
		End If
	End Sub

	Sub skipscene

	End Sub

'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  LIGHTING / RAINBOW LIGHTS
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
' 


	'********************************************************************************************
	' Only for VPX 10.2 and higher.
	' FlashForMs will blink light or a flasher for TotalPeriod(ms) at rate of BlinkPeriod(ms)
	' When TotalPeriod done, light or flasher will be set to FinalState value where
	' Final State values are:   0=Off, 1=On, 2=Return to previous State
	'********************************************************************************************

	Sub FlashForMs(MyLight, TotalPeriod, BlinkPeriod, FinalState) 'thanks gtxjoe for the first version

		If TypeName(MyLight) = "Light" Then

			If FinalState = 2 Then
				FinalState = MyLight.State 'Keep the current light state
			End If
			MyLight.BlinkInterval = BlinkPeriod
			MyLight.Duration 2, TotalPeriod, FinalState
		ElseIf TypeName(MyLight) = "Flasher" Then

			Dim steps

			' Store all blink information
			steps = Int(TotalPeriod / BlinkPeriod + .5) 'Number of ON/OFF steps to perform
			If FinalState = 2 Then                      'Keep the current flasher state
				FinalState = ABS(MyLight.Visible)
			End If
			MyLight.UserValue = steps * 10 + FinalState 'Store # of blinks, and final state

			' Start blink timer and create timer subroutine
			MyLight.TimerInterval = BlinkPeriod
			MyLight.TimerEnabled = 0
			MyLight.TimerEnabled = 1
			ExecuteGlobal "Sub " & MyLight.Name & "_Timer:" & "Dim tmp, steps, fstate:tmp=me.UserValue:fstate = tmp MOD 10:steps= tmp\10 -1:Me.Visible = steps MOD 2:me.UserValue = steps *10 + fstate:If Steps = 0 then Me.Visible = fstate:Me.TimerEnabled=0:End if:End Sub"
		End If
	End Sub

	'******************************************
	' Change light color - simulate color leds
	' changes the light color and state
	' 10 colors: red, orange, amber, yellow...
	'******************************************
	' in this table this colors are use to keep track of the progress during the acts and battles

	'colors
	Dim red, orange, amber, yellow, darkgreen, green, blue, darkblue, purple, white, base

	red = 10
	orange = 9
	amber = 8
	yellow = 7
	darkgreen = 6
	green = 5
	blue = 4
	darkblue = 3
	purple = 2
	white = 1
	base = 11

	Sub SetLightColor(n, col, stat)
		Select Case col
			Case red
				n.color = RGB(18, 0, 0)
				n.colorfull = RGB(255, 0, 0)
			Case orange
				n.color = RGB(18, 3, 0)
				n.colorfull = RGB(255, 64, 0)
			Case amber
				n.color = RGB(193, 49, 0)
				n.colorfull = RGB(255, 153, 0)
			Case yellow
				n.color = RGB(18, 18, 0)
				n.colorfull = RGB(255, 255, 0)
			Case darkgreen
				n.color = RGB(0, 8, 0)
				n.colorfull = RGB(0, 64, 0)
			Case green
				n.color = RGB(0, 18, 0)
				n.colorfull = RGB(0, 255, 0)
			Case blue
				n.color = RGB(0, 18, 18)
				n.colorfull = RGB(0, 255, 255)
			Case darkblue
				n.color = RGB(0, 8, 8)
				n.colorfull = RGB(0, 64, 64)
			Case purple
				n.color = RGB(128, 0, 128)
				n.colorfull = RGB(255, 0, 255)
			Case white
				n.color = RGB(255, 252, 224)
				n.colorfull = RGB(193, 91, 0)
			Case white
				n.color = RGB(255, 252, 224)
				n.colorfull = RGB(193, 91, 0)
			Case base
				n.color = RGB(255, 197, 143)
				n.colorfull = RGB(255, 255, 236)
		End Select
		If stat <> -1 Then
			n.State = 0
			n.State = stat
		End If
	End Sub

	Sub ResetAllLightsColor ' Called at a new game
		SetLightColor sw27l, yellow, -1	
		SetLightColor sw25l, yellow, -1	
		SetLightColor sw26l, yellow, -1	
		SetLightColor sw27l, yellow, -1	
		SetLightColor sw36l, yellow, -1	
		SetLightColor sw37l, yellow, -1	
		SetLightColor sw38l, yellow, -1	
		SetLightColor sw41l, yellow, -1	
		SetLightColor sw42l, yellow, -1	
		SetLightColor sw43l, yellow, -1	
		SetLightColor l1, Red, -1
		SetLightColor l2, Red, -1
		SetLightColor l3, Red, -1
		SetLightColor l4, Red, -1
		SetLightColor l5, Red, -1
		SetLightColor l6, Red, -1
		SetLightColor l7, Red, -1
		SetLightColor l8, Red, -1
		SetLightColor l9, Red, -1
		SetLightColor l10, Red, -1
		SetLightColor l11, Red, -1
		SetLightColor l12, Red, -1
		SetLightColor l28, yellow, -1
		SetLightColor l29, yellow, -1
		SetLightColor l30, yellow, -1
		SetLightColor l31, yellow, -1
		SetLightColor l32, yellow, -1
		SetLightColor l17, white, -1
		SetLightColor l18, white, -1
		SetLightColor l19, white, -1
		SetLightColor l20, white, -1
		SetLightColor l21, white, -1
		SetLightColor l22, white, -1
		SetLightColor l23, white, -1
		SetLightColor l33, white, -1
		SetLightColor l34, white, -1
		SetLightColor l35, white, -1
		SetLightColor l24, white, -1
		SetLightColor l36, white, -1
		SetLightColor l37, white, -1
		SetLightColor l38, white, -1
		SetLightColor l39, white, -1
		SetLightColor l40, white, -1
		SetLightColor l41, white, -1
		SetLightColor l42, white, -1
		SetLightColor l43, white, -1
		SetLightColor l44, white, -1
		SetLightColor l45, white, -1
		SetLightColor Bug1, yellow, -1
		SetLightColor Bug001, yellow, -1
		SetLightColor Bug002, yellow, -1
		SetLightColor Bug003, yellow, -1
		SetLightColor Bug004, yellow, -1
		SetLightColor Bug005, yellow, -1
		SetLightColor Bug006, yellow, -1
		SetLightColor Bug007, yellow, -1
		SetLightColor Bug008, yellow, -1
		SetLightColor Bug009, yellow, -1
		SetLightColor Bug010, yellow, -1
		SetLightColor Bug011, yellow, -1
		SetLightColor Bug012, yellow, -1
		SetLightColor Bug013, yellow, -1
		SetLightColor Bug014, yellow, -1
		SetLightColor Bug015, yellow, -1
		SetLightColor Bug016, yellow, -1
	End Sub

	Sub UpdateBonusColors
	End Sub

	'*************************
	' Rainbow Changing Lights
	'*************************

	Dim RGBStep, RGBFactor, rRed, rGreen, rBlue, RainbowLights

	Sub StartRainbow(n)
		set RainbowLights = n
		RGBStep = 0
		RGBFactor = 5
		rRed = 255
		rGreen = 0
		rBlue = 0
		RainbowTimer.Enabled = 1
	End Sub

	Dim RGBStep2, RGBFactor2, rRed2, rGreen2, rBlue2, RainbowLights2
	Sub StartRainbow2(n)
		set RainbowLights2 = n
		RGBStep2 = 0
		RGBFactor2 = 5
		rRed2 = 255
		rGreen2 = 0
		rBlue2 = 0
		RainbowTimer1.Enabled = 1
	End Sub

	Sub StopRainbow(n)
		Dim obj
		RainbowTimer.Enabled = 0
		RainbowTimer.Enabled = 0
			For each obj in RainbowLights
				SetLightColor obj, "white", 0
			Next
	End Sub

	Sub StopRainbow2(n)
		Dim obj
		RainbowTimer1.Enabled = 0
			For each obj in RainbowLights2
				SetLightColor obj, "white", 0
				obj.state = 1
				obj.Intensity = 15
			Next
	End Sub

	Sub RainbowTimer_Timer 'rainbow led light color changing
		Dim obj
		Select Case RGBStep
			Case 0 'Green
				rGreen = rGreen + RGBFactor
				If rGreen > 255 then
					rGreen = 255
					RGBStep = 1
				End If
			Case 1 'Red
				rRed = rRed - RGBFactor
				If rRed < 0 then
					rRed = 0
					RGBStep = 2
				End If
			Case 2 'Blue
				rBlue = rBlue + RGBFactor
				If rBlue > 255 then
					rBlue = 255
					RGBStep = 3
				End If
			Case 3 'Green
				rGreen = rGreen - RGBFactor
				If rGreen < 0 then
					rGreen = 0
					RGBStep = 4
				End If
			Case 4 'Red
				rRed = rRed + RGBFactor
				If rRed > 255 then
					rRed = 255
					RGBStep = 5
				End If
			Case 5 'Blue
				rBlue = rBlue - RGBFactor
				If rBlue < 0 then
					rBlue = 0
					RGBStep = 0
				End If
		End Select
			For each obj in RainbowLights
				obj.color = RGB(rRed \ 10, rGreen \ 10, rBlue \ 10)
				obj.colorfull = RGB(rRed, rGreen, rBlue)
			Next
	End Sub

	Sub RainbowTimer1_Timer 'rainbow led light color changing
		Dim obj
		Select Case RGBStep2
			Case 0 'Green
				rGreen2 = rGreen2 + RGBFactor2
				If rGreen2 > 255 then
					rGreen2 = 255
					RGBStep2 = 1
				End If
			Case 1 'Red
				rRed2 = rRed2 - RGBFactor2
				If rRed2 < 0 then
					rRed2 = 0
					RGBStep2 = 2
				End If
			Case 2 'Blue
				rBlue2 = rBlue2 + RGBFactor2
				If rBlue2 > 255 then
					rBlue2 = 255
					RGBStep2 = 3
				End If
			Case 3 'Green
				rGreen2 = rGreen2 - RGBFactor2
				If rGreen2 < 0 then
					rGreen2 = 0
					RGBStep2 = 4
				End If
			Case 4 'Red
				rRed2 = rRed2 + RGBFactor2
				If rRed2 > 255 then
					rRed2 = 255
					RGBStep2 = 5
				End If
			Case 5 'Blue
				rBlue2 = rBlue2 - RGBFactor2
				If rBlue2 < 0 then
					rBlue2 = 0
					RGBStep2 = 0
				End If
		End Select
			For each obj in RainbowLights2
				obj.color = RGB(rRed2 \ 10, rGreen2 \ 10, rBlue2 \ 10)
				obj.colorfull = RGB(rRed2, rGreen2, rBlue2)
			Next
	End Sub


	Sub StartLightSeq()
		Dim a
		For each a in alights
			a.State = 1
		Next
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqUpOn, 50, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqDownOn, 25, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqCircleOutOn, 15, 2
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqUpOn, 25, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqDownOn, 25, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqUpOn, 25, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqDownOn, 25, 1
		LightSeqAttract.UpdateInterval = 10
		LightSeqAttract.Play SeqCircleOutOn, 15, 3
		LightSeqAttract.UpdateInterval = 5
		LightSeqAttract.Play SeqRightOn, 50, 1
		LightSeqAttract.UpdateInterval = 5
		LightSeqAttract.Play SeqLeftOn, 50, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqRightOn, 50, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqLeftOn, 50, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqRightOn, 40, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqLeftOn, 40, 1
		LightSeqAttract.UpdateInterval = 10
		LightSeqAttract.Play SeqRightOn, 30, 1
		LightSeqAttract.UpdateInterval = 10
		LightSeqAttract.Play SeqLeftOn, 30, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqRightOn, 25, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqLeftOn, 25, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqRightOn, 15, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqLeftOn, 15, 1
		LightSeqAttract.UpdateInterval = 10
		LightSeqAttract.Play SeqCircleOutOn, 15, 3
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqLeftOn, 25, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqRightOn, 25, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqLeftOn, 25, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqUpOn, 25, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqDownOn, 25, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqUpOn, 25, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqDownOn, 25, 1
		LightSeqAttract.UpdateInterval = 5
		LightSeqAttract.Play SeqStripe1VertOn, 50, 2
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqCircleOutOn, 15, 2
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqStripe1VertOn, 50, 3
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqLeftOn, 25, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqRightOn, 25, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqLeftOn, 25, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqUpOn, 25, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqDownOn, 25, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqCircleOutOn, 15, 2
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqStripe2VertOn, 50, 3
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqLeftOn, 25, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqRightOn, 25, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqLeftOn, 25, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqUpOn, 25, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqDownOn, 25, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqUpOn, 25, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqDownOn, 25, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqStripe1VertOn, 25, 3
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqStripe2VertOn, 25, 3
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqUpOn, 15, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqDownOn, 15, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqUpOn, 15, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqDownOn, 15, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqUpOn, 15, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqDownOn, 15, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqRightOn, 15, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqLeftOn, 15, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqRightOn, 15, 1
		LightSeqAttract.UpdateInterval = 8
		LightSeqAttract.Play SeqLeftOn, 15, 1
		For each a in GI
			a.State = 1
			a.Intensity = 10
		Next
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqUpOn, 50, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqDownOn, 25, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqCircleOutOn, 15, 2
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqUpOn, 25, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqDownOn, 25, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqUpOn, 25, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqDownOn, 25, 1
		LightSeqAttract2.UpdateInterval = 10
		LightSeqAttract2.Play SeqCircleOutOn, 15, 3
		LightSeqAttract2.UpdateInterval = 5
		LightSeqAttract2.Play SeqRightOn, 50, 1
		LightSeqAttract2.UpdateInterval = 5
		LightSeqAttract2.Play SeqLeftOn, 50, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqRightOn, 50, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqLeftOn, 50, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqRightOn, 40, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqLeftOn, 40, 1
		LightSeqAttract2.UpdateInterval = 10
		LightSeqAttract2.Play SeqRightOn, 30, 1
		LightSeqAttract2.UpdateInterval = 10
		LightSeqAttract2.Play SeqLeftOn, 30, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqRightOn, 25, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqLeftOn, 25, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqRightOn, 15, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqLeftOn, 15, 1
		LightSeqAttract2.UpdateInterval = 10
		LightSeqAttract2.Play SeqCircleOutOn, 15, 3
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqLeftOn, 25, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqRightOn, 25, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqLeftOn, 25, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqUpOn, 25, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqDownOn, 25, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqUpOn, 25, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqDownOn, 25, 1
		LightSeqAttract2.UpdateInterval = 5
		LightSeqAttract2.Play SeqStripe1VertOn, 50, 2
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqCircleOutOn, 15, 2
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqStripe1VertOn, 50, 3
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqLeftOn, 25, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqRightOn, 25, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqLeftOn, 25, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqUpOn, 25, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqDownOn, 25, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqCircleOutOn, 15, 2
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqStripe2VertOn, 50, 3
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqLeftOn, 25, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqRightOn, 25, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqLeftOn, 25, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqUpOn, 25, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqDownOn, 25, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqUpOn, 25, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqDownOn, 25, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqStripe1VertOn, 25, 3
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqStripe2VertOn, 25, 3
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqUpOn, 15, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqDownOn, 15, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqUpOn, 15, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqDownOn, 15, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqUpOn, 15, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqDownOn, 15, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqRightOn, 15, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqLeftOn, 15, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqRightOn, 15, 1
		LightSeqAttract2.UpdateInterval = 8
		LightSeqAttract2.Play SeqLeftOn, 15, 1
	End Sub

	Sub LightSeqAttract_PlayDone()
		StartLightSeq()
	End Sub

	Sub LightSeqTilt_PlayDone()
		LightSeqTilt.Play SeqAllOff
	End Sub

	Sub LightSeqSkillshot_PlayDone()
		LightSeqSkillshot.Play SeqAllOff
	End Sub



	'**********************
	'     GI effects
	' independent routine
	' it turns on the gi
	' when there is a ball
	' in play
	'**********************

	Dim OldGiState
	OldGiState = -1   'start witht the Gi off

	Sub ChangeGi(col) 'changes the gi color
		Dim bulb
		For each bulb in GI
			SetLightColor bulb, col, -1
		Next
	End Sub

	Sub GIUpdateTimer_Timer
		Dim tmp, obj
		tmp = Getballs
		If UBound(tmp) <> OldGiState Then
			OldGiState = Ubound(tmp)
			If UBound(tmp) = 3 Then 'we have 4 captive balls on the table (-1 means no balls, 0 is the first ball, 1 is the second..)
				GiOff               ' turn off the gi if no active balls on the table, we could also have used the variable ballsonplayfield.
			Else
				Gion
			End If
		End If
	End Sub

	Sub GiOn
		DOF 126, DOFOn
		Dim bulb
		For each bulb in GI
			SetLightColor bulb, base, -1
			bulb.State = 1
		Next
	End Sub

	Sub GiOff
		DOF 126, DOFOff
		Dim bulb
		For each bulb in GI
			bulb.State = 0
		Next
	End Sub


	' GI & light sequence effects


	Sub GiEffect(n)
		Select Case n
			Case 0 'all off
				LightSeqGi.Play SeqAlloff
			Case 1 'all blink
				LightSeqGi.UpdateInterval = 4
				LightSeqGi.Play SeqBlinking, , 5, 100
			Case 2 'random
				LightSeqGi.UpdateInterval = 10
				LightSeqGi.Play SeqRandom, 5, , 1000
			Case 3 'upon
				LightSeqGi.UpdateInterval = 4
				LightSeqGi.Play SeqUpOn, 5, 1
			Case 4 ' left-right-left
				LightSeqGi.UpdateInterval = 5
				LightSeqGi.Play SeqLeftOn, 10, 1
				LightSeqGi.UpdateInterval = 5
				LightSeqGi.Play SeqRightOn, 10, 1
		End Select
	End Sub

	Sub LightEffect(n)
		Select Case n
			Case 0 ' all off
				LightSeqInserts.Play SeqAlloff
			Case 1 'all blink
				LightSeqInserts.UpdateInterval = 4
				LightSeqInserts.Play SeqBlinking, , 5, 100
			Case 2 'random
				LightSeqInserts.UpdateInterval = 10
				LightSeqInserts.Play SeqRandom, 5, , 1000
			Case 3 'upon
				LightSeqInserts.UpdateInterval = 4
				LightSeqInserts.Play SeqUpOn, 10, 1
			Case 4 ' left-right-left
				LightSeqInserts.UpdateInterval = 5
				LightSeqInserts.Play SeqLeftOn, 10, 1
				LightSeqInserts.UpdateInterval = 5
				LightSeqInserts.Play SeqRightOn, 10, 1
			Case 5 'random
				LightSeqbumper.UpdateInterval = 4
				LightSeqbumper.Play SeqBlinking, , 5, 10
			Case 6 'random
				LightSeqRSling.UpdateInterval = 4
				LightSeqRSling.Play SeqBlinking, , 5, 6
			Case 7 'random
				LightSeqLSling.UpdateInterval = 4
				LightSeqLSling.Play SeqBlinking, , 5, 6
			Case 8 'random
				LightSeqBack.UpdateInterval = 4
				LightSeqBack.Play SeqBlinking, , 5, 6
			Case 9 'random
				LightSeqSign.UpdateInterval = 4
				LightSeqSign.Play SeqBlinking, , 5, 6
			Case 10 'GrubMadness Lights Adult
				LightSeqGrubMadness.UpdateInterval = 4
				LightSeqGrubMadness.Play SeqBlinking, , 160, 120
			Case 12 'kickout
				LightSeqlr.UpdateInterval = 4
				LightSeqlr.Play SeqBlinking, , 5, 10
			Case 13 'Stop GrubMadness Lights
				LightSeqGrubMadness.StopPlay()
			Case 14 'GrubMadness Lights Child
				LightSeqGrubMadness.UpdateInterval = 4
				LightSeqGrubMadness.Play SeqBlinking, , 160, 240
		End Select
	End Sub

	' Flasher Effects using lights

	Dim FEStep, FEffect
	FEStep = 0
	FEffect = 0

	Sub FlashEffect(n)
		Select case n
			Case 0 ' all off
				LightSeqFlasher.Play SeqAlloff
			Case 1 'all blink
				LightSeqFlasher.UpdateInterval = 4
				LightSeqFlasher.Play SeqBlinking, , 5, 100
			Case 2 'random
				LightSeqFlasher.UpdateInterval = 10
				LightSeqFlasher.Play SeqRandom, 5, , 1000
			Case 3 'upon
				LightSeqFlasher.UpdateInterval = 4
				LightSeqFlasher.Play SeqUpOn, 10, 1
			Case 4 ' left-right-left
				LightSeqFlasher.UpdateInterval = 5
				LightSeqFlasher.Play SeqLeftOn, 10, 1
				LightSeqFlasher.UpdateInterval = 5
				LightSeqFlasher.Play SeqRightOn, 10, 1
			Case 5 ' top flashers blink fast
		End Select
	End Sub

	'****************************
	' Flashers - Thanks Flupper
	'****************************

	Dim FlashLevel1, FlashLevel2, FlashLevel3, FlashLevel4, FlashLevel5, FlashLevel6
	Flasherlight4.IntensityScale = 0

	'*** right red flasher ***
	Sub Flasherflash3_Timer()
		dim flashx3, matdim
		If not Flasherflash3.TimerEnabled Then 
			Flasherflash3.TimerEnabled = True
			Flasherflash3.visible = 1
			Flasherlit3.visible = 1
		End If
		flashx3 = FlashLevel3 * FlashLevel3 * FlashLevel3
		Flasherflash3.opacity = 1500 * flashx3
		Flasherlit3.BlendDisableLighting = 10 * flashx3
		Flasherbase3.BlendDisableLighting =  flashx3
		Flasherlight4.IntensityScale = flashx3
		matdim = Round(10 * FlashLevel3)
		Flasherlit3.material = "domelit" & matdim
		FlashLevel3 = FlashLevel3 * 0.9 - 0.01
		If FlashLevel3 < 0.15 Then
			Flasherlit3.visible = 0
		Else
			Flasherlit3.visible = 1
		end If
		If FlashLevel3 < 0 Then
			Flasherflash3.TimerEnabled = False
			Flasherflash3.visible = 0
		End If
	End Sub

'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'   Original Table Lights
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X 

Dim LampState(200), FadingState(200), FlashLevel(200)

InitLamps() ' turn off the lights and flashers and reset them to the default parameters

'*** vpinmame Lamp & Flasher Timers

Sub LampTimer_Timer()
    Dim chgLamp, num, chg, ii
    chgLamp = Controller.ChangedLamps
    If Not IsEmpty(chgLamp)Then
        For ii = 0 To UBound(chgLamp)
			LampState(chgLamp(ii, 0) ) = chgLamp(ii, 1)       'keep the real state in an array
            FadingState(chgLamp(ii, 0)) = chgLamp(ii, 1) + 3  'fading step
        Next
    End If
    UpdateLamps
End Sub

Sub UpdateLamps
    'Lamp 1, l1
    'Lamp 2, l2
    'Lamp 3, l3
    'Lamp 4, l4
    'Lamp 5, l5
    'Lamp 6, l6
    'Lamp 7, l7
    'Lamp 8, l8
    'Lamp 9, l9
    'Lamp 10, l10
    'Lamp 11, l11
    'Lamp 12, l12
    'Lamp 13, l13
    'Lamp 14, l14
    'Lamp 15, l15
    'Lamp 16, l16
    Lamp 17, l17
    Lamp 18, l18
    Lamp 19, l19
    Lamp 20, l20
    Lamp 21, l21
    Lamp 22, l22
    Lamp 23, l23
    Lamp 24, l24
    'Lamp 25, l25
    'Lamp 26, l26
    'Lamp 27, l27
    Lamp 28, l28
    Lamp 29, l29
    Lamp 30, l30
    Lamp 31, l31
    Lamp 32, l32
    'Lamp 33, l33
    'Lampm 34, l34a
    'Lamp 34, l34
    Lamp 35, l35
    Lamp 36, l36
    Lamp 37, l37
    Lamp 38, l38
    Lamp 39, l39
    Lamp 40, l40
    Lamp 41, l41
    Lamp 42, l42
    Lamp 43, l43
    Lamp 44, l44
    Lamp 45, l45
    Lamp 46, l46
    'Lamp 47, l47
    'Lamp 48, l48
    Lampm 49, l49a
    Lamp 49, l49
    Lamp 50, l50
    Lamp 51, l51
    Lamp 52, l52
    Lamp 53, l53
    Lamp 54, l54
    Lamp 55, l55
    Lamp 56, l56


'*** flashers

    Flashm 109, f09b
    Flash 109, f09c
    'Flash 111, f11
    Lampm 122, f09a
    Lampm 122, f09
    Lampm 122, f22a
    Lamp 122, f22
    Flash 125, f25
    Flash 126, f26
    Flash 127, f27
    Flash 128, f28
    Flash 129, f29
    Flash 130, f30
    Flash 131, f31
    Flash 132, f32
End Sub

'*** div lamp subs

'*** Normal Lamp & Flasher subs

Sub InitLamps()
    Dim x
    LampTimer.Interval = 25 ' flasher fading speed
    LampTimer.Enabled = 1
    For x = 0 to 200
		LampState(x) = 0
        FadingState(x) = 3 ' used to track the fading state
		FlashLevel(x) = 0
    Next
End Sub

Sub SetLamp(nr, value) ' 0 is off, 1 is on
    FadingState(nr) = abs(value) + 3
End Sub

'*** Lights: used for VPX standard lights, the fading is handled by VPX itself, they are here to be able to make them work together with the flashers

Sub Lamp(nr, object)
    Select Case FadingState(nr)
        Case 4:object.state = 1:FadingState(nr) = 0
        Case 3:object.state = 0:FadingState(nr) = 0
    End Select
End Sub

Sub Lampm(nr, object) ' used for multiple lights, it doesn't change the fading state
    Select Case FadingState(nr)
        Case 4:object.state = 1
        Case 3:object.state = 0
    End Select
End Sub

'*** Flashers: 4 is on,3,2,1 fade steps. 0 is off

Sub Flash(nr, object)
    Select Case FadingState(nr)
        Case 4:Object.IntensityScale = 1:FadingState(nr) = 0
        Case 3:Object.IntensityScale = 0.66:FadingState(nr) = 2
        Case 2:Object.IntensityScale = 0.33:FadingState(nr) = 1
        Case 1:Object.IntensityScale = 0:FadingState(nr) = 0
    End Select
End Sub

Sub Flashm(nr, object) 'multiple flashers, it doesn't change the fading state
    Select Case FadingState(nr)
        Case 4:Object.IntensityScale = 1
        Case 3:Object.IntensityScale = 0.66
        Case 2:Object.IntensityScale = 0.33
        Case 1:Object.IntensityScale = 0
    End Select
End Sub

'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'   CABINET MODE
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  


If CabinetMode Then
	'PinCab_Rails.visible = 0
Else
	'PinCab_Rails.visible = 1
End If


'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'   SCORING FUNCTIONS
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  


	Sub AddScore(points)
		If(Tilted = False) And (bGameInPlay = True) Then
			If(bTripleScore = True) Then
			Score(CurrentPlayer) = Score(CurrentPlayer) + points + points + points
				If (DMDMode = 1) or (DMDMode = 3) Then
					If points >199 then DMDBGFlash=15
					If points> 4999 Then DMDFire=Flexframe+50
				End If
			'pUpdateScores
			ElseIf(bDoubleScore = True) Then
			Score(CurrentPlayer) = Score(CurrentPlayer) + points + points
				If (DMDMode = 1) or (DMDMode = 3) Then
					If points >199 then DMDBGFlash=15
					If points> 4999 Then DMDFire=Flexframe+50
				End If
			'pUpdateScores
			ElseIf (bTripleScore = False) Or (bDoubleScore = False) Then
			Score(CurrentPlayer) = Score(CurrentPlayer) + points
				If (DMDMode = 1) or (DMDMode = 3) Then
					If points >199 then DMDBGFlash=15
					If points> 4999 Then DMDFire=Flexframe+50
				End If
			'pUpdateScores
			End If
		End if
	End Sub


	Sub AwardExtraBall()
		If NOT bExtraBallWonThisBall Then
			'l50.State = 1
			'PuPlayer.playlistplayex pPlayfield,"PlayfieldVideos","ShootAgain.mp4",70,1
			'flashflash.Enabled = True
			LightSeqFlasher.UpdateInterval = 150
			LightSeqFlasher.Play SeqRandom, 10, , 10000
			ExtraBallsAwards(CurrentPlayer) = ExtraBallsAwards(CurrentPlayer) + 1
			bExtraBallWonThisBall = True
			DMD_ShowImages "extraball",1,1000,1000,0:
			DOF 402, DOFPulse   'DOF MX - Extra Ball
			'extraballready(CurrentPlayer) = 0
			If bMultiBallMode = false Then
			'PuPlayer.playlistplayex pBackglass,"videoextraball","extraballsm.mov",100,1
			'PuPlayer.playlistplayex pCallouts,"audiocallouts","extraball.wav",100,1
		'chilloutthemusic
			End If
		Else
		'AddScore 4000000
		END If
	End Sub

	Sub AwardSpecial()
		Credits = Credits + 1
		DOF 140, DOFOn
		'PlaySound SoundFXDOF("knocker",136,DOFPulse,DOFKnocker)		
		DOF 115, DOFPulse
		GiEffect 1
		LightEffect 1
		DOF 400, DOFPulse   'DOF MX - Special
	End Sub


	Sub AwardSkillshot()
		Dim i
		DOF 125, DOFPulse
		ResetSkillShotTimer_Timer
		'AddScore SkillshotValue(CurrentPLayer)
		GiEffect 1
		LightEffect 2
		DOF 401, DOFPulse   'DOF MX - Skillshot
		'PuPlayer.playlistplayex pCallouts,"audiocallouts","skillshot.wav",100,1
		'chilloutthemusic
		ID=57:FX():ScoreID=57:ScoreAmount:
		'SkillShotValue(CurrentPLayer) = SkillShotValue(CurrentPLayer) + 1000000
	End Sub

	Sub AwardGrubs()
		Dim i
		'DOF 125, DOFPulse
		'ResetSkillShotTimer_Timer
		AddScore Grubs(CurrentPLayer)
		Grubs(CurrentPLayer) = Grubs(CurrentPlayer) + 1
		GiEffect 1
		LightEffect 2
		'DOF 401, DOFPulse   'DOF MX - Skillshot
		'PuPlayer.playlistplayex pCallouts,"audiocallouts","skillshot.wav",100,1
		'chilloutthemusic
		'PuPlayer.playlistplayex pBackglass,"videoskillshot","",100,3
		ID=9:FX():ScoreID=9:ScoreAmount
			if Grubs(CurrentPlayer) = 5 Then
				GrubMadnessBegin
			End If
		'pUpdateScores
	End Sub



'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'   BALL FUNCTIONS & DRAINS
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  


	Function Balls
		Dim tmp
		tmp = bpgcurrent - BallsRemaining(CurrentPlayer) + 1
		If tmp> bpgcurrent Then
			Balls = bpgcurrent
		Else
			Balls = tmp
		End If
	End Function


	Sub FirstBall
		ResetForNewPlayerBall()
'		CreateNewBall()
		UpdateSkillShot
		UpdateMusicNow
	End Sub


	Sub ResetForNewPlayerBall()
		'PuPlayer.playresume 4
		If PlayersPlayingGame > 1 Then
			If CurrentPlayer = 1 Then
				'PuPlayer.playlistplayex pBackglass,"videoplayers","player1sm1.mov",40,1
				'PuPlayer.playlistplayex pCallouts,"audiocallouts","player1.wav",70,1
				'PuPlayer.playlistplayex pPlayfield,"PlayfieldVideos","player1.mp4",70,1
		'chilloutthemusic
			Elseif currentplayer = 2 Then
				'PuPlayer.playlistplayex pBackglass,"videoplayers","player2sm.mov",40,1
				'PuPlayer.playlistplayex pCallouts,"audiocallouts","player2.wav",70,1
				'PuPlayer.playlistplayex pPlayfield,"PlayfieldVideos","player2.mp4",70,1
		'chilloutthemusic
			Elseif currentplayer = 3 Then
				'PuPlayer.playlistplayex pBackglass,"videoplayers","player3sm.mov",40,1
				'PuPlayer.playlistplayex pCallouts,"audiocallouts","player3.wav",70,1
				'PuPlayer.playlistplayex pPlayfield,"PlayfieldVideos","player3.mp4",70,1
		'chilloutthemusic
			Elseif currentplayer = 4 Then
				'PuPlayer.playlistplayex pBackglass,"videoplayers","player4sm.mov",40,1
				'PuPlayer.playlistplayex pCallouts,"audiocallouts","player4.wav",70,1
				'PuPlayer.playlistplayex pPlayfield,"PlayfieldVideos","player4.mp4",70,1
		'chilloutthemusic
			End If
		Else
			ID=40:FX():ScoreID=40:ScoreAmount:
		PlaySound "flute"
		End If
		AddScore 0
		BonusPoints(CurrentPlayer) = 0
		SetBonusMultiplier 1
		bBonusHeld = False
		bExtraBallWonThisBall = False
		ResetNewBallLights()
		ResetNewBallVariables
		'bBallSaverReady = True
		bSkillShotReady = True
	End Sub


	Sub CreateNewBall()
		BallRelease.CreateSizedball BallSize / 2
		BallsOnPlayfield = BallsOnPlayfield + 1
		'PlaySoundAt SoundFXDOF("fx_Ballrel", 114, DOFPulse, DOFContactors), BallRelease
		BallRelease.Kick 90, 4
		If BallsOnPlayfield > 1 Then
			'bMultiBallMode = True
				DOF 127, DOFOn    'Beacon ON
			bAutoPlunger = True
		End If

	End Sub


	Sub AddMultiball(nballs)
		mBalls2Eject = mBalls2Eject + nballs
		bAutoPlunger = True
		CreateMultiballTimer.Enabled = True
	End Sub

	Sub CreateMultiballTimer_Timer()
		If bBallInPlungerLane Then
			Exit Sub
		Else
			If BallsOnPlayfield <MaxMultiballs Then
				CreateNewBall()
				mBalls2Eject = mBalls2Eject -1
				If mBalls2Eject = 0 Then 
					Me.Enabled = False
				End If 
			Else 
				mBalls2Eject = 0
				Me.Enabled = False
			End If
		End If
	End Sub

Sub EndOfBall()
    Dim AwardPoints, TotalBonus, ii
    AwardPoints = 0
    TotalBonus = 10 'yes 10 points :)
    ' the first ball has been lost. From this point on no new players can join in
    bOnTheFirstBall = False

    ' only process any of this if the table is not tilted.
    '(the tilt recovery mechanism will handle any extra balls or end of game)

    If NOT Tilted Then
        'PLaySong "mu_bonuscount" Count Bonus Audio
        'Count the bonus. This table uses several bonus
        'DMD CL(0, "BONUS"), "", "", eBlink, eNone, eNone, 1000, True, ""

        'Grubs
        AwardPoints = Grubs(CurrentPlayer) * 1000 ' Each Grub worth 1000
        TotalBonus = TotalBonus + AwardPoints
        'DMD CL(0, FormatScore(AwardPoints)), CL(1, "Grubs " & Grubs(CurrentPlayer)), "", eBlink, eNone, eNone, 1000, True, ""

        ' calculate the totalbonus
        'DMD CL(0, FormatScore(TotalBonus)), CL(1, "TOTAL BONUS " & " X" & BonusMultiplier(CurrentPlayer)), "", eNone, eNone, eNone, 1500, True, ""
        TotalBonus = TotalBonus * BonusMultiplier(CurrentPlayer)
        ' Add the bonus to the score
        AddScore TotalBonus

        ' add a bit of a delay to allow for the bonus points to be shown & added up
 '       vpmtimer.addtimer 3000, "EndOfBall2 '"
        vpmtimer.addtimer 1500, "EndOfBall2 '" 
   Else 'if tilted then only add a short delay and move to the 2nd part of the end of the ball
        'vpmtimer.addtimer 1500, "EndOfBall2 '"
		Tilted = False
		Tilt = 0
		UpdateMusic = UpdateMusic + 1
		UpdateMusicNow
		DisableTable False
		tilttableclear.enabled = False
		tilttime = 0
		BallsRemaining(CurrentPlayer) = BallsRemaining(CurrentPlayer) - 1
			If(BallsRemaining(CurrentPlayer) <= 0) Then
				CheckHighScore()
			Else
				EndOfBallComplete()
			End If
    End If
End Sub

'	Sub EndOfBall()
'		PuPlayer.playlistplayex pAudio,"audiomultiballs","clear.mp3",100,1
'
'
'		'bMultiBallMode = False
'		bOnTheFirstBall = False
'		If NOT Tilted Then
'			Score(CurrentPlayer) = Score(CurrentPlayer) * BonusMultiplier(CurrentPlayer)
'			DMDScore
'			pUpdateScores
'				if BonusMultiplier(CurrentPlayer) >= 2 Then 
'				ID=59:FX():ScoreID=59:ScoreAmount
'				End If
'			vpmtimer.addtimer 3000, "EndOfBall2 '"
'		Else 
'			vpmtimer.addtimer 500, "EndOfBall2 '"
'		End If
'	End Sub

	
	Sub EndOfBall2()
		Tilted = False
		Tilt = 0
		UpdateMusic = UpdateMusic + 1
		UpdateMusicNow
		DisableTable False
		tilttableclear.enabled = False
		tilttime = 0
		If(ExtraBallsAwards(CurrentPlayer) <> 0) Then
			ExtraBallsAwards(CurrentPlayer) = ExtraBallsAwards(CurrentPlayer) - 1
			If(ExtraBallsAwards(CurrentPlayer) = 0) Then
				'l50.State = 0
				'PuPlayer.playlistplayex pPlayfield,"PlayfieldVideos","Default.mp4",70,1
			End If
			'LightSeqFlasher.UpdateInterval = 150
			'LightSeqFlasher.Play SeqRandom, 10, , 2000

			UpdateMusic = UpdateMusic - 1
			UpdateMusicNow
			CreateNewBall()
			ResetForNewPlayerBall
			'PuPlayer.playlistplayex pBackglass,"videoextraball","isthatsupposedtoimpress.mov",100,2
			ID=41:FX():ScoreID=41:ScoreAmount:
				'PuPlayer.playlistplayex pCallouts,"audiocallouts","shootagain.wav",100,1
		'chilloutthemusic
		Else
			BallsRemaining(CurrentPlayer) = BallsRemaining(CurrentPlayer) - 1
			If(BallsRemaining(CurrentPlayer) <= 0) Then
				CheckHighScore()
			Else
				EndOfBallComplete()
			End If
		End If
	End Sub

	Sub EndOfBallComplete()
		ResetNewBallVariables
		Dim NextPlayer
		If(PlayersPlayingGame> 1) Then
			NextPlayer = CurrentPlayer + 1
			If(NextPlayer> PlayersPlayingGame) Then
				NextPlayer = 1
			End If
		Else
			NextPlayer = CurrentPlayer
		End If
		If((BallsRemaining(CurrentPlayer) <= 0) AND(BallsRemaining(NextPlayer) <= 0) ) Then
			EndOfGame()
		Else
			CurrentPlayer = NextPlayer
			AddScore 0
			ResetForNewPlayerBall()
			CreateNewBall()
			If PlayersPlayingGame> 1 Then
				PlaySound "vo_player" &CurrentPlayer
			End If
		End If
	End Sub

	Sub Balldrained
		DOF 312, DOFPulse
		'PuPlayer.playlistplayex pMusic,"audioclear","clear.mp3",100, 1
		'PuPlayer.playlistplayex pBackglass,"videodrain","",100,1
	End Sub

	Sub Drain_Hit()
		Drain.DestroyBall
		BallsOnPlayfield = BallsOnPlayfield - 1
		RandomSoundDrain Drain
		'If Tilted Then
			'StopEndOfBallMode
		'End If
		If(bGameInPLay = True) AND(Tilted = False) Then
			If(bBallSaverActive = True) Then
				AddMultiball 1
				If bMultiBallMode = False Then
					bBallSaverActive = False
					l21.state = 0
					l22.state = 0
					l20.State = 0
					l23.State = 0
					'chilloutthemusic
					ID=42:FX():ScoreID=42:ScoreAmount:
				End If
			ElseIf(CooldownActive = True) Then
				AddMultiball 1
				If bMultiBallMode = False Then
					CooldownActive = False
					l21.state = 0
					l22.state = 0
					l20.State = 0
					l23.State = 0
					'chilloutthemusic
					ID=42:FX():ScoreID=42:ScoreAmount:
				End If
			ElseIf(bExtraBallWonThisBall = True) AND (eblon(CurrentPlayer) = 1) AND (bMultiBallMode = False) Then
				AddMultiball 1
				If bMultiBallMode = False Then
					bExtraBall = False
					bExtraBallWonThisBall = False
					l21.state = 0
					l22.state = 0
					l20.State = 0
					l23.State = 0
					l42.state = 0
					eblon(CurrentPlayer) = 0
					'chilloutthemusic
					ID=41:FX():ScoreID=41:ScoreAmount:
				End If
			ElseIf(bMultiBallMode = True) AND (bExtraBallWonThisBall = True) AND (eblon(CurrentPlayer) = 1) Then
					bMultiBallMode = False
					bBallSaverActive = False
					DOF 127, DOFOff   'DOF - Beacon - OFF
					ChangeGi "white"
					ID=43:FX():ScoreID=43:ScoreAmount:
					l21.state = 0
					l22.state = 0
					l20.State = 0
					l23.State = 0
					ChangeGi "white"
			ElseIf(bMultiBallMode = True) AND (CooldownActive = True) Then
					bMultiBallMode = False
					CooldownActive = False
					DOF 127, DOFOff   'DOF - Beacon - OFF
					ChangeGi "white"
					ID=43:FX():ScoreID=43:ScoreAmount:
					l21.state = 0
					l22.state = 0
					l20.State = 0
					l23.State = 0
					ChangeGi "white"
			ElseIf(bMultiBallMode = True) Then
					bMultiBallMode = False
					bBallSaverActive = False
					CooldownActive = False
					DOF 127, DOFOff   'DOF - Beacon - OFF
					ChangeGi "white"
					ID=43:FX():ScoreID=43:ScoreAmount:
					l21.state = 0
					l22.state = 0
					l20.State = 0
					l23.State = 0
					ChangeGi "white"
			ElseIf (bMultiBallMode = False) Then
					bBallSaverActive = False
					DMD_ShowImages "balllost",1,1500,1500,0
					l21.state = 0
					l22.state = 0
					l20.State = 0
					l23.State = 0
					ChangeGi "white"
	 				vpmtimer.addtimer 500, "Balldrained '"
	 				vpmtimer.addtimer 1000, "EndOfBall '"
	'				vpmtimer.addtimer 1000, "Balldrained '"
	'				vpmtimer.addtimer 6000, "EndOfBall '"
					StopEndOfBallMode
					'ID=43:FX():ScoreID=43:ScoreAmount:
			Else 
					if (BallsOnPlayfield = 0) Then 'Standard Drain
					bMultiBallMode = False
					bBallSaverActive = False
					DMD_ShowImages "balllost",1,1500,1500,0
					l21.state = 0
					l22.state = 0
					l20.State = 0
					l23.State = 0
					ChangeGi "white"
	 				vpmtimer.addtimer 500, "Balldrained '"
	 				vpmtimer.addtimer 1000, "EndOfBall '"
	'				vpmtimer.addtimer 1000, "Balldrained '"
	'				vpmtimer.addtimer 6000, "EndOfBall '"
					StopEndOfBallMode
			End If
			End If
		Else
			If(bExtraBallWonThisBall = True) AND (eblon(CurrentPlayer) = 1) AND (bMultiBallMode = False) Then
				AddMultiball 1
				If bMultiBallMode = False Then
					bExtraBall = False
					bExtraBallWonThisBall = False
					l21.state = 0
					l22.state = 0
					l20.State = 0
					l23.State = 0
					l42.state = 0
					eblon(CurrentPlayer) = 0
					'chilloutthemusic
					ID=41:FX():ScoreID=41:ScoreAmount:
				End If
			ElseIf(bMultiBallMode = True) AND (bExtraBallWonThisBall = True) AND (eblon(CurrentPlayer) = 1) Then
					bMultiBallMode = False
					bBallSaverActive = False
					DOF 127, DOFOff   'DOF - Beacon - OFF
					ChangeGi "white"
					ID=43:FX():ScoreID=43:ScoreAmount:
					l21.state = 0
					l22.state = 0
					l20.State = 0
					l23.State = 0
					ChangeGi "white"
			ElseIf(bMultiBallMode = True) AND (CooldownActive = True) AND (Tilted = True) Then
					bMultiBallMode = False
					CooldownActive = False
					DOF 127, DOFOff   'DOF - Beacon - OFF
					ChangeGi "white"
					ID=43:FX():ScoreID=43:ScoreAmount:
					l21.state = 0
					l22.state = 0
					l20.State = 0
					l23.State = 0
					ChangeGi "white"
			ElseIf(bMultiBallMode = True) AND (Tilted = True) Then
					bMultiBallMode = False
					bBallSaverActive = False
					CooldownActive = False
					DOF 127, DOFOff   'DOF - Beacon - OFF
					ChangeGi "white"
					ID=43:FX():ScoreID=43:ScoreAmount:
					l21.state = 0
					l22.state = 0
					l20.State = 0
					l23.State = 0
					ChangeGi "white"
			Else 
					if (BallsOnPlayfield = 0) Then 'Standard Drain
					bMultiBallMode = False
					bBallSaverActive = False
					CooldownActive = False
					DMD_ShowImages "balllost",1,1500,1500,0
					l21.state = 0
					l22.state = 0
					l20.State = 0
					l23.State = 0
					ChangeGi "white"
	 				vpmtimer.addtimer 500, "Balldrained '"
	 				vpmtimer.addtimer 1000, "EndOfBall '"
			End If
			End If
			End If

	End Sub


'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  BALL SAVE & LAUNCH
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
' 

	Sub ballsavestarttrigger
		'If(bBallSaverReady = True) AND(15 <> 0) And(bBallSaverActive = False) Then
		If(bBallSaverReady = True) And (bBallSaverActive = False) Then
			EnableBallSaver 15
		End If
	End Sub

	Sub swPlungerRest_Hit()
		bBallInPlungerLane = True
		StartImage5
		If bAutoPlunger = True Then
			DOF 114, DOFPulse		
			DOF 115, DOFPulse
			DOF 318, DOFPulse
			swPlungerRest.TimerEnabled = 1
			End If
		DOF 141, DOFOn
		DOF 317, DOFOn
		If (bBallSaverActive = True) Then
			swPlungerRest.TimerEnabled = 1
		End If
		If (CooldownActive = True) Then
			swPlungerRest.TimerEnabled = 1
		End If
		If bSkillshotReady Then
			ID=58:FX():ScoreID=58:ScoreAmount
			UpdateSkillshot()
		End If
		LastSwitchHit = "swPlungerRest"
	End Sub


	Sub swPlungerRest_UnHit()
		bBallInPlungerLane = False
		StartImage4
		CooldownActive = True
		bAutoPlunger = False
		swPlungerRest.TimerEnabled = 0 'stop the launch ball timer if active
		If bSkillShotReady Then
			ResetSkillShotTimer.Enabled = 1
		End If
		DOF 317, DOFOff   'DOF MX - Ball is ready to Launch - OFF
	End Sub

Sub CooldownStart
	l20.State = 2
	l23.State = 2
	'DOF 115, DOFPulse
		if playmode = 1 Then
			vpmtimer.addtimer 10000, "CooldownEnd '" 
		Else
			vpmtimer.addtimer 20000, "CooldownEnd '" 
		End If

End Sub

Sub CooldownEnd
		CooldownActive = False
		l20.State = 0
		l23.State = 0
End Sub

	Sub swPlungerRest_Timer
			Plunger.AutoPlunger = true
			Plunger.Pullback
			Plunger.Fire
		'DMD "start-5.wmv", "", "",  6000
		swPlungerRest.TimerEnabled = 0
	End Sub

	Sub EnableBallSaver(seconds)
		bBallSaverActive = True
		bBallSaverReady = False
		bAutoPlunger = True
		WheelKickerTimer.Enabled = True
		BallSaverTimerExpired.Enabled = True
		l20.BlinkInterval = 160
		l23.BlinkInterval = 160
		l20.State = 2
		l23.State = 2
		'BallSaverSpeedUpTimer.Interval = 1000 * seconds -(1000 * seconds) / 3
		'BallSaverSpeedUpTimer.Enabled = True
		' if you have a ball saver light you might want to turn it on at this point (or make it flash)
	End Sub


	' The ball saver timer has expired.  Turn it off AND reset the game flag
	'
	Sub BallSaverTimerExpired_Timer()
		'debug.print "Ballsaver ended"
		BallSaverTimerExpired.Enabled = False
		l20.State = 0
		l23.State = 0
		ID=46:FX():ScoreID=46:ScoreAmount
		' clear the flag
		Dim waittime
		waittime = 4000
		vpmtimer.addtimer waittime, "ballsavegrace'"
		' if you have a ball saver light then turn it off at this point
		If bExtraBallWonThisBall = True Then
			'l50.State = 1
			'PuPlayer.playlistplayex pPlayfield,"PlayfieldVideos","ShootAgain.mp4",70,1
		Else
			'l50.State = 0
			'PuPlayer.playlistplayex pPlayfield,"PlayfieldVideos","Default.mp4",70,1
		End If
	End Sub

	Sub ballsavegrace
		bBallSaverActive = False
	End Sub

	'Sub BallSaverSpeedUpTimer_Timer()
		'debug.print "Ballsaver Speed Up Light"
		'BallSaverSpeedUpTimer.Enabled = False
		' Speed up the blinking
		'l50.BlinkInterval = 80
		'l50.State = 2
	'End Sub




'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  TABLE VARIABLES
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
' 


	' Game Variables
	Dim LaneBonus
	Dim TargetBonus
	Dim RampBonus
	Dim OrbitBonus
	Dim spinvalue
	Dim finalflips
	Dim Saves
	Dim Drains
	Dim inmode


'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  GAME STARTING & RESETS
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
' 

	Sub Game_Init() 'called at the start of a new game
		Dim i
		For i = 0 to 4
			SkillshotValue(i) = 1000000 ' increases by 1000000 each time it is collected
			Grubs(i) = 0 ' increases by 1 each time it is collected
			eblon(i) = 0
			ebron(i) = 0
			BonusMultiplier(i) = 0
			lane20on(i) = 0
			lane2lon(i) = 0
			lane22on(i) = 0
			lane23on(i) = 0
			bRotateLights = True
			If bOnTheFirstBall Then
				ID=10:FX():ScoreID=10:ScoreAmount
				StopAttractMode()
			End If
		Next
		lrflashtime.Enabled = False
		bExtraBallWonThisBall = False
		TurnOffPlayfieldLights()
'		StartMusic
		'PuPlayer.LabelSet pBackglass,"highheader","",1,""
		'PuPlayer.LabelSet pBackglass,"high1name","",1,""
		'PuPlayer.LabelSet pBackglass,"high1score","",1,""
		'PuPlayer.LabelSet pBackglass,"high2name","",1,""
		'PuPlayer.LabelSet pBackglass,"high2score","",1,""
		'PuPlayer.LabelSet pBackglass,"high3name","",1,""
		'PuPlayer.LabelSet pBackglass,"high3score","",1,""
		'PuPlayer.LabelSet pBackglass,"high4name","",1,""
		'PuPlayer.LabelSet pBackglass,"high4score","",1,""
		'PuPlayer.LabelShowPage pBackglass,1,0,""
		'pUpdateScores
		'PuPlayer.playlistplayex pBackglass,"scene","base.mov",0,1
		'PuPlayer.SetBackground pBackglass,1
		'PuPlayer.playlistplayex pPlayfield,"PlayfieldVideos","default.mp4",0,1
		'PuPlayer.SetBackground pPlayfield,1
		'PuPlayer.LabelSet pBackglass,"Play1","PLAYER 1",1,"{'mt':2,'color':16777215}"
		'PuPlayer.LabelSet pBackglass,"notetitle","",1,""
		'PuPlayer.LabelSet pBackglass,"notecopy","",1,""
		'PuPlayer.playlistplayex pMusic,"audiobg","",soundtrackvol,1
		'PuPlayer.SetLoop 4,1
		'ruleshelperon
		'resetbackglass

	End Sub

	Sub StopEndOfBallMode()              'this sub is called after the last ball is drained
	End Sub

	Sub ResetNewBallVariables()
	End Sub

	Sub TurnOffPlayfieldLights()
		Dim a
		For each a in alights
			a.State = 0
		Next
	End Sub

	Sub ResetNewBallLights() 'turn on or off the needed lights before a new ball is released
		'TurnOffPlayfieldLights()
		'currentplayerbackglass
	End Sub

	Sub startamultiball
		Dim waittime
		waittime = 1000
		vpmtimer.addtimer waittime, "closeupshop'"
	End Sub
	
	Sub closeupshop

	End Sub

	Sub endamultiball

	End Sub


	Sub UpdateSkillShot() 'Updates the skillshot light
		LightSeqSkillshot.Play SeqAllOff
		SetLightColor l28, green, 2
		SetLightColor l29, green, -1
		SetLightColor l30, green, -1
		SetLightColor l31, green, -1
		SetLightColor l32, green, -1
		l28.State = 2

	End Sub

	'Sub SkillshotOff_Hit 'trigger to stop the skillshot due to a weak plunger shot
		'If bSkillShotReady Then

			'ResetSkillShotTimer_Timer
		'End If
	'End Sub

	Sub ResetSkillShotTimer_Timer 'timer to reset the skillshot lights & variables
		ResetSkillShotTimer.Enabled = 0
		bSkillShotReady = False
		bRotateLights = True
		LightSeqSkillshot.StopPlay
		SetLightColor l28, yellow, -1
		SetLightColor l29, yellow, -1
		SetLightColor l30, yellow, -1
		SetLightColor l31, yellow, -1
		SetLightColor l32, yellow, -1
			If l28.State = 2 then l28.State = 0
			If l29.State = 2 then l29.State = 0
			If l30.State = 2 then l30.State = 0
			If l31.State = 2 then l31.State = 0
			If l32.State = 2 then l32.State = 0
	End Sub


'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  RULES HELPER FOR YOUR BACKGLASS
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
' 


	Sub ruleshelperon
		rulestime.enabled = 1
	End Sub

	Sub ruleshelperoff
		rulestime.enabled = 0
	End Sub

	Dim rulesposition
	rulesposition = 0

	Sub rulestime_timer
		If turnoffrules = 1 then exit sub end if
		rulesposition = rulesposition + 1
		Select Case rulesposition
		Case 1
			PuPlayer.LabelSet pBackglass,"notetitle","B U G Multiplier",1,""
			PuPlayer.LabelSet pBackglass,"notecopy","Hit the B U G lane targets to increase multiplier.",1,""
		Case 8
			PuPlayer.LabelSet pBackglass,"notetitle","Grubs!",1,""
			PuPlayer.LabelSet pBackglass,"notecopy","Collect 15 Grubs on top lane targets to activate Grub Madness.",1,""
		Case 15
			PuPlayer.LabelSet pBackglass,"notetitle","Grub Madness!",1,""
			PuPlayer.LabelSet pBackglass,"notecopy","Complete 3 full ramp revolutions in 60 seconds for Super Jackpot.",1,""
		Case 24
			PuPlayer.LabelSet pBackglass,"notetitle","Hakuna Matata",1,""
			PuPlayer.LabelSet pBackglass,"notecopy","Complete bottom left and right target banks to light Hakuna Matata.",1,""
		Case 32
			PuPlayer.LabelSet pBackglass,"notetitle","Jackpot",1,""
			PuPlayer.LabelSet pBackglass,"notecopy","Complete Hakuna Matata to achieve Jackpot.",1,""
		Case 40
			PuPlayer.LabelSet pBackglass,"notetitle","Mystery Wheel",1,""
			PuPlayer.LabelSet pBackglass,"notecopy","Shoot tree stump to raise ramp and spin the mystery wheel.",1,""
		Case 48
			PuPlayer.LabelSet pBackglass,"notetitle","Reserved",1,""
			PuPlayer.LabelSet pBackglass,"notecopy","One more feature",1,""
		Case 56
			rulesposition = 0
	End Select
	End Sub



'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  SECONDARY HIT EVENTS
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
' 

'****************************************************************
'					Sling Shot Animations
'RStep and LStep are the variables that increment the animation
'****************************************************************

Dim RStep, LStep

Sub RightSlingShot_Slingshot
	RSling1.Visible = 1
	Sling1.TransY = -20			'Sling Metal Bracket
	LightEffect 6
	RStep = 0
	RightSlingShot.TimerEnabled = 1
	RightSlingShot.TimerInterval = 10
	'	vpmTimer.PulseSw 52			'Slingshot Rom Switch
	RandomSoundSlingshotRight Sling1
End Sub

Sub RightSlingShot_Timer
	Select Case RStep
		Case 3:RSLing1.Visible = 0:RSLing2.Visible = 1:Sling1.TransY = -10
		Case 4:RSLing2.Visible = 0:Sling1.TransY = 0:RightSlingShot.TimerEnabled = 0
	End Select
	RStep = RStep + 1
End Sub

Sub LeftSlingShot_Slingshot
	LSling1.Visible = 1
	Sling2.TransY = -20			'Sling Metal Bracket
	LightEffect 7
	LStep = 0
	LeftSlingShot.TimerEnabled = 1
	LeftSlingShot.TimerInterval = 10
	'	vpmTimer.PulseSw 51			'Slingshot Rom Switch
	RandomSoundSlingshotLeft Sling2
End Sub

Sub LeftSlingShot_Timer
	Select Case LStep
		Case 3:LSLing1.Visible = 0:LSLing2.Visible = 1:Sling2.TransY = -10
		Case 4:LSLing2.Visible = 0:Sling2.TransY = 0:LeftSlingShot.TimerEnabled = 0
	End Select
	LStep = LStep + 1
End Sub


Sub RotateLaneLights(n) 'n is the direction, 1 or 0, left or right
'1 - Left Skillshot
'2 - Right Skillshot
'3 - Left Lane Rotate
'4 - Right Lane Rotate
    Dim tmp
    If bRotateLights Then
        If n = 1 Then 'left Skillshot
            tmp = l28.State
            l28.State = l29.State
            l29.State = l30.State
            l30.State = l31.State
			l31.State = l32.State
            l32.State = tmp
        Elseif n = 2 Then 'right Skillshot
            tmp = l32.State
			l32.State = l31.State
            l31.State = l30.State
            l30.State = l29.State
            l29.State = l28.State
            l28.State = tmp
		Elseif n = 3 Then 'left lane rotate
            tmp = l28.State
            l28.State = l29.State
            l29.State = l30.State
            l30.State = l31.State
			l31.State = l32.State
            l32.State = tmp
		Else 'right lane rotate
            tmp = l32.State
			l32.State = l31.State
            l31.State = l30.State
            l30.State = l29.State
            l29.State = l28.State
            l28.State = tmp
        End If
    End If
End Sub

'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  Kickers
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
' 


Sub sw44_Hit():ID=15:FX():ScoreID=15:ScoreAmount:SoundSaucerLock:sw44.TimerEnabled = 1:End Sub 'TopLeftKicker
Sub sw44_Timer:sw44.Kick 40, 26 + RND(1) * 5:sw44.TimerEnabled = 0:RandomSoundBallRelease sw44:End Sub

Sub sw47_Hit():ID=18:FX():ScoreID=18:ScoreAmount:SoundSaucerLock:sw47.TimerEnabled = 1:End Sub 'TopRightKicker
Sub sw47_Timer:sw47.Kick 180, 26 + RND(1) * 5:sw47.TimerEnabled = 0:RandomSoundBallRelease sw47:End Sub

Sub Kickout_Hit():ID=19:FX():ScoreID=19:ScoreAmount:SoundSaucerLock:End Sub 'KickoutKicker
Sub Kickout_Timer:kickout.TimerEnabled = 1:KickOut.Kick 40, 26 + RND(1) * 5:End Sub
Sub Kickout_Unhit():RandomSoundBallRelease kickout:End Sub

Sub BallRelease_Unhit():RandomSoundBallRelease BallRelease:End Sub

Sub SaveKicker_Hit()
		SaveKicker.DestroyBall
		PlaySoundAt "TP_GetsEmEveryTime", SaveKicker
		KickoutTimer.Enabled = True
End Sub



'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  RAMPS
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  


Sub sw50_Hit()
	ID=12:FX()
	ScoreID=12:ScoreAmount
		if CooldownActive = True Then
			CooldownStart()
		End If
		if bSkillshotReady Then 
			bRotateLights = False:Exit Sub
		End If
End Sub


'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  TARGETS
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  

'*** A Targets - Hakuna

	Sub sw25_hit
		If bGameInPlay = True Then
		GravePos = 5
		LastSwitchHit = "sw25"
		sw25GraveTimer.Enabled = True
			If sw25l.state = 0 Then ID=22:FX():ScoreID=22:ScoreAmount:sw25l.state = 1:checkAtargets:End If
			If sw25l.state = 1 Then ID=22:FX():ScoreID=22:ScoreAmount:checkAtargets:End If
		End If
	End Sub

	Sub sw26_hit
		If bGameInPlay = True Then
		GravePos = 5
		LastSwitchHit = "sw26"
		sw26GraveTimer.Enabled = True
			If sw26l.state = 0 Then ID=22:FX():ScoreID=22:ScoreAmount:sw26l.state = 1:checkAtargets:End If
			If sw26l.state = 1 Then ID=22:FX():ScoreID=22:ScoreAmount:checkAtargets:End If
		End If
	End Sub

	Sub sw27_hit
		If bGameInPlay = True Then
		GravePos = 5
		LastSwitchHit = "sw27"
		sw27GraveTimer.Enabled = True
			If sw27l.state = 0 Then ID=22:FX():ScoreID=22:ScoreAmount:sw27l.state = 1:checkAtargets:End If
			If sw27l.state = 1 Then ID=22:FX():ScoreID=22:ScoreAmount:checkAtargets:End If
		End If
	End Sub



	Sub sw25GraveTimer_Timer()
		sw25Grave.RotZ = GravePos
		Hyena3.RotZ = GravePos
		If GravePos <= 0.1 AND GravePos >= -0.1 Then Me.Enabled = False:Exit Sub
		If GravePos < 0 Then
			GravePos = ABS(GravePos)- 0.1
		Else
			GravePos = - GravePos + 0.1
		End If
	End Sub

	Sub sw26GraveTimer_Timer()
		sw26Grave.RotZ = GravePos
		Hyena2.RotZ = GravePos
		If GravePos <= 0.1 AND GravePos >= -0.1 Then Me.Enabled = False:Exit Sub
		If GravePos < 0 Then
			GravePos = ABS(GravePos)- 0.1
		Else
			GravePos = - GravePos + 0.1
		End If
	End Sub

	Sub sw27GraveTimer_Timer()
		sw27Grave.RotZ = GravePos
		Hyena1.RotZ = GravePos
		If GravePos <= 0.1 AND GravePos >= -0.1 Then Me.Enabled = False:Exit Sub
		If GravePos < 0 Then
			GravePos = ABS(GravePos)- 0.1
		Else
			GravePos = - GravePos + 0.1
		End If
	End Sub


	Sub checkAtargets
		if Playmode = 1 Then
			LightEffect 9
			If sw25l.state = 1 Then
				If sw25l.state + sw26l.state + sw27l.state = 3 Then
				sw25l.state = 0
				sw26l.state = 0
				sw27l.state = 0
					if HakunaMove >= 0 Then 
					HakunaMove = HakunaMove + 1
					Elseif HakunaMove <= 5 Then
					HakunaMove = HakunaMove + 1
					Else
					HakunaMove = 6
					End If
				Hakuna
				'chilloutthemusic
				End If
			End If
		End If

		If PlayMode = 2 Then
			LightEffect 9
				if (sw25l.state = 1) Or (sw26l.state = 1) Or (sw27l.state = 1) Then
					if HakunaMove >= 0 Then 
					HakunaMove = HakunaMove + 1
					Elseif HakunaMove <= 5 Then
					HakunaMove = HakunaMove + 1
					Else
					HakunaMove = 6
					End If
				Hakuna
				End If

		End If

		If sw25l.state + sw26l.state + sw27l.state = 3 Then
			sw25l.state = 0
			sw26l.state = 0
			sw27l.state = 0
		End If
	End Sub

	Sub Hakuna
			If (HakunaMove = 1) Then l1.state = 1:checkHMStatus:Exit Sub:End If
			If (HakunaMove = 2) Then l2.state = 1:checkHMStatus:Exit Sub:End If
			If (HakunaMove = 3) Then l3.state = 1:checkHMStatus:Exit Sub:End If
			If (HakunaMove = 4) Then l4.state = 1:checkHMStatus:Exit Sub:End If
			If (HakunaMove = 5) Then l5.state = 1:checkHMStatus:Exit Sub:End If
			If (HakunaMove = 6) Then l6.state = 1:checkHMStatus:Exit Sub:End If
			If (HakunaMove = 7) Then checkHMStatus:Exit Sub:End If
			ID=23:FX():ScoreID=23:ScoreAmount:
	End Sub


'*** B Targets - Matata

	Sub sw36_hit
		If bGameInPlay = True Then
		GravePos = 5
		LastSwitchHit = "sw36"
		sw36GraveTimer.Enabled = True
			If sw36l.state = 0 Then ID=22:FX():ScoreID=22:ScoreAmount:sw36l.state = 1:checkBtargets:End If
			If sw36l.state = 1 Then ID=22:FX():ScoreID=22:ScoreAmount:checkBtargets:End If
		End If
	End Sub

	Sub sw37_hit
		If bGameInPlay = True Then
		GravePos = 5
		LastSwitchHit = "sw37"
		sw37GraveTimer.Enabled = True
			If sw37l.state = 0 Then ID=22:FX():ScoreID=22:ScoreAmount:sw37l.state = 1:checkBtargets:End If
			If sw37l.state = 1 Then ID=22:FX():ScoreID=22:ScoreAmount:checkBtargets:End If
		End If
	End Sub

	Sub sw38_hit
		If bGameInPlay = True Then
		GravePos = 5
		LastSwitchHit = "sw38"
		sw38GraveTimer.Enabled = True
			If sw38l.state = 0 Then ID=22:FX():ScoreID=22:ScoreAmount:sw38l.state = 1:checkBtargets:End If
			If sw38l.state = 1 Then ID=22:FX():ScoreID=22:ScoreAmount:checkBtargets:End If
		End If
	End Sub

	Sub sw36GraveTimer_Timer()
		sw36Grave.RotZ = GravePos
		If GravePos <= 0.1 AND GravePos >= -0.1 Then Me.Enabled = False:Exit Sub
		If GravePos < 0 Then
			GravePos = ABS(GravePos)- 0.1
		Else
			GravePos = - GravePos + 0.1
		End If
	End Sub

	Sub sw37GraveTimer_Timer()
		sw37Grave.RotZ = GravePos
		If GravePos <= 0.1 AND GravePos >= -0.1 Then Me.Enabled = False:Exit Sub
		If GravePos < 0 Then
			GravePos = ABS(GravePos)- 0.1
		Else
			GravePos = - GravePos + 0.1
		End If
	End Sub

	Sub sw38GraveTimer_Timer()
		sw38Grave.RotZ = GravePos
		If GravePos <= 0.1 AND GravePos >= -0.1 Then Me.Enabled = False:Exit Sub
		If GravePos < 0 Then
			GravePos = ABS(GravePos)- 0.1
		Else
			GravePos = - GravePos + 0.1
		End If
	End Sub

	Sub checkBtargets
		if Playmode = 1 Then
			LightEffect 9
			If sw36l.state = 1 Then
				If sw36l.state + sw37l.state + sw38l.state = 3 Then
				sw36l.state = 0
				sw37l.state = 0
				sw38l.state = 0
					if MatataMove >= 0 Then 
					MatataMove = MatataMove + 1
					Elseif MatataMove <= 5 Then
					MatataMove = MatataMove + 1
					Else
					MatataMove = 6
					End If
				Matata
				'chilloutthemusic
				End If
			End If
		End If

		If PlayMode = 2 Then
			LightEffect 9
				if (sw36l.state = 1) Or (sw37l.state = 1) Or (sw38l.state = 1) Then
					if MatataMove >= 0 Then 
					MatataMove = MatataMove + 1
					Elseif MatataMove <= 5 Then
					MatataMove = MatataMove + 1
					Else
					MatataMove = 6
					End If
				Matata
				End If
		End If

		If sw36l.state + sw37l.state + sw38l.state = 3 Then
			sw36l.state = 0
			sw37l.state = 0
			sw38l.state = 0
		End If
	End Sub

	Sub Matata
			If (MatataMove = 1) Then l7.state = 1:checkHMStatus:Exit Sub:End If
			If (MatataMove = 2) Then l8.state = 1:checkHMStatus:Exit Sub:End If
			If (MatataMove = 3) Then l9.state = 1:checkHMStatus:Exit Sub:End If
			If (MatataMove = 4) Then l10.state = 1:checkHMStatus:Exit Sub:End If
			If (MatataMove = 5) Then l11.state = 1:checkHMStatus:Exit Sub:End If
			If (MatataMove = 6) Then l12.state = 1:checkHMStatus:Exit Sub:End If
			If (MatataMove = 7) Then checkHMStatus:Exit Sub:End If
			ID=23:FX():ScoreID=23:ScoreAmount:
	End Sub

Sub checkHMStatus
		If l1.state + l2.state + l3.state + l4.state + l5.state + l6.state + l7.state + l8.state + l9.state + l10.state + l11.state + l12.state = 12 Then 
			HakunaMove = 0
			MatataMove = 0
			l1.state = 0
			l2.state = 0
			l3.state = 0
			l4.state = 0
			l5.state = 0
			l6.state = 0
			l7.state = 0
			l8.state = 0
			l9.state = 0
			l10.state = 0
			l11.state = 0
			l12.state = 0
			scorejackpot
			GiEffect 4
			GiEffect 4
			GiEffect 4
			GiEffect 4
			GiEffect 4
		End If
End Sub		


Sub scorejackpot:ID=35:FX():ScoreID=35:ScoreAmount:End Sub	


Sub sw52_Hit:'PlaySoundAtball SoundFX("fx_target", DOFDropTargets)
	LastSwitchHit = "sw52"
	If bGameInPlay = True Then
		if (bDoubleScore = True) Or (bBallSaverReady = True) Or (bBallSaverActive = True) Or (bTripleScore = True) Or (BallGuardActive = True) Or (bExtraBall = True) Or (bMultiBallMode = True) Then 
			ID=45:FX():ScoreID=45:ScoreAmount
			If PlayMode = 2 Then ChildBallGuardActive = True:l43.state = 2:ChildBallGuard:ID=45:FX():End If
			Exit Sub
		end If
		if (bDoubleScore = False) Or (bBallSaverReady = False) Or (bBallSaverActive = False) Or (bTripleScore = False) Or (BallGuardActive = False) Or (bExtraBall = False) Or (bMultiBallMode = False) Then
			ID=13:FX():ScoreID=13:ScoreAmount:If(RampDir = -1) then RiseRamp:End If
			If PlayMode = 2 Then ChildBallGuardActive = True:l43.state = 2:ChildBallGuard:ID=45:FX():End If
		end If
	End If
End Sub




'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  HURRY UP
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  

	Sub sw41_hit
		If bGameInPlay = True Then
		GravePos = 5
		LastSwitchHit = "sw41"
		sw41GraveTimer.Enabled = True

		If HurryUpActive = True Then Exit Sub:End If
		If l24.state = 2 Then Exit Sub:End If


		If sw41l.state = 0 Then
			ID=22 : FX() : ScoreID=22: ScoreAmount
			sw41l.state = 1
			CheckCtargets
		End If
		If sw41l.state = 1 Then
			ID=22 : FX() : ScoreID=22: ScoreAmount
			CheckCtargets
		End If
		End If
	End Sub

	Sub sw42_hit
		If bGameInPlay = True Then
		GravePos = 5
		LastSwitchHit = "sw42"
		sw42GraveTimer.Enabled = True
			If HurryUpActive = True Then Exit Sub:End If
			if l24.state = 2 Then Exit Sub:End If
			If sw42l.state = 0 Then ID=22:FX():ScoreID=22:ScoreAmount:sw42l.state = 1:checkCtargets:End If
			If sw42l.state = 1 Then ID=22:FX():ScoreID=22:ScoreAmount:checkCtargets:End If
		End If
	End Sub

	Sub sw43_hit
		If bGameInPlay = True Then
		GravePos = 5
		LastSwitchHit = "sw43"
		sw43GraveTimer.Enabled = True
			If HurryUpActive = True Then Exit Sub:End If
			if l24.state = 2 Then Exit Sub:End If
			If sw43l.state = 0 Then ID=22:FX():ScoreID=22:ScoreAmount:sw43l.state = 1:checkCtargets:End If
			If sw43l.state = 1 Then ID=22:FX():ScoreID=22:ScoreAmount:checkCtargets:End If
		End If
	End Sub

	Sub sw41GraveTimer_Timer()
		sw41Grave.RotZ = GravePos
		If GravePos <= 0.1 AND GravePos >= -0.1 Then Me.Enabled = False:Exit Sub
		If GravePos < 0 Then
			GravePos = ABS(GravePos)- 0.1
		Else
			GravePos = - GravePos + 0.1
		End If
	End Sub

	Sub sw42GraveTimer_Timer()
		sw42Grave.RotZ = GravePos
		If GravePos <= 0.1 AND GravePos >= -0.1 Then Me.Enabled = False:Exit Sub
		If GravePos < 0 Then
			GravePos = ABS(GravePos)- 0.1
		Else
			GravePos = - GravePos + 0.1
		End If
	End Sub

	Sub sw43GraveTimer_Timer()
		sw43Grave.RotZ = GravePos
		If GravePos <= 0.1 AND GravePos >= -0.1 Then Me.Enabled = False:Exit Sub
		If GravePos < 0 Then
			GravePos = ABS(GravePos)- 0.1
		Else
			GravePos = - GravePos + 0.1
		End If
	End Sub

Dim HurryUpReady
Dim HurryUpStatus
Dim HurryUpActive
Dim Advance
HurryUpReady = False
HurryUpStatus = False
HurryUpActive = False
Advance = 0

	Sub checkCtargets
			LightEffect 9
			If sw41l.state = 1 Then
				If sw41l.state + sw42l.state + sw43l.state = 3 Then
				Letsstartcoconuts
				CoconutsOn = True
				HurryUpReady = True
				ID=56:FX():ScoreID=56:ScoreAmount
				l24.state = 2
				'chilloutthemusic
				End If
			End If
	End Sub

Sub sw24_Hit
		If bGameInPlay = True Then
		ID=14:FX():ScoreID=14:ScoreAmount
		'PlaySoundAtball SoundFX("fx_target", DOFDropTargets)
			If HurryUpReady = True Then
				l24.state = 1
				ID=49:FX():ScoreID=49:ScoreAmount
				l35.state = 2
				HurryUpActive = True
				HurryUpReady = False
					if PlayMode = 1 Then
						HurryUpTimer.interval=60000
					Else
						HurryUpTimer.interval=120000
					end If
				HurryUpTimer.enabled = True
			end If
		End If
		End Sub 'Top Left

Sub HurryUpTimer_Timer()
				HurryUpTimer.enabled = False
					if HurryUpStatus = False Then ID=51:FX():ScoreID=51:ScoreAmount:HurryUpActive = False:l24.state = 0:End If
				sw41l.state = 0:sw42l.state = 0:sw43l.state = 0:l33.state=0:l34.state=0:l35.state=0:HurryUpStatus = False:HurryUpReady = False:Advance = 0
	'turn on bugs
End Sub

Sub HurryUpEnd
	HurryUpTimer.enabled = False
	sw41l.state = 0:sw42l.state = 0:sw43l.state = 0:l33.state=0:l34.state=0:l35.state=0:HurryUpStatus = False:HurryUpActive = False:HurryUpReady = False:Advance = 0
End Sub



Sub sw47_Hit()
		If bGameInPlay = True Then
			ID=18:FX():ScoreID=18:ScoreAmount
			PlaySoundAt "TP_Burp1",sw47:sw47.TimerEnabled = 1
		End If
End Sub 'TopRightKicker

Sub sw47_Timer:sw47.Kick 180, 26 + RND(1) * 5:sw47.TimerEnabled = 0:
		If (HurryUpActive = True) And (Advance < 3) Then
			Advance = Advance + 1
				if Advance = 1 Then l35.state=1:l34.state=2:ID=52:FX():ScoreID=52:ScoreAmount:end if
				if Advance = 2 Then l34.state=1:l33.state=2:ID=53:FX():ScoreID=53:ScoreAmount:end if
		end If
		If (HurryUpActive = True) And (Advance = 3) Then
			HurryUpStatus = True:ID=50:FX():ScoreID=50:ScoreAmount:HurryUpActive = False:l24.state = 0:HurryUpEnd
		end If
End Sub



'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  SPINNERS
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  

Sub sw48_Spin():vpmTimer.pulsesw 48:PlaysoundAt"fx_spinner",sw48:End Sub


'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  LANES
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  	

'*** lanes

Sub sw17_Hit():ID=8:FX():ScoreID=8:ScoreAmount:if l17.state = 0 then l17.state = 1 end if:checklanes:End Sub
Sub sw18_Hit():ID=8:FX():ScoreID=8:ScoreAmount:if l18.state = 0 then l18.state = 1 end if:checklanes:End Sub
Sub sw19_Hit():ID=8:FX():ScoreID=8:ScoreAmount:if l19.state = 0 then l19.state = 1 end if:checklanes:End Sub

	Sub checklanes
			If l17.state + l18.state + l19.state = 3 Then
				'addtablescore
				FlashForMs l17, 1500, 100, 0
				FlashForMs l18, 1500, 100, 0
				FlashForMs l19, 1500, 100, 0
				ID=20:FX():ScoreID=20:ScoreAmount:
				IncrementBonusMultiplier()
			End If
	End Sub

Sub IncrementBonusMultiplier()
	Dim NewBonusLevel

	' if not at the maximum bonus level
	if (BonusMultiplier(CurrentPlayer) < MaxMultiplier) then
		' then set it the next next one and set the lights
		NewBonusLevel = BonusMultiplier(CurrentPlayer) + 1
		SetBonusMultiplier(NewBonusLevel)
   End if
End Sub

Sub SetBonusMultiplier(Level)
	' Set the multiplier to the specified level
	BonusMultiplier(CurrentPlayer) = Level

	' If the multiplier is 1 then turn off all the bonus lights
	If (BonusMultiplier(CurrentPlayer) = 1) Then 
		l36.state = 0:l37.state = 0:l38.state = 0:l39.state = 0:l40.state = 0 
	Else
		' there is a bonus, turn on all the lights upto the current level
		If (BonusMultiplier(CurrentPlayer) = 2) Then l36.state = 1:l37.state = 0:l38.state = 0:l39.state = 0:l40.state = 0:DMD_ShowImages "2x",1,1000,1000,0:Letsstartlarve:End If
		If (BonusMultiplier(CurrentPlayer) = 3) Then l36.state = 1:l37.state = 1:l38.state = 0:l39.state = 0:l40.state = 0:DMD_ShowImages "3x",1,1000,1000,0:End If
		If (BonusMultiplier(CurrentPlayer) = 4) Then l36.state = 1:l37.state = 1:l38.state = 1:l39.state = 0:l40.state = 0:DMD_ShowImages "4x",1,1000,1000,0:Letsstartlarve:End If
		If (BonusMultiplier(CurrentPlayer) = 5) Then l36.state = 1:l37.state = 1:l38.state = 1:l39.state = 1:l40.state = 0:DMD_ShowImages "5x",1,1000,1000,0:End If
		If (BonusMultiplier(CurrentPlayer) = 6) Then l36.state = 1:l37.state = 1:l38.state = 1:l39.state = 1:l40.state = 1:DMD_ShowImages "6x",1,1000,1000,0:Letsstartlarve:End If
		If (BonusMultiplier(CurrentPlayer) > 7) Then BonusMultiplier(CurrentPlayer) = BonusMultiplier(CurrentPlayer) - 1:End If
	End If
End Sub
			

'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  GRUB MADNESS
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  	


'*** top lanes

Sub sw28_Hit()
		if PlayMode = 1 Then
		'AdultMode
		ScoreID=9:ScoreAmount
			if(Grubs(CurrentPlayer) < 6) And (bGrubMadness = False)  And (l28.state = 0) Then 
				ID=9:FX()
				AwardGrubs()
				SetLightColor l28, yellow, -1
				l28.state = 1
				topchecklanes
			End If
			if bSkillshotReady And l28.state = 2 Then 
				AwardSkillshot
			else
				ID=9:FX()
			End If

		Else
		'ChildMode
		ScoreID=9:ScoreAmount
			if(Grubs(CurrentPlayer) < 6) And (bGrubMadness = False) Then 
				ID=9:FX()
				AwardGrubs()
			End If
			if bSkillshotReady And l28.state = 2 Then 
				AwardSkillshot
			Else 
				SetLightColor l28, yellow, -1
				l28.state = 1
				topchecklanes
			End If
		End If
End Sub

Sub sw29_Hit()
		if PlayMode = 1 Then
		'AdultMode
		ScoreID=9:ScoreAmount
			if(Grubs(CurrentPlayer) < 6) And (bGrubMadness = False)  And (l29.state = 0) Then 
				ID=9:FX()
				AwardGrubs()
				SetLightColor l29, yellow, -1
				l29.state = 1
				topchecklanes
			End If
			if bSkillshotReady And l29.state = 2 Then 
				AwardSkillshot
			else
				ID=9:FX()
			End If

		Else
		'ChildMode
		ScoreID=9:ScoreAmount
			if(Grubs(CurrentPlayer) < 6) And (bGrubMadness = False) Then 
				ID=9:FX()
				AwardGrubs()
			End If
			if bSkillshotReady And l29.state = 2 Then 
				AwardSkillshot
			Else 
				SetLightColor l29, yellow, -1
				l29.state = 1
				topchecklanes
			End If
		End If

End Sub

Sub sw30_Hit()
		if PlayMode = 1 Then
		'AdultMode
		ScoreID=9:ScoreAmount
			if(Grubs(CurrentPlayer) < 6) And (bGrubMadness = False)  And (l30.state = 0) Then 
				ID=9:FX()
				AwardGrubs()
				SetLightColor l30, yellow, -1
				l30.state = 1
				topchecklanes
			End If
			if bSkillshotReady And l30.state = 2 Then 
				AwardSkillshot
			else
				ID=9:FX()
			End If

		Else
		'ChildMode
		ScoreID=9:ScoreAmount
			if(Grubs(CurrentPlayer) < 6) And (bGrubMadness = False) Then 
				ID=9:FX()
				AwardGrubs()
			End If
			if bSkillshotReady And l30.state = 2 Then 
				AwardSkillshot
			Else 
				SetLightColor l30, yellow, -1
				l30.state = 1
				topchecklanes
			End If
		End If
End Sub

Sub sw31_Hit()
		if PlayMode = 1 Then
		'AdultMode
		ScoreID=9:ScoreAmount
			if(Grubs(CurrentPlayer) < 6) And (bGrubMadness = False)  And (l31.state = 0) Then 
				ID=9:FX()
				AwardGrubs()
				SetLightColor l31, yellow, -1
				l31.state = 1
				topchecklanes
			End If
			if bSkillshotReady And l31.state = 2 Then 
				AwardSkillshot
			else
				ID=9:FX()
			End If

		Else
		'ChildMode
		ScoreID=9:ScoreAmount
			if(Grubs(CurrentPlayer) < 6) And (bGrubMadness = False) Then 
				ID=9:FX()
				AwardGrubs()
			End If
			if bSkillshotReady And l31.state = 2 Then 
				AwardSkillshot
			Else 
				SetLightColor l31, yellow, -1
				l31.state = 1
				topchecklanes
			End If
		End If
End Sub

Sub sw32_Hit()
		if PlayMode = 1 Then
		'AdultMode
		ScoreID=9:ScoreAmount
			if(Grubs(CurrentPlayer) < 6) And (bGrubMadness = False)  And (l32.state = 0) Then 
				ID=9:FX()
				AwardGrubs()
				SetLightColor l32, yellow, -1
				l32.state = 1
				topchecklanes
			End If
			if bSkillshotReady And l32.state = 2 Then 
				AwardSkillshot
			else
				ID=9:FX()
			End If

		Else
		'ChildMode
		ScoreID=9:ScoreAmount
			if(Grubs(CurrentPlayer) < 6) And (bGrubMadness = False) Then 
				ID=9:FX()
				AwardGrubs()
			End If
			if bSkillshotReady And l32.state = 2 Then 
				AwardSkillshot
			Else 
				SetLightColor l32, yellow, -1
				l32.state = 1
				topchecklanes
			End If
		End If
End Sub


	Sub topchecklanes
			If l28.state + l29.state + l30.state + l31.state + l32.state = 5 Then
				FlashForMs l28, 1500, 100, 0
				FlashForMs l29, 1500, 100, 0
				FlashForMs l30, 1500, 100, 0
				FlashForMs l31, 1500, 100, 0
				FlashForMs l32, 1500, 100, 0
				ID=21:FX():ScoreID=21:ScoreAmount:
			End If
	End Sub

sub GrubMadnessBegin
	if(Grubs(CurrentPlayer) => 5) Then
	bGrubMadness = True
	GateWall.Collidable = false
	ID=33:FX():ScoreID=33:ScoreAmount
	movementtimer.Enabled = True
		if PlayMode = 1 Then
			GrubMadnessTimer.interval=60000
			LightEffect 10
		Else
			GrubMadnessTimer.interval=120000
			LightEffect 14
		end If
	GrubMadnessTimer.Enabled = True
	GiEffect 3
	GiEffect 1
	GiEffect 3
	GiEffect 1
	lanternL001.state = 2
	End If
end sub

sub GrubMadnessTimer_Timer()
    GrubMadnessEnd
end sub

sub GrubMadnessEnd
	if(Grubs(CurrentPlayer) >= 5) Then
		Grubs(CurrentPlayer) = 0
		GateWall.Collidable = true
			if bGameInPLay = True Then
				ID=34:FX():ScoreID=34:ScoreAmount
			End If
		bGrubMadness = False
		grubloop = 0
		LightEffect 13
		lanternL001.state = 0
		lanternL002.state = 0
		lanternL003.state = 0
		movementtimer.Enabled = True
			if PlayMode = 1 Then
				l28.state = 0
				l29.state = 0
				l30.state = 0
				l31.state = 0
				l32.state = 0
			Else
				'ChildModeOptions
			End If
	end If
GrubMadnessTimer.enabled=false
end sub


Sub movementtimer_Timer()
	If gateopen = True Then
		Door.RotZ = Door.RotZ + 1
		If  Door.RotZ = 0 Then
			movementtimer.Enabled = False
			gateopen = False
			Door.Collidable = True
		End If
	End If
	If gateopen = False Then
		Door.RotZ = Door.RotZ - 1
		If  Door.RotZ = -80 Then
			movementtimer.Enabled = False
			gateopen = True
			Door.Collidable = False
		End If
	End If
End Sub

Sub REnd1_Hit()
		kickout.Enabled = True
			if GrubLoop >= 0 Then
			GrubLoop = GrubLoop + 1
			GrubLoopCount()
			Else
			GrubLoop = 0
			GrubLoop = GrubLoop + 1
			GrubLoopCount()
			end If
End Sub

sub GrubLoopCount()
        if GrubLoop = 1 then
			if bBallInPlungerLane = false then
				ID=47:FX():ScoreID=47:ScoreAmount:lanternL002.state = 2:lanternL001.state = 1
			end if
        Elseif GrubLoop = 2 then
			if bBallInPlungerLane = false then
				ID=48:FX():ScoreID=48:ScoreAmount:lanternL003.state = 2:lanternL002.state = 1
			end if
        Elseif GrubLoop = 3 then
			if bBallInPlungerLane = false then
			ScoreSuperJackpot
			end if
        end if
end sub

Sub ScoreSuperJackpot:ID=44:FX():ScoreID=44:ScoreAmount:GrubMadnessEnd:End Sub	




'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  BUMPERS
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
' 
	Dim Bumper001, Bumper002, Bumper003


	Sub Bumper1_Hit
		LightEffect 5
		StartBumper
		If NOT Tilted Then
			If bSkillShotReady Then ResetSkillShotTimer_Timer
			'PlaySoundAt SoundFXDOF("fx_bumper", 107, DOFPulse, DOFContactors), ActiveBall
			RandomSoundBumperTop Bumper1
			Bumper001 = True
			DOF 110, DOFPulse
			DOF 302, DOFPulse   'DOF MX - Bumper 1
			ScoreID=11:ScoreAmount:
			ID=11:FX()
		End If
	End Sub

	Sub Bumper2_Hit
		LightEffect 5
		StartBumper
		If NOT Tilted Then
			If bSkillShotReady Then ResetSkillShotTimer_Timer
			'PlaySoundAt SoundFXDOF("fx_bumper", 109, DOFPulse, DOFContactors), ActiveBall
			RandomSoundBumperMiddle Bumper2
			Bumper002 = True			
			DOF 111, DOFPulse
			DOF 303, DOFPulse   'DOF MX - Bumper 2
			ScoreID=11:ScoreAmount:
			ID=11:FX()
		End If
	End Sub

	Sub Bumper3_Hit
		LightEffect 5
		StartBumper
		If NOT Tilted Then
			If bSkillShotReady Then ResetSkillShotTimer_Timer
			'PlaySoundAt SoundFXDOF("fx_bumper", 108, DOFPulse, DOFContactors), ActiveBall
			RandomSoundBumperBottom Bumper3
			Bumper003 = True
			DOF 112, DOFPulse
			DOF 304, DOFPulse   'DOF MX - Bumper 3
			ScoreID=11:ScoreAmount:
			ID=11:FX()
		End If
	End Sub

'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  TREES
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X 

' Tree animation
Dim MyPi, TreeStep, TreeDir
MyPi = Round(4 * Atn(1), 6) / 90
TreeStep = 0

Sub Trees_Timer()
    TreeDir = SIN(TreeStep * MyPi)
    TreeStep = (TreeStep + 1)MOD 360
    Tree1.RotY = - TreeDir
    Tree2.RotY = TreeDir
    Tree3.RotY = - TreeDir
    Tree4.RotY = TreeDir
    Tree5.RotY = - TreeDir
    Tree6.RotY = TreeDir
    Tree7.RotY = - TreeDir
    Tree8.RotY = TreeDir
    'Tree9.RotY = - TreeDir
    'Tree10.RotY = TreeDir
    'Tree11.RotY = - TreeDir
    'Tree12.RotY = TreeDir
    'Tree13.RotY = - TreeDir
    'Tree14.RotY = TreeDir
    'Tree15.RotY = - TreeDir
End Sub

'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  IMAGE
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X 

'Apron Image Switcher
'Playmode 1 = Adult
'Playmode 2 = Child


Dim IMGPos, Images
Images = Array("w1", "w2")

Sub ImageTimerAdult_Timer
    'debug.print IMGpos
		imagea.visible = False
		Image.visible = True
	    Image.ImageA = "w1"
		'IMGPos = (IMGPos) MOD 2
		ImageTimerAdult.Enabled = 0
End Sub

Sub ImageTimerChild_Timer
		Image.visible = False
		Imagea.visible = True
		Imagea.ImageA = "w2"
		'IMGPos = (IMGPos + 1) MOD 2
		ImageTimerChild.Enabled = 0
End Sub

Sub StopImage
    IMGPos = 0
	ImageTimer.Enabled = 0
End Sub



'Playfield Screen


Dim IMGPos2, PFBallGuard, PFBallLock, PFBallLost, PFBallSaved, PFBallSaver, PFBurpOff, PFCareful, PFDouble, PFExtraBall, PFGameOver, PFGrubMadness, PFInsertCoin, PFIntro, PFJackpot, PFJunglePinball, PFMultiball, PFShootAgain, PFSkillshot, PFSuperJackpot, PFTilt, PFTriple
PFBallGuard = Array("BallGuard", "BallGuard", "BallGuard", "BallGuard", "BallGuard", "BallGuard", "BallGuard", "Default", "Default", "Default", "Default", "Default", "Default", "Default", "BallGuard", "BallGuard", "BallGuard", "BallGuard", "BallGuard", "BallGuard", "BallGuard", "Default", "Default", "Default", "Default", "Default", "Default", "Default")
PFBallLock = Array("BallLocked", "BallLocked", "BallLocked", "BallLocked", "BallLocked", "BallLocked", "BallLocked", "Default", "Default", "Default", "Default", "Default", "Default", "Default", "BallLocked", "BallLocked", "BallLocked", "BallLocked", "BallLocked", "BallLocked", "BallLocked", "Default", "Default", "Default", "Default", "Default", "Default", "Default")
PFBallLost = Array("BallLost", "BallLost", "BallLost", "BallLost", "BallLost", "BallLost", "BallLost", "Default", "Default", "Default", "Default", "Default", "Default", "Default", "BallLost", "BallLost", "BallLost", "BallLost", "BallLost", "BallLost", "BallLost", "Default", "Default", "Default", "Default", "Default", "Default", "Default")
PFBallSaved = Array("BallSaved", "BallSaved", "BallSaved", "BallSaved", "BallSaved", "BallSaved", "BallSaved", "Default", "Default", "Default", "Default", "Default", "Default", "Default", "BallSaved", "BallSaved", "BallSaved", "BallSaved", "BallSaved", "BallSaved", "BallSaved", "Default", "Default", "Default", "Default", "Default", "Default", "Default")
PFBallSaver = Array("BallSaver", "BallSaver", "BallSaver", "BallSaver", "BallSaver", "BallSaver", "BallSaver", "Default", "Default", "Default", "Default", "Default", "Default", "Default", "BallSaver", "BallSaver", "BallSaver", "BallSaver", "BallSaver", "BallSaver", "BallSaver", "Default", "Default", "Default", "Default", "Default", "Default", "Default")
PFBurpOff = Array("BurpOff", "BurpOff", "BurpOff", "BurpOff", "BurpOff", "BurpOff", "BurpOff", "Default", "Default", "Default", "Default", "Default", "Default", "Default", "BurpOff", "BurpOff", "BurpOff", "BurpOff", "BurpOff", "BurpOff", "BurpOff", "Default", "Default", "Default", "Default", "Default", "Default", "Default")
PFCareful = Array("Careful", "Careful", "Careful", "Careful", "Careful", "Careful", "Careful", "Default", "Default", "Default", "Default", "Default", "Default", "Default", "Careful", "Careful", "Careful", "Careful", "Careful", "Careful", "Careful", "Default", "Default", "Default", "Default", "Default", "Default", "Default")
PFDouble = Array("Double", "Double", "Double", "Double", "Double", "Double", "Double", "Default", "Default", "Default", "Default", "Default", "Default", "Default", "Double", "Double", "Double", "Double", "Double", "Double", "Double", "Default", "Default", "Default", "Default", "Default", "Default", "Default")
PFExtraBall = Array("ExtraBall", "ExtraBall", "ExtraBall", "ExtraBall", "ExtraBall", "ExtraBall", "ExtraBall", "Default", "Default", "Default", "Default", "Default", "Default", "Default", "ExtraBall", "ExtraBall", "ExtraBall", "ExtraBall", "ExtraBall", "ExtraBall", "ExtraBall", "Default", "Default", "Default", "Default", "Default", "Default", "Default")
PFGameOver = Array("GameOver", "GameOver", "GameOver", "GameOver", "GameOver", "GameOver", "GameOver", "Default", "Default", "Default", "Default", "Default", "Default", "Default", "GameOver", "GameOver", "GameOver", "GameOver", "GameOver", "GameOver", "GameOver", "Default", "Default", "Default", "Default", "Default", "Default", "Default")
PFGrubMadness = Array("GrubMadness", "GrubMadness", "GrubMadness", "GrubMadness", "GrubMadness", "GrubMadness", "GrubMadness", "Default", "Default", "Default", "Default", "Default", "Default", "Default", "GrubMadness", "GrubMadness", "GrubMadness", "GrubMadness", "GrubMadness", "GrubMadness", "GrubMadness", "Default", "Default", "Default", "Default", "Default", "Default", "Default")
PFInsertCoin = Array("InsertCoin", "InsertCoin", "InsertCoin", "InsertCoin", "InsertCoin", "InsertCoin", "InsertCoin", "Default", "Default", "Default", "Default", "Default", "Default", "Default", "InsertCoin", "InsertCoin", "InsertCoin", "InsertCoin", "InsertCoin", "InsertCoin", "InsertCoin", "Default", "Default", "Default", "Default", "Default", "Default", "Default")
PFIntro = Array("Devious626", "Devious626", "Devious626", "Devious626", "Devious626", "Devious626", "Devious626", "Presents", "Presents", "Presents", "Presents", "Presents", "Presents", "Presents", "TimonandPumbaas", "TimonandPumbaas", "TimonandPumbaas", "TimonandPumbaas", "TimonandPumbaas", "TimonandPumbaas", "TimonandPumbaas","JunglePinball", "JunglePinball", "JunglePinball", "JunglePinball", "JunglePinball", "JunglePinball", "JunglePinball")
PFJackpot = Array("Jackpot", "Jackpot", "Jackpot", "Jackpot", "Jackpot", "Jackpot", "Jackpot", "Default", "Default", "Default", "Default", "Default", "Default", "Default", "Jackpot", "Jackpot", "Jackpot", "Jackpot", "Jackpot", "Jackpot", "Jackpot", "Default", "Default", "Default", "Default", "Default", "Default", "Default")
PFJunglePinball = Array("JunglePinball", "JunglePinball", "JunglePinball", "JunglePinball", "JunglePinball", "JunglePinball", "JunglePinball", "Default", "Default", "Default", "Default", "Default", "Default", "Default", "JunglePinball", "JunglePinball", "JunglePinball", "JunglePinball", "JunglePinball", "JunglePinball", "JunglePinball", "Default", "Default", "Default", "Default", "Default", "Default", "Default")
PFMultiball = Array("Multiball", "Multiball", "Multiball", "Multiball", "Multiball", "Multiball", "Multiball", "Default", "Default", "Default", "Default", "Default", "Default", "Default", "Multiball", "Multiball", "Multiball", "Multiball", "Multiball", "Multiball", "Multiball", "Default", "Default", "Default", "Default", "Default", "Default", "Default")
PFShootAgain = Array("ShootAgain", "ShootAgain", "ShootAgain", "ShootAgain", "ShootAgain", "ShootAgain", "ShootAgain", "Default", "Default", "Default", "Default", "Default", "Default", "Default", "ShootAgain", "ShootAgain", "ShootAgain", "ShootAgain", "ShootAgain", "ShootAgain", "ShootAgain", "Default", "Default", "Default", "Default", "Default", "Default", "Default")
PFSkillshot = Array("Skillshot", "Skillshot", "Skillshot", "Skillshot", "Skillshot", "Skillshot", "Skillshot", "Default", "Default", "Default", "Default", "Default", "Default", "Default", "Skillshot", "Skillshot", "Skillshot", "Skillshot", "Skillshot", "Skillshot", "Skillshot", "Default", "Default", "Default", "Default", "Default", "Default", "Default")
PFSuperJackpot = Array("SuperJackpot", "SuperJackpot", "SuperJackpot", "SuperJackpot", "SuperJackpot", "SuperJackpot", "SuperJackpot", "Default", "Default", "Default", "Default", "Default", "Default", "Default", "SuperJackpot", "SuperJackpot", "SuperJackpot", "SuperJackpot", "SuperJackpot", "SuperJackpot", "SuperJackpot", "Default", "Default", "Default", "Default", "Default", "Default", "Default")
PFTilt = Array("Tilt", "Tilt", "Tilt", "Tilt", "Tilt", "Tilt", "Tilt", "Default", "Default", "Default", "Default", "Default", "Default", "Default", "Tilt", "Tilt", "Tilt", "Tilt", "Tilt", "Tilt", "Tilt", "Default", "Default", "Default", "Default", "Default", "Default", "Default")
PFTriple = Array("Triple", "Triple", "Triple", "Triple", "Triple", "Triple", "Triple", "Default", "Default", "Default", "Default", "Default", "Default", "Default", "Triple", "Triple", "Triple", "Triple", "Triple", "Triple", "Triple", "Default", "Default", "Default", "Default", "Default", "Default", "Default")

Sub StartImage2
    IMGPos2 = 0
	Image2.visible = True
	ImageTimer2.Enabled = 1
End Sub

Sub ImageTimer2_Timer
    'debug.print IMGpos
    'Image2.ImageA = Images2(IMGPos2)
    'IMGPos2 = (IMGPos2 + 1) MOD 28
		If (sw45activate = True) or (BallLocked = True) Then 
			Image2.ImageA = PFBallLock(IMGPos2):IMGPos2 = (IMGPos2 + 1) MOD 28'BallLock
		ElseIf (bExtraBall = True) Then 
			Image2.ImageA = PFExtraBall(IMGPos2):IMGPos2 = (IMGPos2 + 1) MOD 28'ExtraBall
		ElseIf (bBallSaverActive = True) Then
			ImageTimer2.interval = 100
			Image2.ImageA = PFBallSaver(IMGPos2):IMGPos2 = (IMGPos2 + 1) MOD 28'BallSaver
		ElseIf (bDoubleScore = True) Then
			ImageTimer2.interval = 100
			Image2.ImageA = PFDouble(IMGPos2):IMGPos2 = (IMGPos2 + 1) MOD 28'Double
		ElseIf (bTripleScore = True) Then
			ImageTimer2.interval = 100
			Image2.ImageA = PFTriple(IMGPos2):IMGPos2 = (IMGPos2 + 1) MOD 28'Triple
		ElseIf (BallGuardActive = True) OR (ChildBallGuardActive= True) Then
			ImageTimer2.interval = 100
			Image2.ImageA = PFBallGuard(IMGPos2):IMGPos2 = (IMGPos2 + 1) MOD 28'BallGuard
		ElseIf (bMultiBallMode = True) Then
			ImageTimer2.interval = 100
			Image2.ImageA = PFMultiball(IMGPos2):IMGPos2 = (IMGPos2 + 1) MOD 28'Multiball
		'ElseIf (bMultiBallMode = True) Then
			'Image2.ImageA = PFMultiball(IMGPos2):IMGPos2 = (IMGPos2 + 1) MOD 28:End If'BallLost
		'ElseIf (bMultiBallMode = True) Then
			'Image2.ImageA = PFMultiball(IMGPos2):IMGPos2 = (IMGPos2 + 1) MOD 28:End If'BallSaved
		ElseIf (HurryUpActive = True) Then
			ImageTimer2.interval = 100
			Image2.ImageA = PFBurpOff(IMGPos2):IMGPos2 = (IMGPos2 + 1) MOD 28'BurpOff
		'ElseIf (bMultiBallMode = True) Then
			'Image2.ImageA = PFMultiball(IMGPos2):IMGPos2 = (IMGPos2 + 1) MOD 28:End If'Careful
		'ElseIf (bMultiBallMode = True) Then
			'Image2.ImageA = PFMultiball(IMGPos2):IMGPos2 = (IMGPos2 + 1) MOD 28:End If'GameOver
		ElseIf (bGrubMadness = True) Then
			ImageTimer2.interval = 100
			Image2.ImageA = PFGrubMadness(IMGPos2):IMGPos2 = (IMGPos2 + 1) MOD 28'GrubMadness
		'ElseIf (bMultiBallMode = True) Then
			'Image2.ImageA = PFMultiball(IMGPos2):IMGPos2 = (IMGPos2 + 1) MOD 28:End If'InsertCoin
		ElseIf (bAttractMode = True) Then
			ImageTimer2.interval = 300
			Image2.ImageA = PFIntro(IMGPos2):IMGPos2 = (IMGPos2 + 1) MOD 28'Intro
		'ElseIf (bMultiBallMode = True) Then
			'Image2.ImageA = PFMultiball(IMGPos2):IMGPos2 = (IMGPos2 + 1) MOD 28:End If'Jackpot
		ElseIf (Tilted= True) Then
			Image2.ImageA = PFTilt(IMGPos2):IMGPos2 = (IMGPos2 + 1) MOD 28'Tilt
		'ElseIf (bMultiBallMode = True) Then
			'Image2.ImageA = PFMultiball(IMGPos2):IMGPos2 = (IMGPos2 + 1) MOD 28:End If'ShootAgain
		ElseIf (bSkillshotReady = True) Then
			Image2.ImageA = PFSkillshot(IMGPos2):IMGPos2 = (IMGPos2 + 1) MOD 28'Skillshot
		'ElseIf (bMultiBallMode = True) Then
			'Image2.ImageA = PFMultiball(IMGPos2):IMGPos2 = (IMGPos2 + 1) MOD 28:End If'SuperJackpot
		Else
			ImageTimer2.interval = 100
			Image2.ImageA = PFJunglePinball(IMGPos2):IMGPos2 = (IMGPos2 + 1) MOD 28:end If'JunglePinball
End Sub

'Wheel Selection Sign Logos

Sign = False

Dim IMGPos3, Images3, Sign, Images3Lock, Images3EBall, Images3SBall, Images3Dbl, Images3Tpl, Images3BG, Images3Default, Images3MB
Images3 = Array("Stop1", "Symbol1", "Symbol2", "Symbol3", "Symbol4", "Symbol5", "Symbol6", "Stop1", "Symbol1", "Symbol2", "Symbol3", "Symbol4", "Symbol5", "Symbol6") 'Spin
Images3Lock = Array("Stop1", "Stop1", "Stop1", "Stop1", "Stop1", "Stop1", "Stop1", "Symbol4", "Symbol4", "Symbol4", "Symbol4", "Symbol4", "Symbol4", "Symbol4") 'Balllocked
Images3MB = Array("Stop1", "Stop1", "Stop1", "Stop1", "Stop1", "Stop1", "Stop1", "Multi1", "Multi1", "Multi1", "Multi1", "Multi1", "Multi1", "Multi1") 'Multiball
Images3EBall = Array("Stop1", "Stop1", "Stop1", "Stop1", "Stop1", "Stop1", "Stop1", "Symbol1", "Symbol1", "Symbol1", "Symbol1", "Symbol1", "Symbol1", "Symbol1") 'Extraball
Images3SBall = Array("Stop1", "Stop1", "Stop1", "Stop1", "Stop1", "Stop1", "Stop1", "Symbol2", "Symbol2", "Symbol2", "Symbol2", "Symbol2", "Symbol2", "Symbol2") 'Saveball
Images3Dbl = Array("Stop1", "Stop1", "Stop1", "Stop1", "Stop1", "Stop1", "Stop1", "Symbol5", "Symbol5", "Symbol5", "Symbol5", "Symbol5", "Symbol5", "Symbol5") 'Double
Images3Tpl = Array("Stop1", "Stop1", "Stop1", "Stop1", "Stop1", "Stop1", "Stop1", "Symbol3", "Symbol3", "Symbol3", "Symbol3", "Symbol3", "Symbol3", "Symbol3") 'Triple
Images3BG = Array("Stop1", "Stop1", "Stop1", "Stop1", "Stop1", "Stop1", "Stop1", "Symbol6", "Symbol6", "Symbol6", "Symbol6", "Symbol6", "Symbol6", "Symbol6") 'BallGuard
Images3Default = Array("Wheel1", "Wheel2", "Wheel3", "Wheel4", "Wheel5", "Wheel6", "Wheel7", "Wheel1", "Wheel2", "Wheel3", "Wheel4", "Wheel5", "Wheel6", "Wheel7") 'Default

Sub StartImage3
    IMGPos3 = 0
		If Table1.ShowDT = true then Image4.visible = True:ImageTimer3.Enabled = 1:End If
		If Table1.ShowDT = False then Image3.visible = True:ImageTimer3.Enabled = 1:End If
	Sign = True
End Sub

Sub ImageTimer3_Timer
    'debug.print IMGpos
		If (sw45activate = True) or (BallLocked = True) Then
				If Table1.ShowDT = true then Image4.ImageA = Images3Lock(IMGPos3):IMGPos3 = (IMGPos3 + 1) MOD 14:End If
				If Table1.ShowDT = False then Image3.ImageA = Images3Lock(IMGPos3):IMGPos3 = (IMGPos3 + 1) MOD 14:End If
		ElseIf (bExtraBall = True) Then
				If Table1.ShowDT = true then Image4.ImageA = Images3EBall(IMGPos3):IMGPos3 = (IMGPos3 + 1) MOD 14:End If
				If Table1.ShowDT = False then Image3.ImageA = Images3EBall(IMGPos3):IMGPos3 = (IMGPos3 + 1) MOD 14:End If
		ElseIf (bBallSaverActive = True) Then
				If Table1.ShowDT = true then Image4.ImageA = Images3SBall(IMGPos3):IMGPos3 = (IMGPos3 + 1) MOD 14:End If
				If Table1.ShowDT = False then Image3.ImageA = Images3SBall(IMGPos3):IMGPos3 = (IMGPos3 + 1) MOD 14:End If
		ElseIf (bDoubleScore = True) Then
				If Table1.ShowDT = true then Image4.ImageA = Images3Dbl(IMGPos3):IMGPos3 = (IMGPos3 + 1) MOD 14:End If
				If Table1.ShowDT = False then Image3.ImageA = Images3Dbl(IMGPos3):IMGPos3 = (IMGPos3 + 1) MOD 14:End If
		ElseIf (bTripleScore = True) Then
				If Table1.ShowDT = true then Image4.ImageA = Images3Tpl(IMGPos3):IMGPos3 = (IMGPos3 + 1) MOD 14:End If
				If Table1.ShowDT = False then Image3.ImageA = Images3Tpl(IMGPos3):IMGPos3 = (IMGPos3 + 1) MOD 14:End If
		ElseIf (BallGuardActive = True) Then
				If Table1.ShowDT = true then Image4.ImageA = Images3BG(IMGPos3):IMGPos3 = (IMGPos3 + 1) MOD 14:End If
				If Table1.ShowDT = False then Image3.ImageA = Images3BG(IMGPos3):IMGPos3 = (IMGPos3 + 1) MOD 14:End If
		ElseIf (TreeKickActivated = True) Then
				If Table1.ShowDT = true then Image4.ImageA = Images3(IMGPos3):IMGPos3 = (IMGPos3 + 1) MOD 14:End If
				If Table1.ShowDT = False then Image3.ImageA = Images3(IMGPos3):IMGPos3 = (IMGPos3 + 1) MOD 14:End If
		ElseIf (bMultiBallMode = True) Then
				If Table1.ShowDT = true then Image4.ImageA = Images3MB(IMGPos3):IMGPos3 = (IMGPos3 + 1) MOD 14:End If
				If Table1.ShowDT = False then Image3.ImageA = Images3MB(IMGPos3):IMGPos3 = (IMGPos3 + 1) MOD 14:End If
		Else
			If Table1.ShowDT = true then Image4.ImageA = Images3Default(IMGPos3):IMGPos3 = (IMGPos3 + 1) MOD 14:end If
			If Table1.ShowDT = False then Image3.ImageA = Images3Default(IMGPos3):IMGPos3 = (IMGPos3 + 1) MOD 14:end If
		end If
End Sub

Sub StopImage3
    IMGPos3 = 0
		If Table1.ShowDT = true then Image4.visible = False:ImageTimer3.Enabled = 0:End If
		If Table1.ShowDT = False then Image3.visible = False:ImageTimer3.Enabled = 0:End If
	Sign = False
End Sub



'Shooter Lane


Dim IMGPos4, Images4
Images4 = Array("Plant1", "Plant2", "Plant3", "Plant4", "Plant5", "Plant6", "Plant7", "Plant8", "Plant9", "Plant10", "Plant11", "Plant12", "Plant13", "Plant14", "Plant15", "Plant16", "Plant17", "Plant18", "Plant19", "Plant20", "Plant21")
'Images4 = Array("Stop1", "Stop1", "Stop1", "Stop1", "Stop1", "Stop1", "Stop1", "Stop2", "Stop2", "Stop2", "Stop2", "Stop2", "Stop2", "Stop2", "Stop3", "Stop3", "Stop3", "Stop3", "Stop3", "Stop3", "Stop3")

Sub StartImage4
    IMGPos4 = 0
	Plant.visible = True
	ImageTimer4.Enabled = 1
End Sub

Sub ImageTimer4_Timer
    'debug.print IMGpos
    Plant.ImageA = Images4(IMGPos4)
    IMGPos4 = (IMGPos4 + 1) MOD 21
	ImageTimer4.Enabled = 0
	Plant2.visible = True
	Plant.visible = False
End Sub

Dim IMGPos5, Images5
Images5 = Array("Plant22", "Plant23", "Plant24", "Plant25", "Plant26", "Plant27", "Plant28", "Plant29", "Plant30", "Plant31", "Plant32", "Plant33", "Plant34", "Plant35", "Plant36", "Plant37")

Sub StartImage5
    IMGPos5 = 0
	Plant.visible = True
	ImageTimer5.Enabled = 1
End Sub

Sub ImageTimer5_Timer
    'debug.print IMGpos
    Plant.ImageA = Images5(IMGPos5)
    IMGPos5 = (IMGPos5 + 1) MOD 16
	ImageTimer5.Enabled = 0
	Plant.visible = True
	Plant2.visible = False
End Sub



'BUMPERS


Dim BumperPos, BumperFlashImage
BumperFlashImage = Array("Flash", "Flash", "Flash", "Flash")

Sub StartBumper
		if Bumper001 Then
	Bumper1Light.visible = True
	BumperFlash.Enabled = 1
		End If
		if Bumper002 Then
	Bumper1Light1.visible = True
	BumperFlash.Enabled = 1
		End If
		If Bumper003 Then
	Bumper1Light2.visible = True
	BumperFlash.Enabled = 1
		End If

End Sub

Sub BumperFlash_Timer
		if Bumper001 Then
			Bumper1Light.ImageA = BumperFlashImage(BumperPos)
			BumperPos = (BumperPos + 1) MOD 4
		End If
		if Bumper002 Then
			Bumper1Light1.ImageA = BumperFlashImage(BumperPos)
			BumperPos = (BumperPos + 1) MOD 4
		End If
		If Bumper003 Then
			Bumper1Light1.ImageA = BumperFlashImage(BumperPos)
			BumperPos = (BumperPos + 1) MOD 4
		End If
		StopBumper
End Sub

Sub StopBumper
	BumperFlash.Enabled = 0
	Bumper001 = False
	Bumper002 = False
	Bumper003 = False
	Bumper1Light.visible = False
	Bumper1Light1.visible = False
	Bumper1Light2.visible = False
End Sub


'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  CENTER RAMP
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  


Sub SolRamp(Enabled)
    If Enabled Then
        PlaySound SoundFX("fx_motor", DOFGear), -1
        If mRDir = 0 Then
            LowerRamp
            iRamp.Collidable = False  'bottom ramp - side walls
            iRamp1.Collidable = False ' high ramp
            'iKicker1.Enabled = False
            vpmTimer.AddTimer 200, "LowerRamp'"
            vpmTimer.AddTimer 400, "LowerRamp'"
            vpmTimer.AddTimer 600, "LowerRamp'"
            vpmTimer.AddTimer 700, "LowerRamp'"
            vpmTimer.AddTimer 1000, "LowerRamp'"
            vpmTimer.AddTimer 1100, "RampIsDown'"
        Else
            RiseRamp
            vpmTimer.AddTimer 200, "RiseRamp'"
            vpmTimer.AddTimer 400, "RiseRamp'"
            vpmTimer.AddTimer 600, "RiseRamp'"
            vpmTimer.AddTimer 800, "RiseRamp'"
            vpmTimer.AddTimer 1000, "RiseRamp'"
            vpmTimer.AddTimer 1100, "RampIsUp'"
        End If
    End If
End Sub

Sub RiseRamp:RampDir = 1:RampTimer.Enabled = 1:PlaySound SoundFX("fx_motor", DOFGear), -1:End Sub
Sub RampIsUp:mRDir = 0:StopSound "fx_motor":End Sub
Sub LowerRamp:RampDir = -1:RampTimer.Enabled = 1:PlaySound SoundFX("fx_motor", DOFGear), -1:iRamp.Collidable = False:iRamp1.Collidable = False:SaveKicker.Enabled = False:End Sub
Sub RampIsDown:mRDir = 1:StopSound "fx_motor":End Sub

Sub RampTimer_Timer
    RampPos = RampPos + RampDir
    If RampPos> 95 Then
        RampPos = 95
		iRamp.Collidable = True
		iRamp1.Collidable = True:
		SaveKicker.Enabled = True
        RampTimer.Enabled = 0
		RampIsUp
    End If
    If RampPos <0 Then
        RampPos = 0
        RampTimer.Enabled = 0
		RampIsDown
    End If
    CenterRamp.HeightTop = 1 + RampPos
End Sub

'Sub iKicker1_Hit:Me.DestroyBall:iKicker2.Createball:iKicker2.Kick 0, 0:End Sub


'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  SPINNING WHEEL
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X 


Sub hold_Timer
	AdvanceArrow
end Sub

Sub AdvanceArrow
		StopSound "TP_SpinWheel"
		hold.enabled = False
    If (BallLocked = False) And (bMultiBallMode = True) Then 
		WheelKickerTimer.Enabled = True
		if RampDir = 1 Then 
		LowerRamp
		End If
		Exit Sub
	ElseIf (BallLocked = True) Then 
		ID = 7:FX()
		BallLocked = False
		bMultiBallMode = True
		WheelKickerTimer.Enabled = True
		if RampDir = 1 Then 
		LowerRamp
		End If
		Exit Sub
	Elseif (BallGuardActive = True) Then 
		ID = 4:FX()
		if RampDir = 1 Then 
		LowerRamp
		End If
		Exit Sub
	Else AdvanceWheel
	End If
End Sub

Sub AdvanceWheel		
	Randomize Timer
		n = Int(1 + Rnd * 6)
		For i = 1 to 6
		Next
		'Double
		If n = 1 Then 
			If BallLocked = False Then ID = 1:FX():bDoubleScore = True:l44.state = 2:DoubleScoreTimer.enabled=True:WheelKickerTimer.Enabled = True:if RampDir = 1 Then LowerRamp:End If:End If
		End If
		'Saveball
		if n = 2 Then 
			If BallLocked = False Then ID = 2:FX():bBallSaverReady = True:ballsavestarttrigger:if RampDir = 1 Then LowerRamp:End If:End If
		End If
		'Triple
		if n = 3 Then 
			If BallLocked = False Then ID = 3:FX():bTripleScore = True:l45.state = 2:TripleScoreTimer.enabled=True:WheelKickerTimer.Enabled = True:if RampDir = 1 Then LowerRamp:End If:End If
		End If
		'Ballguard
		If n = 4 Then 
			If BallLocked = False Then ID = 4:FX():BallGuardActive = True:l43.state = 2:startBallGuard():if RampDir = 1 Then LowerRamp:End If:End If
		End If
		'ExtraballLit
		if n = 5 Then 
			If BallLocked = False Then ID = 5:FX():bExtraBall = True:lightextraball:WheelKickerTimer.Enabled = True:if RampDir = 1 Then LowerRamp:End If:End If
		End If
		'Lockball / Multiball
		if n = 6 Then
			If BallLocked = False Then ID = 6:FX():sw45activate = True:l41.state = 1:WheelKickerTimer.Enabled = True:if RampDir = 1 Then LowerRamp:End If:End If
		End If
End Sub

Sub MoveArrow_Timer
    'debug.print Arrowpos
	ArrowPos = ArrowPos + 2
    If ArrowPos <= ArrowNewPos Then
        Arrow.Rotz = ArrowPos
    Else
        ArrowNewPos = ArrowNewPos MOD 360
        ArrowPos = ArrowNewPos
        Me.Enabled = 0
    End If
End Sub

'Sub ExitTrigger_Hit():if BallLocked = True Then sw46.Enabled = False:sw45.Enabled = True:End If:If BallLocked = False Then sw46.Enabled = True:sw45.Enabled = True:End If End Sub

sub lockballtimer_Timer()
    lockballtimer.enabled=false
	sw45activate = False
	ID=46:FX():ScoreID=46:ScoreAmount
	 createnewball()
end sub

sub TripleScoreTimer_Timer()
    TripleScoreTimer.enabled=false
	bTripleScore = False
	l45.state = 0
	ID=46:FX():ScoreID=46:ScoreAmount
end sub

sub DoubleScoreTimer_Timer()
    DoubleScoreTimer.enabled=false
	bDoubleScore = False
	l44.state = 0
	ID=46:FX():ScoreID=46:ScoreAmount
end sub

Sub lightextraball
	'PuPlayer.playlistplayex pBackglass,"videoscenes","Extra_ball_lit.mp4",soundtrackvol,1
	l21.state = 2 
	l22.state = 2 
	DOF 115, DOFPulse
		if playmode = 1 Then
			ExtraBallTimer.Interval = 20000
		Else
			ExtraBallTimer.Interval = 40000
		End If
	ExtraBallTimer.enabled=True
End Sub

Sub ExtraBallTimer_Timer
		ExtraBallTimer.enabled=False
		bExtraBall = False
		l21.state = 0
		l22.state = 0
End Sub
	
Sub TreeKicker_Hit():ID=31:FX():ScoreID=31:ScoreAmount:PlaySoundAt "fx_balldrop",TreeKicker:TreeKicker.DestroyBall:StopImage3:TreeKickActivated = True:PlaySound SoundFX("", DOFGear), -1:TreeKickerTimer.Enabled = True:if (bMultiBallMode = True) Then StopSound "":End If:End Sub 'TreeKicker
'Sub TreeKicker_Hit():ID=31:FX():ScoreID=31:ScoreAmount:PlaySoundAt "fx_balldrop",TreeKicker:TreeKicker.DestroyBall:StopImage3:TreeKickActivated = True:PlaySound SoundFX("fx_ballrolling4", DOFGear), -1:TreeKickerTimer.Enabled = True:if (bMultiBallMode = True) Then StopSound "fx_ballrolling4":End If:End Sub 'TreeKicker


Sub TreeKickerTimer_Timer()
		StopSound "fx_ballrolling4"
		SoundSaucerKick 1,TreeKicker
		WheelKicker.CreateBall
		TreeKickerTimer.Enabled = False
		ArrowNewPos= ArrowNewPos + 216 * 5
		PlaySound SoundFX("TP_SpinWheel", DOFGear), -1
		StartImage3
		MoveArrow.Enabled = 1
			If (BallLocked = False) And (bMultiBallMode = True) Then
				AdvanceArrow
			Else
				hold.enabled = True
			End If
End Sub

Sub WheelKicker_hit
End Sub

Sub WheelKickerTimer_Timer()
		WheelKickActivated = True
		StopSound "fx_ballrolling4"
		'PlaySoundAt "fx_ballrel",WheelKicker
		SoundSaucerKick 1, WheelKicker
		kickout.Enabled = True
		TreeKickActivated = False



			'Multiball
			If (BallLocked = False) And (bMultiBallMode = True) Then
			WheelKicker.DestroyBall
			PlaySoundAt "fx_balldrop",WheelKicker
			PlaySound SoundFX("", DOFGear), -1
'			PlaySound SoundFX("fx_ballrolling4", DOFGear), -1
			l41.state = 0
			KickoutTimer.Enabled = True

			'Enable Ball Lock
			Elseif (sw45activate = True) And (BallLocked = False) Then
			WheelKicker.DestroyBall
			AddMultiball 1
			BallLocked = True
			sw45activate = False

			'All Other Modes
			Else
			WheelKicker.DestroyBall
			PlaySoundAt "fx_balldrop",WheelKicker
			PlaySound SoundFX("", DOFGear), -1
'			PlaySound SoundFX("fx_ballrolling4", DOFGear), -1
			KickoutTimer.Enabled = True
			End If
		
		WheelKickerTimer.Enabled = False	
		End Sub


Sub KickoutTimer_Timer()
			StopSound "fx_ballrolling4"
		If (BallLocked = False) And (bMultiBallMode = True) Then
			LightEffect 4
			mball1.Enabled = True
		Elseif (sw45activate = True) And (BallLocked = False) Then
			KickoutTimer.Enabled = False
			Exit Sub
		Else
		SoundSaucerKick 1, kickout
		LightEffect 12
		Kickout.CreateBall
		KickoutTimer.Enabled = False
		End If
End Sub



Sub mball1_Timer()
		StopSound "fx_ballrolling4"
		Kickout.CreateBall
		mball1.Enabled = False
		mball2.Enabled = True
		CooldownActive = True
End Sub

Sub mball2_Timer()
		SoundSaucerKick 1, kickout
		Kickout.CreateBall
		mball2.Enabled = False
		KickoutTimer.Enabled = False
		'bMultiBallMode = True
		CooldownStart()
End Sub


'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  PupFlasher
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X 

'****** PuP Variables ******

Dim cPuPPack: Dim PUPStatus: PUPStatus=false ' dont edit this line!!!

cPuPPack = "TimonPumbaa"    ' name of the PuP-Pack / PuPVideos folder for this table

'//////////////////// PINUP PLAYER: STARTUP & CONTROL SECTION //////////////////////////

' This is used for the startup and control of Pinup Player

Sub PuPStart(cPuPPack)
    If PUPStatus=true then Exit Sub
    If UsePupDMD=1 then
        Set PuPlayer = CreateObject("PinUpPlayer.PinDisplay")
        If PuPlayer is Nothing Then
           UsePupDMD=0
           PUPStatus=false
        Else
            PuPlayer.B2SInit "",cPuPPack 'start the Pup-Pack
            PUPStatus=true
        End If
    End If
End Sub

Sub pupevent(EventNum)
    if (UsePupDMD=0 or PUPStatus=false) then Exit Sub
    PuPlayer.B2SData "E"&EventNum,1  'send event to Pup-Pack
End Sub

' ******* How to use PUPEvent to trigger / control a PuP-Pack *******

' Usage: pupevent(EventNum)

' EventNum = PuP Exxx trigger from the PuP-Pack

' Example: pupevent 102

' This will trigger E102 from the table's PuP-Pack

' DO NOT use any Exxx triggers already used for DOF (if used) to avoid any possible confusion

'************ PuP-Pack Startup **************

'PuPStart(cPuPPack) 'Check for PuP - If found, then start Pinup Player / PuP-Pack


Sub pupflasher1_Timer()
		pupflasher1.VideoCapUpdate="PUPSCREEN3"
end Sub		

If PupScreen1 = 1 Then
	pupflasher1.VideoCapWidth=400	
	pupflasher1.VideoCapHeight=200
	pupflasher1.visible=true	
    pupflasher1.TimerEnabled=true
    pupflasher1.TimerInterval=60
    If FPS = 1 Then pupflasher1.timerinterval=40
End If

if PuPScreen1 = 0 Then
    pupflasher1.visible=false	
    pupflasher1.TimerEnabled=false
    'PuPlayer.SendMSG "{ ""mt"":301, ""SN"": 3, ""FN"":12 }"
End If

Sub Table1_exit
	pupflasher1.VideoCapUpdate=""
	Controller.stop
End Sub

'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  POPUP PRIMITIVE
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X 


sub startBallGuard()
	if BallGuardActive = True Then
		if playmode = 1 Then
			BallGuardtimer.interval = 20000
		Else
			BallGuardtimer.interval = 40000
		End If
    BallGuardtimer.enabled = true
	WheelKickerTimer.Enabled = True
    lightpost()
	End If
end sub

sub ChildBallGuard()
	if ChildBallGuardActive = True Then
    BallGuardtimer.enabled = true
    lightpost()
	End If
end sub

sub BallGuardtimer_Timer()
    BallGuardtimer.enabled=false
    endBallGuard()
end sub

sub endBallGuard()
    Popupsolenoidpulse.Enabled = 1
    popup.Isdropped = 1
	l43.state = 0
		if BallGuardActive = True Then
			ID=46:FX():ScoreID=46:ScoreAmount
		End If
	BallGuardActive = False
	ChildBallGuardActive = False
end sub

sub lightpost()

    posttimer.enabled=true
    PopupAnimUp 0, 100
    vpmtimer.addtimer 20000, "PopupAnimDown 100, 0 '"
   'flashforms postlight, 20000, 150, 0
   'flashforms BulbPost, 20000, 150, 0
 '   end if
end sub 

Dim HPos, HPosEnd
 Sub Popupsolenoidpulse_timer() 
    PopupP.Z = HPos
	If Hpos < HposEnd Then
     HPos = HPos + 1
	Else
	 Popupsolenoidpulse.enabled = 0
	End If
end Sub 

 Sub Popupsolenoidpulse2_timer() 
    PopupP.Z = HPos
	If Hpos > HposEnd Then
     HPos = HPos - 1
	Else
	 Popupsolenoidpulse2.enabled = 0
	End If
end Sub 

Sub PopupAnimUp(FrameStart, FrameEnd)
	PopupP.visible = True
    popup.Isdropped = 0
	popup.HasHitEvent = True
	popup.Collidable = True
    HPos = FrameStart         
    HPosEnd = FrameEnd
	Popupsolenoidpulse.enabled = 1
End Sub

Sub PopupAnimDown(FrameStart, FrameEnd)
	PopupP.visible = False
    popup.Isdropped = 1
	popup.HasHitEvent = False
	popup.Collidable = False
    HPos = FrameStart         
    HPosEnd = FrameEnd
	Popupsolenoidpulse2.enabled = 1
End Sub



'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  FLIPPER LANES
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
' 

	Sub lane1_hit
		If bMultiBallMode = False Then
		DOF 144, DOFPulse
		DOF 313, DOFPulse   'DOF MX - Left Outer Lan
		End If
		If Tilted Then Exit Sub
		DMD_ShowImages "500",1,1000,1000,0
		If bSkillShotReady Then ResetSkillShotTimer_Timer
		LaneBonus = LaneBonus + 1
		lane20on(CurrentPlayer) = 1
		'checkforkickbacks
		if (l20.state = 2) And (l23.state = 2) Then
		ID=27:FX():ScoreID=27:ScoreAmount:
		End If
		LastSwitchHit = "lane1"
	End Sub

	Sub lane2_hit 
		If bMultiBallMode = False Then
		DOF 146, DOFPulse	'DOF-RGB-IL
		DOF 315, DOFPulse   'DOF MX - Left Inner Lane
		End If
		If Tilted Then Exit Sub
		DMD_ShowImages "500",1,1000,1000,0
		If bSkillShotReady Then ResetSkillShotTimer_Timer
		LaneBonus = LaneBonus + 1
		lane2lon(CurrentPlayer) = 1
		'checkforkickbacks
		if (l21.state = 2) And (l22.state = 2) Then
			bExtraBallWonThisBall = True
			eblon(CurrentPlayer) = 1
			l42.state = 1
			ExtraBallTimer.enabled=False
			bExtraBall = False
			l21.state = 0
			l22.state = 0
		ID=28:FX():ScoreID=28:ScoreAmount:
		End If
		LastSwitchHit = "lane2"
	End Sub

	Sub lane3_hit 
		If bMultiBallMode = False Then
		DOF 147, DOFPulse	'DOF-RGB-IR
		DOF 316, DOFPulse   'DOF MX - Right Inner Lane
		End If
		If Tilted Then Exit Sub
		DMD_ShowImages "500",1,1000,1000,0
		If bSkillShotReady Then ResetSkillShotTimer_Timer
		LaneBonus = LaneBonus + 1
		lane22on(CurrentPlayer) = 1
		'checkforkickbacks
		if (l21.state = 2) And (l22.state = 2) Then
			bExtraBallWonThisBall = True
			eblon(CurrentPlayer) = 1
			l42.state = 1
			ExtraBallTimer.enabled=False
			bExtraBall = False
			l21.state = 0
			l22.state = 0
		ID=29:FX():ScoreID=29:ScoreAmount:
		End If
		LastSwitchHit = "lane3"
	End Sub

	Sub lane4_hit 
		If bMultiBallMode = False Then
		DOF 148, DOFPulse	'DOF-RGB-OR
		DOF 314, DOFPulse   'DOF MX - Right Outer Lane
		End If
		If Tilted Then Exit Sub
		DMD_ShowImages "500",1,1000,1000,0
		If bSkillShotReady Then ResetSkillShotTimer_Timer
		LaneBonus = LaneBonus + 1
		lane23on(CurrentPlayer) = 1
		'checkforkickbacks
		if (l20.state = 2) And (l23.state = 2) Then
		ID=30:FX():ScoreID=30:ScoreAmount:
		End If
		LastSwitchHit = "lane4"
	End Sub

'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  SOUND / PUPVIDEO
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  



Sub FX()
	if ID = 1 Then PlaySound "TP_GoGettemKilla":DMDBigText "DOUBLE POINTS LIT",300,1 : End If'pNote "DOUBLE POINTS","ACTIVATED":PuPlayer.playlistplayex pPlayfield,"PlayfieldVideos","Double.mp4",70,1:End If 'Wheel - Double
	if ID = 2 Then PlaySound "TP_WhatsGoinOnHere":DMDBigText "SAVE BALL LIT",300,1 : End If'pNote "SAVE BALL","ACTIVATED":PuPlayer.playlistplayex pPlayfield,"PlayfieldVideos","BallSaver.mp4",70,1:End If 'Wheel - Save Ball
	if ID = 3 Then PlaySound "TP_KeepUpTheGoodWork":DMDBigText "TRIPLE POINTS LIT",300,1 : End If'pNote "TRIPLE POINTS","ACTIVATED":PuPlayer.playlistplayex pPlayfield,"PlayfieldVideos","Triple.mp4",70,1:End If 'Wheel - Triple
	if ID = 4 Then PlaySound "TP_FixerUpper":DMDBigText "BALL GUARD LIT",300,1 :End If'pNote "BALL GUARD","ACTIVATED":PuPlayer.playlistplayex pPlayfield,"PlayfieldVideos","BallGuard.mp4",70,1:End If 'Wheel - Ballguard
	if ID = 5 Then PlaySound "TP_OhGoodies":DMDBigText "EXTRA BALL LIT",300,1 : End If'pNote "EXTRA BALL","READY":PuPlayer.playlistplayex pPlayfield,"PlayfieldVideos","ExtraBall.mp4",70,1:End If ' Wheel - Extra Ball
	if ID = 6 Then PlaySound "TP_HeyWhereDidItGo":DMDBigText "BALL LOCKED",300,1 :End If'pNote "BALL LOCKED","":PuPlayer.playlistplayex pPlayfield,"PlayfieldVideos","BallLocked.mp4",70,1:End If ' Wheel - Lock Ball
	if ID = 7 Then PlaySound "TP_DanceHula":DMDBigText "MULTIBALL READY",300,1 : End If'pNote "MULTIBALL","READY":PuPlayer.playlistplayex pPlayfield,"PlayfieldVideos","Multiball.mp4",70,1:End If ' Wheel - Multiball
	if ID = 8 Then PlaySound "TP_Click":End If ' Lanes
	if ID = 9 Then PlaySound "TP_Hit2":GoRoach:GoGrub:End If'pNote "GRUBS COLLECTED",Grubs(CurrentPLayer):PuPlayer.playlistplayex pBackglass,"PuPVideos","Bugs.mp4",100,4:End If ' GrubsCollected
	if ID = 10 Then PlaySound "TP_ItStarts":End If ' StartControl
	if ID = 11 Then PlaySound "TP_Bounce":End If ' Bumpers
	if ID = 12 Then PlaySound "TP_Skwark":End If ' RightRamp
	if ID = 13 Then PlaySound "TP_Bravo":DMDBigText "GOING UP!",77,1 :End If'pNote "GOING","UP!":End If ' CenterRampRaise
	if ID = 14 Then PlaySound "TP_Hit":End If ' TopLeftTarget
	if ID = 15 Then PlaySound "TP_Excellent":End If ' TopLeftKicker
	if ID = 16 Then PlaySound "TP_Hit":End If ' BallLockKicker
	if ID = 17 Then PlaySound "TP_IncomingYehhh":DMDBigText "MULTIBALL ACTIVATED",300,1 :End If'pNote "MULTIBALL","ACTIVATED":End If ' MultiballKicker
	if ID = 18 Then PlaySound "TP_Excellent":End If ' TopRightKicker
	if ID = 19 Then PlaySound "TP_Hit":End If ' KickoutKicker
	if ID = 20 Then PlaySound "TP_LikeToSee":End If ' 3LanesComplete
	if ID = 21 Then PlaySound "TP_WhatControl":End If ' 5LanesComplete
	if ID = 22 Then PlaySound "TP_Hit":TargetHit:End If'pHakunaMatata:End If ' TargetsHit
	if ID = 23 Then PlaySound "TP_Hit":End If ' TargetsA
	if ID = 24 Then PlaySound "TP_Hit":End If ' TargetsB
	if ID = 25 Then PlaySound "TP_Hit":End If ' TargetsC
	if ID = 26 Then QuoteBL:End If ' StopControl
	if ID = 27 Then PlaySound "TP_RunOutOfGas":End If ' Lane1
	if ID = 28 Then PlaySound "TP_Bullseye":End If ' Lane2
	if ID = 29 Then PlaySound "TP_KeepSlingin":End If ' Lane3
	if ID = 30 Then PlaySound "TP_WeArentDoneYet":End If ' Lane4
	if ID = 31 Then PlaySound "TP_HoleInOne":End If ' TreeKicker
	if ID = 32 Then PlaySound "TP_Bravo":End If ' WheelKicker
	if ID = 33 Then PlaySound "TP_ItsRainingBugs":End If'pNote "GRUB MADNESS!","HIT RAMP 3 TIMES FOR JACKPOT":PuPlayer.playlistplayex pPlayfield,"PlayfieldVideos","GrubMadness.mp4",70,1:End If ' GrubMadness
	if ID = 34 Then PlaySound "TP_GoodBuggingCaptain":DMDBigText "GRUB MADNESS COMPLETE",300,1 :End If'pNote "GRUB MADNESS","COMPLETE":End If ' GrubMadness
	if ID = 35 Then PlaySound "TP_Jackpot":DMDBigText "JACKPOT",300,1 :End If'pNote "HAKUNA MATATA","JACKPOT":PuPlayer.playlistplayex pPlayfield,"PlayfieldVideos","Jackpot.mp4",70,1:End If ' Jackpot
	if ID = 36 Then PlaySound "TP_TiltWarn":DMDBigText "CAREFUL",150,1 : End If'pNote "CAREFUL!","TILT WARNING":PuPlayer.playlistplayex pPlayfield,"PlayfieldVideos","Careful.mp4",70,1:End If ' TiltWarn
	if ID = 37 Then PlaySound "TP_OopsyDaisy":DMDBigText "TILT",300,1 : End If'pNote "TILT","":PuPlayer.playlistplayex pPlayfield,"PlayfieldVideos","Tilt.mp4",70,1:End If ' Tilt
	if ID = 38 Then PlaySound "TP_GameOver":DMDBigText "GAME OVER",77,1:End If'pNote "GAME OVER","PLAY AGAIN":PuPlayer.playlistplayex pPlayfield,"PlayfieldVideos","Match.mp4",70,1:End If ' Game Over
	if ID = 39 Then PlaySound "TP_HighScore":End If'pNote "YOU GOT","A HIGH SCORE!":End If ' YouGotHighScore
	if ID = 40 Then pNote "BALL " & Balls,"LAUNCH BALL":End If ' BallLaunch
	if ID = 41 Then PlaySound "TP_DontWasteBerries":DMDBigText "SHOOT AGAIN",77,1 :End If'pNote "SHOOT AGAIN","SAME PLAYER":PuPlayer.playlistplayex pPlayfield,"PlayfieldVideos","ShootAgain.mp4",70,1:End If ' ShootAgain
	if ID = 42 Then PlaySound "TP_Hey":DMDBigText "BALL SAVED",300,1 : End If'pNote "BALL SAVED","":PuPlayer.playlistplayex pCallouts,"audiocallouts","ballsaved.wav",100,1:PuPlayer.playlistplayex pPlayfield,"PlayfieldVideos","BallSaved.mp4",70,1:End If ' BallSaved
	if ID = 43 Then PlaySound "TP_GetsEmEveryTime":DMDBigText "MULTIBALL ENDED",77,1 : End If'pNote "MULTI-BALL ENDED","":StopImage3:StartImage3:End If ' MultiballEnd
	if ID = 44 Then PlaySound "TP_Jackpot":DMDBigText "SUPER JACKPOT",300,1 : If FlexMode=2 Then CreateSternStyle:End If'pNote "GRUB MADNESS","JACKPOT COMPLETE":PuPlayer.playlistplayex pPlayfield,"PlayfieldVideos","SuperJackpot.mp4",70,1:End If ' SuperJackpot
	if ID = 45 Then PlaySound "TP_Arghh":DMDBigText "COME BACK LATER",77,1 : If FlexMode=2 Then CreateSternStyle:End If'pNote "COME BACK","LATER!":End If ' CenterRampNoRaise
	if ID = 46 Then PlaySound "TP_Monkey":DMDBigText "CENTER RAMP READY",77,1 : If FlexMode=2 Then CreateSternStyle:End If'pNote "CENTER RAMP","READY!":StopImage2:End If ' CenterRampReady
	if ID = 47 Then PlaySound "TP_ImGettingHungry":DMDBigText "2 MORE LOOPS",150,1 : If FlexMode=2 Then CreateSternStyle:End If'pNote "GRUB MADNESS","2 More loops for Super Jackpot":End If ' GrubMadnessLoop1
	if ID = 48 Then PlaySound "TP_OnlyOneMore":DMDBigText "1 MORE LOOP!",150,1 : If FlexMode=2 Then CreateSternStyle:End If'pNote "GRUB MADNESS","1 More for Super Jackpot":End If ' GrubMadnessLoop2
	if ID = 49 Then PlaySound "TP_ShakeRattleBurp":DMDBigText "BURP OFF!",300,1 : If FlexMode=2 Then CreateSternStyle:End If'pNote "BURP OFF!","Aim for the kickers closest to the bugs":PuPlayer.playlistplayex pPlayfield,"PlayfieldVideos","BurpOff.mp4",70,1:End If ' HurryUp
	if ID = 50 Then PlaySound "TP_SlimyYetSatisfyingPumbaa":DMDBigText "BURP OFF! SUCCESSFUL",150,1 : If FlexMode=2 Then CreateSternStyle:End If'pNote "BURP OFF!","Successful":End If ' HurryUpSuccess
	if ID = 51 Then PlaySound "TP_EvenBurpingTakesPractice":DMDBigText "BURP OFF! FAILED",150,1 : If FlexMode=2 Then CreateSternStyle:End If'pNote "BURP OFF!","Failed":End If ' HurryUpFailed
	if ID = 52 Then PlaySound "TP_YourBurparrifick":DMDBigText "YOUR DOING IT!",150,1 : If FlexMode=2 Then CreateSternStyle:End If'pNote "BURP OFF!","Your Doing It!":End If ' HurryUpAdvance1
	if ID = 53 Then PlaySound "TP_YourTheBurperKing":DMDBigText "WAY TO GO!",150,1 : If FlexMode=2 Then CreateSternStyle:End If'pNote "BURP OFF!","Way to go!":End If ' HurryUpAdvance2
	if ID = 54 Then PlaySound "TP_Atelikeapig":DMDBigText "BURP OFF! COMPLETE",77,1 : If FlexMode=2 Then CreateSternStyle:End If'pNote "BURP OFF COMPLETE","Nailed It":End If ' HurryUpComplete
	if ID = 55 Then PlaySound "TP_YourTheBurpinator":DMDBigText "LAST ONE!",150,1 : If FlexMode=2 Then CreateSternStyle:End If'pNote "BURP OFF!","Last one!":End If ' HurryUpAdvance3
	if ID = 56 Then PlaySound "TP_TimonThisIsMakingMeHungry":DMDBigText "BURP OFF! LIT",150,1 : If FlexMode=2 Then CreateSternStyle:End If'pNote "BURP OFF LIT","Hit top left target to Start":End If ' HurryUpReady
	if ID = 57 Then PlaySound "TP_Yess":DMDBigText "SKILLSHOT AWARDED",77,1 : If FlexMode=2 Then CreateSternStyle:End If'pNote "SKILLSHOT","AWARDED":PuPlayer.playlistplayex pBackglass,"videoskillshot","",100,3:End If ' SkillshotAwarded
	if ID = 58 Then QuoteStart:DMDBigText "SELECT SKILLSHOT",300,1 : If FlexMode=2 Then CreateSternStyle:End If'pNote "SKILLSHOT","Use Flippers to select Skillshot":End If ' SkillshotSelect	
	if ID = 59 Then PlaySound "":DMDBigText "" & BonusMultiplier(CurrentPlayer) & "X MULTIPLIER"" ",300,1 : If FlexMode=2 Then CreateSternStyle:End If'pNote ""  &  BonusMultiplier(CurrentPlayer)  &  "X","Multiplier Bonus":End If ' xMultiplier		
	if ID = 60 Then PlaySound "":pNote Score(CurrentPlayer),"":End If ' CurrentScore	
	if ID = 61 Then Playsound "coconutshitt":End If ' Coconuts
	if ID = 62 Then LarvaeHit:End If ' Larvae			

End Sub

Sub QuoteStart
Dim quote

	Randomize Timer
		quote = Int(1 + Rnd * 5)
		For i = 1 to 8
		Next
		If quote = 1 Then PlaySound "TP_DecisionsDecisions":End If
		if quote = 2 Then PlaySound "TP_WatchOutForTheBugs":End If
		if quote = 3 Then PlaySound "TP_AtLeastTheyNotEatingThem":End If
		If quote = 4 Then PlaySound "TP_BeCarefulItsAJungleOutThere":End If
		if quote = 5 Then PlaySound "TP_HeadsUp":End If
		if quote = 6 Then PlaySound "TP_INeedABagOfFreshFlies":End If
		if quote = 7 Then PlaySound "TP_ReadyToPlayTimon":End If
		if quote = 8 Then PlaySound "TP_JustGottaSayHakunaMatata":End If
End Sub

Sub QuoteBL
Dim quote

	Randomize Timer
		quote = Int(1 + Rnd * 5)
		For i = 1 to 8
		Next
		If quote = 1 Then PlaySound "TP_WhatstheBigIdeaPumbaa":End If
		if quote = 2 Then PlaySound "TP_WhatAMess":End If
		if quote = 3 Then PlaySound "TP_DidIMissSomething":End If
		If quote = 4 Then PlaySound "TP_WhosTheMonkey":End If
		if quote = 5 Then PlaySound "TP_TrapsAlarms":End If
		if quote = 6 Then PlaySound "TP_Neveeerr":End If
		if quote = 7 Then PlaySound "TP_KidWhatsEatinYah":End If
		if quote = 8 Then PlaySound "TP_LionsCrossed":End If
End Sub

Sub TargetHit

	Dim h1
	Dim s1

	if (LastSwitchHit = "sw25") or (LastSwitchHit = "sw26") Or (LastSwitchHit = "sw27") Then
		Randomize Timer
			h1 = Int(1 + Rnd * 3)
			For i = 1 to 3
			Next
			If h1 = 1 Then PlaySound "TP_HyenaLaugh1":End If
			if h1 = 2 Then PlaySound "TP_HyenaLaugh2": End If			
			if h1 = 3 Then PlaySound "TP_HyenaLaugh3": End If
	End If

	if (LastSwitchHit = "sw36") or (LastSwitchHit = "sw37") Or (LastSwitchHit = "sw38") Then
		Randomize Timer
			s1 = Int(1 + Rnd * 3)
			For i = 1 to 3
			Next
			If s1 = 1 Then PlaySound "TP_SimbaRoar1":End If
			if s1 = 2 Then PlaySound "TP_SimbaRoar2": End If			
			if s1 = 3 Then PlaySound "TP_SimbaRoar3": End If
	End If

End Sub

Sub LarvaeHit

	Dim h2
		Randomize Timer
			h2 = Int(1 + Rnd * 3)
			For i = 1 to 3
			Next
			If h2 = 1 Then PlaySound "TP_Splat1":End If
			if h2 = 2 Then PlaySound "TP_Splat2": End If			
			if h2 = 3 Then PlaySound "TP_Splat3": End If
End Sub





'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  Scoring
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  

Sub ScoreAmount
	if ScoreID = 1 Then AddScore 1000:DMD_ShowImages "1k",1,1000,1000,0:End If 'Wheel - Double
	if ScoreID = 2 Then AddScore 1000:DMD_ShowImages "1k",1,1000,1000,0:End If 'Wheel - Save Ball
	if ScoreID = 3 Then AddScore 1000:DMD_ShowImages "1k",1,1000,1000,0:End If 'Wheel - Triple
	if ScoreID = 4 Then AddScore 1000:DMD_ShowImages "1k",1,1000,1000,0:End If 'Wheel - Ballguard
	if ScoreID = 5 Then AddScore 1000:DMD_ShowImages "1k",1,1000,1000,0:End If ' Wheel - Extra Ball
	if ScoreID = 6 Then AddScore 1000:DMD_ShowImages "1k",1,1000,1000,0:End If ' Wheel - Lock Ball
	if ScoreID = 7 Then AddScore 5000:DMD_ShowImages "mball",1,1000,1000,0:End If ' Wheel - Multiball
	if ScoreID = 8 Then AddScore 500:End If ' Lanes
	if ScoreID = 9 Then AddScore 0:End If ' GrubCollect
	if ScoreID = 10 Then AddScore 0:End If ' StartControl
	if ScoreID = 11 Then AddScore 500:End If ' Bumpers
	if ScoreID = 12 Then AddScore 500:End If ' RightRamp
	if ScoreID = 13 Then AddScore 500:DMD_ShowImages "500",1,1000,1000,0:End If ' CenterRampRaise
	if ScoreID = 14 Then AddScore 500:DMD_ShowImages "500",1,1000,1000,0:End If ' TopLeftTarget
	if ScoreID = 15 Then AddScore 500:DMD_ShowImages "500",1,1000,1000,0:End If ' TopLeftKicker
	if ScoreID = 16 Then AddScore 500:End If ' BallLockKicker
	if ScoreID = 17 Then AddScore 500:End If ' MultiballKicker
	if ScoreID = 18 Then AddScore 500:DMD_ShowImages "500",1,1000,1000,0:End If ' TopRightKicker
	if ScoreID = 19 Then AddScore 500:End If ' KickoutKicker
	if ScoreID = 20 Then AddScore 1000:DMD_ShowImages "1k",1,1000,1000,0:End If ' 3LanesComplete
	if ScoreID = 21 Then AddScore 5000:DMD_ShowImages "5k",1,1000,1000,0:End If ' 5LanesComplete
	if ScoreID = 22 Then AddScore 100:End If ' TargetsHit
	if ScoreID = 23 Then AddScore 1000:DMD_ShowImages "1k",1,1000,1000,0:End If ' TargetsA
	if ScoreID = 24 Then AddScore 1000:DMD_ShowImages "1k",1,1000,1000,0:End If ' TargetsB
	if ScoreID = 25 Then AddScore 1000:DMD_ShowImages "1k",1,1000,1000,0:End If ' TargetsC
	if ScoreID = 26 Then AddScore 0:End If ' StopControl
	if ScoreID = 27 Then AddScore 500:End If ' Lane1
	if ScoreID = 28 Then AddScore 500:End If ' Lane2
	if ScoreID = 29 Then AddScore 500:End If ' Lane3
	if ScoreID = 30 Then AddScore 500:End If ' Lane4
	if ScoreID = 31 Then AddScore 0:End If ' TreeKicker
	if ScoreID = 32 Then AddScore 0:End If ' WheelKicker
	if ScoreID = 33 Then AddScore 1000:DMD_ShowImages "grubmadness",1,1000,1000,0:End If ' GrubMadnessStart
	if ScoreID = 34 Then AddScore 0:End If ' GrubMadnessEnd
	if ScoreID = 35 Then AddScore 10000:DMD_ShowImages "10k",1,1000,1000,0:End If ' Jackpot
	if ScoreID = 36 Then AddScore 0:End If ' TiltWarn
	if ScoreID = 37 Then AddScore 0:End If ' Tilt
	if ScoreID = 38 Then AddScore 0:End If ' GameOver
	if ScoreID = 39 Then AddScore 0:End If ' YouGotHighScore
	if ScoreID = 40 Then AddScore 0:End If ' BallLaunch
	if ScoreID = 41 Then AddScore 0:End If ' ShootAgain
	if ScoreID = 42 Then AddScore 0:DMD_ShowImages "ballsaved",1,1000,1000,0:End If ' BallSaved
	if ScoreID = 43 Then AddScore 0:End If ' MultiballEnd
	if ScoreID = 44 Then AddScore 20000:DMD_ShowImages "20k",1,1000,1000,0:End If ' SuperJackpot
	if ScoreID = 45 Then AddScore 0:End If ' CenterRampNoRaise
	if ScoreID = 46 Then AddScore 0:End If ' CenterRampReady
	if ScoreID = 47 Then AddScore 5000:DMD_ShowImages "5k",1,1000,1000,0:End If ' GrubMadnessLoop1
	if ScoreID = 48 Then AddScore 5000:DMD_ShowImages "5k",1,1000,1000,0:End If ' GrubMadnessLoop2
	if ScoreID = 49 Then AddScore 0:DMD_ShowImages "burpoff",1,1000,1000,0:End If ' HurryUp
	if ScoreID = 50 Then AddScore 10000:DMD_ShowImages "10k",1,1000,1000,0:End If ' HurryUpSuccess
	if ScoreID = 51 Then AddScore 0:End If ' HurryUpFailed
	if ScoreID = 52 Then AddScore 1000:DMD_ShowImages "1k",1,1000,1000,0:End If ' HurryUpAdvance1
	if ScoreID = 53 Then AddScore 5000:DMD_ShowImages "5k",1,1000,1000,0::End If ' HurryUpAdvance2
	if ScoreID = 54 Then AddScore 0:End If ' HurryUpComplete
	if ScoreID = 55 Then AddScore 0:End If ' HurryUpComplete
	if ScoreID = 56 Then AddScore 500:End If ' HurryUpReady
	if ScoreID = 57 Then AddScore 5000:DMD_ShowImages "5k",1,1000,1000,0:End If ' SkillshotAwarded
	if ScoreID = 58 Then AddScore 0:End If ' SkillshotSelect
	if ScoreID = 59 Then AddScore 0:End If ' xMultiplier
	if ScoreID = 60 Then AddScore 0:End If ' CurrentScore
	if ScoreID = 61 Then AddScore 1000:DMD_ShowImages "1k",1,1000,1000,0:End If ' Coconuts
	if ScoreID = 62 Then AddScore 1000:DMD_ShowImages "1k",1,1000,1000,0:End If ' Larvae

End Sub

'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  CHANGE SONG
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  

Dim Song, UpdateMusic
Song = ""

Sub PlaySong(name)
    If bMusicOn Then
        If Song <> name Then
            StopSound Song
            Song = name
            PlaySound Song, -1, SongVolume
        End If
    End If
End Sub

Sub StopSong
    If bMusicOn Then
        StopSound Song
        Song = ""
    End If
End Sub

Sub ChangeSong
    If(BallsOnPlayfield = 0)Then
        PlaySong "TP_MU_4"
        Exit Sub
    End If

    If bAttractMode Then
        PlaySong "TP_MU_4"
        Exit Sub
    End If
    If bMultiBallMode Then
        PlaySong "MULT_1" '"MULTIBALL"
    Else
        UpdateMusicNow
    end if
End Sub


Sub UpdateMusicNow
    Select Case UpdateMusic
        Case 0:PlaySong "TP_MU_4"
        Case 1:PlaySong "TP_MU_1"
        Case 2:PlaySong "TP_MU_3"
        Case 3:PlaySong "TP_MU_5"
    End Select
end sub


'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  VR ROOM / VR Cabinet
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  

DIM VRThings
If VRRoom <> 0 Then
	If VRRoom = 1 Then
		for each VRThings in VR_Cab:VRThings.visible = 1:Next
	End If
	If VRRoom = 2 Then
		for each VRThings in VR_Cab:VRThings.visible = 0:Next
		PinCab_Backglass.visible = 1
	End If
Else
	for each VRThings in VR_Cab:VRThings.visible = 0:Next
End if


'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  Roaches
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X 

dim frame:frame=0
dim frameRate:frameRate=0.0001 / 5
dim n1, n2, n3, n4

Sub GoRoach
	Randomize Timer
		n1 = Int(1 + Rnd * 5)
		n2 = Int(1 + Rnd * 5)
		n3 = Int(1 + Rnd * 5)
		n4 = Int(1 + Rnd * 5)
		For i = 1 to 5
		Next
		'Roach1
		If n1 = 1 Then 
			roachxy1=Array(Array(175,200,215,245,285,335,390,450,500,550,600,640,660,640,610,555,500,460,435,425,430,445,460,475),Array(1440,1485,1545,1590,1625,1650,1665,1660,1655,1650,1620,1575,1520,1465,1425,1400,1410,1440,1495,1550,1605,1660,1815,1975)) 'Original Sling to Drain
		End If
		if n1 = 2 Then 
			roachxy1=Array(Array(175,185,200,210,250,275,300,325,350,375,400,425,450,475,500,525,550,575,600,605,610,615,620,640),Array(1440,1440,1440,1500,1500,1450,1400,1350,1325,1325,1350,1375,1400,1410,1425,1400,1410,1440,1420,1400,1395,1400,1420,1440)) 'Sling to Sling
		End If
		if n1 = 3 Then 
			roachxy1=Array(Array(175,200,205,210,215,210,200,215,215,225,225,235,250,275,275,280,280,300,315,330,350,375,415,475),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,275,250,220)) 'Sling to Bug
		End If
		If n1 = 4 Then 
			roachxy1=Array(Array(175,200,205,210,215,210,200,215,215,225,225,280,280,275,275,250,200,175,160,120,100,80,50,30),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,275,250,220)) 'Sling to Bridge
		End If
		if n1 = 5 Then 
			roachxy1=Array(Array(175,200,250,300,350,400,450,500,550,600,650,650,650,680,700,700,715,725,750,775,800,815,820,840),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,350,400,445)) 'Sling to Log
		End If
		
		'Roach2
		If n2 = 1 Then 
			roachxy2=Array(Array(640,590,540,485,425,380,335,315,310,320,340,370,400,420,440,450,450,450,450,450,450,450,450,450),Array(1310,1275,1250,1240,1250,1265,1305,1355,1415,1470,1525,1570,1615,1665,1715,1765,1765,1765,1765,1765,1765,1765,1865,1965)) 'Original Sling to Drain
		End If
		if n2 = 2 Then 
			roachxy2=Array(Array(640,600,575,550,525,500,475,430,400,375,300,280,280,275,275,250,200,175,160,120,100,80,50,46),Array(1310,1275,1250,1240,1250,1250,1225,1250,1275,1250,1240,1230,1225,1215,1215,1200,1190,1180,1175,1150,1130,1125,1100,1082)) 'Sling to Eject
		End If
		if n2 = 3 Then 
			roachxy2=Array(Array(640,600,575,550,525,500,475,430,400,375,300,280,280,275,275,250,200,175,160,120,100,80,50,30),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,275,250,220)) 'Sling to Bridge
		End If
		If n2 = 4 Then 
			roachxy2=Array(Array(640,500,450,400,450,475,550,680,680,680,680,650,650,680,700,700,715,725,750,775,800,815,820,840),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,350,400,445)) 'Sling to Log
		End If
		if n2 = 5 Then 
			roachxy2=Array(Array(640,500,450,400,450,475,550,680,680,680,680,695,700,680,660,650,625,600,575,550,525,500,490,475),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,275,250,220)) ' Sling to Bug
		End If
		
		'Roach3
		If n3 = 1 Then 
			roachxy3=Array(Array(40,165,215,270,330,380,430,480,515,540,555,560,555,540,525,505,495,485,475,475,480,480,480,480),Array(1120,1095,980,970,975,990,1015,1045,1090,1135,1190,1250,1300,1355,1405,1455,1510,1565,1620,1670,1725,1775,1875,1975))' Move across and Drain
		End If
		if n3 = 2 Then 
			roachxy3=Array(Array(40,165,215,270,310,335,350,375,400,415,425,450,475,485,500,505,595,600,625,675,730,780,880,900),Array(1120,1100,1050,1000,975,900,875,850,825,785,725,695,650,625,600,575,600,625,650,625,595,525,475,400))' Move across and up
		End If
		if n3 = 3 Then 
			roachxy3=Array(Array(40,65,50,75,110,135,150,175,200,215,225,250,275,285,300,355,395,400,425,475,530,580,620,645),Array(1120,1150,1180,1150,1050,1075,1100,1175,1200,1215,1245,1250,1275,1300,1310,1325,1340,1350,1360,1365,1380,1400,1415,1425))' Move across and down
		End If
		If n3 = 4 Then 
			roachxy3=Array(Array(40,165,215,270,330,380,430,480,515,540,555,560,555,540,525,505,495,485,475,475,480,480,480,480),Array(1120,1100,1050,1075,1100,1195,1200,1235,1270,1300,1375,1425,1500,1535,1575,1600,1620,1685,1700,1725,1780,1825,1900,1975))' Move across and drain
		End If
		if n3 = 5 Then 
			roachxy3=Array(Array(40,165,215,270,330,380,430,480,515,540,555,560,555,540,525,505,495,485,475,475,480,480,480,480),Array(1120,1115,1110,1100,1080,1000,1080,1045,990,935,890,850,800,755,705,655,600,565,420,470,425,375,275,235))' Move across and BUG
		End If
		
		'Roach4
		If n4 = 1 Then 
			roachxy4=Array(Array(110,165,215,270,330,380,430,480,515,540,555,560,555,540,525,505,495,485,475,475,480,480,480,480),Array(400,480,575,680,795,725,865,895,950,1020,1100,1190,1285,1335,1385,1440,1490,1535,1585,1640,1695,1750,1800,1900))
		End If
		if n4 = 2 Then 
			roachxy4=Array(Array(110,125,145,160,188,200,230,260,275,300,325,355,380,400,425,550,585,615,675,700,720,780,880,900),Array(400,425,450,425,450,475,500,475,450,485,500,550,600,575,550,500,475,500,550,575,650,700,625,600))
		End If
		if n4 = 3 Then 
			roachxy4=Array(Array(110,165,200,250,300,320,370,400,430,500,515,570,595,640,625,650,625,585,575,525,500,480,460,450),Array(400,450,500,580,625,695,625,600,750,885,950,1000,1085,1100,1225,1300,1400,1560,1670,1720,1800,1825,1850,1900))
		End If
		If n4 = 4 Then 
			roachxy4=Array(Array(110,125,145,160,188,200,230,260,275,300,325,355,380,400,425,550,585,615,675,700,720,780,880,900),Array(400,425,450,425,450,475,500,475,450,485,450,475,400,375,350,300,375,400,450,475,450,400,325,300))
		End If
		if n4 = 5 Then 
			roachxy4=Array(Array(200,265,315,370,430,480,530,580,515,540,555,580,500,470,435,400,415,430,450,475,480,490,480,470),Array(400,430,475,480,525,595,665,695,750,890,980,1050,1185,1235,1325,1495,1520,1590,1625,1690,1725,1790,1850,1900))
		End If
		RoachLoc=0
		goroaches=0
		initdelay_timer
End Sub

sub initdelay_timer
	if goroaches=0 then 
		roachstep=0
		roachinit.enabled=1
		AnimLoopTimer.enabled=1
		goroaches=1
	end if
end sub


sub roachinit_timer
	Dim roachA,dx,dy, xx
	
	roach1.x=roachxy1(0)(roachstep)
	roach1.y=roachxy1(1)(roachstep)
	Roach2.x=roachxy2(0)(roachstep)
	Roach2.y=roachxy2(1)(roachstep)
	roach3.x=roachxy3(0)(roachstep)
	roach3.y=roachxy3(1)(roachstep)
	roach4.x=roachxy4(0)(roachstep)
	roach4.y=roachxy4(1)(roachstep)
	if roachstep>0 Then
		for xx = 1 to 4											'change each roach rotation
			dy=-1*(EVAL("roachxy"&xx)(1)(roachstep)-EVAL("roachxy"&xx)(1)(roachstep-1))	'delta Y
			if dy=0 then dy=0.0000001													'avoid divide by zero errors
			dx=EVAL("roachxy"&xx)(0)(roachstep)-EVAL("roachxy"&xx)(0)(roachstep-1)		'delta X
			roachA=atn(dX/dY)												'angle in radians
			if roachA<0 then roachA=roachA+PI								'correction for negative angles
			roachA=int(roachA/(pi/180))							'convert to degrees
			if dx<0 then roachA=roachA+180						'correction for negative quadrants
			EVAL("roach"&xx).roty=roachA
		Next
	end If
	roachstep=roachstep+1
	if roachstep=24 then 
		AnimLoopTimer.enabled=False
		me.enabled=false
		roachstep=0
	end if
end Sub

sub AnimLoopTimer_Timer
	Roach1.ShowFrame frame
	Roach2.ShowFrame frame
	Roach3.ShowFrame frame
	Roach4.ShowFrame frame
	frame = frame + frameRate
	If frame>18 Then	' the animation is a bit rough so don't play it till the end but stop a bit earlier
		frame=0
	end if
end sub


'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'  Larvae / Coconut / Tree Shaker
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X 

dim countr38:countr38 =0

Sub larve001timer_Timer
countr38 = countr38 + 1 : If Countr38 > 18 then Countr38 = 1 : end If 
select case countr38
				case 1 : larve001.visible=true:larve002.visible=false:larve003.visible=false:larve004.visible=false:larve005.visible=false:larve006.visible=false:larve007001.visible=false:larve008.visible=false:larve009.visible=false:larve010.visible=false
				case 2 : larve001.visible=false:larve002.visible=true:larve003.visible=false:larve004.visible=false:larve005.visible=false:larve006.visible=false:larve007001.visible=false:larve008.visible=false:larve009.visible=false:larve010.visible=false 
				case 3 : larve001.visible=false:larve002.visible=false:larve003.visible=true:larve004.visible=false:larve005.visible=false:larve006.visible=false:larve007001.visible=false:larve008.visible=false:larve009.visible=false:larve010.visible=false 
				case 4 : larve001.visible=false:larve002.visible=false:larve003.visible=false:larve004.visible=true:larve005.visible=false:larve006.visible=false:larve007001.visible=false:larve008.visible=false:larve009.visible=false:larve010.visible=false 
				case 5 : larve001.visible=false:larve002.visible=false:larve003.visible=false:larve004.visible=false:larve005.visible=true:larve006.visible=false:larve007001.visible=false:larve008.visible=false:larve009.visible=false:larve010.visible=false 
				case 6 : larve001.visible=false:larve002.visible=false:larve003.visible=false:larve004.visible=false:larve005.visible=false:larve006.visible=true:larve007001.visible=false:larve008.visible=false:larve009.visible=false:larve010.visible=false 
				case 7 : larve001.visible=false:larve002.visible=false:larve003.visible=false:larve004.visible=false:larve005.visible=false:larve006.visible=false:larve007001.visible=true:larve008.visible=false:larve009.visible=false:larve010.visible=false 
				case 8 : larve001.visible=false:larve002.visible=false:larve003.visible=false:larve004.visible=false:larve005.visible=false:larve006.visible=false:larve007001.visible=false:larve008.visible=true:larve009.visible=false:larve010.visible=false 
				case 9 : larve001.visible=false:larve002.visible=false:larve003.visible=false:larve004.visible=false:larve005.visible=false:larve006.visible=false:larve007001.visible=false:larve008.visible=false:larve009.visible=true:larve010.visible=false 
				case 10: larve001.visible=false:larve002.visible=false:larve003.visible=false:larve004.visible=false:larve005.visible=false:larve006.visible=false:larve007001.visible=false:larve008.visible=false:larve009.visible=false:larve010.visible=true
				case 11: larve001.visible=false:larve002.visible=false:larve003.visible=false:larve004.visible=false:larve005.visible=false:larve006.visible=false:larve007001.visible=false:larve008.visible=false:larve009.visible=true:larve010.visible=false
				case 12: larve001.visible=false:larve002.visible=false:larve003.visible=false:larve004.visible=false:larve005.visible=false:larve006.visible=false:larve007001.visible=false:larve008.visible=true:larve009.visible=false:larve010.visible=false 
				case 13: larve001.visible=false:larve002.visible=false:larve003.visible=false:larve004.visible=false:larve005.visible=false:larve006.visible=false:larve007001.visible=true:larve008.visible=false:larve009.visible=false:larve010.visible=false
				case 14: larve001.visible=false:larve002.visible=false:larve003.visible=false:larve004.visible=false:larve005.visible=false:larve006.visible=true:larve007001.visible=false:larve008.visible=false:larve009.visible=false:larve010.visible=false 
				case 15: larve001.visible=false:larve002.visible=false:larve003.visible=false:larve004.visible=false:larve005.visible=true:larve006.visible=false:larve007001.visible=false:larve008.visible=false:larve009.visible=false:larve010.visible=false 
				case 16: larve001.visible=false:larve002.visible=false:larve003.visible=false:larve004.visible=true:larve005.visible=false:larve006.visible=false:larve007001.visible=false:larve008.visible=false:larve009.visible=false:larve010.visible=false 
				case 17: larve001.visible=false:larve002.visible=false:larve003.visible=true:larve004.visible=false:larve005.visible=false:larve006.visible=false:larve007001.visible=false:larve008.visible=false:larve009.visible=false:larve010.visible=false 
				case 18: larve001.visible=false:larve002.visible=true:larve003.visible=false:larve004.visible=false:larve005.visible=false:larve006.visible=false:larve007001.visible=false:larve008.visible=false:larve009.visible=false:larve010.visible=false 
			end Select
End Sub


dim grubframe:grubframe=0
dim grubframeRate:grubframeRate=0.1
dim grubxy1, grubxy2, grubxy3, grubxy4, grubxy5, grubxy6, grubxy7, grubxy8, grubxy9, grubxy10, grubxy11
dim Grubloc
dim gogogrub
dim grubstep1, grubstep2, grubstep3, grubstep4, grubstep5, grubstep6, grubstep7, grubstep8, grubstep9, grubstep10
dim n5

Sub GoGrub
	Randomize Timer
		n5 = Int(1 + Rnd * 5)
		For i = 1 to 5
		Next
		'larve007001
		If n5 = 1 Then 
			Grubxy1=Array(Array(175,200,215,245,285,335,390,450,500,550,600,640,660,640,610,555,500,460,435,425,430,445,460,475),Array(1440,1485,1545,1590,1625,1650,1665,1660,1655,1650,1620,1575,1520,1465,1425,1400,1410,1440,1495,1550,1605,1660,1815,1975))
			Grubxy2=Array(Array(175,200,215,245,285,335,390,450,500,550,600,640,660,640,610,555,500,460,435,425,430,445,460,475),Array(1440,1485,1545,1590,1625,1650,1665,1660,1655,1650,1620,1575,1520,1465,1425,1400,1410,1440,1495,1550,1605,1660,1815,1975))
			Grubxy3=Array(Array(175,200,215,245,285,335,390,450,500,550,600,640,660,640,610,555,500,460,435,425,430,445,460,475),Array(1440,1485,1545,1590,1625,1650,1665,1660,1655,1650,1620,1575,1520,1465,1425,1400,1410,1440,1495,1550,1605,1660,1815,1975))
			Grubxy4=Array(Array(175,200,215,245,285,335,390,450,500,550,600,640,660,640,610,555,500,460,435,425,430,445,460,475),Array(1440,1485,1545,1590,1625,1650,1665,1660,1655,1650,1620,1575,1520,1465,1425,1400,1410,1440,1495,1550,1605,1660,1815,1975))
			Grubxy5=Array(Array(175,200,215,245,285,335,390,450,500,550,600,640,660,640,610,555,500,460,435,425,430,445,460,475),Array(1440,1485,1545,1590,1625,1650,1665,1660,1655,1650,1620,1575,1520,1465,1425,1400,1410,1440,1495,1550,1605,1660,1815,1975))
			Grubxy6=Array(Array(175,200,215,245,285,335,390,450,500,550,600,640,660,640,610,555,500,460,435,425,430,445,460,475),Array(1440,1485,1545,1590,1625,1650,1665,1660,1655,1650,1620,1575,1520,1465,1425,1400,1410,1440,1495,1550,1605,1660,1815,1975))
			Grubxy7=Array(Array(175,200,215,245,285,335,390,450,500,550,600,640,660,640,610,555,500,460,435,425,430,445,460,475),Array(1440,1485,1545,1590,1625,1650,1665,1660,1655,1650,1620,1575,1520,1465,1425,1400,1410,1440,1495,1550,1605,1660,1815,1975))
			Grubxy8=Array(Array(175,200,215,245,285,335,390,450,500,550,600,640,660,640,610,555,500,460,435,425,430,445,460,475),Array(1440,1485,1545,1590,1625,1650,1665,1660,1655,1650,1620,1575,1520,1465,1425,1400,1410,1440,1495,1550,1605,1660,1815,1975))
			Grubxy9=Array(Array(175,200,215,245,285,335,390,450,500,550,600,640,660,640,610,555,500,460,435,425,430,445,460,475),Array(1440,1485,1545,1590,1625,1650,1665,1660,1655,1650,1620,1575,1520,1465,1425,1400,1410,1440,1495,1550,1605,1660,1815,1975))
			Grubxy10=Array(Array(175,200,215,245,285,335,390,450,500,550,600,640,660,640,610,555,500,460,435,425,430,445,460,475),Array(1440,1485,1545,1590,1625,1650,1665,1660,1655,1650,1620,1575,1520,1465,1425,1400,1410,1440,1495,1550,1605,1660,1815,1975))
		End If
		if n5 = 2 Then 
			Grubxy1=Array(Array(175,185,200,210,250,275,300,325,350,375,400,425,450,475,500,525,550,575,600,605,610,615,620,640),Array(1440,1440,1440,1500,1500,1450,1400,1350,1325,1325,1350,1375,1400,1410,1425,1400,1410,1440,1420,1400,1395,1400,1420,1440))
			Grubxy2=Array(Array(175,185,200,210,250,275,300,325,350,375,400,425,450,475,500,525,550,575,600,605,610,615,620,640),Array(1440,1440,1440,1500,1500,1450,1400,1350,1325,1325,1350,1375,1400,1410,1425,1400,1410,1440,1420,1400,1395,1400,1420,1440))
			Grubxy3=Array(Array(175,185,200,210,250,275,300,325,350,375,400,425,450,475,500,525,550,575,600,605,610,615,620,640),Array(1440,1440,1440,1500,1500,1450,1400,1350,1325,1325,1350,1375,1400,1410,1425,1400,1410,1440,1420,1400,1395,1400,1420,1440))
			Grubxy4=Array(Array(175,185,200,210,250,275,300,325,350,375,400,425,450,475,500,525,550,575,600,605,610,615,620,640),Array(1440,1440,1440,1500,1500,1450,1400,1350,1325,1325,1350,1375,1400,1410,1425,1400,1410,1440,1420,1400,1395,1400,1420,1440))
			Grubxy5=Array(Array(175,185,200,210,250,275,300,325,350,375,400,425,450,475,500,525,550,575,600,605,610,615,620,640),Array(1440,1440,1440,1500,1500,1450,1400,1350,1325,1325,1350,1375,1400,1410,1425,1400,1410,1440,1420,1400,1395,1400,1420,1440))
			Grubxy6=Array(Array(175,185,200,210,250,275,300,325,350,375,400,425,450,475,500,525,550,575,600,605,610,615,620,640),Array(1440,1440,1440,1500,1500,1450,1400,1350,1325,1325,1350,1375,1400,1410,1425,1400,1410,1440,1420,1400,1395,1400,1420,1440))
			Grubxy7=Array(Array(175,185,200,210,250,275,300,325,350,375,400,425,450,475,500,525,550,575,600,605,610,615,620,640),Array(1440,1440,1440,1500,1500,1450,1400,1350,1325,1325,1350,1375,1400,1410,1425,1400,1410,1440,1420,1400,1395,1400,1420,1440))
			Grubxy8=Array(Array(175,185,200,210,250,275,300,325,350,375,400,425,450,475,500,525,550,575,600,605,610,615,620,640),Array(1440,1440,1440,1500,1500,1450,1400,1350,1325,1325,1350,1375,1400,1410,1425,1400,1410,1440,1420,1400,1395,1400,1420,1440))
			Grubxy9=Array(Array(175,185,200,210,250,275,300,325,350,375,400,425,450,475,500,525,550,575,600,605,610,615,620,640),Array(1440,1440,1440,1500,1500,1450,1400,1350,1325,1325,1350,1375,1400,1410,1425,1400,1410,1440,1420,1400,1395,1400,1420,1440))
			Grubxy10=Array(Array(175,185,200,210,250,275,300,325,350,375,400,425,450,475,500,525,550,575,600,605,610,615,620,640),Array(1440,1440,1440,1500,1500,1450,1400,1350,1325,1325,1350,1375,1400,1410,1425,1400,1410,1440,1420,1400,1395,1400,1420,1440))
		End If
		if n5 = 3 Then 
			Grubxy1=Array(Array(175,200,205,210,215,210,200,215,215,225,225,235,250,275,275,280,280,300,315,330,350,375,415,475),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,275,250,220))
			Grubxy2=Array(Array(175,200,205,210,215,210,200,215,215,225,225,235,250,275,275,280,280,300,315,330,350,375,415,475),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,275,250,220))
			Grubxy3=Array(Array(175,200,205,210,215,210,200,215,215,225,225,235,250,275,275,280,280,300,315,330,350,375,415,475),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,275,250,220))
			Grubxy4=Array(Array(175,200,205,210,215,210,200,215,215,225,225,235,250,275,275,280,280,300,315,330,350,375,415,475),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,275,250,220))
			Grubxy5=Array(Array(175,200,205,210,215,210,200,215,215,225,225,235,250,275,275,280,280,300,315,330,350,375,415,475),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,275,250,220))
			Grubxy6=Array(Array(175,200,205,210,215,210,200,215,215,225,225,235,250,275,275,280,280,300,315,330,350,375,415,475),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,275,250,220))
			Grubxy7=Array(Array(175,200,205,210,215,210,200,215,215,225,225,235,250,275,275,280,280,300,315,330,350,375,415,475),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,275,250,220))
			Grubxy8=Array(Array(175,200,205,210,215,210,200,215,215,225,225,235,250,275,275,280,280,300,315,330,350,375,415,475),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,275,250,220))
			Grubxy9=Array(Array(175,200,205,210,215,210,200,215,215,225,225,235,250,275,275,280,280,300,315,330,350,375,415,475),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,275,250,220))
			Grubxy10=Array(Array(175,200,205,210,215,210,200,215,215,225,225,235,250,275,275,280,280,300,315,330,350,375,415,475),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,275,250,220))
		End If
		If n5 = 4 Then 
			Grubxy1=Array(Array(175,200,205,210,215,210,200,215,215,225,225,280,280,275,275,250,200,175,160,120,100,80,50,30),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,275,250,220))
			Grubxy2=Array(Array(175,200,205,210,215,210,200,215,215,225,225,280,280,275,275,250,200,175,160,120,100,80,50,30),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,275,250,220))
			Grubxy3=Array(Array(175,200,205,210,215,210,200,215,215,225,225,280,280,275,275,250,200,175,160,120,100,80,50,30),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,275,250,220))
			Grubxy4=Array(Array(175,200,205,210,215,210,200,215,215,225,225,280,280,275,275,250,200,175,160,120,100,80,50,30),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,275,250,220))
			Grubxy5=Array(Array(175,200,205,210,215,210,200,215,215,225,225,280,280,275,275,250,200,175,160,120,100,80,50,30),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,275,250,220))
			Grubxy6=Array(Array(175,200,205,210,215,210,200,215,215,225,225,280,280,275,275,250,200,175,160,120,100,80,50,30),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,275,250,220))
			Grubxy7=Array(Array(175,200,205,210,215,210,200,215,215,225,225,280,280,275,275,250,200,175,160,120,100,80,50,30),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,275,250,220))
			Grubxy8=Array(Array(175,200,205,210,215,210,200,215,215,225,225,280,280,275,275,250,200,175,160,120,100,80,50,30),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,275,250,220))
			Grubxy9=Array(Array(175,200,205,210,215,210,200,215,215,225,225,280,280,275,275,250,200,175,160,120,100,80,50,30),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,275,250,220))
			Grubxy10=Array(Array(175,200,205,210,215,210,200,215,215,225,225,280,280,275,275,250,200,175,160,120,100,80,50,30),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,275,250,220))
		End If
		if n5 = 5 Then 
			Grubxy1=Array(Array(175,200,250,300,350,400,450,500,550,600,650,650,650,680,700,700,715,725,750,775,800,815,820,840),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,350,400,445))
			Grubxy2=Array(Array(175,200,250,300,350,400,450,500,550,600,650,650,650,680,700,700,715,725,750,775,800,815,820,840),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,350,400,445))
			Grubxy3=Array(Array(175,200,250,300,350,400,450,500,550,600,650,650,650,680,700,700,715,725,750,775,800,815,820,840),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,350,400,445))
			Grubxy4=Array(Array(175,200,250,300,350,400,450,500,550,600,650,650,650,680,700,700,715,725,750,775,800,815,820,840),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,350,400,445))
			Grubxy5=Array(Array(175,200,250,300,350,400,450,500,550,600,650,650,650,680,700,700,715,725,750,775,800,815,820,840),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,350,400,445))
			Grubxy6=Array(Array(175,200,250,300,350,400,450,500,550,600,650,650,650,680,700,700,715,725,750,775,800,815,820,840),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,350,400,445))
			Grubxy7=Array(Array(175,200,250,300,350,400,450,500,550,600,650,650,650,680,700,700,715,725,750,775,800,815,820,840),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,350,400,445))
			Grubxy8=Array(Array(175,200,250,300,350,400,450,500,550,600,650,650,650,680,700,700,715,725,750,775,800,815,820,840),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,350,400,445))
			Grubxy9=Array(Array(175,200,250,300,350,400,450,500,550,600,650,650,650,680,700,700,715,725,750,775,800,815,820,840),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,350,400,445))
			Grubxy10=Array(Array(175,200,250,300,350,400,450,500,550,600,650,650,650,680,700,700,715,725,750,775,800,815,820,840),Array(1440,1350,1250,1150,1050,980,800,750,600,575,500,475,450,400,375,350,375,400,375,350,300,350,400,445))
		End If
		GrubLoc=0
		gogogrub=0
		initgrubdelay_timer
End Sub

sub initgrubdelay_timer
	Dim grubstep

	if gogogrub=0 then 
		grubstep=0
		grubinit.enabled=1
		GrubAnimLoopTimer.enabled=1
		gogogrub=1
	end if
end sub


sub grubinit_timer
	Dim grubA, dx,dy, xx, grubstep
	
	
	larve001.x=grubxy1(0)(grubstep)
	larve001.y=grubxy1(1)(grubstep)
	larve002.x=grubxy2(0)(grubstep)
	larve002.y=grubxy2(1)(grubstep)
	larve003.x=grubxy3(0)(grubstep)
	larve003.y=grubxy3(1)(grubstep)
	larve004.x=grubxy4(0)(grubstep)
	larve004.y=grubxy4(1)(grubstep)
	larve005.x=grubxy5(0)(grubstep)
	larve005.y=grubxy5(1)(grubstep)
	larve006.x=grubxy6(0)(grubstep)
	larve006.y=grubxy6(1)(grubstep)
	larve007.x=grubxy7(0)(grubstep)
	larve007.y=grubxy7(1)(grubstep)
	larve008.x=grubxy8(0)(grubstep)
	larve008.y=grubxy8(1)(grubstep)
	larve009.x=grubxy9(0)(grubstep)
	larve009.y=grubxy9(1)(grubstep)
	larve010.x=grubxy10(0)(grubstep)
	larve010.y=grubxy10(1)(grubstep)
	larve007001.x=grubxy10(0)(grubstep)
	larve007001.y=grubxy10(1)(grubstep)
	if grubstep>0 Then
		for xx = 1 to 11											'change each roach rotation
			dy=-1*(EVAL("grubxy"&xx)(1)(grubstep)-EVAL("grubxy"&xx)(1)(grubstep-1))	'delta Y
			if dy=0 then dy=0.0000001													'avoid divide by zero errors
			dx=EVAL("roachxy"&xx)(0)(grubstep)-EVAL("roachxy"&xx)(0)(grubstep-1)		'delta X
			grubA=atn(dX/dY)												'angle in radians
			if grubA<0 then grubA=grubA+PI								'correction for negative angles
			grubA=int(grubA/(pi/180))							'convert to degrees
			if dx<0 then grubA=grubA+180						'correction for negative quadrants
			EVAL("grub"&xx).roty=grubA
		Next
	end If
	grubstep=grubstep+1
	if grubstep=24 then 
		GrubAnimLoopTimer.enabled=False
		me.enabled=false
		grubstep=0
	end if
end Sub

sub GrubAnimLoopTimer_Timer
	larve001.ShowFrame grubframe
	larve002.ShowFrame grubframe
	larve003.ShowFrame grubframe
	larve004.ShowFrame grubframe
	larve005.ShowFrame grubframe
	larve006.ShowFrame grubframe
	larve007.ShowFrame grubframe
	larve008.ShowFrame grubframe
	larve009.ShowFrame grubframe
	larve010.ShowFrame grubframe
	grubframe = grubframe + grubframeRate
	If grubframe>18 Then	' the animation is a bit rough so don't play it till the end but stop a bit earlier
		grubframe=0
	end if
end sub

'****************************************
'Larve Bonus
'****************************************
Dim FlagDir
FlagDir = 1 'this is both the direction, if + goes up, if - goes down, and also the speed

sub Letsstartlarve
larvesChecker = 0
	FlagDir = 1 'set the direction to up
	FlagTimer.Enabled = true
Enablelarvess()
end sub

Dim Whichlarves, larvesChecker
Whichlarves = 0
larvesChecker = 0
sub Enablelarvess()
	If larvesChecker = 31 Then
		CheckBonuslarves()
		Exit Sub
	End If
	Randomize()
	Whichlarves = INT(RND * 5) + 1
	Select Case Whichlarves
		Case 3
			Whichlarves = 4
		Case 4
			Whichlarves = 8
		Case 5
			Whichlarves = 16
	End Select
	Do While (Whichlarves AND larvesChecker) > 0
		Whichlarves = INT(RND * 5) + 1
		Select Case Whichlarves
			Case 3
				Whichlarves = 4
			Case 4
				Whichlarves = 8
			Case 5
				Whichlarves = 16
		End Select
	Loop
	Select Case Whichlarves
		Case 1
			larvesitem001.enabled = 1
			larve011.Visible = 1
			larve011.X = larvesitem001.X
			larve011.Y = larvesitem001.Y
		Case 2
			larvesitem002.enabled = 1
			larve011.Visible = 1
			larve011.X = larvesitem002.X
			larve011.Y = larvesitem002.Y
		Case 4
			larvesitem003.enabled = 1
			larve011.Visible = 1
			larve011.X = larvesitem003.X
			larve011.Y = larvesitem003.Y
		Case 8
			larvesitem004.enabled = 1
			larve011.Visible = 1
			larve011.X = larvesitem004.X
			larve011.Y = larvesitem004.Y
		Case 16
			larvesitem005.enabled = 1
			larve011.Visible = 1
			larve011.X = larvesitem005.X
			larve011.Y = larvesitem005.Y
	End Select
end sub


sub larvesitem001_hit()
	larvesitem001.enabled = 0
	MovelarvesDown()
	larvesChecker = (larvesChecker OR 1)
	Enablelarvess()
end sub

sub MovelarvesDown()
	Dim X
	For Each X in larvess
		X.Visible = 0
	Next
end sub

sub larvesitem002_hit()
	larvesitem002.enabled = 0
	MovelarvesDown()
	ID=62:FX():ScoreID=62:ScoreAmount
	larvesChecker = (larvesChecker OR 2)
	Enablelarvess()
end sub

sub larvesitem003_hit()
	larvesitem003.enabled = 0
	MovelarvesDown()
	ID=62:FX():ScoreID=62:ScoreAmount
	larvesChecker = (larvesChecker OR 4)
	Enablelarvess()
end sub

sub larvesitem004_hit()
	larvesitem004.enabled = 0
	MovelarvesDown()
	ID=62:FX():ScoreID=62:ScoreAmount
	larvesChecker = (larvesChecker OR 8)
	Enablelarvess()
end sub

sub larvesitem005_hit()
	larvesitem005.enabled = 0
	MovelarvesDown()
	ID=62:FX():ScoreID=62:ScoreAmount
	larvesChecker = (larvesChecker OR 16)
	Enablelarvess()
end sub

sub CheckBonuslarves()
	If larvesChecker = 31 then
		larvesChecker = 0
		stopbugsandnuts()
	end if
end sub


Sub FlagTimer_Timer
    larve011.TransZ = larve011.TransZ + FlagDir
    If larve011.TransZ > 15 Then FlagDir = -1 'goes down
    If larve011.TransZ < -15 Then FlagDir = 1 'goes up
End Sub


sub stopbugsandnuts()
Dim X
FlagTimer.Enabled = False
larvesitem001.enabled = 0
larvesitem002.enabled = 0
larvesitem003.enabled = 0
larvesitem004.enabled = 0
larvesitem005.enabled = 0
coconutsitem001.enabled = 0
coconutsitem002.enabled = 0
coconutsitem003.enabled = 0
coconutsitem004.enabled = 0
coconutsitem005.enabled = 0
	For Each X in coconutss
		X.Visible = 0
	Next
	For Each X in larvess
		X.Visible = 0
	Next
end sub

'****************************************
'coconuts Bonus
'****************************************

sub Letsstartcoconuts
coconutsChecker = 0
Enablecoconutss()
end sub

Dim Whichcoconuts, coconutsChecker
Whichcoconuts = 0
coconutsChecker = 0

sub Enablecoconutss()
	If coconutsChecker = 31 Then
		CheckBonuscoconuts()
		CoconutsOn = False
		Exit Sub
	End If
	shaketree
	Randomize()
	Whichcoconuts = INT(RND * 5) + 1
	Select Case Whichcoconuts
		Case 3
			Whichcoconuts = 4
		Case 4
			Whichcoconuts = 8
		Case 5
			Whichcoconuts = 16
	End Select
	Do While (Whichcoconuts AND coconutsChecker) > 0
		Whichcoconuts = INT(RND * 5) + 1
		Select Case Whichcoconuts
			Case 3
				Whichcoconuts = 4
			Case 4
				Whichcoconuts = 8
			Case 5
				Whichcoconuts = 16
		End Select
	Loop
	Select Case Whichcoconuts
		Case 1
			coconutsitem001.enabled = 1
			Coconut004.X = coconutsitem001.X
			Coconut004.Y = coconutsitem001.Y
		Case 2
			coconutsitem002.enabled = 1
			Coconut004.X = coconutsitem002.X
			Coconut004.Y = coconutsitem002.Y
		Case 4
			coconutsitem003.enabled = 1
			Coconut004.X = coconutsitem003.X
			Coconut004.Y = coconutsitem003.Y
		Case 8
			coconutsitem004.enabled = 1
			Coconut004.X = coconutsitem004.X
			Coconut004.Y = coconutsitem004.Y
		Case 16
			coconutsitem005.enabled = 1
			Coconut004.X = coconutsitem005.X
			Coconut004.Y = coconutsitem005.Y
	End Select
end sub


sub coconutsitem001_hit()
	coconutsitem001.enabled = 0
	MovecoconutsDown()
	coconutsChecker = (coconutsChecker OR 1)
	Enablecoconutss()
end sub

sub MovecoconutsDown()
	Dim X
	For Each X in coconutss
		X.Visible = 0
	Next
CoconutTimer.Enabled = False
end sub

sub coconutsitem002_hit()
	coconutsitem002.enabled = 0
	MovecoconutsDown()
	ID=61:FX():ScoreID=61:ScoreAmount
	coconutsChecker = (coconutsChecker OR 2)
	Enablecoconutss()
end sub

sub coconutsitem003_hit()
	coconutsitem003.enabled = 0
	MovecoconutsDown()
	ID=61:FX():ScoreID=61:ScoreAmount
	coconutsChecker = (coconutsChecker OR 4)
	Enablecoconutss()
end sub

sub coconutsitem004_hit()
	coconutsitem004.enabled = 0
	MovecoconutsDown()
	ID=61:FX():ScoreID=61:ScoreAmount
	coconutsChecker = (coconutsChecker OR 8)
	Enablecoconutss()
end sub

sub coconutsitem005_hit()
	coconutsitem005.enabled = 0
	MovecoconutsDown()
	ID=61:FX():ScoreID=61:ScoreAmount
	coconutsChecker = (coconutsChecker OR 16)
	Enablecoconutss()
end sub

sub CheckBonuscoconuts()
	If coconutsChecker = 31 then
		coconutsChecker = 0
		stopbugsandnuts()
	end if
end sub


'*****************
' coconut down
'*****************

Dim cocodownDir
cocodownDir = 15 'this is both the direction, if + goes up, if - goes down, and also the speed

Sub cocodownTimer_Timer
    Coconut004.z = Coconut004.z + cocodownDir
    If Coconut004.z > 200 Then cocodownDir = -15 'goes down
    If Coconut004.z < 50 Then cocodownTimer.Enabled = 0:CoconutTimer.Enabled = true
End Sub

sub cococommingdown
Coconut004.z = 250
Coconut004.Visible = 1
Playsound "cocodrop"
cocodownTimer.enabled = true
end sub

'*****************
'Spinning coconut
'*****************

Sub CoconutTimer_Timer
   Coconut004.ObjRotz = Coconut004.ObjRotz + 1
   if Coconut004.ObjRotz > 360 then
       Coconut004.ObjRotz = 1
   end if
end sub

'*****************
' tree shaker
'*****************

sub shaketree
Playsound "shakingtree"
tree1Shaker
vpmTimer.AddTimer 2000, "cococommingdown'"
end sub

Dim tree1Shake

Sub tree1Shaker()
    tree1Shake = 10
    tree1Timer.Enabled = True
End Sub

Sub tree1Timer_Timer()
    tree001.RotZ = tree1Shake
    If tree1Shake <= 0.1 AND tree1Shake >= -0.1 Then Me.Enabled = False:Exit Sub
    If tree1Shake < 0 Then
        tree1Shake = ABS(tree1Shake)- 0.1
    Else
        tree1Shake = - tree1Shake + 0.1
    End If
End Sub


'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
' Debug Logs
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  
'/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/
'\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\
' X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X 
'*****************************************************************************************************************************************
'  ERROR LOGS by baldgeek
'*****************************************************************************************************************************************

' Log File Usage:
'   WriteToLog "Label 1", "Message 1 "
'   WriteToLog "Label 2", "Message 2 "

					 

Class DebugLogFile

    Private Filename
    Private TxtFileStream
    
    Private Function LZ(ByVal Number, ByVal Places)
        Dim Zeros
        Zeros = String(CInt(Places), "0")
        LZ = Right(Zeros & CStr(Number), Places)
    End Function

    Private Function GetTimeStamp
        Dim CurrTime, Elapsed, MilliSecs
        CurrTime = Now()
        Elapsed = Timer()
        MilliSecs = Int((Elapsed - Int(Elapsed)) * 1000)
        GetTimeStamp = _
            LZ(Year(CurrTime),   4) & "-" _
            & LZ(Month(CurrTime),  2) & "-" _
            & LZ(Day(CurrTime),    2) & " " _
            & LZ(Hour(CurrTime),   2) & ":" _
            & LZ(Minute(CurrTime), 2) & ":" _
            & LZ(Second(CurrTime), 2) & ":" _
            & LZ(MilliSecs, 4)
    End Function

' *** Debug.Print the time with milliseconds, and a message of your choice
    Public Sub WriteToLog(label, message, code)
        Dim FormattedMsg, Timestamp
        'Filename = UserDirectory + "\" + cGameName + "_debug_log.txt"
		Filename = cGameName + "_debug_log.txt"
      
        Set TxtFileStream = CreateObject("Scripting.FileSystemObject").OpenTextFile(Filename, code, True)
        Timestamp  = GetTimeStamp     
        FormattedMsg = GetTimeStamp + " : " + label + " : " + message
        TxtFileStream.WriteLine FormattedMsg
        TxtFileStream.Close
		debug.print label & " : " & message
	End Sub

End Class

Sub WriteToLog(label, message)
	if KeepLogs Then
		Dim LogFileObj
		Set LogFileObj = New DebugLogFile
		LogFileObj.WriteToLog label, message, 8
	end if
End Sub

Sub NewLog()
	if KeepLogs Then
		Dim LogFileObj
		Set LogFileObj = New DebugLogFile
		LogFileObj.WriteToLog "NEW LOG", " ", 2
	end if
End Sub

