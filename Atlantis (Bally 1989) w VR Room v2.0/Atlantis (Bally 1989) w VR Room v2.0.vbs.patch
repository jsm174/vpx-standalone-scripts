--- "Atlantis (Bally 1989) w VR Room v2.0.vbs.original"	2023-10-11 10:38:34.392262176 +0200
+++ "Atlantis (Bally 1989) w VR Room v2.0.vbs"	2023-10-11 10:37:32.026211801 +0200
@@ -3029,9 +3029,9 @@
 	Private Sub Class_Initialize : redim ballvel(0) : redim ballvelx(0): redim ballvely(0) : End Sub 
 
 	Public Sub Update()	'tracks in-ball-velocity
-		dim str, b, highestID
+		dim str, b, AllBalls, highestID : allBalls = getballs
 
-		for each b in gBOT
+		for each b in allBalls
 			if b.id >= HighestID then highestID = b.id
 		Next
 
@@ -3039,7 +3039,7 @@
 		if uBound(ballvelx) < highestID then redim ballvelx(highestID)	'set bounds
 		if uBound(ballvely) < highestID then redim ballvely(highestID)	'set bounds
 
-		for each b in gBOT
+		for each b in allBalls
 			ballvel(b.id) = BallSpeed(b)
 			ballvelx(b.id) = b.velx
 			ballvely(b.id) = b.vely
@@ -3355,6 +3355,40 @@
 '  DROP TARGETS INITIALIZATION
 '******************************************************
 
+Class DropTarget
+  Private m_primary, m_secondary, m_prim, m_sw, m_animate, m_isDropped
+
+  Public Property Get Primary(): Set Primary = m_primary: End Property
+  Public Property Let Primary(input): Set m_primary = input: End Property
+
+  Public Property Get Secondary(): Set Secondary = m_secondary: End Property
+  Public Property Let Secondary(input): Set m_secondary = input: End Property
+
+  Public Property Get Prim(): Set Prim = m_prim: End Property
+  Public Property Let Prim(input): Set m_prim = input: End Property
+
+  Public Property Get Sw(): Sw = m_sw: End Property
+  Public Property Let Sw(input): m_sw = input: End Property
+
+  Public Property Get Animate(): Animate = m_animate: End Property
+  Public Property Let Animate(input): m_animate = input: End Property
+
+  Public Property Get IsDropped(): IsDropped = m_isDropped: End Property
+  Public Property Let IsDropped(input): m_isDropped = input: End Property
+
+  Public default Function init(primary, secondary, prim, sw, animate, isDropped)
+    Set m_primary = primary
+    Set m_secondary = secondary
+    Set m_prim = prim
+    m_sw = sw
+    m_animate = animate
+    m_isDropped = isDropped
+
+    Set Init = Me
+  End Function
+End Class
+
+
 'Define a variable for each drop target
 Dim DT1, DT2, DT3, DT4
 
@@ -3374,10 +3408,10 @@
 '
 '	Values for annimate: 1 - bend target (hit to primary), 2 - drop target (hit to secondary), 3 - brick target (high velocity hit to secondary), -1 - raise target 
 
-DT1 = Array(sw1, sw1a, sw1p, 1, 0)
-DT2 = Array(sw2, sw2a, sw2p, 2, 0)
-DT3 = Array(sw3, sw3a, sw3p, 3, 0)
-DT4 = Array(sw4, sw4a, sw4p, 4, 0)
+Set DT1 = (new DropTarget)(sw1, sw1a, sw1p, 1, 0, false)
+Set DT2 = (new DropTarget)(sw2, sw2a, sw2p, 2, 0, false)
+Set DT3 = (new DropTarget)(sw3, sw3a, sw3p, 3, 0, false)
+Set DT4 = (new DropTarget)(sw4, sw4a, sw4p, 4, 0, false)
 
 Dim DTArray
 DTArray = Array(DT1, DT2, DT3, DT4)
@@ -3408,9 +3442,9 @@
 	Dim i
 	i = DTArrayID(switch)
 	PlayTargetSound
-	DTArray(i)(4) =  DTCheckBrick(Activeball,DTArray(i)(2))
-	If DTArray(i)(4) = 1 or DTArray(i)(4) = 3 or DTArray(i)(4) = 4 Then
-		DTBallPhysics Activeball, DTArray(i)(2).rotz, DTMass
+	DTArray(i).animate =  DTCheckBrick(Activeball,DTArray(i).prim)
+	If DTArray(i).animate = 1 or DTArray(i).animate = 3 or DTArray(i).animate = 4 Then
+		DTBallPhysics Activeball, DTArray(i).prim.rotz, DTMass
 
 ' added to control the GI and shadows of the drop targets 
 		isTargetDown(switch) = True
@@ -3424,7 +3458,7 @@
 	Dim i
 	i = DTArrayID(switch)
 
-	DTArray(i)(4) = -1
+	DTArray(i).animate = -1
 	DoDTAnim
 End Sub
 
@@ -3432,14 +3466,14 @@
 	Dim i
 	i = DTArrayID(switch)
 
-	DTArray(i)(4) = 1
+	DTArray(i).animate = 1
 	DoDTAnim
 End Sub
 
 Function DTArrayID(switch)
 	Dim i
 	For i = 0 to uBound(DTArray) 
-		If DTArray(i)(3) = switch Then DTArrayID = i:Exit Function 
+		If DTArray(i).sw = switch Then DTArrayID = i:Exit Function 
 	Next
 End Function
 
@@ -3494,7 +3528,7 @@
 Sub DoDTAnim()
 	Dim i
 	For i=0 to Ubound(DTArray)
-		DTArray(i)(4) = DTAnimate(DTArray(i)(0),DTArray(i)(1),DTArray(i)(2),DTArray(i)(3),DTArray(i)(4))
+		DTArray(i).animate = DTAnimate(DTArray(i).primary,DTArray(i).secondary,DTArray(i).prim,DTArray(i).sw,DTArray(i).animate)
 	Next
 End Sub
 
@@ -3637,6 +3671,31 @@
 '		STAND-UP TARGET INITIALIZATION
 '******************************************************
 
+Class StandupTarget
+  Private m_primary, m_prim, m_sw, m_animate
+
+  Public Property Get Primary(): Set Primary = m_primary: End Property
+  Public Property Let Primary(input): Set m_primary = input: End Property
+
+  Public Property Get Prim(): Set Prim = m_prim: End Property
+  Public Property Let Prim(input): Set m_prim = input: End Property
+
+  Public Property Get Sw(): Sw = m_sw: End Property
+  Public Property Let Sw(input): m_sw = input: End Property
+
+  Public Property Get Animate(): Animate = m_animate: End Property
+  Public Property Let Animate(input): m_animate = input: End Property
+
+  Public default Function init(primary, prim, sw, animate)
+    Set m_primary = primary
+    Set m_prim = prim
+    m_sw = sw
+    m_animate = animate
+
+    Set Init = Me
+  End Function
+End Class
+
 'Define a variable for each stand-up target
 Dim ST25, ST26, ST27, ST28, ST29, ST30, ST33, ST34, ST35
 
@@ -3653,15 +3712,15 @@
 'You will also need to add a secondary hit object for each stand up (name sw11o, sw12o, and sw13o on the example Table1)
 'these are inclined primitives to simulate hitting a bent target and should provide so z velocity on high speed impacts
 
-ST25 = Array(sw25, psw25,25, 0)
-ST26 = Array(sw26, psw26,26, 0)
-ST27 = Array(sw27, psw27,27, 0)
-ST28 = Array(sw28, psw28,28, 0)
-ST29 = Array(sw29, psw29,29, 0)
-ST30 = Array(sw30, psw30,30, 0)
-ST33 = Array(sw33, psw33,33, 0)
-ST34 = Array(sw34, psw34,34, 0)
-ST35 = Array(sw35, psw35,35, 0)
+Set ST25 = (new StandupTarget)(sw25, psw25,25, 0)
+Set ST26 = (new StandupTarget)(sw26, psw26,26, 0)
+Set ST27 = (new StandupTarget)(sw27, psw27,27, 0)
+Set ST28 = (new StandupTarget)(sw28, psw28,28, 0)
+Set ST29 = (new StandupTarget)(sw29, psw29,29, 0)
+Set ST30 = (new StandupTarget)(sw30, psw30,30, 0)
+Set ST33 = (new StandupTarget)(sw33, psw33,33, 0)
+Set ST34 = (new StandupTarget)(sw34, psw34,34, 0)
+Set ST35 = (new StandupTarget)(sw35, psw35,35, 0)
 
 'Add all the Stand-up Target Arrays to Stand-up Target Animation Array
 ' STAnimationArray = Array(ST1, ST2, ....)
@@ -3683,10 +3742,10 @@
 	i = STArrayID(switch)
 
 	PlayTargetSound
-	STArray(i)(3) =  STCheckHit(Activeball,STArray(i)(0))
+	STArray(i).animate =  STCheckHit(Activeball,STArray(i).primary)
 
-	If STArray(i)(3) <> 0 Then
-		DTBallPhysics Activeball, STArray(i)(0).orientation, STMass
+	If STArray(i).animate <> 0 Then
+		DTBallPhysics Activeball, STArray(i).primary.orientation, STMass
 	End If
 	DoSTAnim
 End Sub
@@ -3694,7 +3753,7 @@
 Function STArrayID(switch)
 	Dim i
 	For i = 0 to uBound(STArray) 
-		If STArray(i)(2) = switch Then STArrayID = i:Exit Function 
+		If STArray(i).sw = switch Then STArrayID = i:Exit Function 
 	Next
 End Function
 
@@ -3723,7 +3782,7 @@
 Sub DoSTAnim()
 	Dim i
 	For i=0 to Ubound(STArray)
-		STArray(i)(3) = STAnimate(STArray(i)(0),STArray(i)(1),STArray(i)(2),STArray(i)(3))
+		STArray(i).animate = STAnimate(STArray(i).primary,STArray(i).prim,STArray(i).sw,STArray(i).animate)
 	Next
 End Sub
 
