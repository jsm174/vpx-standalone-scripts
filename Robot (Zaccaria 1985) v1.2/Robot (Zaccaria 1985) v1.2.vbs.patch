--- /Users/francisdb/vpinball/tables/Robot (Zaccaria 1985) v1.2/Robot (Zaccaria 1985) v1.2.vbs.original	2023-06-22 10:00:59
+++ /Users/francisdb/vpinball/tables/Robot (Zaccaria 1985) v1.2/Robot (Zaccaria 1985) v1.2.vbs	2023-06-22 09:59:50
@@ -2518,8 +2518,8 @@
 	RS.EndPoint2 = EndPoint2RS
 
 	RS1.Object = RightSlingshot
-	RS1.EndPoint1 = EndPoint1RS
-	RS1.EndPoint2 = EndPoint2RS
+	RS1.EndPoint1 = EndPoint1RS1
+	RS1.EndPoint2 = EndPoint2RS1
 
 	'Slingshot angle corrections (pt, BallPos in %, Angle in deg)
 	' These values are best guesses. Retune them if needed based on specific table research.
\ No newline at end of file
@@ -2902,7 +2902,40 @@
 '******************************************************
 '  DROP TARGETS INITIALIZATION
 '******************************************************
+
+Class DropTarget
+	Private m_primary, m_secondary, m_prim, m_sw, m_animate, m_isDropped
+  
+	Public Property Get Primary(): Set Primary = m_primary: End Property
+	Public Property Let Primary(input): Set m_primary = input: End Property
+  
+	Public Property Get Secondary(): Set Secondary = m_secondary: End Property
+	Public Property Let Secondary(input): Set m_secondary = input: End Property
+  
+	Public Property Get Prim(): Set Prim = m_prim: End Property
+	Public Property Let Prim(input): Set m_prim = input: End Property
+  
+	Public Property Get Sw(): Sw = m_sw: End Property
+	Public Property Let Sw(input): m_sw = input: End Property
+  
+	Public Property Get Animate(): Animate = m_animate: End Property
+	Public Property Let Animate(input): m_animate = input: End Property
+  
+	Public Property Get IsDropped(): IsDropped = m_isDropped: End Property
+	Public Property Let IsDropped(input): m_isDropped = input: End Property
+  
+	Public default Function init(primary, secondary, prim, sw, animate, isDropped)
+	  Set m_primary = primary
+	  Set m_secondary = secondary
+	  Set m_prim = prim
+	  m_sw = sw
+	  m_animate = animate
+	  m_isDropped = isDropped
 
+	  Set Init = Me
+	End Function
+  End Class
+
 'Define a variable for each drop target
 Dim DT43, DT44, DT45, DT46, DT47
 
\ No newline at end of file
@@ -2922,11 +2955,11 @@
 '
 '	Values for annimate: 1 - bend target (hit to primary), 2 - drop target (hit to secondary), 3 - brick target (high velocity hit to secondary), -1 - raise target 
 
-DT43 = Array(sw43, sw43a, sw43p, 43, 0)
-DT44 = Array(sw44, sw44a, sw44p, 44, 0)
-DT45 = Array(sw45, sw45a, sw45p, 45, 0)
-DT46 = Array(sw46, sw46a, sw46p, 46, 0)
-DT47 = Array(sw47, sw47a, sw47p, 47, 0)
+Set DT43 = (new DropTarget)(sw43, sw43a, sw43p, 43, 0, false)
+Set DT44 = (new DropTarget)(sw44, sw44a, sw44p, 44, 0, false)
+Set DT45 = (new DropTarget)(sw45, sw45a, sw45p, 45, 0, false)
+Set DT46 = (new DropTarget)(sw46, sw46a, sw46p, 46, 0, false)
+Set DT47 = (new DropTarget)(sw47, sw47a, sw47p, 47, 0, false)
 
 Dim DTArray
 DTArray = Array(DT43, DT44, DT45, DT46, DT47)
\ No newline at end of file
@@ -2958,9 +2991,9 @@
 	i = DTArrayID(switch)
 
 	PlayTargetSound
-	DTArray(i)(4) =  DTCheckBrick(Activeball,DTArray(i)(2))
-	If DTArray(i)(4) = 1 or DTArray(i)(4) = 3 or DTArray(i)(4) = 4 Then
-		DTBallPhysics Activeball, DTArray(i)(2).rotz, DTMass
+	DTArray(i).animate =  DTCheckBrick(Activeball,DTArray(i).prim)
+	If DTArray(i).animate = 1 or DTArray(i).animate = 3 or DTArray(i).animate = 4 Then
+		DTBallPhysics Activeball, DTArray(i).prim.rotz, DTMass
 	End If
 	DoDTAnim
 End Sub
\ No newline at end of file
@@ -2968,21 +3001,21 @@
 Sub DTRaise(switch)
 	Dim i
 	i = DTArrayID(switch)
-	DTArray(i)(4) = -1
+	DTArray(i).animate = -1
 	DoDTAnim
 End Sub
 
 Sub DTDrop(switch)
 	Dim i
 	i = DTArrayID(switch)
-	DTArray(i)(4) = 1
+	DTArray(i).animate = 1
 	DoDTAnim
 End Sub
 
 Function DTArrayID(switch)
 	Dim i
 	For i = 0 to uBound(DTArray) 
-		If DTArray(i)(3) = switch Then DTArrayID = i:Exit Function 
+		If DTArray(i).sw = switch Then DTArrayID = i:Exit Function 
 	Next
 End Function
 
\ No newline at end of file
@@ -3037,7 +3070,7 @@
 Sub DoDTAnim()
 	Dim i
 	For i=0 to Ubound(DTArray)
-		DTArray(i)(4) = DTAnimate(DTArray(i)(0),DTArray(i)(1),DTArray(i)(2),DTArray(i)(3),DTArray(i)(4))
+		DTArray(i).animate = DTAnimate(DTArray(i).primary,DTArray(i).secondary,DTArray(i).prim,DTArray(i).sw,DTArray(i).animate)
 	Next
 
 	'Shadow animation, from Bord's BK
\ No newline at end of file
@@ -3224,6 +3257,31 @@
 '		STAND-UP TARGET INITIALIZATION
 '******************************************************
 
+Class StandupTarget
+	Private m_primary, m_prim, m_sw, m_animate
+  
+	Public Property Get Primary(): Set Primary = m_primary: End Property
+	Public Property Let Primary(input): Set m_primary = input: End Property
+  
+	Public Property Get Prim(): Set Prim = m_prim: End Property
+	Public Property Let Prim(input): Set m_prim = input: End Property
+  
+	Public Property Get Sw(): Sw = m_sw: End Property
+	Public Property Let Sw(input): m_sw = input: End Property
+  
+	Public Property Get Animate(): Animate = m_animate: End Property
+	Public Property Let Animate(input): m_animate = input: End Property
+  
+	Public default Function init(primary, prim, sw, animate)
+	  Set m_primary = primary
+	  Set m_prim = prim
+	  m_sw = sw
+	  m_animate = animate
+  
+	  Set Init = Me
+	End Function
+  End Class
+
 'Define a variable for each stand-up target
 Dim ST31, ST32, ST33, ST34, ST37, ST38, ST39
 
\ No newline at end of file
@@ -3240,13 +3298,13 @@
 'You will also need to add a secondary hit object for each stand up (name sw11o, sw12o, and sw13o on the example Table1)
 'these are inclined primitives to simulate hitting a bent target and should provide so z velocity on high speed impacts
 
-ST31 = Array(sw31, psw31,31, 0)
-ST32 = Array(sw32, psw32,32, 0)
-ST33 = Array(sw33, psw33,33, 0)
-ST34 = Array(sw34, psw34,34, 0)
-ST37 = Array(sw37, psw37,37, 0)
-ST38 = Array(sw38, psw38,38, 0)
-ST39 = Array(sw39, psw39,39, 0)
+Set ST31 = (new StandupTarget)(sw31, psw31,31, 0)
+Set ST32 = (new StandupTarget)(sw32, psw32,32, 0)
+Set ST33 = (new StandupTarget)(sw33, psw33,33, 0)
+Set ST34 = (new StandupTarget)(sw34, psw34,34, 0)
+Set ST37 = (new StandupTarget)(sw37, psw37,37, 0)
+Set ST38 = (new StandupTarget)(sw38, psw38,38, 0)
+Set ST39 = (new StandupTarget)(sw39, psw39,39, 0)
 
 'Add all the Stand-up Target Arrays to Stand-up Target Animation Array
 ' STAnimationArray = Array(ST1, ST2, ....)
\ No newline at end of file
@@ -3268,10 +3326,10 @@
 	i = STArrayID(switch)
 
 	PlayTargetSound
-	STArray(i)(3) =  STCheckHit(Activeball,STArray(i)(0))
+	STArray(i).animate =  STCheckHit(Activeball,STArray(i).primary)
 
-	If STArray(i)(3) <> 0 Then
-		DTBallPhysics Activeball, STArray(i)(0).orientation, STMass
+	If STArray(i).animate <> 0 Then
+		DTBallPhysics Activeball, STArray(i).primary.orientation, STMass
 	End If
 	DoSTAnim
 End Sub
\ No newline at end of file
@@ -3279,7 +3337,7 @@
 Function STArrayID(switch)
 	Dim i
 	For i = 0 to uBound(STArray) 
-		If STArray(i)(2) = switch Then STArrayID = i:Exit Function 
+		If STArray(i).sw = switch Then STArrayID = i:Exit Function 
 	Next
 End Function
 
\ No newline at end of file
@@ -3308,7 +3366,7 @@
 Sub DoSTAnim()
 	Dim i
 	For i=0 to Ubound(STArray)
-		STArray(i)(3) = STAnimate(STArray(i)(0),STArray(i)(1),STArray(i)(2),STArray(i)(3))
+		STArray(i).animate = STAnimate(STArray(i).primary,STArray(i).prim,STArray(i).sw,STArray(i).animate)
 	Next
 End Sub
 
\ No newline at end of file
